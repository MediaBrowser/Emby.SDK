const tocData = '
<div id="sidetoggle">
  <div>
    <div class="sidefilter">
      <form class="toc-filter">
        <span class="glyphicon glyphicon-filter filter-icon"></span>
        <span class="glyphicon glyphicon-remove clear-icon" id="toc_filter_clear"></span>
        <input type="text" id="toc_filter_input" placeholder="Filter by Title" onkeypress="if(event.keyCode==13) {return false;}">
      </form>
    </div>
    <div class="sidetoc">
      <div class="toc" id="toc">
          
          <ul class="nav level1">
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link" href="index.html" title="Reference">Reference</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <span class="expand-stub"></span>
                              <a class="nav-link" href="RestAPI.html" title="Emby Server REST API">Emby Server REST API</a>
                              
                              <ul class="nav level3">
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/ActivityLogService.html" title="ActivityLogService">ActivityLogService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ActivityLogService/getSystemActivitylogEntries.html" title="getSystemActivitylogEntries">getSystemActivitylogEntries</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/ArtistsService.html" title="ArtistsService">ArtistsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ArtistsService/getArtists.html" title="getArtists">getArtists</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ArtistsService/getArtistsAlbumartists.html" title="getArtistsAlbumartists">getArtistsAlbumartists</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ArtistsService/getArtistsByName.html" title="getArtistsByName">getArtistsByName</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/AudioService.html" title="AudioService">AudioService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/AudioService/getAudioByIdByStreamfilename.html" title="getAudioByIdByStreamfilename">getAudioByIdByStreamfilename</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/AudioService/getAudioByIdStream.html" title="getAudioByIdStream">getAudioByIdStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/AudioService/getAudioByIdStreamByContainer.html" title="getAudioByIdStreamByContainer">getAudioByIdStreamByContainer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/AudioService/headAudioByIdByStreamfilename.html" title="headAudioByIdByStreamfilename">headAudioByIdByStreamfilename</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/AudioService/headAudioByIdStream.html" title="headAudioByIdStream">headAudioByIdStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/AudioService/headAudioByIdStreamByContainer.html" title="headAudioByIdStreamByContainer">headAudioByIdStreamByContainer</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/BackupApi.html" title="BackupApi">BackupApi</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/BackupApi/getBackuprestoreBackupinfo.html" title="getBackuprestoreBackupinfo">getBackuprestoreBackupinfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/BackupApi/postBackuprestoreRestore.html" title="postBackuprestoreRestore">postBackuprestoreRestore</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/BackupApi/postBackuprestoreRestoredata.html" title="postBackuprestoreRestoredata">postBackuprestoreRestoredata</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/BifService.html" title="BifService">BifService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/BifService/getItemsByIdThumbnailset.html" title="getItemsByIdThumbnailset">getItemsByIdThumbnailset</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/BifService/getVideosByIdIndexBif.html" title="getVideosByIdIndexBif">getVideosByIdIndexBif</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/BrandingService.html" title="BrandingService">BrandingService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/BrandingService/getBrandingConfiguration.html" title="getBrandingConfiguration">getBrandingConfiguration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/BrandingService/getBrandingCss.html" title="getBrandingCss">getBrandingCss</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/BrandingService/getBrandingCssCss.html" title="getBrandingCssCss">getBrandingCssCss</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/ChannelService.html" title="ChannelService">ChannelService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ChannelService/getChannels.html" title="getChannels">getChannels</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/CodecParameterService.html" title="CodecParameterService">CodecParameterService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/CodecParameterService/getEncodingCodecparameters.html" title="getEncodingCodecparameters">getEncodingCodecparameters</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/CodecParameterService/postEncodingCodecparameters.html" title="postEncodingCodecparameters">postEncodingCodecparameters</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/CollectionService.html" title="CollectionService">CollectionService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/CollectionService/deleteCollectionsByIdItems.html" title="deleteCollectionsByIdItems">deleteCollectionsByIdItems</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/CollectionService/postCollections.html" title="postCollections">postCollections</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/CollectionService/postCollectionsByIdItems.html" title="postCollectionsByIdItems">postCollectionsByIdItems</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/CollectionService/postCollectionsByIdItemsDelete.html" title="postCollectionsByIdItemsDelete">postCollectionsByIdItemsDelete</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/ConfigurationService.html" title="ConfigurationService">ConfigurationService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ConfigurationService/getSystemConfiguration.html" title="getSystemConfiguration">getSystemConfiguration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ConfigurationService/getSystemConfigurationByKey.html" title="getSystemConfigurationByKey">getSystemConfigurationByKey</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ConfigurationService/postSystemConfiguration.html" title="postSystemConfiguration">postSystemConfiguration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ConfigurationService/postSystemConfigurationByKey.html" title="postSystemConfigurationByKey">postSystemConfigurationByKey</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ConfigurationService/postSystemConfigurationPartial.html" title="postSystemConfigurationPartial">postSystemConfigurationPartial</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/ConnectService.html" title="ConnectService">ConnectService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ConnectService/deleteUsersByIdConnectLink.html" title="deleteUsersByIdConnectLink">deleteUsersByIdConnectLink</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ConnectService/getConnectExchange.html" title="getConnectExchange">getConnectExchange</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ConnectService/getConnectPending.html" title="getConnectPending">getConnectPending</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ConnectService/postUsersByIdConnectLink.html" title="postUsersByIdConnectLink">postUsersByIdConnectLink</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ConnectService/postUsersByIdConnectLinkDelete.html" title="postUsersByIdConnectLinkDelete">postUsersByIdConnectLinkDelete</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/DeviceService.html" title="DeviceService">DeviceService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DeviceService/deleteDevices.html" title="deleteDevices">deleteDevices</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DeviceService/getDevices.html" title="getDevices">getDevices</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DeviceService/getDevicesCamerauploads.html" title="getDevicesCamerauploads">getDevicesCamerauploads</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DeviceService/getDevicesInfo.html" title="getDevicesInfo">getDevicesInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DeviceService/getDevicesOptions.html" title="getDevicesOptions">getDevicesOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DeviceService/postDevicesCamerauploads.html" title="postDevicesCamerauploads">postDevicesCamerauploads</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DeviceService/postDevicesDelete.html" title="postDevicesDelete">postDevicesDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DeviceService/postDevicesOptions.html" title="postDevicesOptions">postDevicesOptions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/DisplayPreferencesService.html" title="DisplayPreferencesService">DisplayPreferencesService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DisplayPreferencesService/getDisplaypreferencesById.html" title="getDisplaypreferencesById">getDisplaypreferencesById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DisplayPreferencesService/postDisplaypreferencesByDisplaypreferencesid.html" title="postDisplaypreferencesByDisplaypreferencesid">postDisplaypreferencesByDisplaypreferencesid</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/DlnaServerService.html" title="DlnaServerService">DlnaServerService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaServerService/getDlnaByUuidConnectionmanagerConnectionmanager.html" title="getDlnaByUuidConnectionmanagerConnectionmanager">getDlnaByUuidConnectionmanagerConnectionmanager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaServerService/getDlnaByUuidConnectionmanagerConnectionmanagerXml.html" title="getDlnaByUuidConnectionmanagerConnectionmanagerXml">getDlnaByUuidConnectionmanagerConnectionmanagerXml</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaServerService/getDlnaByUuidContentdirectoryContentdirectory.html" title="getDlnaByUuidContentdirectoryContentdirectory">getDlnaByUuidContentdirectoryContentdirectory</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaServerService/getDlnaByUuidContentdirectoryContentdirectoryXml.html" title="getDlnaByUuidContentdirectoryContentdirectoryXml">getDlnaByUuidContentdirectoryContentdirectoryXml</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaServerService/getDlnaByUuidDescription.html" title="getDlnaByUuidDescription">getDlnaByUuidDescription</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaServerService/getDlnaByUuidDescriptionXml.html" title="getDlnaByUuidDescriptionXml">getDlnaByUuidDescriptionXml</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaServerService/getDlnaByUuidIconsByFilename.html" title="getDlnaByUuidIconsByFilename">getDlnaByUuidIconsByFilename</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaServerService/getDlnaIconsByFilename.html" title="getDlnaIconsByFilename">getDlnaIconsByFilename</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaServerService/postDlnaByUuidConnectionmanagerControl.html" title="postDlnaByUuidConnectionmanagerControl">postDlnaByUuidConnectionmanagerControl</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaServerService/postDlnaByUuidContentdirectoryControl.html" title="postDlnaByUuidContentdirectoryControl">postDlnaByUuidContentdirectoryControl</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/DlnaService.html" title="DlnaService">DlnaService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaService/deleteDlnaProfilesById.html" title="deleteDlnaProfilesById">deleteDlnaProfilesById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaService/getDlnaProfileinfos.html" title="getDlnaProfileinfos">getDlnaProfileinfos</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaService/getDlnaProfilesById.html" title="getDlnaProfilesById">getDlnaProfilesById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaService/getDlnaProfilesDefault.html" title="getDlnaProfilesDefault">getDlnaProfilesDefault</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaService/postDlnaProfiles.html" title="postDlnaProfiles">postDlnaProfiles</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DlnaService/postDlnaProfilesById.html" title="postDlnaProfilesById">postDlnaProfilesById</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/DynamicHlsService.html" title="DynamicHlsService">DynamicHlsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/getAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer.html" title="getAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer">getAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/getAudioByIdLiveM3u8.html" title="getAudioByIdLiveM3u8">getAudioByIdLiveM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/getAudioByIdMainM3u8.html" title="getAudioByIdMainM3u8">getAudioByIdMainM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/getAudioByIdMasterM3u8.html" title="getAudioByIdMasterM3u8">getAudioByIdMasterM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/getVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer.html" title="getVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer">getVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/getVideosByIdLiveM3u8.html" title="getVideosByIdLiveM3u8">getVideosByIdLiveM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/getVideosByIdLiveSubtitlesM3u8.html" title="getVideosByIdLiveSubtitlesM3u8">getVideosByIdLiveSubtitlesM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/getVideosByIdMainM3u8.html" title="getVideosByIdMainM3u8">getVideosByIdMainM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/getVideosByIdMasterM3u8.html" title="getVideosByIdMasterM3u8">getVideosByIdMasterM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/getVideosByIdSubtitlesM3u8.html" title="getVideosByIdSubtitlesM3u8">getVideosByIdSubtitlesM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/headAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer.html" title="headAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer">headAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/headAudioByIdMasterM3u8.html" title="headAudioByIdMasterM3u8">headAudioByIdMasterM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/headVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer.html" title="headVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer">headVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/DynamicHlsService/headVideosByIdMasterM3u8.html" title="headVideosByIdMasterM3u8">headVideosByIdMasterM3u8</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/EncodingInfoService.html" title="EncodingInfoService">EncodingInfoService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/EncodingInfoService/getEncodingCodecconfigurationDefaults.html" title="getEncodingCodecconfigurationDefaults">getEncodingCodecconfigurationDefaults</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/EncodingInfoService/getEncodingCodecinformationVideo.html" title="getEncodingCodecinformationVideo">getEncodingCodecinformationVideo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/EncodingInfoService/getEncodingTonemapoptions.html" title="getEncodingTonemapoptions">getEncodingTonemapoptions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/EnvironmentService.html" title="EnvironmentService">EnvironmentService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/EnvironmentService/getEnvironmentDefaultdirectorybrowser.html" title="getEnvironmentDefaultdirectorybrowser">getEnvironmentDefaultdirectorybrowser</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/EnvironmentService/getEnvironmentDirectorycontents.html" title="getEnvironmentDirectorycontents">getEnvironmentDirectorycontents</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/EnvironmentService/getEnvironmentDrives.html" title="getEnvironmentDrives">getEnvironmentDrives</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/EnvironmentService/getEnvironmentNetworkdevices.html" title="getEnvironmentNetworkdevices">getEnvironmentNetworkdevices</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/EnvironmentService/getEnvironmentNetworkshares.html" title="getEnvironmentNetworkshares">getEnvironmentNetworkshares</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/EnvironmentService/getEnvironmentParentpath.html" title="getEnvironmentParentpath">getEnvironmentParentpath</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/EnvironmentService/postEnvironmentDirectorycontents.html" title="postEnvironmentDirectorycontents">postEnvironmentDirectorycontents</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/EnvironmentService/postEnvironmentValidatepath.html" title="postEnvironmentValidatepath">postEnvironmentValidatepath</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/FeatureService.html" title="FeatureService">FeatureService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/FeatureService/getFeatures.html" title="getFeatures">getFeatures</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/FfmpegOptionsService.html" title="FfmpegOptionsService">FfmpegOptionsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/FfmpegOptionsService/getEncodingFfmpegoptions.html" title="getEncodingFfmpegoptions">getEncodingFfmpegoptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/FfmpegOptionsService/postEncodingFfmpegoptions.html" title="postEncodingFfmpegoptions">postEncodingFfmpegoptions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/GameGenresService.html" title="GameGenresService">GameGenresService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/GameGenresService/getGamegenres.html" title="getGamegenres">getGamegenres</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/GameGenresService/getGamegenresByName.html" title="getGamegenresByName">getGamegenresByName</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/GenericUIApiService.html" title="GenericUIApiService">GenericUIApiService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/GenericUIApiService/getUIView.html" title="getUIView">getUIView</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/GenericUIApiService/postUICommand.html" title="postUICommand">postUICommand</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/GenresService.html" title="GenresService">GenresService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/GenresService/getGenres.html" title="getGenres">getGenres</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/GenresService/getGenresByName.html" title="getGenresByName">getGenresByName</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/HlsSegmentService.html" title="HlsSegmentService">HlsSegmentService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/HlsSegmentService/deleteVideosActiveencodings.html" title="deleteVideosActiveencodings">deleteVideosActiveencodings</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/HlsSegmentService/postVideosActiveencodingsDelete.html" title="postVideosActiveencodingsDelete">postVideosActiveencodingsDelete</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/ImageService.html" title="ImageService">ImageService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/deleteItemsByIdImagesByType.html" title="deleteItemsByIdImagesByType">deleteItemsByIdImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/deleteItemsByIdImagesByTypeByIndex.html" title="deleteItemsByIdImagesByTypeByIndex">deleteItemsByIdImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/deleteUsersByIdImagesByType.html" title="deleteUsersByIdImagesByType">deleteUsersByIdImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/deleteUsersByIdImagesByTypeByIndex.html" title="deleteUsersByIdImagesByTypeByIndex">deleteUsersByIdImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getArtistsByNameImagesByType.html" title="getArtistsByNameImagesByType">getArtistsByNameImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getArtistsByNameImagesByTypeByIndex.html" title="getArtistsByNameImagesByTypeByIndex">getArtistsByNameImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getGamegenresByNameImagesByType.html" title="getGamegenresByNameImagesByType">getGamegenresByNameImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getGamegenresByNameImagesByTypeByIndex.html" title="getGamegenresByNameImagesByTypeByIndex">getGamegenresByNameImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getGenresByNameImagesByType.html" title="getGenresByNameImagesByType">getGenresByNameImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getGenresByNameImagesByTypeByIndex.html" title="getGenresByNameImagesByTypeByIndex">getGenresByNameImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getItemsByIdImages.html" title="getItemsByIdImages">getItemsByIdImages</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getItemsByIdImagesByType.html" title="getItemsByIdImagesByType">getItemsByIdImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getItemsByIdImagesByTypeByIndex.html" title="getItemsByIdImagesByTypeByIndex">getItemsByIdImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount.html" title="getItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount">getItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getMusicgenresByNameImagesByType.html" title="getMusicgenresByNameImagesByType">getMusicgenresByNameImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getMusicgenresByNameImagesByTypeByIndex.html" title="getMusicgenresByNameImagesByTypeByIndex">getMusicgenresByNameImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getPersonsByNameImagesByType.html" title="getPersonsByNameImagesByType">getPersonsByNameImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getPersonsByNameImagesByTypeByIndex.html" title="getPersonsByNameImagesByTypeByIndex">getPersonsByNameImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getStudiosByNameImagesByType.html" title="getStudiosByNameImagesByType">getStudiosByNameImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getStudiosByNameImagesByTypeByIndex.html" title="getStudiosByNameImagesByTypeByIndex">getStudiosByNameImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getUsersByIdImagesByType.html" title="getUsersByIdImagesByType">getUsersByIdImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/getUsersByIdImagesByTypeByIndex.html" title="getUsersByIdImagesByTypeByIndex">getUsersByIdImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headArtistsByNameImagesByType.html" title="headArtistsByNameImagesByType">headArtistsByNameImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headArtistsByNameImagesByTypeByIndex.html" title="headArtistsByNameImagesByTypeByIndex">headArtistsByNameImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headGamegenresByNameImagesByType.html" title="headGamegenresByNameImagesByType">headGamegenresByNameImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headGamegenresByNameImagesByTypeByIndex.html" title="headGamegenresByNameImagesByTypeByIndex">headGamegenresByNameImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headGenresByNameImagesByType.html" title="headGenresByNameImagesByType">headGenresByNameImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headGenresByNameImagesByTypeByIndex.html" title="headGenresByNameImagesByTypeByIndex">headGenresByNameImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headItemsByIdImagesByType.html" title="headItemsByIdImagesByType">headItemsByIdImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headItemsByIdImagesByTypeByIndex.html" title="headItemsByIdImagesByTypeByIndex">headItemsByIdImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount.html" title="headItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount">headItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headMusicgenresByNameImagesByType.html" title="headMusicgenresByNameImagesByType">headMusicgenresByNameImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headMusicgenresByNameImagesByTypeByIndex.html" title="headMusicgenresByNameImagesByTypeByIndex">headMusicgenresByNameImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headPersonsByNameImagesByType.html" title="headPersonsByNameImagesByType">headPersonsByNameImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headPersonsByNameImagesByTypeByIndex.html" title="headPersonsByNameImagesByTypeByIndex">headPersonsByNameImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headStudiosByNameImagesByType.html" title="headStudiosByNameImagesByType">headStudiosByNameImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headStudiosByNameImagesByTypeByIndex.html" title="headStudiosByNameImagesByTypeByIndex">headStudiosByNameImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headUsersByIdImagesByType.html" title="headUsersByIdImagesByType">headUsersByIdImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/headUsersByIdImagesByTypeByIndex.html" title="headUsersByIdImagesByTypeByIndex">headUsersByIdImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/postItemsByIdImagesByType.html" title="postItemsByIdImagesByType">postItemsByIdImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/postItemsByIdImagesByTypeByIndex.html" title="postItemsByIdImagesByTypeByIndex">postItemsByIdImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/postItemsByIdImagesByTypeByIndexDelete.html" title="postItemsByIdImagesByTypeByIndexDelete">postItemsByIdImagesByTypeByIndexDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/postItemsByIdImagesByTypeByIndexIndex.html" title="postItemsByIdImagesByTypeByIndexIndex">postItemsByIdImagesByTypeByIndexIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/postItemsByIdImagesByTypeByIndexUrl.html" title="postItemsByIdImagesByTypeByIndexUrl">postItemsByIdImagesByTypeByIndexUrl</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/postItemsByIdImagesByTypeDelete.html" title="postItemsByIdImagesByTypeDelete">postItemsByIdImagesByTypeDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/postUsersByIdImagesByType.html" title="postUsersByIdImagesByType">postUsersByIdImagesByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/postUsersByIdImagesByTypeByIndex.html" title="postUsersByIdImagesByTypeByIndex">postUsersByIdImagesByTypeByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/postUsersByIdImagesByTypeByIndexDelete.html" title="postUsersByIdImagesByTypeByIndexDelete">postUsersByIdImagesByTypeByIndexDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ImageService/postUsersByIdImagesByTypeDelete.html" title="postUsersByIdImagesByTypeDelete">postUsersByIdImagesByTypeDelete</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/InstantMixService.html" title="InstantMixService">InstantMixService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/InstantMixService/getAlbumsByIdInstantmix.html" title="getAlbumsByIdInstantmix">getAlbumsByIdInstantmix</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/InstantMixService/getArtistsInstantmix.html" title="getArtistsInstantmix">getArtistsInstantmix</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/InstantMixService/getAudiobooksNextup.html" title="getAudiobooksNextup">getAudiobooksNextup</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/InstantMixService/getItemsByIdInstantmix.html" title="getItemsByIdInstantmix">getItemsByIdInstantmix</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/InstantMixService/getMusicgenresByNameInstantmix.html" title="getMusicgenresByNameInstantmix">getMusicgenresByNameInstantmix</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/InstantMixService/getMusicgenresInstantmix.html" title="getMusicgenresInstantmix">getMusicgenresInstantmix</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/InstantMixService/getPlaylistsByIdInstantmix.html" title="getPlaylistsByIdInstantmix">getPlaylistsByIdInstantmix</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/InstantMixService/getSongsByIdInstantmix.html" title="getSongsByIdInstantmix">getSongsByIdInstantmix</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/ItemLookupService.html" title="ItemLookupService">ItemLookupService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/getItemsByIdExternalidinfos.html" title="getItemsByIdExternalidinfos">getItemsByIdExternalidinfos</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/getItemsRemotesearchImage.html" title="getItemsRemotesearchImage">getItemsRemotesearchImage</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/postItemsMetadataReset.html" title="postItemsMetadataReset">postItemsMetadataReset</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/postItemsRemotesearchApplyById.html" title="postItemsRemotesearchApplyById">postItemsRemotesearchApplyById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/postItemsRemotesearchBook.html" title="postItemsRemotesearchBook">postItemsRemotesearchBook</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/postItemsRemotesearchBoxset.html" title="postItemsRemotesearchBoxset">postItemsRemotesearchBoxset</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/postItemsRemotesearchGame.html" title="postItemsRemotesearchGame">postItemsRemotesearchGame</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/postItemsRemotesearchMovie.html" title="postItemsRemotesearchMovie">postItemsRemotesearchMovie</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/postItemsRemotesearchMusicalbum.html" title="postItemsRemotesearchMusicalbum">postItemsRemotesearchMusicalbum</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/postItemsRemotesearchMusicartist.html" title="postItemsRemotesearchMusicartist">postItemsRemotesearchMusicartist</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/postItemsRemotesearchMusicvideo.html" title="postItemsRemotesearchMusicvideo">postItemsRemotesearchMusicvideo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/postItemsRemotesearchPerson.html" title="postItemsRemotesearchPerson">postItemsRemotesearchPerson</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/postItemsRemotesearchSeries.html" title="postItemsRemotesearchSeries">postItemsRemotesearchSeries</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemLookupService/postItemsRemotesearchTrailer.html" title="postItemsRemotesearchTrailer">postItemsRemotesearchTrailer</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/ItemRefreshService.html" title="ItemRefreshService">ItemRefreshService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemRefreshService/postItemsByIdRefresh.html" title="postItemsByIdRefresh">postItemsByIdRefresh</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/ItemsService.html" title="ItemsService">ItemsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemsService/getItems.html" title="getItems">getItems</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemsService/getUsersByUseridItems.html" title="getUsersByUseridItems">getUsersByUseridItems</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemsService/getUsersByUseridItemsResume.html" title="getUsersByUseridItemsResume">getUsersByUseridItemsResume</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/ItemUpdateService.html" title="ItemUpdateService">ItemUpdateService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemUpdateService/getItemsByItemidMetadataeditor.html" title="getItemsByItemidMetadataeditor">getItemsByItemidMetadataeditor</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ItemUpdateService/postItemsByItemid.html" title="postItemsByItemid">postItemsByItemid</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/LibraryService.html" title="LibraryService">LibraryService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/deleteItems.html" title="deleteItems">deleteItems</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/deleteItemsById.html" title="deleteItemsById">deleteItemsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getAlbumsByIdSimilar.html" title="getAlbumsByIdSimilar">getAlbumsByIdSimilar</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getArtistsByIdSimilar.html" title="getArtistsByIdSimilar">getArtistsByIdSimilar</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getGamesByIdSimilar.html" title="getGamesByIdSimilar">getGamesByIdSimilar</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getItemsByIdAncestors.html" title="getItemsByIdAncestors">getItemsByIdAncestors</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getItemsByIdCriticreviews.html" title="getItemsByIdCriticreviews">getItemsByIdCriticreviews</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getItemsByIdDeleteinfo.html" title="getItemsByIdDeleteinfo">getItemsByIdDeleteinfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getItemsByIdDownload.html" title="getItemsByIdDownload">getItemsByIdDownload</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getItemsByIdFile.html" title="getItemsByIdFile">getItemsByIdFile</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getItemsByIdSimilar.html" title="getItemsByIdSimilar">getItemsByIdSimilar</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getItemsByIdThememedia.html" title="getItemsByIdThememedia">getItemsByIdThememedia</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getItemsByIdThemesongs.html" title="getItemsByIdThemesongs">getItemsByIdThemesongs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getItemsByIdThemevideos.html" title="getItemsByIdThemevideos">getItemsByIdThemevideos</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getItemsCounts.html" title="getItemsCounts">getItemsCounts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getItemsIntros.html" title="getItemsIntros">getItemsIntros</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getLibrariesAvailableoptions.html" title="getLibrariesAvailableoptions">getLibrariesAvailableoptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getLibraryMediafolders.html" title="getLibraryMediafolders">getLibraryMediafolders</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getLibraryPhysicalpaths.html" title="getLibraryPhysicalpaths">getLibraryPhysicalpaths</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getLibrarySelectablemediafolders.html" title="getLibrarySelectablemediafolders">getLibrarySelectablemediafolders</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getMoviesByIdSimilar.html" title="getMoviesByIdSimilar">getMoviesByIdSimilar</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getShowsByIdSimilar.html" title="getShowsByIdSimilar">getShowsByIdSimilar</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/getTrailersByIdSimilar.html" title="getTrailersByIdSimilar">getTrailersByIdSimilar</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/postItemsByIdDelete.html" title="postItemsByIdDelete">postItemsByIdDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/postItemsDelete.html" title="postItemsDelete">postItemsDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/postLibraryMediaUpdated.html" title="postLibraryMediaUpdated">postLibraryMediaUpdated</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/postLibraryMoviesAdded.html" title="postLibraryMoviesAdded">postLibraryMoviesAdded</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/postLibraryMoviesUpdated.html" title="postLibraryMoviesUpdated">postLibraryMoviesUpdated</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/postLibraryRefresh.html" title="postLibraryRefresh">postLibraryRefresh</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/postLibrarySeriesAdded.html" title="postLibrarySeriesAdded">postLibrarySeriesAdded</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryService/postLibrarySeriesUpdated.html" title="postLibrarySeriesUpdated">postLibrarySeriesUpdated</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/LibraryStructureService.html" title="LibraryStructureService">LibraryStructureService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryStructureService/deleteLibraryVirtualfolders.html" title="deleteLibraryVirtualfolders">deleteLibraryVirtualfolders</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryStructureService/deleteLibraryVirtualfoldersPaths.html" title="deleteLibraryVirtualfoldersPaths">deleteLibraryVirtualfoldersPaths</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryStructureService/getLibraryVirtualfoldersQuery.html" title="getLibraryVirtualfoldersQuery">getLibraryVirtualfoldersQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryStructureService/postLibraryVirtualfolders.html" title="postLibraryVirtualfolders">postLibraryVirtualfolders</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryStructureService/postLibraryVirtualfoldersDelete.html" title="postLibraryVirtualfoldersDelete">postLibraryVirtualfoldersDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryStructureService/postLibraryVirtualfoldersLibraryoptions.html" title="postLibraryVirtualfoldersLibraryoptions">postLibraryVirtualfoldersLibraryoptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryStructureService/postLibraryVirtualfoldersName.html" title="postLibraryVirtualfoldersName">postLibraryVirtualfoldersName</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryStructureService/postLibraryVirtualfoldersPaths.html" title="postLibraryVirtualfoldersPaths">postLibraryVirtualfoldersPaths</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryStructureService/postLibraryVirtualfoldersPathsDelete.html" title="postLibraryVirtualfoldersPathsDelete">postLibraryVirtualfoldersPathsDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LibraryStructureService/postLibraryVirtualfoldersPathsUpdate.html" title="postLibraryVirtualfoldersPathsUpdate">postLibraryVirtualfoldersPathsUpdate</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/LiveStreamService.html" title="LiveStreamService">LiveStreamService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/getLivetvLiverecordingsByIdHlsBySegment.html" title="getLivetvLiverecordingsByIdHlsBySegment">getLivetvLiverecordingsByIdHlsBySegment</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/getLivetvLiverecordingsByIdHlsLiveM3u8.html" title="getLivetvLiverecordingsByIdHlsLiveM3u8">getLivetvLiverecordingsByIdHlsLiveM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/getLivetvLiverecordingsByIdHlsMasterM3u8.html" title="getLivetvLiverecordingsByIdHlsMasterM3u8">getLivetvLiverecordingsByIdHlsMasterM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/getLivetvLiverecordingsByIdStream.html" title="getLivetvLiverecordingsByIdStream">getLivetvLiverecordingsByIdStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/getLivetvLivestreamfilesByIdHlsBySegment.html" title="getLivetvLivestreamfilesByIdHlsBySegment">getLivetvLivestreamfilesByIdHlsBySegment</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/getLivetvLivestreamfilesByIdHlsLiveM3u8.html" title="getLivetvLivestreamfilesByIdHlsLiveM3u8">getLivetvLivestreamfilesByIdHlsLiveM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/getLivetvLivestreamfilesByIdHlsMasterM3u8.html" title="getLivetvLivestreamfilesByIdHlsMasterM3u8">getLivetvLivestreamfilesByIdHlsMasterM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/getLivetvLivestreamfilesByIdStreamByContainer.html" title="getLivetvLivestreamfilesByIdStreamByContainer">getLivetvLivestreamfilesByIdStreamByContainer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/headLivetvLiverecordingsByIdHlsBySegment.html" title="headLivetvLiverecordingsByIdHlsBySegment">headLivetvLiverecordingsByIdHlsBySegment</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/headLivetvLiverecordingsByIdHlsLiveM3u8.html" title="headLivetvLiverecordingsByIdHlsLiveM3u8">headLivetvLiverecordingsByIdHlsLiveM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/headLivetvLiverecordingsByIdHlsMasterM3u8.html" title="headLivetvLiverecordingsByIdHlsMasterM3u8">headLivetvLiverecordingsByIdHlsMasterM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/headLivetvLivestreamfilesByIdHlsBySegment.html" title="headLivetvLivestreamfilesByIdHlsBySegment">headLivetvLivestreamfilesByIdHlsBySegment</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/headLivetvLivestreamfilesByIdHlsLiveM3u8.html" title="headLivetvLivestreamfilesByIdHlsLiveM3u8">headLivetvLivestreamfilesByIdHlsLiveM3u8</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveStreamService/headLivetvLivestreamfilesByIdHlsMasterM3u8.html" title="headLivetvLivestreamfilesByIdHlsMasterM3u8">headLivetvLivestreamfilesByIdHlsMasterM3u8</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/LiveTvService.html" title="LiveTvService">LiveTvService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/deleteLivetvChannelmappingoptions.html" title="deleteLivetvChannelmappingoptions">deleteLivetvChannelmappingoptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/deleteLivetvChannelmappings.html" title="deleteLivetvChannelmappings">deleteLivetvChannelmappings</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/deleteLivetvListingproviders.html" title="deleteLivetvListingproviders">deleteLivetvListingproviders</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/deleteLivetvRecordingsById.html" title="deleteLivetvRecordingsById">deleteLivetvRecordingsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/deleteLivetvSeriestimersById.html" title="deleteLivetvSeriestimersById">deleteLivetvSeriestimersById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/deleteLivetvTimersById.html" title="deleteLivetvTimersById">deleteLivetvTimersById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/deleteLivetvTunerhosts.html" title="deleteLivetvTunerhosts">deleteLivetvTunerhosts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvAvailablerecordingoptions.html" title="getLivetvAvailablerecordingoptions">getLivetvAvailablerecordingoptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvChannelmappingoptions.html" title="getLivetvChannelmappingoptions">getLivetvChannelmappingoptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvChannelmappings.html" title="getLivetvChannelmappings">getLivetvChannelmappings</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvChannels.html" title="getLivetvChannels">getLivetvChannels</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvChannelsById.html" title="getLivetvChannelsById">getLivetvChannelsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvChanneltags.html" title="getLivetvChanneltags">getLivetvChanneltags</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvChanneltagsPrefixes.html" title="getLivetvChanneltagsPrefixes">getLivetvChanneltagsPrefixes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvEPG.html" title="getLivetvEPG">getLivetvEPG</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvFolder.html" title="getLivetvFolder">getLivetvFolder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvGuideinfo.html" title="getLivetvGuideinfo">getLivetvGuideinfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvInfo.html" title="getLivetvInfo">getLivetvInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvListingproviders.html" title="getLivetvListingproviders">getLivetvListingproviders</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvListingprovidersAvailable.html" title="getLivetvListingprovidersAvailable">getLivetvListingprovidersAvailable</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvListingprovidersDefault.html" title="getLivetvListingprovidersDefault">getLivetvListingprovidersDefault</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvListingprovidersLineups.html" title="getLivetvListingprovidersLineups">getLivetvListingprovidersLineups</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvListingprovidersSchedulesdirectCountries.html" title="getLivetvListingprovidersSchedulesdirectCountries">getLivetvListingprovidersSchedulesdirectCountries</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvManageChannels.html" title="getLivetvManageChannels">getLivetvManageChannels</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvPrograms.html" title="getLivetvPrograms">getLivetvPrograms</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvProgramsRecommended.html" title="getLivetvProgramsRecommended">getLivetvProgramsRecommended</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvRecordings.html" title="getLivetvRecordings">getLivetvRecordings</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvRecordingsById.html" title="getLivetvRecordingsById">getLivetvRecordingsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvRecordingsFolders.html" title="getLivetvRecordingsFolders">getLivetvRecordingsFolders</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvRecordingsGroups.html" title="getLivetvRecordingsGroups">getLivetvRecordingsGroups</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvRecordingsSeries.html" title="getLivetvRecordingsSeries">getLivetvRecordingsSeries</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvSeriestimers.html" title="getLivetvSeriestimers">getLivetvSeriestimers</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvSeriestimersById.html" title="getLivetvSeriestimersById">getLivetvSeriestimersById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvTimers.html" title="getLivetvTimers">getLivetvTimers</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvTimersById.html" title="getLivetvTimersById">getLivetvTimersById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvTimersDefaults.html" title="getLivetvTimersDefaults">getLivetvTimersDefaults</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvTunerhosts.html" title="getLivetvTunerhosts">getLivetvTunerhosts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvTunerhostsDefaultByType.html" title="getLivetvTunerhostsDefaultByType">getLivetvTunerhostsDefaultByType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvTunerhostsTypes.html" title="getLivetvTunerhostsTypes">getLivetvTunerhostsTypes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/getLivetvTunersDiscvover.html" title="getLivetvTunersDiscvover">getLivetvTunersDiscvover</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/headLivetvChannelmappingoptions.html" title="headLivetvChannelmappingoptions">headLivetvChannelmappingoptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/headLivetvChannelmappings.html" title="headLivetvChannelmappings">headLivetvChannelmappings</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvChannelmappingoptions.html" title="postLivetvChannelmappingoptions">postLivetvChannelmappingoptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvChannelmappings.html" title="postLivetvChannelmappings">postLivetvChannelmappings</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvListingproviders.html" title="postLivetvListingproviders">postLivetvListingproviders</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvListingprovidersDelete.html" title="postLivetvListingprovidersDelete">postLivetvListingprovidersDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvManageChannelsByIdDisabled.html" title="postLivetvManageChannelsByIdDisabled">postLivetvManageChannelsByIdDisabled</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvManageChannelsByIdSortindex.html" title="postLivetvManageChannelsByIdSortindex">postLivetvManageChannelsByIdSortindex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvPrograms.html" title="postLivetvPrograms">postLivetvPrograms</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvRecordingsByIdDelete.html" title="postLivetvRecordingsByIdDelete">postLivetvRecordingsByIdDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvSeriestimers.html" title="postLivetvSeriestimers">postLivetvSeriestimers</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvSeriestimersById.html" title="postLivetvSeriestimersById">postLivetvSeriestimersById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvSeriestimersByIdDelete.html" title="postLivetvSeriestimersByIdDelete">postLivetvSeriestimersByIdDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvTimers.html" title="postLivetvTimers">postLivetvTimers</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvTimersById.html" title="postLivetvTimersById">postLivetvTimersById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvTimersByIdDelete.html" title="postLivetvTimersByIdDelete">postLivetvTimersByIdDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvTunerhosts.html" title="postLivetvTunerhosts">postLivetvTunerhosts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvTunerhostsDelete.html" title="postLivetvTunerhostsDelete">postLivetvTunerhostsDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/postLivetvTunersByIdReset.html" title="postLivetvTunersByIdReset">postLivetvTunersByIdReset</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/putLivetvChannelmappingoptions.html" title="putLivetvChannelmappingoptions">putLivetvChannelmappingoptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LiveTvService/putLivetvChannelmappings.html" title="putLivetvChannelmappings">putLivetvChannelmappings</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/LocalizationService.html" title="LocalizationService">LocalizationService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LocalizationService/getLocalizationCountries.html" title="getLocalizationCountries">getLocalizationCountries</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LocalizationService/getLocalizationCultures.html" title="getLocalizationCultures">getLocalizationCultures</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LocalizationService/getLocalizationOptions.html" title="getLocalizationOptions">getLocalizationOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/LocalizationService/getLocalizationParentalratings.html" title="getLocalizationParentalratings">getLocalizationParentalratings</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/MediaInfoService.html" title="MediaInfoService">MediaInfoService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/MediaInfoService/getItemsByIdPlaybackinfo.html" title="getItemsByIdPlaybackinfo">getItemsByIdPlaybackinfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/MediaInfoService/getPlaybackBitratetest.html" title="getPlaybackBitratetest">getPlaybackBitratetest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/MediaInfoService/postItemsByIdPlaybackinfo.html" title="postItemsByIdPlaybackinfo">postItemsByIdPlaybackinfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/MediaInfoService/postLivestreamsClose.html" title="postLivestreamsClose">postLivestreamsClose</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/MediaInfoService/postLivestreamsMediainfo.html" title="postLivestreamsMediainfo">postLivestreamsMediainfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/MediaInfoService/postLivestreamsOpen.html" title="postLivestreamsOpen">postLivestreamsOpen</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/MoviesService.html" title="MoviesService">MoviesService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/MoviesService/getMoviesRecommendations.html" title="getMoviesRecommendations">getMoviesRecommendations</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/MusicGenresService.html" title="MusicGenresService">MusicGenresService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/MusicGenresService/getMusicgenres.html" title="getMusicgenres">getMusicgenres</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/MusicGenresService/getMusicgenresByName.html" title="getMusicgenresByName">getMusicgenresByName</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/NotificationsService.html" title="NotificationsService">NotificationsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/NotificationsService/getNotificationsTypes.html" title="getNotificationsTypes">getNotificationsTypes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/NotificationsService/postNotificationsAdmin.html" title="postNotificationsAdmin">postNotificationsAdmin</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/OfficialRatingService.html" title="OfficialRatingService">OfficialRatingService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/OfficialRatingService/getOfficialratings.html" title="getOfficialratings">getOfficialratings</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/OpenApiService.html" title="OpenApiService">OpenApiService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/OpenApiService/getOpenapi.html" title="getOpenapi">getOpenapi</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/OpenApiService/getOpenapiJson.html" title="getOpenapiJson">getOpenapiJson</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/OpenApiService/getSwagger.html" title="getSwagger">getSwagger</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/OpenApiService/getSwaggerJson.html" title="getSwaggerJson">getSwaggerJson</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/PackageService.html" title="PackageService">PackageService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PackageService/deletePackagesInstallingById.html" title="deletePackagesInstallingById">deletePackagesInstallingById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PackageService/getPackages.html" title="getPackages">getPackages</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PackageService/getPackagesByName.html" title="getPackagesByName">getPackagesByName</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PackageService/getPackagesUpdates.html" title="getPackagesUpdates">getPackagesUpdates</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PackageService/postPackagesInstalledByName.html" title="postPackagesInstalledByName">postPackagesInstalledByName</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PackageService/postPackagesInstallingByIdDelete.html" title="postPackagesInstallingByIdDelete">postPackagesInstallingByIdDelete</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/PersonsService.html" title="PersonsService">PersonsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PersonsService/getPersons.html" title="getPersons">getPersons</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PersonsService/getPersonsByName.html" title="getPersonsByName">getPersonsByName</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/PlaylistService.html" title="PlaylistService">PlaylistService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaylistService/deletePlaylistsByIdItems.html" title="deletePlaylistsByIdItems">deletePlaylistsByIdItems</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaylistService/getPlaylistsByIdAddtoplaylistinfo.html" title="getPlaylistsByIdAddtoplaylistinfo">getPlaylistsByIdAddtoplaylistinfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaylistService/getPlaylistsByIdItems.html" title="getPlaylistsByIdItems">getPlaylistsByIdItems</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaylistService/postPlaylists.html" title="postPlaylists">postPlaylists</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaylistService/postPlaylistsByIdItems.html" title="postPlaylistsByIdItems">postPlaylistsByIdItems</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaylistService/postPlaylistsByIdItemsByItemidMoveByNewindex.html" title="postPlaylistsByIdItemsByItemidMoveByNewindex">postPlaylistsByIdItemsByItemidMoveByNewindex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaylistService/postPlaylistsByIdItemsDelete.html" title="postPlaylistsByIdItemsDelete">postPlaylistsByIdItemsDelete</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/PlaystateService.html" title="PlaystateService">PlaystateService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaystateService/deleteUsersByUseridPlayeditemsById.html" title="deleteUsersByUseridPlayeditemsById">deleteUsersByUseridPlayeditemsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaystateService/deleteUsersByUseridPlayingitemsById.html" title="deleteUsersByUseridPlayingitemsById">deleteUsersByUseridPlayingitemsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaystateService/postSessionsPlaying.html" title="postSessionsPlaying">postSessionsPlaying</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaystateService/postSessionsPlayingPing.html" title="postSessionsPlayingPing">postSessionsPlayingPing</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaystateService/postSessionsPlayingProgress.html" title="postSessionsPlayingProgress">postSessionsPlayingProgress</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaystateService/postSessionsPlayingStopped.html" title="postSessionsPlayingStopped">postSessionsPlayingStopped</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaystateService/postUsersByUseridItemsByItemidUserdata.html" title="postUsersByUseridItemsByItemidUserdata">postUsersByUseridItemsByItemidUserdata</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaystateService/postUsersByUseridPlayeditemsById.html" title="postUsersByUseridPlayeditemsById">postUsersByUseridPlayeditemsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaystateService/postUsersByUseridPlayeditemsByIdDelete.html" title="postUsersByUseridPlayeditemsByIdDelete">postUsersByUseridPlayeditemsByIdDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaystateService/postUsersByUseridPlayingitemsById.html" title="postUsersByUseridPlayingitemsById">postUsersByUseridPlayingitemsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaystateService/postUsersByUseridPlayingitemsByIdDelete.html" title="postUsersByUseridPlayingitemsByIdDelete">postUsersByUseridPlayingitemsByIdDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PlaystateService/postUsersByUseridPlayingitemsByIdProgress.html" title="postUsersByUseridPlayingitemsByIdProgress">postUsersByUseridPlayingitemsByIdProgress</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/PluginService.html" title="PluginService">PluginService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PluginService/deletePluginsById.html" title="deletePluginsById">deletePluginsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PluginService/getPlugins.html" title="getPlugins">getPlugins</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PluginService/getPluginsByIdConfiguration.html" title="getPluginsByIdConfiguration">getPluginsByIdConfiguration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PluginService/getPluginsByIdThumb.html" title="getPluginsByIdThumb">getPluginsByIdThumb</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PluginService/postPluginsByIdConfiguration.html" title="postPluginsByIdConfiguration">postPluginsByIdConfiguration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/PluginService/postPluginsByIdDelete.html" title="postPluginsByIdDelete">postPluginsByIdDelete</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/RemoteImageService.html" title="RemoteImageService">RemoteImageService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/RemoteImageService/getImagesRemote.html" title="getImagesRemote">getImagesRemote</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/RemoteImageService/getItemsByIdRemoteimages.html" title="getItemsByIdRemoteimages">getItemsByIdRemoteimages</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/RemoteImageService/getItemsByIdRemoteimagesProviders.html" title="getItemsByIdRemoteimagesProviders">getItemsByIdRemoteimagesProviders</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/RemoteImageService/postItemsByIdRemoteimagesDownload.html" title="postItemsByIdRemoteimagesDownload">postItemsByIdRemoteimagesDownload</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/ScheduledTaskService.html" title="ScheduledTaskService">ScheduledTaskService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ScheduledTaskService/deleteScheduledtasksRunningById.html" title="deleteScheduledtasksRunningById">deleteScheduledtasksRunningById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ScheduledTaskService/getScheduledtasks.html" title="getScheduledtasks">getScheduledtasks</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ScheduledTaskService/getScheduledtasksById.html" title="getScheduledtasksById">getScheduledtasksById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ScheduledTaskService/postScheduledtasksByIdTriggers.html" title="postScheduledtasksByIdTriggers">postScheduledtasksByIdTriggers</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ScheduledTaskService/postScheduledtasksRunningById.html" title="postScheduledtasksRunningById">postScheduledtasksRunningById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ScheduledTaskService/postScheduledtasksRunningByIdDelete.html" title="postScheduledtasksRunningByIdDelete">postScheduledtasksRunningByIdDelete</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/SessionsService.html" title="SessionsService">SessionsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/deleteAuthKeysByKey.html" title="deleteAuthKeysByKey">deleteAuthKeysByKey</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/deleteSessionsByIdUsersByUserid.html" title="deleteSessionsByIdUsersByUserid">deleteSessionsByIdUsersByUserid</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/getAuthKeys.html" title="getAuthKeys">getAuthKeys</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/getAuthProviders.html" title="getAuthProviders">getAuthProviders</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/getSessions.html" title="getSessions">getSessions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/getSessionsPlayqueue.html" title="getSessionsPlayqueue">getSessionsPlayqueue</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postAuthKeys.html" title="postAuthKeys">postAuthKeys</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postAuthKeysByKeyDelete.html" title="postAuthKeysByKeyDelete">postAuthKeysByKeyDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postSessionsByIdCommand.html" title="postSessionsByIdCommand">postSessionsByIdCommand</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postSessionsByIdCommandByCommand.html" title="postSessionsByIdCommandByCommand">postSessionsByIdCommandByCommand</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postSessionsByIdMessage.html" title="postSessionsByIdMessage">postSessionsByIdMessage</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postSessionsByIdPlaying.html" title="postSessionsByIdPlaying">postSessionsByIdPlaying</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postSessionsByIdPlayingByCommand.html" title="postSessionsByIdPlayingByCommand">postSessionsByIdPlayingByCommand</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postSessionsByIdSystemByCommand.html" title="postSessionsByIdSystemByCommand">postSessionsByIdSystemByCommand</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postSessionsByIdUsersByUserid.html" title="postSessionsByIdUsersByUserid">postSessionsByIdUsersByUserid</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postSessionsByIdUsersByUseridDelete.html" title="postSessionsByIdUsersByUseridDelete">postSessionsByIdUsersByUseridDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postSessionsByIdViewing.html" title="postSessionsByIdViewing">postSessionsByIdViewing</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postSessionsCapabilities.html" title="postSessionsCapabilities">postSessionsCapabilities</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postSessionsCapabilitiesFull.html" title="postSessionsCapabilitiesFull">postSessionsCapabilitiesFull</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SessionsService/postSessionsLogout.html" title="postSessionsLogout">postSessionsLogout</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/StudiosService.html" title="StudiosService">StudiosService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/StudiosService/getStudios.html" title="getStudios">getStudios</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/StudiosService/getStudiosByName.html" title="getStudiosByName">getStudiosByName</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/SubtitleOptionsService.html" title="SubtitleOptionsService">SubtitleOptionsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SubtitleOptionsService/getEncodingSubtitleoptions.html" title="getEncodingSubtitleoptions">getEncodingSubtitleoptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SubtitleOptionsService/postEncodingSubtitleoptions.html" title="postEncodingSubtitleoptions">postEncodingSubtitleoptions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/SubtitleService.html" title="SubtitleService">SubtitleService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SubtitleService/deleteItemsByIdSubtitlesByIndex.html" title="deleteItemsByIdSubtitlesByIndex">deleteItemsByIdSubtitlesByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SubtitleService/deleteVideosByIdSubtitlesByIndex.html" title="deleteVideosByIdSubtitlesByIndex">deleteVideosByIdSubtitlesByIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SubtitleService/getItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat.html" title="getItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat">getItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SubtitleService/getItemsByIdByMediasourceidSubtitlesByIndexStreamByFormat.html" title="getItemsByIdByMediasourceidSubtitlesByIndexStreamByFormat">getItemsByIdByMediasourceidSubtitlesByIndexStreamByFormat</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SubtitleService/getItemsByIdRemotesearchSubtitlesByLanguage.html" title="getItemsByIdRemotesearchSubtitlesByLanguage">getItemsByIdRemotesearchSubtitlesByLanguage</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SubtitleService/getProvidersSubtitlesSubtitlesById.html" title="getProvidersSubtitlesSubtitlesById">getProvidersSubtitlesSubtitlesById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SubtitleService/getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat.html" title="getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat">getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SubtitleService/getVideosByIdByMediasourceidSubtitlesByIndexStreamByFormat.html" title="getVideosByIdByMediasourceidSubtitlesByIndexStreamByFormat">getVideosByIdByMediasourceidSubtitlesByIndexStreamByFormat</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SubtitleService/postItemsByIdRemotesearchSubtitlesBySubtitleid.html" title="postItemsByIdRemotesearchSubtitlesBySubtitleid">postItemsByIdRemotesearchSubtitlesBySubtitleid</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SubtitleService/postItemsByIdSubtitlesByIndexDelete.html" title="postItemsByIdSubtitlesByIndexDelete">postItemsByIdSubtitlesByIndexDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SubtitleService/postVideosByIdSubtitlesByIndexDelete.html" title="postVideosByIdSubtitlesByIndexDelete">postVideosByIdSubtitlesByIndexDelete</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/SuggestionsService.html" title="SuggestionsService">SuggestionsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SuggestionsService/getUsersByUseridSuggestions.html" title="getUsersByUseridSuggestions">getUsersByUseridSuggestions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/SyncService.html" title="SyncService">SyncService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/deleteSyncByTargetidItems.html" title="deleteSyncByTargetidItems">deleteSyncByTargetidItems</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/deleteSyncJobitemsById.html" title="deleteSyncJobitemsById">deleteSyncJobitemsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/deleteSyncJobsById.html" title="deleteSyncJobsById">deleteSyncJobsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/getSyncItemsReady.html" title="getSyncItemsReady">getSyncItemsReady</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/getSyncJobitems.html" title="getSyncJobitems">getSyncJobitems</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/getSyncJobitemsByIdAdditionalfiles.html" title="getSyncJobitemsByIdAdditionalfiles">getSyncJobitemsByIdAdditionalfiles</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/getSyncJobitemsByIdFile.html" title="getSyncJobitemsByIdFile">getSyncJobitemsByIdFile</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/getSyncJobs.html" title="getSyncJobs">getSyncJobs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/getSyncJobsById.html" title="getSyncJobsById">getSyncJobsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/getSyncOptions.html" title="getSyncOptions">getSyncOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/getSyncTargets.html" title="getSyncTargets">getSyncTargets</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/postSyncByItemidStatus.html" title="postSyncByItemidStatus">postSyncByItemidStatus</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/postSyncByTargetidItemsDelete.html" title="postSyncByTargetidItemsDelete">postSyncByTargetidItemsDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/postSyncData.html" title="postSyncData">postSyncData</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/postSyncItemsCancel.html" title="postSyncItemsCancel">postSyncItemsCancel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/postSyncJobitemsByIdDelete.html" title="postSyncJobitemsByIdDelete">postSyncJobitemsByIdDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/postSyncJobitemsByIdEnable.html" title="postSyncJobitemsByIdEnable">postSyncJobitemsByIdEnable</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/postSyncJobitemsByIdMarkforremoval.html" title="postSyncJobitemsByIdMarkforremoval">postSyncJobitemsByIdMarkforremoval</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/postSyncJobitemsByIdTransferred.html" title="postSyncJobitemsByIdTransferred">postSyncJobitemsByIdTransferred</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/postSyncJobitemsByIdUnmarkforremoval.html" title="postSyncJobitemsByIdUnmarkforremoval">postSyncJobitemsByIdUnmarkforremoval</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/postSyncJobs.html" title="postSyncJobs">postSyncJobs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/postSyncJobsById.html" title="postSyncJobsById">postSyncJobsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/postSyncJobsByIdDelete.html" title="postSyncJobsByIdDelete">postSyncJobsByIdDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SyncService/postSyncOfflineactions.html" title="postSyncOfflineactions">postSyncOfflineactions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/SystemService.html" title="SystemService">SystemService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SystemService/getSystemEndpoint.html" title="getSystemEndpoint">getSystemEndpoint</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SystemService/getSystemInfo.html" title="getSystemInfo">getSystemInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SystemService/getSystemInfoPublic.html" title="getSystemInfoPublic">getSystemInfoPublic</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SystemService/getSystemLogsByName.html" title="getSystemLogsByName">getSystemLogsByName</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SystemService/getSystemLogsByNameLines.html" title="getSystemLogsByNameLines">getSystemLogsByNameLines</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SystemService/getSystemLogsQuery.html" title="getSystemLogsQuery">getSystemLogsQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SystemService/getSystemPing.html" title="getSystemPing">getSystemPing</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SystemService/getSystemReleasenotes.html" title="getSystemReleasenotes">getSystemReleasenotes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SystemService/getSystemReleasenotesVersions.html" title="getSystemReleasenotesVersions">getSystemReleasenotesVersions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SystemService/getSystemWakeonlaninfo.html" title="getSystemWakeonlaninfo">getSystemWakeonlaninfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SystemService/postSystemPing.html" title="postSystemPing">postSystemPing</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SystemService/postSystemRestart.html" title="postSystemRestart">postSystemRestart</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/SystemService/postSystemShutdown.html" title="postSystemShutdown">postSystemShutdown</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/TagService.html" title="TagService">TagService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/getArtistsPrefixes.html" title="getArtistsPrefixes">getArtistsPrefixes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/getAudiocodecs.html" title="getAudiocodecs">getAudiocodecs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/getAudiolayouts.html" title="getAudiolayouts">getAudiolayouts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/getContainers.html" title="getContainers">getContainers</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/getExtendedvideotypes.html" title="getExtendedvideotypes">getExtendedvideotypes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/getItemsPrefixes.html" title="getItemsPrefixes">getItemsPrefixes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/getItemtypes.html" title="getItemtypes">getItemtypes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/getStreamlanguages.html" title="getStreamlanguages">getStreamlanguages</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/getSubtitlecodecs.html" title="getSubtitlecodecs">getSubtitlecodecs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/getTags.html" title="getTags">getTags</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/getVideocodecs.html" title="getVideocodecs">getVideocodecs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/getYears.html" title="getYears">getYears</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/postItemsByIdTagsAdd.html" title="postItemsByIdTagsAdd">postItemsByIdTagsAdd</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TagService/postItemsByIdTagsDelete.html" title="postItemsByIdTagsDelete">postItemsByIdTagsDelete</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/ToneMapOptionsService.html" title="ToneMapOptionsService">ToneMapOptionsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ToneMapOptionsService/getEncodingFulltonemapoptions.html" title="getEncodingFulltonemapoptions">getEncodingFulltonemapoptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ToneMapOptionsService/getEncodingPublictonemapoptions.html" title="getEncodingPublictonemapoptions">getEncodingPublictonemapoptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ToneMapOptionsService/postEncodingFulltonemapoptions.html" title="postEncodingFulltonemapoptions">postEncodingFulltonemapoptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/ToneMapOptionsService/postEncodingPublictonemapoptions.html" title="postEncodingPublictonemapoptions">postEncodingPublictonemapoptions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/TrailersService.html" title="TrailersService">TrailersService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TrailersService/getTrailers.html" title="getTrailers">getTrailers</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/TvShowsService.html" title="TvShowsService">TvShowsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TvShowsService/getShowsByIdEpisodes.html" title="getShowsByIdEpisodes">getShowsByIdEpisodes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TvShowsService/getShowsByIdSeasons.html" title="getShowsByIdSeasons">getShowsByIdSeasons</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TvShowsService/getShowsMissing.html" title="getShowsMissing">getShowsMissing</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TvShowsService/getShowsNextup.html" title="getShowsNextup">getShowsNextup</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/TvShowsService/getShowsUpcoming.html" title="getShowsUpcoming">getShowsUpcoming</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/UniversalAudioService.html" title="UniversalAudioService">UniversalAudioService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UniversalAudioService/getAudioByIdUniversal.html" title="getAudioByIdUniversal">getAudioByIdUniversal</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UniversalAudioService/getAudioByIdUniversalByContainer.html" title="getAudioByIdUniversalByContainer">getAudioByIdUniversalByContainer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UniversalAudioService/headAudioByIdUniversal.html" title="headAudioByIdUniversal">headAudioByIdUniversal</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UniversalAudioService/headAudioByIdUniversalByContainer.html" title="headAudioByIdUniversalByContainer">headAudioByIdUniversalByContainer</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/UserLibraryService.html" title="UserLibraryService">UserLibraryService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/deleteUsersByUseridFavoriteitemsById.html" title="deleteUsersByUseridFavoriteitemsById">deleteUsersByUseridFavoriteitemsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/deleteUsersByUseridItemsByIdRating.html" title="deleteUsersByUseridItemsByIdRating">deleteUsersByUseridItemsByIdRating</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/getLivetvProgramsById.html" title="getLivetvProgramsById">getLivetvProgramsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/getUsersByUseridItemsById.html" title="getUsersByUseridItemsById">getUsersByUseridItemsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/getUsersByUseridItemsByIdIntros.html" title="getUsersByUseridItemsByIdIntros">getUsersByUseridItemsByIdIntros</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/getUsersByUseridItemsByIdLocaltrailers.html" title="getUsersByUseridItemsByIdLocaltrailers">getUsersByUseridItemsByIdLocaltrailers</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/getUsersByUseridItemsByIdSpecialfeatures.html" title="getUsersByUseridItemsByIdSpecialfeatures">getUsersByUseridItemsByIdSpecialfeatures</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/getUsersByUseridItemsLatest.html" title="getUsersByUseridItemsLatest">getUsersByUseridItemsLatest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/getUsersByUseridItemsRoot.html" title="getUsersByUseridItemsRoot">getUsersByUseridItemsRoot</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/getVideosByIdAdditionalparts.html" title="getVideosByIdAdditionalparts">getVideosByIdAdditionalparts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/postItemsAccess.html" title="postItemsAccess">postItemsAccess</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/postItemsByIdMakeprivate.html" title="postItemsByIdMakeprivate">postItemsByIdMakeprivate</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/postItemsByIdMakepublic.html" title="postItemsByIdMakepublic">postItemsByIdMakepublic</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/postItemsSharedLeave.html" title="postItemsSharedLeave">postItemsSharedLeave</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/postUsersByUseridFavoriteitemsById.html" title="postUsersByUseridFavoriteitemsById">postUsersByUseridFavoriteitemsById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/postUsersByUseridFavoriteitemsByIdDelete.html" title="postUsersByUseridFavoriteitemsByIdDelete">postUsersByUseridFavoriteitemsByIdDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/postUsersByUseridItemsByIdHidefromresume.html" title="postUsersByUseridItemsByIdHidefromresume">postUsersByUseridItemsByIdHidefromresume</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/postUsersByUseridItemsByIdRating.html" title="postUsersByUseridItemsByIdRating">postUsersByUseridItemsByIdRating</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserLibraryService/postUsersByUseridItemsByIdRatingDelete.html" title="postUsersByUseridItemsByIdRatingDelete">postUsersByUseridItemsByIdRatingDelete</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/UserNotificationsService.html" title="UserNotificationsService">UserNotificationsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserNotificationsService/getNotificationsServicesDefaults.html" title="getNotificationsServicesDefaults">getNotificationsServicesDefaults</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserNotificationsService/postNotificationsServicesTest.html" title="postNotificationsServicesTest">postNotificationsServicesTest</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/UserService.html" title="UserService">UserService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/deleteUsersById.html" title="deleteUsersById">deleteUsersById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/deleteUsersByIdTrackselectionsByTracktype.html" title="deleteUsersByIdTrackselectionsByTracktype">deleteUsersByIdTrackselectionsByTracktype</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/getUsersById.html" title="getUsersById">getUsersById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/getUsersByUseridTypedsettingsByKey.html" title="getUsersByUseridTypedsettingsByKey">getUsersByUseridTypedsettingsByKey</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/getUsersItemaccess.html" title="getUsersItemaccess">getUsersItemaccess</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/getUsersPrefixes.html" title="getUsersPrefixes">getUsersPrefixes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/getUsersPublic.html" title="getUsersPublic">getUsersPublic</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/getUsersQuery.html" title="getUsersQuery">getUsersQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/postUsersAuthenticatebyname.html" title="postUsersAuthenticatebyname">postUsersAuthenticatebyname</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/postUsersById.html" title="postUsersById">postUsersById</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/postUsersByIdAuthenticate.html" title="postUsersByIdAuthenticate">postUsersByIdAuthenticate</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/postUsersByIdConfiguration.html" title="postUsersByIdConfiguration">postUsersByIdConfiguration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/postUsersByIdConfigurationPartial.html" title="postUsersByIdConfigurationPartial">postUsersByIdConfigurationPartial</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/postUsersByIdDelete.html" title="postUsersByIdDelete">postUsersByIdDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/postUsersByIdPassword.html" title="postUsersByIdPassword">postUsersByIdPassword</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/postUsersByIdPolicy.html" title="postUsersByIdPolicy">postUsersByIdPolicy</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/postUsersByIdTrackselectionsByTracktypeDelete.html" title="postUsersByIdTrackselectionsByTracktypeDelete">postUsersByIdTrackselectionsByTracktypeDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/postUsersByUseridTypedsettingsByKey.html" title="postUsersByUseridTypedsettingsByKey">postUsersByUseridTypedsettingsByKey</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/postUsersForgotpassword.html" title="postUsersForgotpassword">postUsersForgotpassword</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/postUsersForgotpasswordPin.html" title="postUsersForgotpasswordPin">postUsersForgotpasswordPin</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserService/postUsersNew.html" title="postUsersNew">postUsersNew</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/UserViewsService.html" title="UserViewsService">UserViewsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/UserViewsService/getUsersByUseridViews.html" title="getUsersByUseridViews">getUsersByUseridViews</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/VideoHlsService.html" title="VideoHlsService">VideoHlsService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/VideoHlsService/getAudioByIdHlsByPlaylistidBySegmentidBySegmentcontainer.html" title="getAudioByIdHlsByPlaylistidBySegmentidBySegmentcontainer">getAudioByIdHlsByPlaylistidBySegmentidBySegmentcontainer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/VideoHlsService/getVideosByIdHlsByPlaylistidBySegmentidBySegmentcontainer.html" title="getVideosByIdHlsByPlaylistidBySegmentidBySegmentcontainer">getVideosByIdHlsByPlaylistidBySegmentidBySegmentcontainer</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/VideoService.html" title="VideoService">VideoService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/VideoService/getVideosByIdByStreamfilename.html" title="getVideosByIdByStreamfilename">getVideosByIdByStreamfilename</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/VideoService/getVideosByIdStream.html" title="getVideosByIdStream">getVideosByIdStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/VideoService/getVideosByIdStreamByContainer.html" title="getVideosByIdStreamByContainer">getVideosByIdStreamByContainer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/VideoService/headVideosByIdByStreamfilename.html" title="headVideosByIdByStreamfilename">headVideosByIdByStreamfilename</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/VideoService/headVideosByIdStream.html" title="headVideosByIdStream">headVideosByIdStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/VideoService/headVideosByIdStreamByContainer.html" title="headVideosByIdStreamByContainer">headVideosByIdStreamByContainer</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/VideosService.html" title="VideosService">VideosService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/VideosService/deleteVideosByIdAlternatesources.html" title="deleteVideosByIdAlternatesources">deleteVideosByIdAlternatesources</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/VideosService/postVideosByIdAlternatesourcesDelete.html" title="postVideosByIdAlternatesourcesDelete">postVideosByIdAlternatesourcesDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/VideosService/postVideosMergeversions.html" title="postVideosMergeversions">postVideosMergeversions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="RestAPI/WebAppService.html" title="WebAppService">WebAppService</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/WebAppService/getWebConfigurationpage.html" title="getWebConfigurationpage">getWebConfigurationpage</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/WebAppService/getWebConfigurationpages.html" title="getWebConfigurationpages">getWebConfigurationpages</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/WebAppService/getWebStrings.html" title="getWebStrings">getWebStrings</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="RestAPI/WebAppService/getWebStringset.html" title="getWebStringset">getWebStringset</a>
                                              </li>
                                        </ul>
                                    </li>
                              </ul>
                          </li>
                          <li class="nav-item">
                              <span class="expand-stub"></span>
                              <a class="nav-link">Emby Server PlugIn API</a>
                              
                              <ul class="nav level3">
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Features.html" title="Emby.Features">Emby.Features</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Features.FeatureInfo.html" title="FeatureInfo">FeatureInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Features.FeatureQuery.html" title="FeatureQuery">FeatureQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Features.FeatureType.html" title="FeatureType">FeatureType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Features.IFeatureFactory.html" title="IFeatureFactory">IFeatureFactory</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Features.IFeatureManager.html" title="IFeatureManager">IFeatureManager</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Media.Common.Converters.html" title="Emby.Media.Common.Converters">Emby.Media.Common.Converters</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.Converters.ExpandableCollectionConverter.html" title="ExpandableCollectionConverter">ExpandableCollectionConverter</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.Converters.ExpandableCollectionPropertyDescriptor.html" title="ExpandableCollectionPropertyDescriptor">ExpandableCollectionPropertyDescriptor</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Media.Common.DataConversion.html" title="Emby.Media.Common.DataConversion">Emby.Media.Common.DataConversion</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.DataConversion.ColorFormatHelper.html" title="ColorFormatHelper">ColorFormatHelper</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.DataConversion.MediaStreamParser.html" title="MediaStreamParser">MediaStreamParser</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.DataConversion.ParseHelper.html" title="ParseHelper">ParseHelper</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.DataConversion.ParsingContext.html" title="ParsingContext">ParsingContext</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.DataConversion.ParsingContext.ParsingError.html" title="ParsingContext.ParsingError">ParsingContext.ParsingError</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.DataConversion.ProbeStreamParser.html" title="ProbeStreamParser">ProbeStreamParser</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.DataConversion.StreamBaseToMediaStream.html" title="StreamBaseToMediaStream">StreamBaseToMediaStream</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Media.Common.Extensions.html" title="Emby.Media.Common.Extensions">Emby.Media.Common.Extensions</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.Extensions.CollectionExtensions.html" title="CollectionExtensions">CollectionExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.Extensions.EnumExtensions.html" title="EnumExtensions">EnumExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.Extensions.EnumListExtensions.html" title="EnumListExtensions">EnumListExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.Extensions.Extensions.html" title="Extensions">Extensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.Extensions.MediaStreamExtensions.html" title="MediaStreamExtensions">MediaStreamExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.Extensions.ProbeStreamExtensions.html" title="ProbeStreamExtensions">ProbeStreamExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.Extensions.TimeSpanExtensions.html" title="TimeSpanExtensions">TimeSpanExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Common.Extensions.ValueExtensions.html" title="ValueExtensions">ValueExtensions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.html" title="Emby.Media.Model.Attributes">Emby.Media.Model.Attributes</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.BitDepthAttribute.html" title="BitDepthAttribute">BitDepthAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.BitsPerPixelAttribute.html" title="BitsPerPixelAttribute">BitsPerPixelAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.BitStreamAttribute.html" title="BitStreamAttribute">BitStreamAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.ChannelCountAttribute.html" title="ChannelCountAttribute">ChannelCountAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.CompressionAttribute.html" title="CompressionAttribute">CompressionAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.HardwareAttribute.html" title="HardwareAttribute">HardwareAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.HdrBaseFormatsAttribute.html" title="HdrBaseFormatsAttribute">HdrBaseFormatsAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.IdTagAttribute.html" title="IdTagAttribute">IdTagAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.InputAttribute.html" title="InputAttribute">InputAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.IntraFrameAttribute.html" title="IntraFrameAttribute">IntraFrameAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.IsGraphicAttribute.html" title="IsGraphicAttribute">IsGraphicAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.IsHdrAttribute.html" title="IsHdrAttribute">IsHdrAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.MaxBitRateKAttribute.html" title="MaxBitRateKAttribute">MaxBitRateKAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.MaxResAndRateAttribute.html" title="MaxResAndRateAttribute">MaxResAndRateAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.MimeTypesAttribute.html" title="MimeTypesAttribute">MimeTypesAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.NbCountAttribute.html" title="NbCountAttribute">NbCountAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.OutputAttribute.html" title="OutputAttribute">OutputAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.PrimaryAttribute.html" title="PrimaryAttribute">PrimaryAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Attributes.VideoMediaTypeAttribute.html" title="VideoMediaTypeAttribute">VideoMediaTypeAttribute</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Media.Model.Containers.html" title="Emby.Media.Model.Containers">Emby.Media.Model.Containers</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Containers.StreamContainerBase.html" title="StreamContainerBase">StreamContainerBase</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Containers.StreamContainerInfo.html" title="StreamContainerInfo">StreamContainerInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Containers.StreamContainerInfo.StreamWrapper.html" title="StreamContainerInfo.StreamWrapper">StreamContainerInfo.StreamWrapper</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Containers.TvChannelStreams.html" title="TvChannelStreams">TvChannelStreams</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.html" title="Emby.Media.Model.Enums">Emby.Media.Model.Enums</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.AacProfiles.html" title="AacProfiles">AacProfiles</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.AttachmentTypes.html" title="AttachmentTypes">AttachmentTypes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.AudioMediaTypes.html" title="AudioMediaTypes">AudioMediaTypes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.Av1Levels.html" title="Av1Levels">Av1Levels</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.Av1Profiles.html" title="Av1Profiles">Av1Profiles</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.AvcLevels.html" title="AvcLevels">AvcLevels</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.AvcPresets.html" title="AvcPresets">AvcPresets</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.AvcProfiles.html" title="AvcProfiles">AvcProfiles</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.ChannelLayouts.html" title="ChannelLayouts">ChannelLayouts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.ClosedCaptionType.html" title="ClosedCaptionType">ClosedCaptionType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.CodecDirections.html" title="CodecDirections">CodecDirections</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.CodecKinds.html" title="CodecKinds">CodecKinds</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.ColorFormats.html" title="ColorFormats">ColorFormats</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.ColorPrimaries.html" title="ColorPrimaries">ColorPrimaries</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.ColorSpaces.html" title="ColorSpaces">ColorSpaces</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.ColorTransfers.html" title="ColorTransfers">ColorTransfers</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.CompressionKinds.html" title="CompressionKinds">CompressionKinds</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.Endian.html" title="Endian">Endian</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.H263Levels.html" title="H263Levels">H263Levels</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.H263Profiles.html" title="H263Profiles">H263Profiles</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.HardwareContexts.html" title="HardwareContexts">HardwareContexts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.HdrBaseFormats.html" title="HdrBaseFormats">HdrBaseFormats</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.HevcLevels.html" title="HevcLevels">HevcLevels</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.HevcPresets.html" title="HevcPresets">HevcPresets</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.HevcProfiles.html" title="HevcProfiles">HevcProfiles</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.Mpeg2Levels.html" title="Mpeg2Levels">Mpeg2Levels</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.Mpeg2Profiles.html" title="Mpeg2Profiles">Mpeg2Profiles</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.Mpeg4Levels.html" title="Mpeg4Levels">Mpeg4Levels</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.Mpeg4Profiles.html" title="Mpeg4Profiles">Mpeg4Profiles</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.SampleFormats.html" title="SampleFormats">SampleFormats</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.SampleRates.html" title="SampleRates">SampleRates</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.SecondaryFrameworks.html" title="SecondaryFrameworks">SecondaryFrameworks</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.SubtitleFormats.html" title="SubtitleFormats">SubtitleFormats</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.SubtitleMediaTypes.html" title="SubtitleMediaTypes">SubtitleMediaTypes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.Vc1Levels.html" title="Vc1Levels">Vc1Levels</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.Vc1Profiles.html" title="Vc1Profiles">Vc1Profiles</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.VideoMediaTypes.html" title="VideoMediaTypes">VideoMediaTypes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.Vp8Levels.html" title="Vp8Levels">Vp8Levels</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.Vp8Profiles.html" title="Vp8Profiles">Vp8Profiles</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.Vp9Levels.html" title="Vp9Levels">Vp9Levels</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Enums.Vp9Profiles.html" title="Vp9Profiles">Vp9Profiles</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Media.Model.GraphModel.html" title="Emby.Media.Model.GraphModel">Emby.Media.Model.GraphModel</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.GraphModel.Filter.html" title="Filter">Filter</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.GraphModel.FilterWrapper.html" title="FilterWrapper">FilterWrapper</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.GraphModel.Graph.html" title="Graph">Graph</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.GraphModel.GraphData.html" title="GraphData">GraphData</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.GraphModel.Hwdevicecontext.html" title="Hwdevicecontext">Hwdevicecontext</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.GraphModel.Hwframescontext.html" title="Hwframescontext">Hwframescontext</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.GraphModel.InputLink.html" title="InputLink">InputLink</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.GraphModel.LinkBase.html" title="LinkBase">LinkBase</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.GraphModel.LinkType.html" title="LinkType">LinkType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.GraphModel.OutputLink.html" title="OutputLink">OutputLink</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.html" title="Emby.Media.Model.ProbeModel">Emby.Media.Model.ProbeModel</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.ProbeChapter.html" title="ProbeChapter">ProbeChapter</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.ProbeError.html" title="ProbeError">ProbeError</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.ProbeFormat.html" title="ProbeFormat">ProbeFormat</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.ProbeFrame.html" title="ProbeFrame">ProbeFrame</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.ProbePacket.html" title="ProbePacket">ProbePacket</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.ProbeResult.html" title="ProbeResult">ProbeResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.ProbeSideData.html" title="ProbeSideData">ProbeSideData</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.ProbeSideDataList.html" title="ProbeSideDataList">ProbeSideDataList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.ProbeStream.html" title="ProbeStream">ProbeStream</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.SideData.html" title="Emby.Media.Model.ProbeModel.SideData">Emby.Media.Model.ProbeModel.SideData</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.SideData.ProbeSideDataContentLightLevel.html" title="ProbeSideDataContentLightLevel">ProbeSideDataContentLightLevel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.SideData.ProbeSideDataDisplayMatrix.html" title="ProbeSideDataDisplayMatrix">ProbeSideDataDisplayMatrix</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.SideData.ProbeSideDataDovi.html" title="ProbeSideDataDovi">ProbeSideDataDovi</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.SideData.ProbeSideDataMateringDisplay.html" title="ProbeSideDataMateringDisplay">ProbeSideDataMateringDisplay</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.ProbeModel.SideData.ProbeSideDataUnknown.html" title="ProbeSideDataUnknown">ProbeSideDataUnknown</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Media.Model.Streams.html" title="Emby.Media.Model.Streams">Emby.Media.Model.Streams</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Streams.AttachmentStream.html" title="AttachmentStream">AttachmentStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Streams.AudioStream.html" title="AudioStream">AudioStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Streams.StreamBase.html" title="StreamBase">StreamBase</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Streams.SubtitleStream.html" title="SubtitleStream">SubtitleStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Streams.UnknownStream.html" title="UnknownStream">UnknownStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Streams.VideoStream.html" title="VideoStream">VideoStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Streams.VideoStreamH264.html" title="VideoStreamH264">VideoStreamH264</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Streams.VideoStreamHevc.html" title="VideoStreamHevc">VideoStreamHevc</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Streams.VideoStreamMpeg2.html" title="VideoStreamMpeg2">VideoStreamMpeg2</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.html" title="Emby.Media.Model.Types">Emby.Media.Model.Types</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Av1ProfileWithLevel.html" title="Av1ProfileWithLevel">Av1ProfileWithLevel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Av1ProfileWithLevelList.html" title="Av1ProfileWithLevelList">Av1ProfileWithLevelList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.AvcProfileWithLevel.html" title="AvcProfileWithLevel">AvcProfileWithLevel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.AvcProfileWithLevelList.html" title="AvcProfileWithLevelList">AvcProfileWithLevelList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.BitRate.html" title="BitRate">BitRate</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.BroadcastResolutions.html" title="BroadcastResolutions">BroadcastResolutions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.BroadcastResolutions.BroadcastResolution.html" title="BroadcastResolutions.BroadcastResolution">BroadcastResolutions.BroadcastResolution</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.ByteSize.html" title="ByteSize">ByteSize</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.H263ProfileWithLevel.html" title="H263ProfileWithLevel">H263ProfileWithLevel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.H263ProfileWithLevelList.html" title="H263ProfileWithLevelList">H263ProfileWithLevelList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.HevcProfileWithLevel.html" title="HevcProfileWithLevel">HevcProfileWithLevel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.HevcProfileWithLevelList.html" title="HevcProfileWithLevelList">HevcProfileWithLevelList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.LevelInformation.html" title="LevelInformation">LevelInformation</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.MediaTagList.html" title="MediaTagList">MediaTagList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.MediaTagList.MediaTag.html" title="MediaTagList.MediaTag">MediaTagList.MediaTag</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Mpeg2ProfileWithLevel.html" title="Mpeg2ProfileWithLevel">Mpeg2ProfileWithLevel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Mpeg2ProfileWithLevelList.html" title="Mpeg2ProfileWithLevelList">Mpeg2ProfileWithLevelList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Mpeg4ProfileWithLevel.html" title="Mpeg4ProfileWithLevel">Mpeg4ProfileWithLevel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Mpeg4ProfileWithLevelList.html" title="Mpeg4ProfileWithLevelList">Mpeg4ProfileWithLevelList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.PixelFormat.html" title="PixelFormat">PixelFormat</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.ProfileInformation.html" title="ProfileInformation">ProfileInformation</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.ProfileLevelInformation.html" title="ProfileLevelInformation">ProfileLevelInformation</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.ProfileWithLevel-2.html" title="ProfileWithLevel&lt;TP, TL&gt;">ProfileWithLevel&lt;TP, TL&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.ProfileWithLevelList-3.html" title="ProfileWithLevelList&lt;T, TP, TL&gt;">ProfileWithLevelList&lt;T, TP, TL&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Rational.html" title="Rational">Rational</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.RationalTypeConverter.html" title="RationalTypeConverter">RationalTypeConverter</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Resolution.html" title="Resolution">Resolution</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.ResolutionWithRate.html" title="ResolutionWithRate">ResolutionWithRate</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Vc1ProfileWithLevel.html" title="Vc1ProfileWithLevel">Vc1ProfileWithLevel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Vc1ProfileWithLevelList.html" title="Vc1ProfileWithLevelList">Vc1ProfileWithLevelList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Vp8ProfileWithLevel.html" title="Vp8ProfileWithLevel">Vp8ProfileWithLevel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Vp8ProfileWithLevelList.html" title="Vp8ProfileWithLevelList">Vp8ProfileWithLevelList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Vp9ProfileWithLevel.html" title="Vp9ProfileWithLevel">Vp9ProfileWithLevel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Media.Model.Types.Vp9ProfileWithLevelList.html" title="Vp9ProfileWithLevelList">Vp9ProfileWithLevelList</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Model.ProcessRun.html" title="Emby.Model.ProcessRun">Emby.Model.ProcessRun</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Model.ProcessRun.IProcessManager.html" title="IProcessManager">IProcessManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Model.ProcessRun.IProcessRunner.html" title="IProcessRunner">IProcessRunner</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Model.ProcessRun.IProcessRunnerWithOutput.html" title="IProcessRunnerWithOutput">IProcessRunnerWithOutput</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Model.ProcessRun.RunningProcessesChangedEventArgs.html" title="RunningProcessesChangedEventArgs">RunningProcessesChangedEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Model.ProcessRun.RunningProcessesChangedEventArgs.ProcessChangeType.html" title="RunningProcessesChangedEventArgs.ProcessChangeType">RunningProcessesChangedEventArgs.ProcessChangeType</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Model.Sanitation.html" title="Emby.Model.Sanitation">Emby.Model.Sanitation</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Model.Sanitation.SanitationContentType.html" title="SanitationContentType">SanitationContentType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Model.Sanitation.SanitationExtensions.html" title="SanitationExtensions">SanitationExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Model.Sanitation.SanitationTypeAttribute.html" title="SanitationTypeAttribute">SanitationTypeAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Model.Sanitation.UrlSanitationOptions.html" title="UrlSanitationOptions">UrlSanitationOptions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Naming.Audio.html" title="Emby.Naming.Audio">Emby.Naming.Audio</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Audio.AlbumParser.html" title="AlbumParser">AlbumParser</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Audio.MultiPartResult.html" title="MultiPartResult">MultiPartResult</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Naming.Common.html" title="Emby.Naming.Common">Emby.Naming.Common</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Common.EpisodeExpression.html" title="EpisodeExpression">EpisodeExpression</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Common.EpisodeExpressionType.html" title="EpisodeExpressionType">EpisodeExpressionType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Common.MediaFileInfo.html" title="MediaFileInfo">MediaFileInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Common.MediaType.html" title="MediaType">MediaType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Common.NamingHelper.html" title="NamingHelper">NamingHelper</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Common.NamingOptions.html" title="NamingOptions">NamingOptions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Naming.Subtitles.html" title="Emby.Naming.Subtitles">Emby.Naming.Subtitles</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Subtitles.SubtitleInfo.html" title="SubtitleInfo">SubtitleInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Subtitles.SubtitleParser.html" title="SubtitleParser">SubtitleParser</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Naming.TV.html" title="Emby.Naming.TV">Emby.Naming.TV</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.TV.EpisodeInfo.html" title="EpisodeInfo">EpisodeInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.TV.EpisodeResolver.html" title="EpisodeResolver">EpisodeResolver</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.TV.EpisodeResolverOptions.html" title="EpisodeResolverOptions">EpisodeResolverOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.TV.SeasonPathParser.html" title="SeasonPathParser">SeasonPathParser</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.TV.SeasonPathParserResult.html" title="SeasonPathParserResult">SeasonPathParserResult</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Naming.Video.html" title="Emby.Naming.Video">Emby.Naming.Video</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.CleanDateTimeParser.html" title="CleanDateTimeParser">CleanDateTimeParser</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.CleanDateTimeResult.html" title="CleanDateTimeResult">CleanDateTimeResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.CleanStringParser.html" title="CleanStringParser">CleanStringParser</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.ExtraResolver.html" title="ExtraResolver">ExtraResolver</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.ExtraResult.html" title="ExtraResult">ExtraResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.ExtraRule.html" title="ExtraRule">ExtraRule</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.ExtraRuleType.html" title="ExtraRuleType">ExtraRuleType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.FileStack.html" title="FileStack">FileStack</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.FlagParser.html" title="FlagParser">FlagParser</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.Format3DParser.html" title="Format3DParser">Format3DParser</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.Format3DResult.html" title="Format3DResult">Format3DResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.Format3DRule.html" title="Format3DRule">Format3DRule</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.StackResolver.html" title="StackResolver">StackResolver</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.StackResult.html" title="StackResult">StackResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.StubResolver.html" title="StubResolver">StubResolver</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.StubTypeRule.html" title="StubTypeRule">StubTypeRule</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.VideoInfo.html" title="VideoInfo">VideoInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.VideoListResolver.html" title="VideoListResolver">VideoListResolver</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Naming.Video.VideoResolver.html" title="VideoResolver">VideoResolver</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Notifications.html" title="Emby.Notifications">Emby.Notifications</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.INotificationTypeFactory.html" title="INotificationTypeFactory">INotificationTypeFactory</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.INotifier.html" title="INotifier">INotifier</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.INotifierRequiresPremiere.html" title="INotifierRequiresPremiere">INotifierRequiresPremiere</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.INotifierWithDefaultOptions.html" title="INotifierWithDefaultOptions">INotifierWithDefaultOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.InternalNotificationRequest.html" title="InternalNotificationRequest">InternalNotificationRequest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.IUserNotifier.html" title="IUserNotifier">IUserNotifier</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.NotificationCategory.html" title="NotificationCategory">NotificationCategory</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.NotificationCategoryInfo.html" title="NotificationCategoryInfo">NotificationCategoryInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.NotificationIds.html" title="NotificationIds">NotificationIds</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.NotificationInfo.html" title="NotificationInfo">NotificationInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.NotificationPlaybackInfo.html" title="NotificationPlaybackInfo">NotificationPlaybackInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.NotificationRecordingInfo.html" title="NotificationRecordingInfo">NotificationRecordingInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.NotificationRequest.html" title="NotificationRequest">NotificationRequest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.NotificationServerInfo.html" title="NotificationServerInfo">NotificationServerInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.NotificationSessionInfo.html" title="NotificationSessionInfo">NotificationSessionInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.NotificationTypeInfo.html" title="NotificationTypeInfo">NotificationTypeInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Notifications.NotificationUserDto.html" title="NotificationUserDto">NotificationUserDto</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.html" title="Emby.Web.GenericEdit">Emby.Web.GenericEdit</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.EditableObjectBase.html" title="EditableObjectBase">EditableObjectBase</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.EditableObjectCollection.html" title="EditableObjectCollection">EditableObjectCollection</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.EditableOptionsBase.html" title="EditableOptionsBase">EditableOptionsBase</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.EditObjectContainer.html" title="EditObjectContainer">EditObjectContainer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.IEditableObjectCollection.html" title="IEditableObjectCollection">IEditableObjectCollection</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Actions.html" title="Emby.Web.GenericEdit.Actions">Emby.Web.GenericEdit.Actions</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Actions.PostbackAction.html" title="PostbackAction">PostbackAction</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Common.html" title="Emby.Web.GenericEdit.Common">Emby.Web.GenericEdit.Common</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Common.EditorHelpers.html" title="EditorHelpers">EditorHelpers</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Common.EditorRadioOption.html" title="EditorRadioOption">EditorRadioOption</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Common.EditorSelectOption.html" title="EditorSelectOption">EditorSelectOption</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Common.EditorTypes.html" title="EditorTypes">EditorTypes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Common.SpacerSize.html" title="SpacerSize">SpacerSize</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Conditions.html" title="Emby.Web.GenericEdit.Conditions">Emby.Web.GenericEdit.Conditions</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Conditions.PropertyCondition.html" title="PropertyCondition">PropertyCondition</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Conditions.PropertyConditionType.html" title="PropertyConditionType">PropertyConditionType</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.html" title="Emby.Web.GenericEdit.Editors">Emby.Web.GenericEdit.Editors</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorBase.html" title="EditorBase">EditorBase</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorBoolean.html" title="EditorBoolean">EditorBoolean</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorButtonGroup.html" title="EditorButtonGroup">EditorButtonGroup</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorButtonItem.html" title="EditorButtonItem">EditorButtonItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorCaptionItem.html" title="EditorCaptionItem">EditorCaptionItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorDateTime.html" title="EditorDateTime">EditorDateTime</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorDxGrid.html" title="EditorDxGrid">EditorDxGrid</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorFilePicker.html" title="EditorFilePicker">EditorFilePicker</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorFolderPicker.html" title="EditorFolderPicker">EditorFolderPicker</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorGroup.html" title="EditorGroup">EditorGroup</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorItemList.html" title="EditorItemList">EditorItemList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorLabelItem.html" title="EditorLabelItem">EditorLabelItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorNumeric.html" title="EditorNumeric">EditorNumeric</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorProgressItem.html" title="EditorProgressItem">EditorProgressItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorRadioGroup.html" title="EditorRadioGroup">EditorRadioGroup</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorRoot.html" title="EditorRoot">EditorRoot</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorSelectBase.html" title="EditorSelectBase">EditorSelectBase</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorSelectMultiple.html" title="EditorSelectMultiple">EditorSelectMultiple</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorSelectSingle.html" title="EditorSelectSingle">EditorSelectSingle</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorSpacerItem.html" title="EditorSpacerItem">EditorSpacerItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorStatusItem.html" title="EditorStatusItem">EditorStatusItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Editors.EditorText.html" title="EditorText">EditorText</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.html" title="Emby.Web.GenericEdit.Elements">Emby.Web.GenericEdit.Elements</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.ButtonItem.html" title="ButtonItem">ButtonItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.CaptionItem.html" title="CaptionItem">CaptionItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DoubleGridOverlay.html" title="DoubleGridOverlay">DoubleGridOverlay</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxDataDoubleMappingGrid.html" title="DxDataDoubleMappingGrid">DxDataDoubleMappingGrid</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxDataDoubleSortGrid.html" title="DxDataDoubleSortGrid">DxDataDoubleSortGrid</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxDataGrid.html" title="DxDataGrid">DxDataGrid</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.IconNames.html" title="IconNames">IconNames</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.ItemStatus.html" title="ItemStatus">ItemStatus</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.LabelItem.html" title="LabelItem">LabelItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.ProgressItem.html" title="ProgressItem">ProgressItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.SpacerItem.html" title="SpacerItem">SpacerItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.StatusItem.html" title="StatusItem">StatusItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.TagItem.html" title="TagItem">TagItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.TagTypes.html" title="TagTypes">TagTypes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.ToggleButtonItem.html" title="ToggleButtonItem">ToggleButtonItem</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.html" title="Emby.Web.GenericEdit.Elements.DxGrid">Emby.Web.GenericEdit.Elements.DxGrid</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxColumnBuilder.html" title="DxColumnBuilder">DxColumnBuilder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridButton.html" title="DxGridButton">DxGridButton</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridColumn.html" title="DxGridColumn">DxGridColumn</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridColumn.Alignment.html" title="DxGridColumn.Alignment">DxGridColumn.Alignment</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridColumn.ColumnDataType.html" title="DxGridColumn.ColumnDataType">DxGridColumn.ColumnDataType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridColumn.FixedPositionType.html" title="DxGridColumn.FixedPositionType">DxGridColumn.FixedPositionType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridColumn.HeaderFilterType.html" title="DxGridColumn.HeaderFilterType">DxGridColumn.HeaderFilterType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridColumnChooser.html" title="DxGridColumnChooser">DxGridColumnChooser</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridColumnChooser.ColumnChooserMode.html" title="DxGridColumnChooser.ColumnChooserMode">DxGridColumnChooser.ColumnChooserMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridColumnFixing.html" title="DxGridColumnFixing">DxGridColumnFixing</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridColumnFixing.GridColumnFixingTexts.html" title="DxGridColumnFixing.GridColumnFixingTexts">DxGridColumnFixing.GridColumnFixingTexts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridColumnFormat.html" title="DxGridColumnFormat">DxGridColumnFormat</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridColumnFormat.FormatType.html" title="DxGridColumnFormat.FormatType">DxGridColumnFormat.FormatType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridColumnList.html" title="DxGridColumnList">DxGridColumnList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridEditing.html" title="DxGridEditing">DxGridEditing</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridEditing.GridEditMode.html" title="DxGridEditing.GridEditMode">DxGridEditing.GridEditMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridEditing.GridEditRefreshMode.html" title="DxGridEditing.GridEditRefreshMode">DxGridEditing.GridEditRefreshMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridEditingTexts.html" title="DxGridEditingTexts">DxGridEditingTexts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridExport.html" title="DxGridExport">DxGridExport</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridFilterPanel.html" title="DxGridFilterPanel">DxGridFilterPanel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridFilterPanelTexts.html" title="DxGridFilterPanelTexts">DxGridFilterPanelTexts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridFilterRow.html" title="DxGridFilterRow">DxGridFilterRow</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridFilterRow.ColumnChooserMode.html" title="DxGridFilterRow.ColumnChooserMode">DxGridFilterRow.ColumnChooserMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridGrouping.html" title="DxGridGrouping">DxGridGrouping</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridGrouping.GroupExpandMode.html" title="DxGridGrouping.GroupExpandMode">DxGridGrouping.GroupExpandMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridGroupingTexts.html" title="DxGridGroupingTexts">DxGridGroupingTexts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridHeaderFilter.html" title="DxGridHeaderFilter">DxGridHeaderFilter</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridHeaderFilterTexts.html" title="DxGridHeaderFilterTexts">DxGridHeaderFilterTexts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridLookup.html" title="DxGridLookup">DxGridLookup</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridMasterDetail.html" title="DxGridMasterDetail">DxGridMasterDetail</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridOnChangeCommand.html" title="DxGridOnChangeCommand">DxGridOnChangeCommand</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridOptions.html" title="DxGridOptions">DxGridOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridOptions.ColumnResizingMode.html" title="DxGridOptions.ColumnResizingMode">DxGridOptions.ColumnResizingMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridOptions.GridHeightMode.html" title="DxGridOptions.GridHeightMode">DxGridOptions.GridHeightMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridPaging.html" title="DxGridPaging">DxGridPaging</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridPopupOptions.html" title="DxGridPopupOptions">DxGridPopupOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridRowDragging.html" title="DxGridRowDragging">DxGridRowDragging</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridRowDragging.DragDirection.html" title="DxGridRowDragging.DragDirection">DxGridRowDragging.DragDirection</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridRowDragging.DropFeedbackMode.html" title="DxGridRowDragging.DropFeedbackMode">DxGridRowDragging.DropFeedbackMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridRowDragging.RowAnimation.html" title="DxGridRowDragging.RowAnimation">DxGridRowDragging.RowAnimation</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridRowDragging.xyOffset.html" title="DxGridRowDragging.xyOffset">DxGridRowDragging.xyOffset</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridScrolling.html" title="DxGridScrolling">DxGridScrolling</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridScrolling.ColumnRenderingMode.html" title="DxGridScrolling.ColumnRenderingMode">DxGridScrolling.ColumnRenderingMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridScrolling.RowRenderingMode.html" title="DxGridScrolling.RowRenderingMode">DxGridScrolling.RowRenderingMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridScrolling.ScrollingMode.html" title="DxGridScrolling.ScrollingMode">DxGridScrolling.ScrollingMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridScrolling.ShowScrollbarMode.html" title="DxGridScrolling.ShowScrollbarMode">DxGridScrolling.ShowScrollbarMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridSelection.html" title="DxGridSelection">DxGridSelection</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridSelection.SelectAllMode.html" title="DxGridSelection.SelectAllMode">DxGridSelection.SelectAllMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridSelection.SelectionMode.html" title="DxGridSelection.SelectionMode">DxGridSelection.SelectionMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridSelection.ShowCheckBoxesMode.html" title="DxGridSelection.ShowCheckBoxesMode">DxGridSelection.ShowCheckBoxesMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridSorting.html" title="DxGridSorting">DxGridSorting</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridSorting.GridSortingMode.html" title="DxGridSorting.GridSortingMode">DxGridSorting.GridSortingMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridSummary.html" title="DxGridSummary">DxGridSummary</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridSummaryGroupItem.html" title="DxGridSummaryGroupItem">DxGridSummaryGroupItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxGridSummaryGroupItem.SummaryType.html" title="DxGridSummaryGroupItem.SummaryType">DxGridSummaryGroupItem.SummaryType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxSelectBoxOptions.html" title="DxSelectBoxOptions">DxSelectBoxOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.DxSelectBoxOptions.ApplyValueModes.html" title="DxSelectBoxOptions.ApplyValueModes">DxSelectBoxOptions.ApplyValueModes</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.Validation.html" title="Emby.Web.GenericEdit.Elements.DxGrid.Validation">Emby.Web.GenericEdit.Elements.DxGrid.Validation</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.Validation.DxGridEmailRule.html" title="DxGridEmailRule">DxGridEmailRule</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.Validation.DxGridNumericRule.html" title="DxGridNumericRule">DxGridNumericRule</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.Validation.DxGridRangeRule.html" title="DxGridRangeRule">DxGridRangeRule</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.Validation.DxGridRequiredRule.html" title="DxGridRequiredRule">DxGridRequiredRule</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.Validation.DxGridStringLengthRule.html" title="DxGridStringLengthRule">DxGridStringLengthRule</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.Validation.DxGridValidationRuleBase.html" title="DxGridValidationRuleBase">DxGridValidationRuleBase</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.DxGrid.Validation.DxValidationRuleType.html" title="DxValidationRuleType">DxValidationRuleType</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.List.html" title="Emby.Web.GenericEdit.Elements.List">Emby.Web.GenericEdit.Elements.List</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.List.GenericItemList.html" title="GenericItemList">GenericItemList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.List.GenericListItem.html" title="GenericListItem">GenericListItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Elements.List.ItemListIconMode.html" title="ItemListIconMode">ItemListIconMode</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Factory.html" title="Emby.Web.GenericEdit.Factory">Emby.Web.GenericEdit.Factory</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Factory.EditorBuilder.html" title="EditorBuilder">EditorBuilder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Factory.EditorBuildOptions.html" title="EditorBuildOptions">EditorBuildOptions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.PropertyDiff.html" title="Emby.Web.GenericEdit.PropertyDiff">Emby.Web.GenericEdit.PropertyDiff</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.PropertyDiff.PropertyChangeDetector.html" title="PropertyChangeDetector">PropertyChangeDetector</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.PropertyDiff.PropertyChangeInfo.html" title="PropertyChangeInfo">PropertyChangeInfo</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Validation.html" title="Emby.Web.GenericEdit.Validation">Emby.Web.GenericEdit.Validation</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Validation.ValidationContext.html" title="ValidationContext">ValidationContext</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Validation.ValidationError.html" title="ValidationError">ValidationError</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Validation.ValidationErrorList.html" title="ValidationErrorList">ValidationErrorList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Validation.ValidationException.html" title="ValidationException">ValidationException</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/Emby.Web.GenericEdit.Validation.ValidationResult.html" title="ValidationResult">ValidationResult</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Common.html" title="MediaBrowser.Common">MediaBrowser.Common</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.IApplicationHost.html" title="IApplicationHost">IApplicationHost</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Common.Configuration.html" title="MediaBrowser.Common.Configuration">MediaBrowser.Common.Configuration</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Configuration.ConfigurationManagerExtensions.html" title="ConfigurationManagerExtensions">ConfigurationManagerExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Configuration.ConfigurationStore.html" title="ConfigurationStore">ConfigurationStore</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Configuration.ConfigurationUpdateEventArgs.html" title="ConfigurationUpdateEventArgs">ConfigurationUpdateEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Configuration.IApplicationPaths.html" title="IApplicationPaths">IApplicationPaths</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Configuration.IConfigurationFactory.html" title="IConfigurationFactory">IConfigurationFactory</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Configuration.IConfigurationManager.html" title="IConfigurationManager">IConfigurationManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Configuration.IValidatingConfiguration.html" title="IValidatingConfiguration">IValidatingConfiguration</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Common.Events.html" title="MediaBrowser.Common.Events">MediaBrowser.Common.Events</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Events.EventHelper.html" title="EventHelper">EventHelper</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Common.Extensions.html" title="MediaBrowser.Common.Extensions">MediaBrowser.Common.Extensions</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Extensions.BaseExtensions.html" title="BaseExtensions">BaseExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Extensions.ConflictException.html" title="ConflictException">ConflictException</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Extensions.RangeRequestOutOfRangeException.html" title="RangeRequestOutOfRangeException">RangeRequestOutOfRangeException</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Extensions.RateLimitExceededException.html" title="RateLimitExceededException">RateLimitExceededException</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Extensions.RemoteServiceUnavailableException.html" title="RemoteServiceUnavailableException">RemoteServiceUnavailableException</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Extensions.ResourceNotFoundException.html" title="ResourceNotFoundException">ResourceNotFoundException</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Extensions.ServiceUnavailableException.html" title="ServiceUnavailableException">ServiceUnavailableException</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Common.Net.html" title="MediaBrowser.Common.Net">MediaBrowser.Common.Net</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Net.CacheMode.html" title="CacheMode">CacheMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Net.CompressionMethod.html" title="CompressionMethod">CompressionMethod</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Net.HttpRequestOptions.html" title="HttpRequestOptions">HttpRequestOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Net.HttpResponseInfo.html" title="HttpResponseInfo">HttpResponseInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Net.IHttpClient.html" title="IHttpClient">IHttpClient</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Net.INetworkManager.html" title="INetworkManager">INetworkManager</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Common.Plugins.html" title="MediaBrowser.Common.Plugins">MediaBrowser.Common.Plugins</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Plugins.BasePlugin.html" title="BasePlugin">BasePlugin</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Plugins.BasePlugin-1.html" title="BasePlugin&lt;TConfigurationType&gt;">BasePlugin&lt;TConfigurationType&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Plugins.IHasPluginConfiguration.html" title="IHasPluginConfiguration">IHasPluginConfiguration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Plugins.IHasThumbImage.html" title="IHasThumbImage">IHasThumbImage</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Plugins.IPlugin.html" title="IPlugin">IPlugin</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Plugins.IPluginAssembly.html" title="IPluginAssembly">IPluginAssembly</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Common.Progress.html" title="MediaBrowser.Common.Progress">MediaBrowser.Common.Progress</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Progress.ActionableProgress-1.html" title="ActionableProgress&lt;T&gt;">ActionableProgress&lt;T&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Progress.SimpleProgress-1.html" title="SimpleProgress&lt;T&gt;">SimpleProgress&lt;T&gt;</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Common.Security.html" title="MediaBrowser.Common.Security">MediaBrowser.Common.Security</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Security.IRequiresRegistration.html" title="IRequiresRegistration">IRequiresRegistration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Security.ISecurityManager.html" title="ISecurityManager">ISecurityManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Security.PaymentRequiredException.html" title="PaymentRequiredException">PaymentRequiredException</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Common.Updates.html" title="MediaBrowser.Common.Updates">MediaBrowser.Common.Updates</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Updates.GithubUpdater.html" title="GithubUpdater">GithubUpdater</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Updates.GithubUpdater.Asset.html" title="GithubUpdater.Asset">GithubUpdater.Asset</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Updates.GithubUpdater.Author.html" title="GithubUpdater.Author">GithubUpdater.Author</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Updates.GithubUpdater.RootObject.html" title="GithubUpdater.RootObject">GithubUpdater.RootObject</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Updates.GithubUpdater.Uploader.html" title="GithubUpdater.Uploader">GithubUpdater.Uploader</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Updates.IInstallationManager.html" title="IInstallationManager">IInstallationManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Updates.InstallationEventArgs.html" title="InstallationEventArgs">InstallationEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Common.Updates.InstallationFailedEventArgs.html" title="InstallationFailedEventArgs">InstallationFailedEventArgs</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.html" title="MediaBrowser.Controller">MediaBrowser.Controller</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.IResourceFileManager.html" title="IResourceFileManager">IResourceFileManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.IServerApplicationHost.html" title="IServerApplicationHost">IServerApplicationHost</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.IServerApplicationPaths.html" title="IServerApplicationPaths">IServerApplicationPaths</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Api.html" title="MediaBrowser.Controller.Api">MediaBrowser.Controller.Api</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Api.BaseApiService.html" title="BaseApiService">BaseApiService</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Api.BaseItemsRequest.html" title="BaseItemsRequest">BaseItemsRequest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Api.IHasDtoOptions.html" title="IHasDtoOptions">IHasDtoOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Api.IHasItemFields.html" title="IHasItemFields">IHasItemFields</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Api.ItemFieldsExtensions.html" title="ItemFieldsExtensions">ItemFieldsExtensions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Authentication.html" title="MediaBrowser.Controller.Authentication">MediaBrowser.Controller.Authentication</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Authentication.AuthenticationResult.html" title="AuthenticationResult">AuthenticationResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Authentication.IAuthenticationProvider.html" title="IAuthenticationProvider">IAuthenticationProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Authentication.IHasNewUserPolicy.html" title="IHasNewUserPolicy">IHasNewUserPolicy</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Authentication.IRequiresResolvedUser.html" title="IRequiresResolvedUser">IRequiresResolvedUser</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Authentication.ProviderAuthenticationResult.html" title="ProviderAuthenticationResult">ProviderAuthenticationResult</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Base.html" title="MediaBrowser.Controller.Base">MediaBrowser.Controller.Base</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Base.CommonBaseCore.html" title="CommonBaseCore">CommonBaseCore</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Base.DisposableBag.html" title="DisposableBag">DisposableBag</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Base.ServiceRoot.html" title="ServiceRoot">ServiceRoot</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.html" title="MediaBrowser.Controller.Channels">MediaBrowser.Controller.Channels</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.Channel.html" title="Channel">Channel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.ChannelFeatures.html" title="ChannelFeatures">ChannelFeatures</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.ChannelItemInfo.html" title="ChannelItemInfo">ChannelItemInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.ChannelItemResult.html" title="ChannelItemResult">ChannelItemResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.ChannelItemType.html" title="ChannelItemType">ChannelItemType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.ChannelParentalRating.html" title="ChannelParentalRating">ChannelParentalRating</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.IChannel.html" title="IChannel">IChannel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.IChannelManager.html" title="IChannelManager">IChannelManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.IDisableMediaSourceDisplay.html" title="IDisableMediaSourceDisplay">IDisableMediaSourceDisplay</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.IHasCacheKey.html" title="IHasCacheKey">IHasCacheKey</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.IHasChangeEvent.html" title="IHasChangeEvent">IHasChangeEvent</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.IHasChannelFeatures.html" title="IHasChannelFeatures">IHasChannelFeatures</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.IHasFolderAttributes.html" title="IHasFolderAttributes">IHasFolderAttributes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.InternalChannelFeatures.html" title="InternalChannelFeatures">InternalChannelFeatures</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.InternalChannelItemQuery.html" title="InternalChannelItemQuery">InternalChannelItemQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.IRequiresMediaInfoCallback.html" title="IRequiresMediaInfoCallback">IRequiresMediaInfoCallback</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.ISearchableChannel.html" title="ISearchableChannel">ISearchableChannel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.ISupportsDelete.html" title="ISupportsDelete">ISupportsDelete</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.ISupportsLatestMedia.html" title="ISupportsLatestMedia">ISupportsLatestMedia</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Channels.ISupportsMediaProbe.html" title="ISupportsMediaProbe">ISupportsMediaProbe</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Codecs.html" title="MediaBrowser.Controller.Codecs">MediaBrowser.Controller.Codecs</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Codecs.FfmpegCapabilities.html" title="FfmpegCapabilities">FfmpegCapabilities</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Codecs.FfmpegCapabilities.CapabilityInfo.html" title="FfmpegCapabilities.CapabilityInfo">FfmpegCapabilities.CapabilityInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Codecs.FfmpegCapabilities.CapsList.html" title="FfmpegCapabilities.CapsList">FfmpegCapabilities.CapsList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Codecs.ICodecBase.html" title="ICodecBase">ICodecBase</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Codecs.ICodecProvider.html" title="ICodecProvider">ICodecProvider</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Collections.html" title="MediaBrowser.Controller.Collections">MediaBrowser.Controller.Collections</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Collections.CollectionCreatedEventArgs.html" title="CollectionCreatedEventArgs">CollectionCreatedEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Collections.CollectionCreationOptions.html" title="CollectionCreationOptions">CollectionCreationOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Collections.CollectionModifiedEventArgs.html" title="CollectionModifiedEventArgs">CollectionModifiedEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Collections.ICollectionManager.html" title="ICollectionManager">ICollectionManager</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Configuration.html" title="MediaBrowser.Controller.Configuration">MediaBrowser.Controller.Configuration</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Configuration.IServerConfigurationManager.html" title="IServerConfigurationManager">IServerConfigurationManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Configuration.IUserConfigurationFactory.html" title="IUserConfigurationFactory">IUserConfigurationFactory</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Connect.html" title="MediaBrowser.Controller.Connect">MediaBrowser.Controller.Connect</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Connect.IConnectManager.html" title="IConnectManager">IConnectManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Connect.UserLinkResult.html" title="UserLinkResult">UserLinkResult</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Data.html" title="MediaBrowser.Controller.Data">MediaBrowser.Controller.Data</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Data.ILibraryDatabase.html" title="ILibraryDatabase">ILibraryDatabase</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Devices.html" title="MediaBrowser.Controller.Devices">MediaBrowser.Controller.Devices</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Devices.CameraImageUploadInfo.html" title="CameraImageUploadInfo">CameraImageUploadInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Devices.IDeviceManager.html" title="IDeviceManager">IDeviceManager</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Drawing.html" title="MediaBrowser.Controller.Drawing">MediaBrowser.Controller.Drawing</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Drawing.IImageEncoder.html" title="IImageEncoder">IImageEncoder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Drawing.IImageProcessor.html" title="IImageProcessor">IImageProcessor</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Drawing.ImageCollageOptions.html" title="ImageCollageOptions">ImageCollageOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Drawing.ImageData.html" title="ImageData">ImageData</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Drawing.ImageProcessingOptions.html" title="ImageProcessingOptions">ImageProcessingOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Drawing.ImageProcessorExtensions.html" title="ImageProcessorExtensions">ImageProcessorExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Drawing.ImageStream.html" title="ImageStream">ImageStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Drawing.ISupportsImageData.html" title="ISupportsImageData">ISupportsImageData</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Dto.html" title="MediaBrowser.Controller.Dto">MediaBrowser.Controller.Dto</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Dto.DtoOptions.html" title="DtoOptions">DtoOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Dto.IDtoService.html" title="IDtoService">IDtoService</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.html" title="MediaBrowser.Controller.Entities">MediaBrowser.Controller.Entities</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.AggregateFolder.html" title="AggregateFolder">AggregateFolder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.BaseItem.html" title="BaseItem">BaseItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.BaseItemExtensions.html" title="BaseItemExtensions">BaseItemExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Book.html" title="Book">Book</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.BoxSet.html" title="BoxSet">BoxSet</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.CollectionFolder.html" title="CollectionFolder">CollectionFolder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.DayOfWeekHelper.html" title="DayOfWeekHelper">DayOfWeekHelper</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Extensions.html" title="Extensions">Extensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Folder.html" title="Folder">Folder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Game.html" title="Game">Game</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.GameGenre.html" title="GameGenre">GameGenre</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.GameSystem.html" title="GameSystem">GameSystem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Genre.html" title="Genre">Genre</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.ICollectionFolder.html" title="ICollectionFolder">ICollectionFolder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.IHasCollectionType.html" title="IHasCollectionType">IHasCollectionType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.IHasFolderGrouping.html" title="IHasFolderGrouping">IHasFolderGrouping</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.IHasGameGenres.html" title="IHasGameGenres">IHasGameGenres</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.IHasMediaSources.html" title="IHasMediaSources">IHasMediaSources</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.IHasProgramAttributes.html" title="IHasProgramAttributes">IHasProgramAttributes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.IHasSeries.html" title="IHasSeries">IHasSeries</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.IHasSeriesName.html" title="IHasSeriesName">IHasSeriesName</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.IHasShares.html" title="IHasShares">IHasShares</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.IHasStartDate.html" title="IHasStartDate">IHasStartDate</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.IItemByName.html" title="IItemByName">IItemByName</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.InternalItemsQuery.html" title="InternalItemsQuery">InternalItemsQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.InternalPeopleQuery.html" title="InternalPeopleQuery">InternalPeopleQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.ISupportsBoxSetGrouping.html" title="ISupportsBoxSetGrouping">ISupportsBoxSetGrouping</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.ItemByNameExtensions.html" title="ItemByNameExtensions">ItemByNameExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.ItemImageInfo.html" title="ItemImageInfo">ItemImageInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.LinkedChild.html" title="LinkedChild">LinkedChild</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.ListItem.html" title="ListItem">ListItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.MusicVideo.html" title="MusicVideo">MusicVideo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.PeopleHelper.html" title="PeopleHelper">PeopleHelper</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Person.html" title="Person">Person</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.PersonInfo.html" title="PersonInfo">PersonInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Photo.html" title="Photo">Photo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.PhotoAlbum.html" title="PhotoAlbum">PhotoAlbum</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Share.html" title="Share">Share</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Studio.html" title="Studio">Studio</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Tag.html" title="Tag">Tag</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.TagExtensions.html" title="TagExtensions">TagExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.ThumbnailSetInfo.html" title="ThumbnailSetInfo">ThumbnailSetInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Trailer.html" title="Trailer">Trailer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.User.html" title="User">User</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.UserItemData.html" title="UserItemData">UserItemData</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.UserRootFolder.html" title="UserRootFolder">UserRootFolder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.UserView.html" title="UserView">UserView</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Video.html" title="Video">Video</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Audio.html" title="MediaBrowser.Controller.Entities.Audio">MediaBrowser.Controller.Entities.Audio</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Audio.Audio.html" title="Audio">Audio</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Audio.HasArtistExtensions.html" title="HasArtistExtensions">HasArtistExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Audio.IHasAlbum.html" title="IHasAlbum">IHasAlbum</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Audio.IHasAlbumArtist.html" title="IHasAlbumArtist">IHasAlbumArtist</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Audio.IHasArtist.html" title="IHasArtist">IHasArtist</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Audio.IHasMusicAlbum.html" title="IHasMusicAlbum">IHasMusicAlbum</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Audio.IHasMusicGenres.html" title="IHasMusicGenres">IHasMusicGenres</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Audio.MusicAlbum.html" title="MusicAlbum">MusicAlbum</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Audio.MusicArtist.html" title="MusicArtist">MusicArtist</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Audio.MusicGenre.html" title="MusicGenre">MusicGenre</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Movies.html" title="MediaBrowser.Controller.Entities.Movies">MediaBrowser.Controller.Entities.Movies</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.Movies.Movie.html" title="Movie">Movie</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.TV.html" title="MediaBrowser.Controller.Entities.TV">MediaBrowser.Controller.Entities.TV</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.TV.Episode.html" title="Episode">Episode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.TV.LegacySpecialEpisodeNumbers.html" title="LegacySpecialEpisodeNumbers">LegacySpecialEpisodeNumbers</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.TV.Season.html" title="Season">Season</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.TV.Series.html" title="Series">Series</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Entities.TV.SpecialEpisodeNumbers.html" title="SpecialEpisodeNumbers">SpecialEpisodeNumbers</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Extensions.html" title="MediaBrowser.Controller.Extensions">MediaBrowser.Controller.Extensions</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Extensions.StringCompatibility.html" title="StringCompatibility">StringCompatibility</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Extensions.StringExtensions.html" title="StringExtensions">StringExtensions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.IO.html" title="MediaBrowser.Controller.IO">MediaBrowser.Controller.IO</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.IO.IIOManager.html" title="IIOManager">IIOManager</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.html" title="MediaBrowser.Controller.Library">MediaBrowser.Controller.Library</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.DeleteOptions.html" title="DeleteOptions">DeleteOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.IConfigurableProvider.html" title="IConfigurableProvider">IConfigurableProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.IIntroProvider.html" title="IIntroProvider">IIntroProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.ILibraryManager.html" title="ILibraryManager">ILibraryManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.ILibraryMonitor.html" title="ILibraryMonitor">ILibraryMonitor</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.ILibraryPostScanTask.html" title="ILibraryPostScanTask">ILibraryPostScanTask</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.ILibraryPostScanTaskWithDirectoryService.html" title="ILibraryPostScanTaskWithDirectoryService">ILibraryPostScanTaskWithDirectoryService</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.ILiveStream.html" title="ILiveStream">ILiveStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.IMediaSourceManager.html" title="IMediaSourceManager">IMediaSourceManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.IMediaSourceProvider.html" title="IMediaSourceProvider">IMediaSourceProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.IMetadataSaver.html" title="IMetadataSaver">IMetadataSaver</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.IMusicManager.html" title="IMusicManager">IMusicManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.IntroInfo.html" title="IntroInfo">IntroInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.ISegmentedLiveStream.html" title="ISegmentedLiveStream">ISegmentedLiveStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.ISegmentSource.html" title="ISegmentSource">ISegmentSource</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.ItemChangeEventArgs.html" title="ItemChangeEventArgs">ItemChangeEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.ItemLinkType.html" title="ItemLinkType">ItemLinkType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.ItemResolveArgs.html" title="ItemResolveArgs">ItemResolveArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.ItemUpdateType.html" title="ItemUpdateType">ItemUpdateType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.IUserDataManager.html" title="IUserDataManager">IUserDataManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.IUserManager.html" title="IUserManager">IUserManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.IUserViewManager.html" title="IUserViewManager">IUserViewManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.LibraryManagerExtensions.html" title="LibraryManagerExtensions">LibraryManagerExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.MetadataConfigurationExtensions.html" title="MetadataConfigurationExtensions">MetadataConfigurationExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.MetadataConfigurationStore.html" title="MetadataConfigurationStore">MetadataConfigurationStore</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.PlaybackProgressEventArgs.html" title="PlaybackProgressEventArgs">PlaybackProgressEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.PlaybackStopEventArgs.html" title="PlaybackStopEventArgs">PlaybackStopEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.Profiler.html" title="Profiler">Profiler</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.ResolverHelper.html" title="ResolverHelper">ResolverHelper</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.SegmentedStreamSegmentInfo.html" title="SegmentedStreamSegmentInfo">SegmentedStreamSegmentInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.UserCopyOptions.html" title="UserCopyOptions">UserCopyOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.UserDataSaveEventArgs.html" title="UserDataSaveEventArgs">UserDataSaveEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.UserItemShare.html" title="UserItemShare">UserItemShare</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Library.UserItemShareQuery.html" title="UserItemShareQuery">UserItemShareQuery</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.html" title="MediaBrowser.Controller.LiveTv">MediaBrowser.Controller.LiveTv</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.ActiveRecordingInfo.html" title="ActiveRecordingInfo">ActiveRecordingInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.BaseTunerHost.html" title="BaseTunerHost">BaseTunerHost</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.ChannelInfo.html" title="ChannelInfo">ChannelInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.IConfigurableTunerHost.html" title="IConfigurableTunerHost">IConfigurableTunerHost</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.IHasCountries.html" title="IHasCountries">IHasCountries</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.IHasProgramCaches.html" title="IHasProgramCaches">IHasProgramCaches</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.IListingsProvider.html" title="IListingsProvider">IListingsProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.ILiveTvManager.html" title="ILiveTvManager">ILiveTvManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.ITunerHost.html" title="ITunerHost">ITunerHost</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.LiveStreamOptions.html" title="LiveStreamOptions">LiveStreamOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.LiveTvChannel.html" title="LiveTvChannel">LiveTvChannel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.LiveTvConflictException.html" title="LiveTvConflictException">LiveTvConflictException</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.LiveTvProgram.html" title="LiveTvProgram">LiveTvProgram</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.LiveTVSeries.html" title="LiveTVSeries">LiveTVSeries</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.LiveTvServiceStatusInfo.html" title="LiveTvServiceStatusInfo">LiveTvServiceStatusInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.LiveTvTunerInfo.html" title="LiveTvTunerInfo">LiveTvTunerInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.ProgramInfo.html" title="ProgramInfo">ProgramInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.RecordingInfo.html" title="RecordingInfo">RecordingInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.RecordingStatusChangedEventArgs.html" title="RecordingStatusChangedEventArgs">RecordingStatusChangedEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.SeriesTimerEventInfo.html" title="SeriesTimerEventInfo">SeriesTimerEventInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.SeriesTimerInfo.html" title="SeriesTimerInfo">SeriesTimerInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.TimerEventInfo.html" title="TimerEventInfo">TimerEventInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.TimerInfo.html" title="TimerInfo">TimerInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.LiveTv.TunerChannelMapping.html" title="TunerChannelMapping">TunerChannelMapping</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.html" title="MediaBrowser.Controller.MediaEncoding">MediaBrowser.Controller.MediaEncoding</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.BaseEncodingJobOptions.html" title="BaseEncodingJobOptions">BaseEncodingJobOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.CodecParameterContext.html" title="CodecParameterContext">CodecParameterContext</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.EncodingJobOptions.html" title="EncodingJobOptions">EncodingJobOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.EnvironmentVariableSetting.html" title="EnvironmentVariableSetting">EnvironmentVariableSetting</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.HlsHelper.html" title="HlsHelper">HlsHelper</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.ICodecParameterManager.html" title="ICodecParameterManager">ICodecParameterManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.IEncodingDiagnosticOptionsManager.html" title="IEncodingDiagnosticOptionsManager">IEncodingDiagnosticOptionsManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.IEncodingSubtitleOptionsManager.html" title="IEncodingSubtitleOptionsManager">IEncodingSubtitleOptionsManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.IEncodingToneMapOptionsManager.html" title="IEncodingToneMapOptionsManager">IEncodingToneMapOptionsManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.IFfmpegConfiguration.html" title="IFfmpegConfiguration">IFfmpegConfiguration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.IFfmpegManager.html" title="IFfmpegManager">IFfmpegManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.IFfmpegRunner.html" title="IFfmpegRunner">IFfmpegRunner</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.IImageExtractionManager.html" title="IImageExtractionManager">IImageExtractionManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.ImageEncodingOptions.html" title="ImageEncodingOptions">ImageEncodingOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.IMediaEncoder.html" title="IMediaEncoder">IMediaEncoder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.IMediaImageConverter.html" title="IMediaImageConverter">IMediaImageConverter</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.IMediaProbeManager.html" title="IMediaProbeManager">IMediaProbeManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.IStreamInfoManager.html" title="IStreamInfoManager">IStreamInfoManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.ISubtitleEncoder.html" title="ISubtitleEncoder">ISubtitleEncoder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.ISubtitleFontsManager.html" title="ISubtitleFontsManager">ISubtitleFontsManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.ISubtitleOcrDataManager.html" title="ISubtitleOcrDataManager">ISubtitleOcrDataManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.MediaInfoRequest.html" title="MediaInfoRequest">MediaInfoRequest</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.Tests.html" title="MediaBrowser.Controller.MediaEncoding.Tests">MediaBrowser.Controller.MediaEncoding.Tests</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.Tests.IServerTranscodingTestManager.html" title="IServerTranscodingTestManager">IServerTranscodingTestManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.Tests.ITestEncodingJobInfo.html" title="ITestEncodingJobInfo">ITestEncodingJobInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.Tests.TestCodecDevice.html" title="TestCodecDevice">TestCodecDevice</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccelPair.html" title="TestHwaccelPair">TestHwaccelPair</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.MediaEncoding.Tests.TestHwaccels.html" title="TestHwaccels">TestHwaccels</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.html" title="MediaBrowser.Controller.Net">MediaBrowser.Controller.Net</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.AuthenticatedAttribute.html" title="AuthenticatedAttribute">AuthenticatedAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.AuthorizationInfo.html" title="AuthorizationInfo">AuthorizationInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.BasePeriodicWebSocketListener-2.html" title="BasePeriodicWebSocketListener&lt;TReturnDataType, TStateType&gt;">BasePeriodicWebSocketListener&lt;TReturnDataType, TStateType&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.IAuthenticationAttributes.html" title="IAuthenticationAttributes">IAuthenticationAttributes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.IAuthorizationContext.html" title="IAuthorizationContext">IAuthorizationContext</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.IAuthService.html" title="IAuthService">IAuthService</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.IHasResultFactory.html" title="IHasResultFactory">IHasResultFactory</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.IHttpResultFactory.html" title="IHttpResultFactory">IHttpResultFactory</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.IHttpServer.html" title="IHttpServer">IHttpServer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.ISessionContext.html" title="ISessionContext">ISessionContext</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.IWebSocketConnection.html" title="IWebSocketConnection">IWebSocketConnection</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.IWebSocketListener.html" title="IWebSocketListener">IWebSocketListener</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.SecurityException.html" title="SecurityException">SecurityException</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.SecurityExceptionType.html" title="SecurityExceptionType">SecurityExceptionType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.StaticFileResultOptions.html" title="StaticFileResultOptions">StaticFileResultOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.StaticResultOptions.html" title="StaticResultOptions">StaticResultOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.UnauthenticatedAttribute.html" title="UnauthenticatedAttribute">UnauthenticatedAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.WebSocketConnectingEventArgs.html" title="WebSocketConnectingEventArgs">WebSocketConnectingEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.WebSocketListenerState.html" title="WebSocketListenerState">WebSocketListenerState</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Net.WebSocketMessageInfo.html" title="WebSocketMessageInfo">WebSocketMessageInfo</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Notifications.html" title="MediaBrowser.Controller.Notifications">MediaBrowser.Controller.Notifications</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Notifications.INotificationManager.html" title="INotificationManager">INotificationManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Notifications.NotificationToken.html" title="NotificationToken">NotificationToken</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Notifications.NotificationTokenCategory.html" title="NotificationTokenCategory">NotificationTokenCategory</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Persistence.html" title="MediaBrowser.Controller.Persistence">MediaBrowser.Controller.Persistence</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Persistence.IDisplayPreferencesRepository.html" title="IDisplayPreferencesRepository">IDisplayPreferencesRepository</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Persistence.IItemRepository.html" title="IItemRepository">IItemRepository</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Persistence.IntroDebugInfo.html" title="IntroDebugInfo">IntroDebugInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Persistence.IRepository.html" title="IRepository">IRepository</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Persistence.ItemTaggedEvent.html" title="ItemTaggedEvent">ItemTaggedEvent</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Persistence.IUserDataRepository.html" title="IUserDataRepository">IUserDataRepository</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Persistence.IUserRepository.html" title="IUserRepository">IUserRepository</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Persistence.MediaStreamQuery.html" title="MediaStreamQuery">MediaStreamQuery</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Playlists.html" title="MediaBrowser.Controller.Playlists">MediaBrowser.Controller.Playlists</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Playlists.AddToPlaylistInfo.html" title="AddToPlaylistInfo">AddToPlaylistInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Playlists.AddToPlaylistResult.html" title="AddToPlaylistResult">AddToPlaylistResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Playlists.IPlaylistManager.html" title="IPlaylistManager">IPlaylistManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Playlists.Playlist.html" title="Playlist">Playlist</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Playlists.PlaylistCreationRequest.html" title="PlaylistCreationRequest">PlaylistCreationRequest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Playlists.PlaylistCreationResult.html" title="PlaylistCreationResult">PlaylistCreationResult</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Plugins.html" title="MediaBrowser.Controller.Plugins">MediaBrowser.Controller.Plugins</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Plugins.BasePluginSimpleUI-1.html" title="BasePluginSimpleUI&lt;TOptionType&gt;">BasePluginSimpleUI&lt;TOptionType&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Plugins.ConfigurationPageType.html" title="ConfigurationPageType">ConfigurationPageType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Plugins.IHasSetupUrl.html" title="IHasSetupUrl">IHasSetupUrl</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Plugins.IPluginConfigurationPage.html" title="IPluginConfigurationPage">IPluginConfigurationPage</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Plugins.IPluginUIPageRegistration.html" title="IPluginUIPageRegistration">IPluginUIPageRegistration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Plugins.IPluginUIPagesRegistrar.html" title="IPluginUIPagesRegistrar">IPluginUIPagesRegistrar</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Plugins.IRunBeforeStartup.html" title="IRunBeforeStartup">IRunBeforeStartup</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Plugins.IServerEntryPoint.html" title="IServerEntryPoint">IServerEntryPoint</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.html" title="MediaBrowser.Controller.Providers">MediaBrowser.Controller.Providers</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.AlbumInfo.html" title="AlbumInfo">AlbumInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.ArtistInfo.html" title="ArtistInfo">ArtistInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.BaseMetadataResult.html" title="BaseMetadataResult">BaseMetadataResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.BookInfo.html" title="BookInfo">BookInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.BoxSetInfo.html" title="BoxSetInfo">BoxSetInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.DirectoryService.html" title="DirectoryService">DirectoryService</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.DynamicImageInfo.html" title="DynamicImageInfo">DynamicImageInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.DynamicImageResponse.html" title="DynamicImageResponse">DynamicImageResponse</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.EnhancedImageInfo.html" title="EnhancedImageInfo">EnhancedImageInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.EpisodeInfo.html" title="EpisodeInfo">EpisodeInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.ExtraSource.html" title="ExtraSource">ExtraSource</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.GameInfo.html" title="GameInfo">GameInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.GameSystemInfo.html" title="GameSystemInfo">GameSystemInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.ICustomMetadataProvider.html" title="ICustomMetadataProvider">ICustomMetadataProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.ICustomMetadataProvider-1.html" title="ICustomMetadataProvider&lt;TItemType&gt;">ICustomMetadataProvider&lt;TItemType&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IDirectoryService.html" title="IDirectoryService">IDirectoryService</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IDynamicImageProvider.html" title="IDynamicImageProvider">IDynamicImageProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IDynamicImageProviderWithLibraryOptions.html" title="IDynamicImageProviderWithLibraryOptions">IDynamicImageProviderWithLibraryOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IExternalId.html" title="IExternalId">IExternalId</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IExtrasProvider.html" title="IExtrasProvider">IExtrasProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IForcedProvider.html" title="IForcedProvider">IForcedProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IHasItemChangeMonitor.html" title="IHasItemChangeMonitor">IHasItemChangeMonitor</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IHasLookupInfo-1.html" title="IHasLookupInfo&lt;TLookupInfoType&gt;">IHasLookupInfo&lt;TLookupInfoType&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IHasMetadataFeatures.html" title="IHasMetadataFeatures">IHasMetadataFeatures</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IHasOrder.html" title="IHasOrder">IHasOrder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IHasWebsite.html" title="IHasWebsite">IHasWebsite</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IImageEnhancer.html" title="IImageEnhancer">IImageEnhancer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IImageProvider.html" title="IImageProvider">IImageProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.ILazyImageProvider.html" title="ILazyImageProvider">ILazyImageProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.ILocalImageFileProvider.html" title="ILocalImageFileProvider">ILocalImageFileProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.ILocalImageProvider.html" title="ILocalImageProvider">ILocalImageProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.ILocalMetadataProvider.html" title="ILocalMetadataProvider">ILocalMetadataProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.ILocalMetadataProvider-1.html" title="ILocalMetadataProvider&lt;TItemType&gt;">ILocalMetadataProvider&lt;TItemType&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.ImageRefreshOptions.html" title="ImageRefreshOptions">ImageRefreshOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IMetadataProvider.html" title="IMetadataProvider">IMetadataProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IMetadataProvider-1.html" title="IMetadataProvider&lt;TItemType&gt;">IMetadataProvider&lt;TItemType&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IMetadataService.html" title="IMetadataService">IMetadataService</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IMultipleLocalMetadataProvider-1.html" title="IMultipleLocalMetadataProvider&lt;TItemType&gt;">IMultipleLocalMetadataProvider&lt;TItemType&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IPreRefreshProvider.html" title="IPreRefreshProvider">IPreRefreshProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IProviderManager.html" title="IProviderManager">IProviderManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IRemoteImageProvider.html" title="IRemoteImageProvider">IRemoteImageProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IRemoteImageProviderWithOptions.html" title="IRemoteImageProviderWithOptions">IRemoteImageProviderWithOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IRemoteMetadataProvider.html" title="IRemoteMetadataProvider">IRemoteMetadataProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IRemoteMetadataProvider-2.html" title="IRemoteMetadataProvider&lt;TItemType, TLookupInfoType&gt;">IRemoteMetadataProvider&lt;TItemType, TLookupInfoType&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IRemoteMetadataProviderWithOptions-2.html" title="IRemoteMetadataProviderWithOptions&lt;TItemType, TLookupInfoType&gt;">IRemoteMetadataProviderWithOptions&lt;TItemType, TLookupInfoType&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IRemoteSearchProvider.html" title="IRemoteSearchProvider">IRemoteSearchProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.IRemoteSearchProvider-1.html" title="IRemoteSearchProvider&lt;TLookupInfoType&gt;">IRemoteSearchProvider&lt;TLookupInfoType&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.ISeriesMetadataProvider.html" title="ISeriesMetadataProvider">ISeriesMetadataProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.ItemInfo.html" title="ItemInfo">ItemInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.ItemLookupInfo.html" title="ItemLookupInfo">ItemLookupInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.LocalImageInfo.html" title="LocalImageInfo">LocalImageInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.MetadataProviderPriority.html" title="MetadataProviderPriority">MetadataProviderPriority</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.MetadataRefreshMode.html" title="MetadataRefreshMode">MetadataRefreshMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.MetadataRefreshOptions.html" title="MetadataRefreshOptions">MetadataRefreshOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.MetadataResult-1.html" title="MetadataResult&lt;T&gt;">MetadataResult&lt;T&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.MovieInfo.html" title="MovieInfo">MovieInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.MusicVideoInfo.html" title="MusicVideoInfo">MusicVideoInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.PersonLookupInfo.html" title="PersonLookupInfo">PersonLookupInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.RefreshPriority.html" title="RefreshPriority">RefreshPriority</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.RefreshProgressInfo.html" title="RefreshProgressInfo">RefreshProgressInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.RemoteImageFetchOptions.html" title="RemoteImageFetchOptions">RemoteImageFetchOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.RemoteMetadataFetchOptions-1.html" title="RemoteMetadataFetchOptions&lt;TLookupInfoType&gt;">RemoteMetadataFetchOptions&lt;TLookupInfoType&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.RemoteSearchQuery-1.html" title="RemoteSearchQuery&lt;T&gt;">RemoteSearchQuery&lt;T&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.RemoteSearchResultHelper.html" title="RemoteSearchResultHelper">RemoteSearchResultHelper</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.SeasonInfo.html" title="SeasonInfo">SeasonInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.SeriesInfo.html" title="SeriesInfo">SeriesInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.SongInfo.html" title="SongInfo">SongInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.TrailerInfo.html" title="TrailerInfo">TrailerInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Providers.VideoContentType.html" title="VideoContentType">VideoContentType</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Resolvers.html" title="MediaBrowser.Controller.Resolvers">MediaBrowser.Controller.Resolvers</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Resolvers.BaseItemResolver-1.html" title="BaseItemResolver&lt;T&gt;">BaseItemResolver&lt;T&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Resolvers.IItemResolver.html" title="IItemResolver">IItemResolver</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Resolvers.IMultiItemResolver.html" title="IMultiItemResolver">IMultiItemResolver</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Resolvers.MultiItemResolverResult.html" title="MultiItemResolverResult">MultiItemResolverResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Resolvers.ResolverPriority.html" title="ResolverPriority">ResolverPriority</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Sanitation.html" title="MediaBrowser.Controller.Sanitation">MediaBrowser.Controller.Sanitation</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Sanitation.ISanitationManager.html" title="ISanitationManager">ISanitationManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Sanitation.SanitiationStream.html" title="SanitiationStream">SanitiationStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Sanitation.TextTransformationStream.html" title="TextTransformationStream">TextTransformationStream</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Security.html" title="MediaBrowser.Controller.Security">MediaBrowser.Controller.Security</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Security.AuthenticationInfo.html" title="AuthenticationInfo">AuthenticationInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Security.AuthenticationInfoQuery.html" title="AuthenticationInfoQuery">AuthenticationInfoQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Security.IAuthenticationRepository.html" title="IAuthenticationRepository">IAuthenticationRepository</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Security.IEncryptionManager.html" title="IEncryptionManager">IEncryptionManager</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Session.html" title="MediaBrowser.Controller.Session">MediaBrowser.Controller.Session</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Session.AuthenticationRequest.html" title="AuthenticationRequest">AuthenticationRequest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Session.ISessionController.html" title="ISessionController">ISessionController</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Session.ISessionManager.html" title="ISessionManager">ISessionManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Session.PlaySessionInfo.html" title="PlaySessionInfo">PlaySessionInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Session.SessionEventArgs.html" title="SessionEventArgs">SessionEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Session.SessionInfo.html" title="SessionInfo">SessionInfo</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Subtitles.html" title="MediaBrowser.Controller.Subtitles">MediaBrowser.Controller.Subtitles</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Subtitles.ISubtitleManager.html" title="ISubtitleManager">ISubtitleManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Subtitles.ISubtitleProvider.html" title="ISubtitleProvider">ISubtitleProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Subtitles.SubtitleDownloadEventArgs.html" title="SubtitleDownloadEventArgs">SubtitleDownloadEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Subtitles.SubtitleDownloadFailureEventArgs.html" title="SubtitleDownloadFailureEventArgs">SubtitleDownloadFailureEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Subtitles.SubtitleResponse.html" title="SubtitleResponse">SubtitleResponse</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Subtitles.SubtitleSearchRequest.html" title="SubtitleSearchRequest">SubtitleSearchRequest</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Sync.html" title="MediaBrowser.Controller.Sync">MediaBrowser.Controller.Sync</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Sync.IHasDynamicAccess.html" title="IHasDynamicAccess">IHasDynamicAccess</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Sync.IRemoteSyncProvider.html" title="IRemoteSyncProvider">IRemoteSyncProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Sync.IServerSyncProvider.html" title="IServerSyncProvider">IServerSyncProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Sync.ISupportsDirectCopy.html" title="ISupportsDirectCopy">ISupportsDirectCopy</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Sync.ISyncProvider.html" title="ISyncProvider">ISyncProvider</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Sync.SyncedFileInfo.html" title="SyncedFileInfo">SyncedFileInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Sync.SyncTargetQuery.html" title="SyncTargetQuery">SyncTargetQuery</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Tasks.html" title="MediaBrowser.Controller.Tasks">MediaBrowser.Controller.Tasks</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.Tasks.TaskExtensions.html" title="TaskExtensions">TaskExtensions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Controller.TV.html" title="MediaBrowser.Controller.TV">MediaBrowser.Controller.TV</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Controller.TV.ITVSeriesManager.html" title="ITVSeriesManager">ITVSeriesManager</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Activity.html" title="MediaBrowser.Model.Activity">MediaBrowser.Model.Activity</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Activity.ActivityLogEntry.html" title="ActivityLogEntry">ActivityLogEntry</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Activity.IActivityManager.html" title="IActivityManager">IActivityManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Activity.IActivityRepository.html" title="IActivityRepository">IActivityRepository</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.ApiClient.html" title="MediaBrowser.Model.ApiClient">MediaBrowser.Model.ApiClient</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.ApiClient.ServerDiscoveryInfo.html" title="ServerDiscoveryInfo">ServerDiscoveryInfo</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.html" title="MediaBrowser.Model.Attributes">MediaBrowser.Model.Attributes</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.AliasesAttribute.html" title="AliasesAttribute">AliasesAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.AutoPostBackAttribute.html" title="AutoPostBackAttribute">AutoPostBackAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.ColorAttribute.html" title="ColorAttribute">ColorAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.DecimalsAttribute.html" title="DecimalsAttribute">DecimalsAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.DetailsAttribute.html" title="DetailsAttribute">DetailsAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.EditFilePickerAttribute.html" title="EditFilePickerAttribute">EditFilePickerAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.EditFolderPickerAttribute.html" title="EditFolderPickerAttribute">EditFolderPickerAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.EditMultilineAttribute.html" title="EditMultilineAttribute">EditMultilineAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.EditMultilSelectAttribute.html" title="EditMultilSelectAttribute">EditMultilSelectAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.EnabledConditionAttribute.html" title="EnabledConditionAttribute">EnabledConditionAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.GridDataSourceAttribute.html" title="GridDataSourceAttribute">GridDataSourceAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.GridFilterSourceAttribute.html" title="GridFilterSourceAttribute">GridFilterSourceAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.GridSelectionSourceAttribute.html" title="GridSelectionSourceAttribute">GridSelectionSourceAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.IntValueAttribute.html" title="IntValueAttribute">IntValueAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.IsAdvancedAttribute.html" title="IsAdvancedAttribute">IsAdvancedAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.IsPasswordAttribute.html" title="IsPasswordAttribute">IsPasswordAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.MaxLengthAttribute.html" title="MaxLengthAttribute">MaxLengthAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.MaxValueAttribute.html" title="MaxValueAttribute">MaxValueAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.MinValueAttribute.html" title="MinValueAttribute">MinValueAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.OrdinalAttribute.html" title="OrdinalAttribute">OrdinalAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.PropertyConditionAttribute.html" title="PropertyConditionAttribute">PropertyConditionAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.RadioItemsSourceAttribute.html" title="RadioItemsSourceAttribute">RadioItemsSourceAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.RelatedGuidAttribute.html" title="RelatedGuidAttribute">RelatedGuidAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.RequiredAttribute.html" title="RequiredAttribute">RequiredAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.SelectItemsSourceAttribute.html" title="SelectItemsSourceAttribute">SelectItemsSourceAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.SelectShowRadioGroupAttribute.html" title="SelectShowRadioGroupAttribute">SelectShowRadioGroupAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.SimpleCondition.html" title="SimpleCondition">SimpleCondition</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.TristateFalseTextAttribute.html" title="TristateFalseTextAttribute">TristateFalseTextAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.TristateTrueTextAttribute.html" title="TristateTrueTextAttribute">TristateTrueTextAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.ValueAttribute.html" title="ValueAttribute">ValueAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.ValueCondition.html" title="ValueCondition">ValueCondition</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Attributes.VisibleConditionAttribute.html" title="VisibleConditionAttribute">VisibleConditionAttribute</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Branding.html" title="MediaBrowser.Model.Branding">MediaBrowser.Model.Branding</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Branding.BrandingOptions.html" title="BrandingOptions">BrandingOptions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Channels.html" title="MediaBrowser.Model.Channels">MediaBrowser.Model.Channels</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Channels.ChannelFolderType.html" title="ChannelFolderType">ChannelFolderType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Channels.ChannelItemSortField.html" title="ChannelItemSortField">ChannelItemSortField</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Channels.ChannelMediaContentType.html" title="ChannelMediaContentType">ChannelMediaContentType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Channels.ChannelMediaType.html" title="ChannelMediaType">ChannelMediaType</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Collections.html" title="MediaBrowser.Model.Collections">MediaBrowser.Model.Collections</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Collections.CollectionCreationResult.html" title="CollectionCreationResult">CollectionCreationResult</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.html" title="MediaBrowser.Model.Configuration">MediaBrowser.Model.Configuration</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.AccessSchedule.html" title="AccessSchedule">AccessSchedule</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.BaseApplicationConfiguration.html" title="BaseApplicationConfiguration">BaseApplicationConfiguration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.CodecConfiguration.html" title="CodecConfiguration">CodecConfiguration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.CodecSelectionModes.html" title="CodecSelectionModes">CodecSelectionModes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.DynamicDayOfWeek.html" title="DynamicDayOfWeek">DynamicDayOfWeek</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.EncodingOptions.html" title="EncodingOptions">EncodingOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.ImageOption.html" title="ImageOption">ImageOption</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.ImageSavingConvention.html" title="ImageSavingConvention">ImageSavingConvention</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.LibraryOptions.html" title="LibraryOptions">LibraryOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.MediaPathInfo.html" title="MediaPathInfo">MediaPathInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.MetadataConfiguration.html" title="MetadataConfiguration">MetadataConfiguration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.MetadataFeatures.html" title="MetadataFeatures">MetadataFeatures</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.MetadataPlugin.html" title="MetadataPlugin">MetadataPlugin</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.MetadataPluginSummary.html" title="MetadataPluginSummary">MetadataPluginSummary</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.MetadataPluginType.html" title="MetadataPluginType">MetadataPluginType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.MusicFolderStructures.html" title="MusicFolderStructures">MusicFolderStructures</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.PathSubstitution.html" title="PathSubstitution">PathSubstitution</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.ProxyHeaderMode.html" title="ProxyHeaderMode">ProxyHeaderMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.SegmentSkipMode.html" title="SegmentSkipMode">SegmentSkipMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.ServerConfiguration.html" title="ServerConfiguration">ServerConfiguration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.SubtitlePlaybackMode.html" title="SubtitlePlaybackMode">SubtitlePlaybackMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.ThrottlingMethod.html" title="ThrottlingMethod">ThrottlingMethod</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.TypeOptions.html" title="TypeOptions">TypeOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.UnratedItem.html" title="UnratedItem">UnratedItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Configuration.UserConfiguration.html" title="UserConfiguration">UserConfiguration</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Connect.html" title="MediaBrowser.Model.Connect">MediaBrowser.Model.Connect</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Connect.ConnectAuthenticationResult.html" title="ConnectAuthenticationResult">ConnectAuthenticationResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Connect.ConnectUser.html" title="ConnectUser">ConnectUser</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Connect.UserLinkType.html" title="UserLinkType">UserLinkType</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Cryptography.html" title="MediaBrowser.Model.Cryptography">MediaBrowser.Model.Cryptography</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Cryptography.ICryptoProvider.html" title="ICryptoProvider">ICryptoProvider</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Devices.html" title="MediaBrowser.Model.Devices">MediaBrowser.Model.Devices</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Devices.ContentUploadHistory.html" title="ContentUploadHistory">ContentUploadHistory</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Devices.DeviceInfo.html" title="DeviceInfo">DeviceInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Devices.DeviceOptions.html" title="DeviceOptions">DeviceOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Devices.DeviceQuery.html" title="DeviceQuery">DeviceQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Devices.DevicesOptions.html" title="DevicesOptions">DevicesOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Devices.LocalFileInfo.html" title="LocalFileInfo">LocalFileInfo</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.html" title="MediaBrowser.Model.Dlna">MediaBrowser.Model.Dlna</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.AudioOptions.html" title="AudioOptions">AudioOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.CodecProfile.html" title="CodecProfile">CodecProfile</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.CodecType.html" title="CodecType">CodecType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.ConditionProcessor.html" title="ConditionProcessor">ConditionProcessor</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.ContainerProfile.html" title="ContainerProfile">ContainerProfile</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.ContentFeatureBuilder.html" title="ContentFeatureBuilder">ContentFeatureBuilder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.DeviceProfile.html" title="DeviceProfile">DeviceProfile</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.DirectPlayProfile.html" title="DirectPlayProfile">DirectPlayProfile</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.DlnaFlags.html" title="DlnaFlags">DlnaFlags</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.DlnaMaps.html" title="DlnaMaps">DlnaMaps</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.DlnaProfileType.html" title="DlnaProfileType">DlnaProfileType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.EncodingContext.html" title="EncodingContext">EncodingContext</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.IDeviceDiscovery.html" title="IDeviceDiscovery">IDeviceDiscovery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.IDeviceProfileResolver.html" title="IDeviceProfileResolver">IDeviceProfileResolver</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.ITranscoderSupport.html" title="ITranscoderSupport">ITranscoderSupport</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.MediaFormatProfile.html" title="MediaFormatProfile">MediaFormatProfile</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.MediaFormatProfileResolver.html" title="MediaFormatProfileResolver">MediaFormatProfileResolver</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.MediaStreamSelector.html" title="MediaStreamSelector">MediaStreamSelector</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.PlaybackErrorCode.html" title="PlaybackErrorCode">PlaybackErrorCode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.ProfileCondition.html" title="ProfileCondition">ProfileCondition</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.ProfileConditionType.html" title="ProfileConditionType">ProfileConditionType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.ProfileConditionValue.html" title="ProfileConditionValue">ProfileConditionValue</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.RequestedStreamInfo.html" title="RequestedStreamInfo">RequestedStreamInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.ResponseProfile.html" title="ResponseProfile">ResponseProfile</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.StreamBuilder.html" title="StreamBuilder">StreamBuilder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.StreamInfo.html" title="StreamInfo">StreamInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.SubtitleDeliveryMethod.html" title="SubtitleDeliveryMethod">SubtitleDeliveryMethod</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.SubtitleProfile.html" title="SubtitleProfile">SubtitleProfile</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.SubtitleStreamInfo.html" title="SubtitleStreamInfo">SubtitleStreamInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.TranscodeSeekInfo.html" title="TranscodeSeekInfo">TranscodeSeekInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.TranscodingProfile.html" title="TranscodingProfile">TranscodingProfile</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.UpnpNotificationInfo.html" title="UpnpNotificationInfo">UpnpNotificationInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dlna.VideoOptions.html" title="VideoOptions">VideoOptions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Drawing.html" title="MediaBrowser.Model.Drawing">MediaBrowser.Model.Drawing</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Drawing.DrawingUtils.html" title="DrawingUtils">DrawingUtils</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Drawing.ImageFeatures.html" title="ImageFeatures">ImageFeatures</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Drawing.ImageFormat.html" title="ImageFormat">ImageFormat</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Drawing.ImageOrientation.html" title="ImageOrientation">ImageOrientation</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Drawing.ImageSize.html" title="ImageSize">ImageSize</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.html" title="MediaBrowser.Model.Dto">MediaBrowser.Model.Dto</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.BaseItemDto.html" title="BaseItemDto">BaseItemDto</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.BaseItemPerson.html" title="BaseItemPerson">BaseItemPerson</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.IHasServerId.html" title="IHasServerId">IHasServerId</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.IItemDto.html" title="IItemDto">IItemDto</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.ImageInfo.html" title="ImageInfo">ImageInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.ImageOptions.html" title="ImageOptions">ImageOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.ItemCounts.html" title="ItemCounts">ItemCounts</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.ItemIndex.html" title="ItemIndex">ItemIndex</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.LinkedItemInfo.html" title="LinkedItemInfo">LinkedItemInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.MediaSourceInfo.html" title="MediaSourceInfo">MediaSourceInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.MediaSourceType.html" title="MediaSourceType">MediaSourceType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.MetadataEditorInfo.html" title="MetadataEditorInfo">MetadataEditorInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.NameGuidPair.html" title="NameGuidPair">NameGuidPair</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.NameIdPair.html" title="NameIdPair">NameIdPair</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.NameLongIdPair.html" title="NameLongIdPair">NameLongIdPair</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.NameValuePair.html" title="NameValuePair">NameValuePair</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.RatingType.html" title="RatingType">RatingType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.RecommendationDto.html" title="RecommendationDto">RecommendationDto</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.RecommendationType.html" title="RecommendationType">RecommendationType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.UserDto.html" title="UserDto">UserDto</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.UserItemDataDto.html" title="UserItemDataDto">UserItemDataDto</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Dto.UserItemShareLevel.html" title="UserItemShareLevel">UserItemShareLevel</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.html" title="MediaBrowser.Model.Entities">MediaBrowser.Model.Entities</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.ChapterInfo.html" title="ChapterInfo">ChapterInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.CollectionDisplayOrder.html" title="CollectionDisplayOrder">CollectionDisplayOrder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.CollectionType.html" title="CollectionType">CollectionType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.DisplayPreferences.html" title="DisplayPreferences">DisplayPreferences</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.EmptyRequestResult.html" title="EmptyRequestResult">EmptyRequestResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.ExtendedVideoSubTypes.html" title="ExtendedVideoSubTypes">ExtendedVideoSubTypes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.ExtendedVideoTypes.html" title="ExtendedVideoTypes">ExtendedVideoTypes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.ExtraType.html" title="ExtraType">ExtraType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.IHasProviderIds.html" title="IHasProviderIds">IHasProviderIds</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.ImageType.html" title="ImageType">ImageType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.LibraryUpdateInfo.html" title="LibraryUpdateInfo">LibraryUpdateInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.LocationType.html" title="LocationType">LocationType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.Luid.html" title="Luid">Luid</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.MarkerType.html" title="MarkerType">MarkerType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.MBRegistrationRecord.html" title="MBRegistrationRecord">MBRegistrationRecord</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.MediaContainer.html" title="MediaContainer">MediaContainer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.MediaStream.html" title="MediaStream">MediaStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.MediaStreamType.html" title="MediaStreamType">MediaStreamType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.MediaType.html" title="MediaType">MediaType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.MediaUrl.html" title="MediaUrl">MediaUrl</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.MetadataFields.html" title="MetadataFields">MetadataFields</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.MetadataProviders.html" title="MetadataProviders">MetadataProviders</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.ParentalRating.html" title="ParentalRating">ParentalRating</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.PersonType.html" title="PersonType">PersonType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.PluginSecurityInfo.html" title="PluginSecurityInfo">PluginSecurityInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.ProviderIdDictionary.html" title="ProviderIdDictionary">ProviderIdDictionary</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.ProviderIdsExtensions.html" title="ProviderIdsExtensions">ProviderIdsExtensions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.SeriesDisplayOrder.html" title="SeriesDisplayOrder">SeriesDisplayOrder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.SeriesStatus.html" title="SeriesStatus">SeriesStatus</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.SortOrder.html" title="SortOrder">SortOrder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.SpecialFolder.html" title="SpecialFolder">SpecialFolder</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.SubtitleLocationType.html" title="SubtitleLocationType">SubtitleLocationType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.UserDataSaveReason.html" title="UserDataSaveReason">UserDataSaveReason</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.Video3DFormat.html" title="Video3DFormat">Video3DFormat</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Entities.VirtualFolderInfo.html" title="VirtualFolderInfo">VirtualFolderInfo</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Events.html" title="MediaBrowser.Model.Events">MediaBrowser.Model.Events</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Events.GenericEventArgs-1.html" title="GenericEventArgs&lt;T&gt;">GenericEventArgs&lt;T&gt;</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Extensions.html" title="MediaBrowser.Model.Extensions">MediaBrowser.Model.Extensions</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Extensions.ListHelper.html" title="ListHelper">ListHelper</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Extensions.StringCompatibility.html" title="StringCompatibility">StringCompatibility</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Extensions.StringHelper.html" title="StringHelper">StringHelper</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.GenericEdit.html" title="MediaBrowser.Model.GenericEdit">MediaBrowser.Model.GenericEdit</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.GenericEdit.IEditableObject.html" title="IEditableObject">IEditableObject</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.GenericEdit.IEditObjectContainer.html" title="IEditObjectContainer">IEditObjectContainer</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Globalization.html" title="MediaBrowser.Model.Globalization">MediaBrowser.Model.Globalization</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Globalization.CountryInfo.html" title="CountryInfo">CountryInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Globalization.CountryList.html" title="CountryList">CountryList</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Globalization.CultureDto.html" title="CultureDto">CultureDto</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Globalization.ILocalizationManager.html" title="ILocalizationManager">ILocalizationManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Globalization.LocalizatonOption.html" title="LocalizatonOption">LocalizatonOption</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.html" title="MediaBrowser.Model.IO">MediaBrowser.Model.IO</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.FileAccessMode.html" title="FileAccessMode">FileAccessMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.FileOpenMode.html" title="FileOpenMode">FileOpenMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.FileOpenOptions.html" title="FileOpenOptions">FileOpenOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.FileShareMode.html" title="FileShareMode">FileShareMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.FileSystemCredentials.html" title="FileSystemCredentials">FileSystemCredentials</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.FileSystemEntryInfo.html" title="FileSystemEntryInfo">FileSystemEntryInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.FileSystemEntryType.html" title="FileSystemEntryType">FileSystemEntryType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.FileSystemMetadata.html" title="FileSystemMetadata">FileSystemMetadata</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.IFileSystem.html" title="IFileSystem">IFileSystem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.IMediaMount.html" title="IMediaMount">IMediaMount</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.IMediaMounter.html" title="IMediaMounter">IMediaMounter</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.IMediaMountManager.html" title="IMediaMountManager">IMediaMountManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.IShortcutHandler.html" title="IShortcutHandler">IShortcutHandler</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.IStreamHelper.html" title="IStreamHelper">IStreamHelper</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.IZipClient.html" title="IZipClient">IZipClient</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.StreamDefaults.html" title="StreamDefaults">StreamDefaults</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.IO.StreamHandler.html" title="StreamHandler">StreamHandler</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Library.html" title="MediaBrowser.Model.Library">MediaBrowser.Model.Library</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Library.UserViewQuery.html" title="UserViewQuery">UserViewQuery</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.html" title="MediaBrowser.Model.LiveTv">MediaBrowser.Model.LiveTv</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.BaseTimerInfoDto.html" title="BaseTimerInfoDto">BaseTimerInfoDto</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.ChannelOptions.html" title="ChannelOptions">ChannelOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.ChannelType.html" title="ChannelType">ChannelType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.GuideInfo.html" title="GuideInfo">GuideInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.KeepUntil.html" title="KeepUntil">KeepUntil</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.KeywordInfo.html" title="KeywordInfo">KeywordInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.KeywordType.html" title="KeywordType">KeywordType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.ListingsProviderInfo.html" title="ListingsProviderInfo">ListingsProviderInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.LiveTvInfo.html" title="LiveTvInfo">LiveTvInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.LiveTvOptions.html" title="LiveTvOptions">LiveTvOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.LiveTvServiceInfo.html" title="LiveTvServiceInfo">LiveTvServiceInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.LiveTvServiceStatus.html" title="LiveTvServiceStatus">LiveTvServiceStatus</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.LiveTvTunerStatus.html" title="LiveTvTunerStatus">LiveTvTunerStatus</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.ProgramAudio.html" title="ProgramAudio">ProgramAudio</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.RecordingStatus.html" title="RecordingStatus">RecordingStatus</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.SeriesTimerInfoDto.html" title="SeriesTimerInfoDto">SeriesTimerInfoDto</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.SeriesTimerQuery.html" title="SeriesTimerQuery">SeriesTimerQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.TimerInfoDto.html" title="TimerInfoDto">TimerInfoDto</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.TimerQuery.html" title="TimerQuery">TimerQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.TimerType.html" title="TimerType">TimerType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LiveTv.TunerHostInfo.html" title="TunerHostInfo">TunerHostInfo</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.LocalizationAttributes.html" title="MediaBrowser.Model.LocalizationAttributes">MediaBrowser.Model.LocalizationAttributes</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LocalizationAttributes.DescriptionLAttribute.html" title="DescriptionLAttribute">DescriptionLAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LocalizationAttributes.DisplayNameLAttribute.html" title="DisplayNameLAttribute">DisplayNameLAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LocalizationAttributes.LocalizedDescriptionAttribute.html" title="LocalizedDescriptionAttribute">LocalizedDescriptionAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LocalizationAttributes.LocalizedDisplayNameAttribute.html" title="LocalizedDisplayNameAttribute">LocalizedDisplayNameAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LocalizationAttributes.LocalizedTristateFalseTextAttribute.html" title="LocalizedTristateFalseTextAttribute">LocalizedTristateFalseTextAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LocalizationAttributes.LocalizedTristateTrueTextAttribute.html" title="LocalizedTristateTrueTextAttribute">LocalizedTristateTrueTextAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LocalizationAttributes.ResourceTypeAttribute.html" title="ResourceTypeAttribute">ResourceTypeAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LocalizationAttributes.TristateFalseTextLAttribute.html" title="TristateFalseTextLAttribute">TristateFalseTextLAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.LocalizationAttributes.TristateTrueTextLAttribute.html" title="TristateTrueTextLAttribute">TristateTrueTextLAttribute</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Logging.html" title="MediaBrowser.Model.Logging">MediaBrowser.Model.Logging</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Logging.ILogger.html" title="ILogger">ILogger</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Logging.ILogManager.html" title="ILogManager">ILogManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Logging.LogHelper.html" title="LogHelper">LogHelper</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Logging.LogSeverity.html" title="LogSeverity">LogSeverity</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Logging.NullLogger.html" title="NullLogger">NullLogger</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.html" title="MediaBrowser.Model.MediaInfo">MediaBrowser.Model.MediaInfo</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.AudioCodec.html" title="AudioCodec">AudioCodec</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.Container.html" title="Container">Container</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.LiveStreamRequest.html" title="LiveStreamRequest">LiveStreamRequest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.LiveStreamResponse.html" title="LiveStreamResponse">LiveStreamResponse</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.MediaContainers.html" title="MediaContainers">MediaContainers</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.MediaInfo.html" title="MediaInfo">MediaInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.MediaProtocol.html" title="MediaProtocol">MediaProtocol</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.PlaybackInfoRequest.html" title="PlaybackInfoRequest">PlaybackInfoRequest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.PlaybackInfoResponse.html" title="PlaybackInfoResponse">PlaybackInfoResponse</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.SubtitleCodec.html" title="SubtitleCodec">SubtitleCodec</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.SubtitleTrackEvent.html" title="SubtitleTrackEvent">SubtitleTrackEvent</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.SubtitleTrackInfo.html" title="SubtitleTrackInfo">SubtitleTrackInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.TransportStreamTimestamp.html" title="TransportStreamTimestamp">TransportStreamTimestamp</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.MediaInfo.VideoCodec.html" title="VideoCodec">VideoCodec</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Net.html" title="MediaBrowser.Model.Net">MediaBrowser.Model.Net</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Net.EndPointInfo.html" title="EndPointInfo">EndPointInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Net.HttpException.html" title="HttpException">HttpException</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Net.ISocket.html" title="ISocket">ISocket</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Net.ISocketFactory.html" title="ISocketFactory">ISocketFactory</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Net.MimeTypes.html" title="MimeTypes">MimeTypes</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Net.NetworkShare.html" title="NetworkShare">NetworkShare</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Net.NetworkShareType.html" title="NetworkShareType">NetworkShareType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Net.SocketCreateException.html" title="SocketCreateException">SocketCreateException</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Net.SocketReceiveResult.html" title="SocketReceiveResult">SocketReceiveResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Net.WebSocketMessage-1.html" title="WebSocketMessage&lt;T&gt;">WebSocketMessage&lt;T&gt;</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Notifications.html" title="MediaBrowser.Model.Notifications">MediaBrowser.Model.Notifications</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Notifications.NotificationLevel.html" title="NotificationLevel">NotificationLevel</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Notifications.NotificationRequest.html" title="NotificationRequest">NotificationRequest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Notifications.SendToUserType.html" title="SendToUserType">SendToUserType</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.html" title="MediaBrowser.Model.Plugins">MediaBrowser.Model.Plugins</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.BasePluginConfiguration.html" title="BasePluginConfiguration">BasePluginConfiguration</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.IHasTranslations.html" title="IHasTranslations">IHasTranslations</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.IHasWebPages.html" title="IHasWebPages">IHasWebPages</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.PluginInfo.html" title="PluginInfo">PluginInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.PluginPageInfo.html" title="PluginPageInfo">PluginPageInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.TranslationInfo.html" title="TranslationInfo">TranslationInfo</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.html" title="MediaBrowser.Model.Plugins.UI">MediaBrowser.Model.Plugins.UI</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.EmbyUserException.html" title="EmbyUserException">EmbyUserException</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.IHasTabbedUIPages.html" title="IHasTabbedUIPages">IHasTabbedUIPages</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.IHasUIPages.html" title="IHasUIPages">IHasUIPages</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.IPluginPageSecurity.html" title="IPluginPageSecurity">IPluginPageSecurity</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.IPluginUIPageController.html" title="IPluginUIPageController">IPluginUIPageController</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.Views.html" title="MediaBrowser.Model.Plugins.UI.Views">MediaBrowser.Model.Plugins.UI.Views</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.Views.IPluginDialogView.html" title="IPluginDialogView">IPluginDialogView</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.Views.IPluginPageView.html" title="IPluginPageView">IPluginPageView</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.Views.IPluginUIView.html" title="IPluginUIView">IPluginUIView</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.Views.IPluginViewWithOptions.html" title="IPluginViewWithOptions">IPluginViewWithOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.Views.IPluginWizardView.html" title="IPluginWizardView">IPluginWizardView</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.Views.ISetupProgressInfo.html" title="ISetupProgressInfo">ISetupProgressInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.Views.PluginViewOptions.html" title="PluginViewOptions">PluginViewOptions</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.Views.Enums.html" title="MediaBrowser.Model.Plugins.UI.Views.Enums">MediaBrowser.Model.Plugins.UI.Views.Enums</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.Views.Enums.CompactViewAppearance.html" title="CompactViewAppearance">CompactViewAppearance</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.Views.Enums.DialogSize.html" title="DialogSize">DialogSize</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.Views.Enums.QueryCloseAction.html" title="QueryCloseAction">QueryCloseAction</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Plugins.UI.Views.Enums.WizardHidingBehavior.html" title="WizardHidingBehavior">WizardHidingBehavior</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.ProcessRun.Metrics.html" title="MediaBrowser.Model.ProcessRun.Metrics">MediaBrowser.Model.ProcessRun.Metrics</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.ProcessRun.Metrics.ProcessMetricPoint.html" title="ProcessMetricPoint">ProcessMetricPoint</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.ProcessRun.Metrics.ProcessStatistics.html" title="ProcessStatistics">ProcessStatistics</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Providers.html" title="MediaBrowser.Model.Providers">MediaBrowser.Model.Providers</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Providers.ExternalIdInfo.html" title="ExternalIdInfo">ExternalIdInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Providers.ExternalUrl.html" title="ExternalUrl">ExternalUrl</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Providers.ImageProviderInfo.html" title="ImageProviderInfo">ImageProviderInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Providers.RemoteImageInfo.html" title="RemoteImageInfo">RemoteImageInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Providers.RemoteImageQuery.html" title="RemoteImageQuery">RemoteImageQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Providers.RemoteImageResult.html" title="RemoteImageResult">RemoteImageResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Providers.RemoteSearchResult.html" title="RemoteSearchResult">RemoteSearchResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Providers.RemoteSubtitleInfo.html" title="RemoteSubtitleInfo">RemoteSubtitleInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Providers.SubtitleProviderInfo.html" title="SubtitleProviderInfo">SubtitleProviderInfo</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.html" title="MediaBrowser.Model.Querying">MediaBrowser.Model.Querying</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.AllThemeMediaResult.html" title="AllThemeMediaResult">AllThemeMediaResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.ItemCountsQuery.html" title="ItemCountsQuery">ItemCountsQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.ItemFields.html" title="ItemFields">ItemFields</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.ItemFilter.html" title="ItemFilter">ItemFilter</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.ItemSortBy.html" title="ItemSortBy">ItemSortBy</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.LatestItemsQuery.html" title="LatestItemsQuery">LatestItemsQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.MovieRecommendationQuery.html" title="MovieRecommendationQuery">MovieRecommendationQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.NextUpQuery.html" title="NextUpQuery">NextUpQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.QueryResult-1.html" title="QueryResult&lt;T&gt;">QueryResult&lt;T&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.SessionQuery.html" title="SessionQuery">SessionQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.SimilarItemsQuery.html" title="SimilarItemsQuery">SimilarItemsQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.ThemeMediaResult.html" title="ThemeMediaResult">ThemeMediaResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.UpcomingEpisodesQuery.html" title="UpcomingEpisodesQuery">UpcomingEpisodesQuery</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.UserDataFields.html" title="UserDataFields">UserDataFields</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Querying.UserQuery.html" title="UserQuery">UserQuery</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Serialization.html" title="MediaBrowser.Model.Serialization">MediaBrowser.Model.Serialization</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Serialization.IgnoreDataMemberAttribute.html" title="IgnoreDataMemberAttribute">IgnoreDataMemberAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Serialization.IJsonSerializer.html" title="IJsonSerializer">IJsonSerializer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Serialization.IXmlSerializer.html" title="IXmlSerializer">IXmlSerializer</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Serialization.JsonSerializerOptions.html" title="JsonSerializerOptions">JsonSerializerOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Serialization.JsonString.html" title="JsonString">JsonString</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.html" title="MediaBrowser.Model.Services">MediaBrowser.Model.Services</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.ApiMemberAttribute.html" title="ApiMemberAttribute">ApiMemberAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.AutoInjectPropertyAttribute.html" title="AutoInjectPropertyAttribute">AutoInjectPropertyAttribute</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.IAsyncStreamWriter.html" title="IAsyncStreamWriter">IAsyncStreamWriter</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.IHasHeaders.html" title="IHasHeaders">IHasHeaders</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.IHasRequestFilter.html" title="IHasRequestFilter">IHasRequestFilter</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.IHttpFile.html" title="IHttpFile">IHttpFile</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.IHttpResult.html" title="IHttpResult">IHttpResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.IRequest.html" title="IRequest">IRequest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.IRequiresRequest.html" title="IRequiresRequest">IRequiresRequest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.IRequiresRequestStream.html" title="IRequiresRequestStream">IRequiresRequestStream</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.IResponse.html" title="IResponse">IResponse</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.IReturn.html" title="IReturn">IReturn</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.IReturn-1.html" title="IReturn&lt;T&gt;">IReturn&lt;T&gt;</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.IReturnVoid.html" title="IReturnVoid">IReturnVoid</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.IService.html" title="IService">IService</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.MyHttpUtility.html" title="MyHttpUtility">MyHttpUtility</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.QueryParamCollection.html" title="QueryParamCollection">QueryParamCollection</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Services.RouteAttribute.html" title="RouteAttribute">RouteAttribute</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.html" title="MediaBrowser.Model.Session">MediaBrowser.Model.Session</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.BrowseRequest.html" title="BrowseRequest">BrowseRequest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.ClientCapabilities.html" title="ClientCapabilities">ClientCapabilities</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.GeneralCommand.html" title="GeneralCommand">GeneralCommand</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.GeneralCommandType.html" title="GeneralCommandType">GeneralCommandType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.MessageCommand.html" title="MessageCommand">MessageCommand</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.PlaybackProgressInfo.html" title="PlaybackProgressInfo">PlaybackProgressInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.PlaybackStartInfo.html" title="PlaybackStartInfo">PlaybackStartInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.PlaybackStopInfo.html" title="PlaybackStopInfo">PlaybackStopInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.PlayCommand.html" title="PlayCommand">PlayCommand</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.PlayerStateInfo.html" title="PlayerStateInfo">PlayerStateInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.PlayMethod.html" title="PlayMethod">PlayMethod</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.PlayRequest.html" title="PlayRequest">PlayRequest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.PlaystateCommand.html" title="PlaystateCommand">PlaystateCommand</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.PlaystateRequest.html" title="PlaystateRequest">PlaystateRequest</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.ProgressEvent.html" title="ProgressEvent">ProgressEvent</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.QueueItem.html" title="QueueItem">QueueItem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.RepeatMode.html" title="RepeatMode">RepeatMode</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.SessionUserInfo.html" title="SessionUserInfo">SessionUserInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.TranscodeReason.html" title="TranscodeReason">TranscodeReason</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.TranscodingInfo.html" title="TranscodingInfo">TranscodingInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.UserDataChangeInfo.html" title="UserDataChangeInfo">UserDataChangeInfo</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.Transcoding.html" title="MediaBrowser.Model.Session.Transcoding">MediaBrowser.Model.Session.Transcoding</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.Transcoding.VideoPipelineInfo.html" title="VideoPipelineInfo">VideoPipelineInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.Transcoding.VpStepInfo.html" title="VpStepInfo">VpStepInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Session.Transcoding.VpStepTypes.html" title="VpStepTypes">VpStepTypes</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Ssdp.html" title="MediaBrowser.Model.Ssdp">MediaBrowser.Model.Ssdp</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Ssdp.ISsdpDevicePublisher.html" title="ISsdpDevicePublisher">ISsdpDevicePublisher</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Ssdp.SsdpDevice.html" title="SsdpDevice">SsdpDevice</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Ssdp.SsdpEmbeddedDevice.html" title="SsdpEmbeddedDevice">SsdpEmbeddedDevice</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Ssdp.SsdpRootDevice.html" title="SsdpRootDevice">SsdpRootDevice</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Sync.html" title="MediaBrowser.Model.Sync">MediaBrowser.Model.Sync</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Sync.SyncCategory.html" title="SyncCategory">SyncCategory</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Sync.SyncJob.html" title="SyncJob">SyncJob</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Sync.SyncJobItemStatus.html" title="SyncJobItemStatus">SyncJobItemStatus</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Sync.SyncJobStatus.html" title="SyncJobStatus">SyncJobStatus</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Sync.SyncJobUpdateReason.html" title="SyncJobUpdateReason">SyncJobUpdateReason</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Sync.SyncTarget.html" title="SyncTarget">SyncTarget</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.System.html" title="MediaBrowser.Model.System">MediaBrowser.Model.System</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.System.IEnvironmentInfo.html" title="IEnvironmentInfo">IEnvironmentInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.System.IPowerManagement.html" title="IPowerManagement">IPowerManagement</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.System.IServiceRoot.html" title="IServiceRoot">IServiceRoot</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.System.ISystemEvents.html" title="ISystemEvents">ISystemEvents</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.System.LogFile.html" title="LogFile">LogFile</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.System.OperatingSystem.html" title="OperatingSystem">OperatingSystem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.System.PublicSystemInfo.html" title="PublicSystemInfo">PublicSystemInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.System.SystemInfo.html" title="SystemInfo">SystemInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.System.WakeOnLanInfo.html" title="WakeOnLanInfo">WakeOnLanInfo</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.html" title="MediaBrowser.Model.Tasks">MediaBrowser.Model.Tasks</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.IConfigurableScheduledTask.html" title="IConfigurableScheduledTask">IConfigurableScheduledTask</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.IEarlyRunScheduledTask.html" title="IEarlyRunScheduledTask">IEarlyRunScheduledTask</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.IScheduledTask.html" title="IScheduledTask">IScheduledTask</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.IScheduledTaskWithExecuteOptions.html" title="IScheduledTaskWithExecuteOptions">IScheduledTaskWithExecuteOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.IScheduledTaskWorker.html" title="IScheduledTaskWorker">IScheduledTaskWorker</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.ITaskManager.html" title="ITaskManager">ITaskManager</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.ITaskTrigger.html" title="ITaskTrigger">ITaskTrigger</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.ScheduledTaskHelpers.html" title="ScheduledTaskHelpers">ScheduledTaskHelpers</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.SystemEvent.html" title="SystemEvent">SystemEvent</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.TaskCompletionEventArgs.html" title="TaskCompletionEventArgs">TaskCompletionEventArgs</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.TaskCompletionStatus.html" title="TaskCompletionStatus">TaskCompletionStatus</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.TaskInfo.html" title="TaskInfo">TaskInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.TaskOptions.html" title="TaskOptions">TaskOptions</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.TaskResult.html" title="TaskResult">TaskResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.TaskState.html" title="TaskState">TaskState</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Tasks.TaskTriggerInfo.html" title="TaskTriggerInfo">TaskTriggerInfo</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Text.html" title="MediaBrowser.Model.Text">MediaBrowser.Model.Text</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Text.ITextEncoding.html" title="ITextEncoding">ITextEncoding</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Text.ValueStringBuilder.html" title="ValueStringBuilder">ValueStringBuilder</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Threading.html" title="MediaBrowser.Model.Threading">MediaBrowser.Model.Threading</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Threading.NamedLockPool.html" title="NamedLockPool">NamedLockPool</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Updates.html" title="MediaBrowser.Model.Updates">MediaBrowser.Model.Updates</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Updates.CheckForUpdateResult.html" title="CheckForUpdateResult">CheckForUpdateResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Updates.InstallationInfo.html" title="InstallationInfo">InstallationInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Updates.PackageInfo.html" title="PackageInfo">PackageInfo</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Updates.PackageTargetSystem.html" title="PackageTargetSystem">PackageTargetSystem</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Updates.PackageVersionClass.html" title="PackageVersionClass">PackageVersionClass</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Updates.PackageVersionInfo.html" title="PackageVersionInfo">PackageVersionInfo</a>
                                              </li>
                                        </ul>
                                    </li>
                                    <li class="nav-item">
                                        <span class="expand-stub"></span>
                                        <a class="nav-link" href="pluginapi/MediaBrowser.Model.Users.html" title="MediaBrowser.Model.Users">MediaBrowser.Model.Users</a>
                                        
                                        <ul class="nav level4">
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Users.ForgotPasswordAction.html" title="ForgotPasswordAction">ForgotPasswordAction</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Users.ForgotPasswordResult.html" title="ForgotPasswordResult">ForgotPasswordResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Users.PinRedeemResult.html" title="PinRedeemResult">PinRedeemResult</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Users.UserAction.html" title="UserAction">UserAction</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Users.UserActionType.html" title="UserActionType">UserActionType</a>
                                              </li>
                                              <li class="nav-item">
                                                  <a class="nav-link" href="pluginapi/MediaBrowser.Model.Users.UserPolicy.html" title="UserPolicy">UserPolicy</a>
                                              </li>
                                        </ul>
                                    </li>
                              </ul>
                          </li>
                    </ul>
                </li>
          </ul>
      </div>
    </div>
  </div>
</div>';
