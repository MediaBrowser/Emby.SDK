{
  "swagger": "2.0",
  "info": {
    "description": "Explore the Emby Server API",
    "termsOfService": "https://emby.media/terms",
    "contact": {
      "name": "Emby Developer Forum",
      "url": "https://emby.media/community/index.php?/forum/47-developer-api"
    },
  },
  "host": "emby.restapi",
  "x-original-basePath": "/emby",
  "schemes": [
    "http"
  ],
  "paths": {
    "/Artists": {
      "get": {
        "tags": [
          "ArtistsService"
        ],
        "summary": "Gets all artists from a given item, folder, or the entire library",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Items by name",
          "url": "https://dev.emby.media/doc/restapi/Items-by-Name.html"
        },
        "operationId": "getArtists",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets all artists from a given item, folder, or the entire library"
    },
    "/AudioCodecs": {
      "get": {
        "tags": [
          "TagService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "operationId": "getAudiocodecs",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<TagItem> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_UserLibrary.TagItem"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/AudioLayouts": {
      "get": {
        "tags": [
          "TagService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "operationId": "getAudiolayouts",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<TagItem> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_UserLibrary.TagItem"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/Channels": {
      "get": {
        "tags": [
          "ChannelService"
        ],
        "summary": "Gets available channels",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getChannels",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets available channels"
    },
    "/Collections": {
      "post": {
        "tags": [
          "CollectionService"
        ],
        "summary": "Creates a new collection",
        "description": "Requires authentication as user",
        "operationId": "postCollections",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Whether or not to lock the new collection.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Name",
            "description": "The name of the new collection.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Optional - create the collection within a specific folder",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Item Ids to add to the collection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a CollectionCreationResult object.",
            "schema": {
              "$ref": "#/definitions/Collections.CollectionCreationResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Creates a new collection"
    },
    "/Containers": {
      "get": {
        "tags": [
          "TagService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "operationId": "getContainers",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<TagItem> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_UserLibrary.TagItem"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/Devices": {
      "get": {
        "tags": [
          "DeviceService"
        ],
        "summary": "Gets all devices",
        "description": "Requires authentication as administrator",
        "operationId": "getDevices",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<DeviceInfo> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_Devices.DeviceInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "delete": {
        "tags": [
          "DeviceService"
        ],
        "summary": "Deletes a device",
        "description": "Requires authentication as administrator",
        "operationId": "deleteDevices",
        "parameters": [
          {
            "in": "query",
            "name": "Id",
            "description": "Device Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets all devices"
    },
    "/ExtendedVideoTypes": {
      "get": {
        "tags": [
          "TagService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "operationId": "getExtendedvideotypes",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<TagItem> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_UserLibrary.TagItem"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/Features": {
      "get": {
        "tags": [
          "FeatureService"
        ],
        "summary": "Gets a list of installed features",
        "description": "Requires authentication as administrator",
        "operationId": "getFeatures",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a FeatureInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeatureInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a list of installed features"
    },
    "/GameGenres": {
      "get": {
        "tags": [
          "GameGenresService"
        ],
        "summary": "Gets all Game genres from a given item, folder, or the entire library",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Items by name",
          "url": "https://dev.emby.media/doc/restapi/Items-by-Name.html"
        },
        "operationId": "getGamegenres",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets all Game genres from a given item, folder, or the entire library"
    },
    "/Genres": {
      "get": {
        "tags": [
          "GenresService"
        ],
        "summary": "Gets all genres from a given item, folder, or the entire library",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Items by name",
          "url": "https://dev.emby.media/doc/restapi/Items-by-Name.html"
        },
        "operationId": "getGenres",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets all genres from a given item, folder, or the entire library"
    },
    "/Items": {
      "get": {
        "tags": [
          "ItemsService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getItems",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Deletes an item from the library and file system",
        "description": "Requires authentication as user",
        "operationId": "deleteItems",
        "parameters": [
          {
            "in": "query",
            "name": "Ids",
            "description": "Ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/ItemTypes": {
      "get": {
        "tags": [
          "TagService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "operationId": "getItemtypes",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<TagItem> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_UserLibrary.TagItem"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/MusicGenres": {
      "get": {
        "tags": [
          "MusicGenresService"
        ],
        "summary": "Gets all music genres from a given item, folder, or the entire library",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Items by name",
          "url": "https://dev.emby.media/doc/restapi/Items-by-Name.html"
        },
        "operationId": "getMusicgenres",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets all music genres from a given item, folder, or the entire library"
    },
    "/OfficialRatings": {
      "get": {
        "tags": [
          "OfficialRatingService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "operationId": "getOfficialratings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<OfficialRatingItem> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_UserLibrary.OfficialRatingItem"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/openapi": {
      "get": {
        "tags": [
          "OpenApiService"
        ],
        "summary": "Gets the OpenAPI 3 specifications",
        "description": "No authentication required",
        "operationId": "getOpenapi",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a String object.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Gets the OpenAPI 3 specifications"
    },
    "/openapi.json": {
      "get": {
        "tags": [
          "OpenApiService"
        ],
        "summary": "Gets OpenAPI 3 specifications",
        "description": "No authentication required",
        "operationId": "getOpenapiJson",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a String object.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Gets OpenAPI 3 specifications"
    },
    "/Packages": {
      "get": {
        "tags": [
          "PackageService"
        ],
        "summary": "Gets available packages",
        "description": "Requires authentication as user",
        "operationId": "getPackages",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "PackageType",
            "description": "Optional package type filter (System/UserInstalled)",
            "type": "string"
          },
          {
            "in": "query",
            "name": "TargetSystems",
            "description": "Optional. Filter by target system type. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPremium",
            "description": "Optional. Filter by premium status",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsAdult",
            "description": "Optional. Filter by package that contain adult content.",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a PackageInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets available packages"
    },
    "/Persons": {
      "get": {
        "tags": [
          "PersonsService"
        ],
        "summary": "Gets all persons from a given item, folder, or the entire library",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Items by name",
          "url": "https://dev.emby.media/doc/restapi/Items-by-Name.html"
        },
        "operationId": "getPersons",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets all persons from a given item, folder, or the entire library"
    },
    "/Playlists": {
      "post": {
        "tags": [
          "PlaylistService"
        ],
        "summary": "Creates a new playlist",
        "description": "Requires authentication as user",
        "operationId": "postPlaylists",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Name",
            "description": "The name of the new playlist.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Item Ids to add to the playlist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MediaType",
            "description": "The playlist media type",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a PlaylistCreationResult object.",
            "schema": {
              "$ref": "#/definitions/Playlists.PlaylistCreationResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Creates a new playlist"
    },
    "/Plugins": {
      "get": {
        "tags": [
          "PluginService"
        ],
        "summary": "Gets a list of currently installed plugins",
        "description": "Requires authentication as administrator",
        "operationId": "getPlugins",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a PluginInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Plugins.PluginInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a list of currently installed plugins"
    },
    "/ScheduledTasks": {
      "get": {
        "tags": [
          "ScheduledTaskService"
        ],
        "summary": "Gets scheduled tasks",
        "description": "Requires authentication as administrator",
        "operationId": "getScheduledtasks",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "IsHidden",
            "description": "Optional filter tasks that are hidden, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsEnabled",
            "description": "Optional filter tasks that are enabled, or not.",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a TaskInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets scheduled tasks"
    },
    "/Sessions": {
      "get": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Gets a list of sessions",
        "description": "Requires authentication as user",
        "operationId": "getSessions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ControllableByUserId",
            "description": "Optional. Filter by sessions that a given user is allowed to remote control.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "Optional. Filter by device id.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Id",
            "description": "Optional. Filter by session id.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a SessionInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Session.SessionInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a list of sessions"
    },
    "/StreamLanguages": {
      "get": {
        "tags": [
          "TagService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "operationId": "getStreamlanguages",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<TagItem> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_UserLibrary.TagItem"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/Studios": {
      "get": {
        "tags": [
          "StudiosService"
        ],
        "summary": "Gets all studios from a given item, folder, or the entire library",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Items by name",
          "url": "https://dev.emby.media/doc/restapi/Items-by-Name.html"
        },
        "operationId": "getStudios",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets all studios from a given item, folder, or the entire library"
    },
    "/SubtitleCodecs": {
      "get": {
        "tags": [
          "TagService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "operationId": "getSubtitlecodecs",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<TagItem> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_UserLibrary.TagItem"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/swagger": {
      "get": {
        "tags": [
          "OpenApiService"
        ],
        "summary": "Gets the swagger specifications",
        "description": "No authentication required",
        "operationId": "getSwagger",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a String object.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Gets the swagger specifications"
    },
    "/swagger.json": {
      "get": {
        "tags": [
          "OpenApiService"
        ],
        "summary": "Gets the swagger specifications",
        "description": "No authentication required",
        "operationId": "getSwaggerJson",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a String object.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Gets the swagger specifications"
    },
    "/Tags": {
      "get": {
        "tags": [
          "TagService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "operationId": "getTags",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<TagItem> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_UserLibrary.TagItem"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/Trailers": {
      "get": {
        "tags": [
          "TrailersService"
        ],
        "summary": "Finds movies and trailers similar to a given trailer.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getTrailers",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Finds movies and trailers similar to a given trailer."
    },
    "/VideoCodecs": {
      "get": {
        "tags": [
          "TagService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "operationId": "getVideocodecs",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<TagItem> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_UserLibrary.TagItem"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/Years": {
      "get": {
        "tags": [
          "TagService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "operationId": "getYears",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<TagItem> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_UserLibrary.TagItem"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount",
        "parameters": [
          {
            "in": "path",
            "name": "PercentPlayed",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "UnPlayedCount",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount",
        "parameters": [
          {
            "in": "path",
            "name": "PercentPlayed",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "UnPlayedCount",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Artists/{Name}": {
      "get": {
        "tags": [
          "ArtistsService"
        ],
        "summary": "Gets an artist, by name",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Items by name",
          "url": "https://dev.emby.media/doc/restapi/Items-by-Name.html"
        },
        "operationId": "getArtistsByName",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "The artist name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto object.",
            "schema": {
              "$ref": "#/definitions/BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets an artist, by name"
    },
    "/Artists/AlbumArtists": {
      "get": {
        "tags": [
          "ArtistsService"
        ],
        "summary": "Gets all album artists from a given item, folder, or the entire library",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Items by name",
          "url": "https://dev.emby.media/doc/restapi/Items-by-Name.html"
        },
        "operationId": "getArtistsAlbumartists",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets all album artists from a given item, folder, or the entire library"
    },
    "/Artists/Prefixes": {
      "get": {
        "tags": [
          "TagService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "operationId": "getArtistsPrefixes",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a NameValuePair[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NameValuePair"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/Artists/InstantMix": {
      "get": {
        "tags": [
          "InstantMixService"
        ],
        "summary": "Creates an instant playlist based on a given artist",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getArtistsInstantmix",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Creates an instant playlist based on a given artist"
    },
    "/AudioBooks/NextUp": {
      "get": {
        "tags": [
          "InstantMixService"
        ],
        "summary": "Gets a list of next up episodes",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getAudiobooksNextup",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumId",
            "description": "Optional. Filter by series id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a list of next up episodes"
    },
    "/Auth/Providers": {
      "get": {
        "tags": [
          "SessionsService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "getAuthProviders",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a NameIdPair[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NameIdPair"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/Auth/Keys": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postAuthKeys",
        "parameters": [
          {
            "in": "query",
            "name": "App",
            "description": "App",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "get": {
        "tags": [
          "SessionsService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "getAuthKeys",
        "parameters": [
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/BackupRestore/Restore": {
      "post": {
        "tags": [
          "BackupApi"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postBackuprestoreRestore",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RestoreOptions: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MBBackup.Api.RestoreOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/BackupRestore/RestoreData": {
      "post": {
        "tags": [
          "BackupApi"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postBackuprestoreRestoredata",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "DataRestoreOptions: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MBBackup.Api.DataRestoreOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/BackupRestore/BackupInfo": {
      "get": {
        "tags": [
          "BackupApi"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "getBackuprestoreBackupinfo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a AllBackupsInfo object.",
            "schema": {
              "$ref": "#/definitions/MBBackup.Api.AllBackupsInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/Branding/Configuration": {
      "get": {
        "tags": [
          "BrandingService"
        ],
        "summary": "Gets branding configuration",
        "description": "Requires authentication as user",
        "operationId": "getBrandingConfiguration",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BrandingOptions object.",
            "schema": {
              "$ref": "#/definitions/Branding.BrandingOptions"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets branding configuration"
    },
    "/Branding/Css": {
      "get": {
        "tags": [
          "BrandingService"
        ],
        "summary": "Gets custom css",
        "description": "Requires authentication as user",
        "operationId": "getBrandingCss",
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets custom css"
    },
    "/Branding/Css.css": {
      "get": {
        "tags": [
          "BrandingService"
        ],
        "summary": "Gets custom css",
        "description": "Requires authentication as user",
        "operationId": "getBrandingCssCss",
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets custom css"
    },
    "/Connect/Pending": {
      "get": {
        "tags": [
          "ConnectService"
        ],
        "summary": "Creates a Connect link for a user",
        "description": "Requires authentication as administrator",
        "operationId": "getConnectPending",
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Creates a Connect link for a user"
    },
    "/Connect/Exchange": {
      "get": {
        "tags": [
          "ConnectService"
        ],
        "summary": "Gets the corresponding local user from a connect user id",
        "description": "Requires authentication as user",
        "operationId": "getConnectExchange",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ConnectUserId",
            "description": "ConnectUserId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ConnectAuthenticationExchangeResult object.",
            "schema": {
              "$ref": "#/definitions/Connect.ConnectAuthenticationExchangeResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets the corresponding local user from a connect user id"
    },
    "/Devices/Options": {
      "post": {
        "tags": [
          "DeviceService"
        ],
        "summary": "Updates device options",
        "description": "Requires authentication as administrator",
        "operationId": "postDevicesOptions",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Id",
            "description": "Device Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "DeviceOptions: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Devices.DeviceOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "get": {
        "tags": [
          "DeviceService"
        ],
        "summary": "Gets options for a device",
        "description": "Requires authentication as administrator",
        "operationId": "getDevicesOptions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Id",
            "description": "Device Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a DeviceOptions object.",
            "schema": {
              "$ref": "#/definitions/Devices.DeviceOptions"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Updates device options"
    },
    "/Devices/Info": {
      "get": {
        "tags": [
          "DeviceService"
        ],
        "summary": "Gets info for a device",
        "description": "Requires authentication as administrator",
        "operationId": "getDevicesInfo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Id",
            "description": "Device Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a DeviceInfo object.",
            "schema": {
              "$ref": "#/definitions/Devices.DeviceInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets info for a device"
    },
    "/Devices/CameraUploads": {
      "get": {
        "tags": [
          "DeviceService"
        ],
        "summary": "Gets camera upload history for a device",
        "description": "Requires authentication as user",
        "operationId": "getDevicesCamerauploads",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ContentUploadHistory object.",
            "schema": {
              "$ref": "#/definitions/Devices.ContentUploadHistory"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "DeviceService"
        ],
        "summary": "Uploads content",
        "description": "Requires authentication as user",
        "operationId": "postDevicesCamerauploads",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Album",
            "description": "Album",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Name",
            "description": "Name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Id",
            "description": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets camera upload history for a device"
    },
    "/Devices/Delete": {
      "post": {
        "tags": [
          "DeviceService"
        ],
        "summary": "Deletes a device",
        "description": "Requires authentication as administrator",
        "operationId": "postDevicesDelete",
        "parameters": [
          {
            "in": "query",
            "name": "Id",
            "description": "Device Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Deletes a device"
    },
    "/DisplayPreferences/{Id}": {
      "get": {
        "tags": [
          "DisplayPreferencesService"
        ],
        "summary": "Gets a user's display preferences for an item",
        "description": "Requires authentication as user",
        "operationId": "getDisplaypreferencesById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Client",
            "description": "Client",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a DisplayPreferences object.",
            "schema": {
              "$ref": "#/definitions/DisplayPreferences"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a user's display preferences for an item"
    },
    "/DisplayPreferences/{DisplayPreferencesId}": {
      "post": {
        "tags": [
          "DisplayPreferencesService"
        ],
        "summary": "Updates a user's display preferences for an item",
        "description": "Requires authentication as user",
        "operationId": "postDisplaypreferencesByDisplaypreferencesid",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "DisplayPreferencesId",
            "description": "DisplayPreferences Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "DisplayPreferences: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisplayPreferences"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Updates a user's display preferences for an item"
    },
    "/Dlna/ProfileInfos": {
      "get": {
        "tags": [
          "DlnaService"
        ],
        "summary": "Gets a list of profiles",
        "description": "Requires authentication as administrator",
        "operationId": "getDlnaProfileinfos",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a DlnaProfile[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Dlna.Profiles.DlnaProfile"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a list of profiles"
    },
    "/Dlna/Profiles": {
      "post": {
        "tags": [
          "DlnaService"
        ],
        "summary": "Creates a profile",
        "description": "Requires authentication as administrator",
        "operationId": "postDlnaProfiles",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "DlnaProfile: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dlna.Profiles.DlnaProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Creates a profile"
    },
    "/Encoding/ToneMapOptions": {
      "get": {
        "tags": [
          "EncodingInfoService"
        ],
        "summary": "Gets available tone mapping options",
        "description": "Requires authentication as administrator",
        "operationId": "getEncodingTonemapoptions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ToneMapOptionsVisibility object.",
            "schema": {
              "$ref": "#/definitions/Configuration.ToneMapping.ToneMapOptionsVisibility"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets available tone mapping options"
    },
    "/Encoding/FullToneMapOptions": {
      "get": {
        "tags": [
          "ToneMapOptionsService"
        ],
        "summary": "Gets the tone mapping options",
        "description": "Requires authentication as user",
        "operationId": "getEncodingFulltonemapoptions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a EditObjectContainer object.",
            "schema": {
              "$ref": "#/definitions/EditObjectContainer"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "ToneMapOptionsService"
        ],
        "summary": "Updates the tone mapping options",
        "description": "Requires authentication as administrator",
        "operationId": "postEncodingFulltonemapoptions",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets the tone mapping options"
    },
    "/Encoding/PublicToneMapOptions": {
      "get": {
        "tags": [
          "ToneMapOptionsService"
        ],
        "summary": "Gets the tone mapping options",
        "description": "Requires authentication as user",
        "operationId": "getEncodingPublictonemapoptions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a EditObjectContainer object.",
            "schema": {
              "$ref": "#/definitions/EditObjectContainer"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "ToneMapOptionsService"
        ],
        "summary": "Updates the tone mapping options",
        "description": "Requires authentication as administrator",
        "operationId": "postEncodingPublictonemapoptions",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets the tone mapping options"
    },
    "/Encoding/SubtitleOptions": {
      "get": {
        "tags": [
          "SubtitleOptionsService"
        ],
        "summary": "Gets the subtitle options",
        "description": "Requires authentication as user",
        "operationId": "getEncodingSubtitleoptions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a EditObjectContainer object.",
            "schema": {
              "$ref": "#/definitions/EditObjectContainer"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "SubtitleOptionsService"
        ],
        "summary": "Updates the subtitle options",
        "description": "Requires authentication as administrator",
        "operationId": "postEncodingSubtitleoptions",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets the subtitle options"
    },
    "/Encoding/FfmpegOptions": {
      "get": {
        "tags": [
          "FfmpegOptionsService"
        ],
        "summary": "Gets the ffmpeg options",
        "description": "Requires authentication as user",
        "operationId": "getEncodingFfmpegoptions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a EditObjectContainer object.",
            "schema": {
              "$ref": "#/definitions/EditObjectContainer"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "FfmpegOptionsService"
        ],
        "summary": "Updates the ffmpeg options",
        "description": "Requires authentication as administrator",
        "operationId": "postEncodingFfmpegoptions",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets the ffmpeg options"
    },
    "/Encoding/CodecParameters": {
      "get": {
        "tags": [
          "CodecParameterService"
        ],
        "summary": "Gets the parameters for a specified codec.",
        "description": "Requires authentication as user",
        "operationId": "getEncodingCodecparameters",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "CodecId",
            "description": "Codec Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParameterContext",
            "description": "Parameter Context",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a EditObjectContainer object.",
            "schema": {
              "$ref": "#/definitions/EditObjectContainer"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "CodecParameterService"
        ],
        "summary": "Updates the parameters for a specified codec.",
        "description": "Requires authentication as administrator",
        "operationId": "postEncodingCodecparameters",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "CodecId",
            "description": "Codec Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParameterContext",
            "description": "Parameter Context",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets the parameters for a specified codec."
    },
    "/Environment/ValidatePath": {
      "post": {
        "tags": [
          "EnvironmentService"
        ],
        "summary": "Gets the contents of a given directory in the file system",
        "description": "Requires authentication as administrator",
        "operationId": "postEnvironmentValidatepath",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ValidatePath",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidatePath"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets the contents of a given directory in the file system"
    },
    "/Environment/DefaultDirectoryBrowser": {
      "get": {
        "tags": [
          "EnvironmentService"
        ],
        "summary": "Gets the parent path of a given path",
        "description": "Requires authentication as administrator",
        "operationId": "getEnvironmentDefaultdirectorybrowser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a DefaultDirectoryBrowserInfo object.",
            "schema": {
              "$ref": "#/definitions/DefaultDirectoryBrowserInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets the parent path of a given path"
    },
    "/Environment/DirectoryContents": {
      "get": {
        "tags": [
          "EnvironmentService"
        ],
        "summary": "Gets the contents of a given directory in the file system",
        "description": "Requires authentication as administrator",
        "operationId": "getEnvironmentDirectorycontents",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Path",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeFiles",
            "description": "An optional filter to include or exclude files from the results. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IncludeDirectories",
            "description": "An optional filter to include or exclude folders from the results. true/false",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<FileSystemEntryInfo> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IO.FileSystemEntryInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "post": {
        "tags": [
          "EnvironmentService"
        ],
        "summary": "Gets the contents of a given directory in the file system",
        "description": "Requires authentication as administrator",
        "operationId": "postEnvironmentDirectorycontents",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Path",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeFiles",
            "description": "An optional filter to include or exclude files from the results. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IncludeDirectories",
            "description": "An optional filter to include or exclude folders from the results. true/false",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "description": "GetDirectoryContents",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDirectoryContents"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<FileSystemEntryInfo> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IO.FileSystemEntryInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets the contents of a given directory in the file system"
    },
    "/Environment/NetworkShares": {
      "get": {
        "tags": [
          "EnvironmentService"
        ],
        "summary": "Gets shares from a network device",
        "description": "Requires authentication as administrator",
        "operationId": "getEnvironmentNetworkshares",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<FileSystemEntryInfo> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IO.FileSystemEntryInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets shares from a network device"
    },
    "/Environment/Drives": {
      "get": {
        "tags": [
          "EnvironmentService"
        ],
        "summary": "Gets available drives from the server's file system",
        "description": "Requires authentication as administrator",
        "operationId": "getEnvironmentDrives",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<FileSystemEntryInfo> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IO.FileSystemEntryInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets available drives from the server's file system"
    },
    "/Environment/NetworkDevices": {
      "get": {
        "tags": [
          "EnvironmentService"
        ],
        "summary": "Gets a list of devices on the network",
        "description": "Requires authentication as administrator",
        "operationId": "getEnvironmentNetworkdevices",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<FileSystemEntryInfo> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IO.FileSystemEntryInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a list of devices on the network"
    },
    "/Environment/ParentPath": {
      "get": {
        "tags": [
          "EnvironmentService"
        ],
        "summary": "Gets the parent path of a given path",
        "description": "Requires authentication as administrator",
        "operationId": "getEnvironmentParentpath",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a String object.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets the parent path of a given path"
    },
    "/GameGenres/{Name}": {
      "get": {
        "tags": [
          "GameGenresService"
        ],
        "summary": "Gets a Game genre, by name",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Items by name",
          "url": "https://dev.emby.media/doc/restapi/Items-by-Name.html"
        },
        "operationId": "getGamegenresByName",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "The genre name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto object.",
            "schema": {
              "$ref": "#/definitions/BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a Game genre, by name"
    },
    "/Genres/{Name}": {
      "get": {
        "tags": [
          "GenresService"
        ],
        "summary": "Gets a genre, by name",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Items by name",
          "url": "https://dev.emby.media/doc/restapi/Items-by-Name.html"
        },
        "operationId": "getGenresByName",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "The genre name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto object.",
            "schema": {
              "$ref": "#/definitions/BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a genre, by name"
    },
    "/Images/Remote": {
      "get": {
        "tags": [
          "RemoteImageService"
        ],
        "summary": "Gets a remote image",
        "description": "Requires authentication as administrator",
        "operationId": "getImagesRemote",
        "parameters": [
          {
            "in": "query",
            "name": "ImageUrl",
            "description": "The image url",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a remote image"
    },
    "/Items/{ItemId}": {
      "post": {
        "tags": [
          "ItemUpdateService"
        ],
        "summary": "Updates an item",
        "description": "Requires authentication as administrator",
        "operationId": "postItemsByItemid",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ItemId",
            "description": "The id of the item",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "BaseItemDto: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BaseItemDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Updates an item"
    },
    "/Items/Prefixes": {
      "get": {
        "tags": [
          "TagService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "operationId": "getItemsPrefixes",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a NameValuePair[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NameValuePair"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/Items/Access": {
      "post": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Updates user item access",
        "description": "Requires authentication as user",
        "operationId": "postItemsAccess",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "UpdateUserItemAccess",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLibrary.UpdateUserItemAccess"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Updates user item access"
    },
    "/Items/Counts": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getItemsCounts",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Get counts from a specific user's library.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional. Get counts of favorite items",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ItemCounts object.",
            "schema": {
              "$ref": "#/definitions/ItemCounts"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/Intros": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Gets info to debug intros",
        "description": "Requires authentication as administrator",
        "operationId": "getItemsIntros",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<IntroDebugInfo> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Persistence.IntroDebugInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets info to debug intros"
    },
    "/Items/Delete": {
      "post": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Deletes an item from the library and file system",
        "description": "Requires authentication as user",
        "operationId": "postItemsDelete",
        "parameters": [
          {
            "in": "query",
            "name": "Ids",
            "description": "Ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deletes an item from the library and file system"
    },
    "/Items/{Id}": {
      "delete": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Deletes an item from the library and file system",
        "description": "Requires authentication as user",
        "operationId": "deleteItemsById",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deletes an item from the library and file system"
    },
    "/Libraries/AvailableOptions": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getLibrariesAvailableoptions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a LibraryOptionsResult object.",
            "schema": {
              "$ref": "#/definitions/Library.LibraryOptionsResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Library/SelectableMediaFolders": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Gets all user media folders.",
        "description": "Requires authentication as user",
        "operationId": "getLibrarySelectablemediafolders",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a MediaFolder[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Library.MediaFolder"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets all user media folders."
    },
    "/Library/MediaFolders": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Gets all user media folders.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getLibraryMediafolders",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "IsHidden",
            "description": "Optional. Filter by folders that are marked hidden, or not.",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets all user media folders."
    },
    "/Library/PhysicalPaths": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Gets a list of physical paths from virtual folders",
        "description": "Requires authentication as administrator",
        "operationId": "getLibraryPhysicalpaths",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<String> object.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a list of physical paths from virtual folders"
    },
    "/Library/Refresh": {
      "post": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Starts a library scan",
        "description": "Requires authentication as administrator",
        "operationId": "postLibraryRefresh",
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Starts a library scan"
    },
    "/Library/VirtualFolders": {
      "post": {
        "tags": [
          "LibraryStructureService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postLibraryVirtualfolders",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "AddVirtualFolder",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Library.AddVirtualFolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "delete": {
        "tags": [
          "LibraryStructureService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "deleteLibraryVirtualfolders",
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/LiveStreams/Open": {
      "post": {
        "tags": [
          "MediaInfoService"
        ],
        "summary": "Opens a media source",
        "description": "Requires authentication as user",
        "operationId": "postLivestreamsOpen",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LiveStreamRequest: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiveStreamRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a LiveStreamResponse object.",
            "schema": {
              "$ref": "#/definitions/LiveStreamResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Opens a media source"
    },
    "/LiveStreams/Close": {
      "post": {
        "tags": [
          "MediaInfoService"
        ],
        "summary": "Closes a media source",
        "description": "Requires authentication as user",
        "operationId": "postLivestreamsClose",
        "parameters": [
          {
            "in": "query",
            "name": "LiveStreamId",
            "description": "LiveStreamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Closes a media source"
    },
    "/LiveStreams/MediaInfo": {
      "post": {
        "tags": [
          "MediaInfoService"
        ],
        "summary": "Closes a media source",
        "description": "Requires authentication as user",
        "operationId": "postLivestreamsMediainfo",
        "parameters": [
          {
            "in": "query",
            "name": "LiveStreamId",
            "description": "LiveStreamId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Closes a media source"
    },
    "/LiveTv/ChannelTags": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets live tv channel tags",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getLivetvChanneltags",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets live tv channel tags"
    },
    "/LiveTv/Folder": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets the top level live tv folder",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getLivetvFolder",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto object.",
            "schema": {
              "$ref": "#/definitions/BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets the top level live tv folder"
    },
    "/LiveTv/ChannelMappings": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "getLivetvChannelmappings",
        "parameters": [
          {
            "in": "query",
            "name": "ProviderId",
            "description": "Provider id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "head": {
        "tags": [
          "LiveTvService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "headLivetvChannelmappings",
        "parameters": [
          {
            "in": "query",
            "name": "ProviderId",
            "description": "Provider id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postLivetvChannelmappings",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ProviderId",
            "description": "Provider id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "SetChannelMapping",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.SetChannelMapping"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "put": {
        "tags": [
          "LiveTvService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "putLivetvChannelmappings",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ProviderId",
            "description": "Provider id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "SetChannelMapping",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.SetChannelMapping"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "delete": {
        "tags": [
          "LiveTvService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "deleteLivetvChannelmappings",
        "parameters": [
          {
            "in": "query",
            "name": "ProviderId",
            "description": "Provider id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/LiveTv/ChannelMappingOptions": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "getLivetvChannelmappingoptions",
        "parameters": [
          {
            "in": "query",
            "name": "ProviderId",
            "description": "Provider id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "head": {
        "tags": [
          "LiveTvService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "headLivetvChannelmappingoptions",
        "parameters": [
          {
            "in": "query",
            "name": "ProviderId",
            "description": "Provider id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postLivetvChannelmappingoptions",
        "parameters": [
          {
            "in": "query",
            "name": "ProviderId",
            "description": "Provider id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "put": {
        "tags": [
          "LiveTvService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "putLivetvChannelmappingoptions",
        "parameters": [
          {
            "in": "query",
            "name": "ProviderId",
            "description": "Provider id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "delete": {
        "tags": [
          "LiveTvService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "deleteLivetvChannelmappingoptions",
        "parameters": [
          {
            "in": "query",
            "name": "ProviderId",
            "description": "Provider id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/LiveTv/ListingProviders": {
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Adds a listing provider",
        "description": "Requires authentication as administrator",
        "operationId": "postLivetvListingproviders",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ListingsProviderInfo: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiveTv.ListingsProviderInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ListingsProviderInfo object.",
            "schema": {
              "$ref": "#/definitions/LiveTv.ListingsProviderInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "delete": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Deletes a listing provider",
        "description": "Requires authentication as administrator",
        "operationId": "deleteLivetvListingproviders",
        "parameters": [
          {
            "in": "query",
            "name": "Id",
            "description": "Provider id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets current listing providers",
        "description": "Requires authentication as administrator",
        "operationId": "getLivetvListingproviders",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ChannelId",
            "description": "Channel id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ListingsProviderInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LiveTv.ListingsProviderInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Adds a listing provider"
    },
    "/LiveTv/TunerHosts": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets tuner hosts",
        "description": "Requires authentication as administrator",
        "operationId": "getLivetvTunerhosts",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a TunerHostInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LiveTv.TunerHostInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Adds a tuner host",
        "description": "Requires authentication as administrator",
        "operationId": "postLivetvTunerhosts",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "TunerHostInfo: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiveTv.TunerHostInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a TunerHostInfo object.",
            "schema": {
              "$ref": "#/definitions/LiveTv.TunerHostInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "delete": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Deletes a tuner host",
        "description": "Requires authentication as administrator",
        "operationId": "deleteLivetvTunerhosts",
        "parameters": [
          {
            "in": "query",
            "name": "Id",
            "description": "Tuner host id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets tuner hosts"
    },
    "/LiveTv/Info": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets available live tv services.",
        "description": "Requires authentication as user",
        "operationId": "getLivetvInfo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a LiveTvInfo object.",
            "schema": {
              "$ref": "#/definitions/LiveTv.LiveTvInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets available live tv services."
    },
    "/LiveTv/EPG": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets the epg.",
        "description": "Requires authentication as user",
        "operationId": "getLivetvEPG",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Type",
            "description": "Optional filter by channel type."
          },
          {
            "in": "query",
            "name": "IsLiked",
            "description": "Filter by channels that are liked, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsDisliked",
            "description": "Filter by channels that are disliked, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableFavoriteSorting",
            "description": "Incorporate favorite and like status into channel sorting.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AddCurrentProgram",
            "description": "Optional. Adds current program info to each channel",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ChannelIds",
            "description": "The channels to return guide information for.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<EpgRow> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_Api.EpgRow"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets the epg."
    },
    "/LiveTv/Channels": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets available live tv channels.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getLivetvChannels",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Type",
            "description": "Optional filter by channel type."
          },
          {
            "in": "query",
            "name": "IsLiked",
            "description": "Filter by channels that are liked, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsDisliked",
            "description": "Filter by channels that are disliked, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableFavoriteSorting",
            "description": "Incorporate favorite and like status into channel sorting.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AddCurrentProgram",
            "description": "Optional. Adds current program info to each channel",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets available live tv channels."
    },
    "/LiveTv/Programs": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets available live tv epgs..",
        "description": "Requires authentication as user",
        "operationId": "getLivetvPrograms",
        "parameters": [
          {
            "in": "query",
            "name": "ChannelIds",
            "description": "The channels to return guide information for.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets available live tv epgs..",
        "description": "Requires authentication as user",
        "operationId": "postLivetvPrograms",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ChannelIds",
            "description": "The channels to return guide information for.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "BaseItemsRequest: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.BaseItemsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets available live tv epgs.."
    },
    "/LiveTv/Recordings": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets live tv recordings",
        "description": "Requires authentication as user",
        "operationId": "getLivetvRecordings",
        "parameters": [
          {
            "in": "query",
            "name": "ChannelId",
            "description": "Optional filter by channel id.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Status",
            "description": "Optional filter by recording status."
          },
          {
            "in": "query",
            "name": "IsInProgress",
            "description": "Optional filter by recordings that are in progress, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesTimerId",
            "description": "Optional filter by recordings belonging to a series timer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets live tv recordings"
    },
    "/LiveTv/Timers": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets live tv timers",
        "description": "Requires authentication as user",
        "operationId": "getLivetvTimers",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ChannelId",
            "description": "Optional filter by channel id.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SeriesTimerId",
            "description": "Optional filter by timers belonging to a series timer",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<TimerInfoDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_LiveTv.TimerInfoDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Creates a live tv timer",
        "description": "Requires authentication as user",
        "operationId": "postLivetvTimers",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "TimerInfoDto: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiveTv.TimerInfoDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets live tv timers"
    },
    "/LiveTv/SeriesTimers": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets live tv series timers",
        "description": "Requires authentication as user",
        "operationId": "getLivetvSeriestimers",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Sort by SortName or Priority",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Optional. Sort in Ascending or Descending order"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<SeriesTimerInfoDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_LiveTv.SeriesTimerInfoDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Creates a live tv series timer",
        "description": "Requires authentication as user",
        "operationId": "postLivetvSeriestimers",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SeriesTimerInfo: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiveTv.SeriesTimerInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets live tv series timers"
    },
    "/LiveTv/GuideInfo": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets guide info",
        "description": "Requires authentication as user",
        "operationId": "getLivetvGuideinfo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a GuideInfo object.",
            "schema": {
              "$ref": "#/definitions/LiveTv.GuideInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets guide info"
    },
    "/LiveTv/AvailableRecordingOptions": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets available recording options",
        "description": "Requires authentication as user",
        "operationId": "getLivetvAvailablerecordingoptions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a AvailableRecordingOptions object.",
            "schema": {
              "$ref": "#/definitions/Api.AvailableRecordingOptions"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets available recording options"
    },
    "/Localization/ParentalRatings": {
      "get": {
        "tags": [
          "LocalizationService"
        ],
        "summary": "Gets known parental ratings",
        "description": "Requires authentication as user",
        "operationId": "getLocalizationParentalratings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ParentalRating[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ParentalRating"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets known parental ratings"
    },
    "/Localization/Options": {
      "get": {
        "tags": [
          "LocalizationService"
        ],
        "summary": "Gets localization options",
        "description": "Requires authentication as user",
        "operationId": "getLocalizationOptions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a LocalizatonOption[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Globalization.LocalizatonOption"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets localization options"
    },
    "/Localization/Countries": {
      "get": {
        "tags": [
          "LocalizationService"
        ],
        "summary": "Gets known countries",
        "description": "Requires authentication as user",
        "operationId": "getLocalizationCountries",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a CountryInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Globalization.CountryInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets known countries"
    },
    "/Localization/Cultures": {
      "get": {
        "tags": [
          "LocalizationService"
        ],
        "summary": "Gets known cultures",
        "description": "Requires authentication as user",
        "operationId": "getLocalizationCultures",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a CultureDto[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Globalization.CultureDto"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets known cultures"
    },
    "/Movies/Recommendations": {
      "get": {
        "tags": [
          "MoviesService"
        ],
        "summary": "Gets movie recommendations",
        "description": "Requires authentication as user",
        "operationId": "getMoviesRecommendations",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "CategoryLimit",
            "description": "The max number of categories to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ItemLimit",
            "description": "The max number of items to return per category",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a RecommendationDto[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecommendationDto"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets movie recommendations"
    },
    "/MusicGenres/{Name}": {
      "get": {
        "tags": [
          "MusicGenresService"
        ],
        "summary": "Gets a music genre, by name",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Items by name",
          "url": "https://dev.emby.media/doc/restapi/Items-by-Name.html"
        },
        "operationId": "getMusicgenresByName",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "The genre name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto object.",
            "schema": {
              "$ref": "#/definitions/BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a music genre, by name"
    },
    "/MusicGenres/InstantMix": {
      "get": {
        "tags": [
          "InstantMixService"
        ],
        "summary": "Creates an instant playlist based on a music genre",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getMusicgenresInstantmix",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Creates an instant playlist based on a music genre"
    },
    "/Notifications/Types": {
      "get": {
        "tags": [
          "NotificationsService"
        ],
        "summary": "Gets notification types",
        "description": "Requires authentication as user",
        "operationId": "getNotificationsTypes",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a NotificationCategoryInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotificationCategoryInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets notification types"
    },
    "/Notifications/Admin": {
      "post": {
        "tags": [
          "NotificationsService"
        ],
        "summary": "Sends a notification to all admin users",
        "description": "Requires authentication as user",
        "operationId": "postNotificationsAdmin",
        "parameters": [
          {
            "in": "query",
            "name": "Name",
            "description": "The notification's name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Description",
            "description": "The notification's description",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageUrl",
            "description": "The notification's image url",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Url",
            "description": "The notification's info url",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Level",
            "description": "The notification level",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Sends a notification to all admin users"
    },
    "/Packages/Updates": {
      "get": {
        "tags": [
          "PackageService"
        ],
        "summary": "Gets available package updates for currently installed packages",
        "description": "Requires authentication as administrator",
        "operationId": "getPackagesUpdates",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "PackageType",
            "description": "Package type filter (System/UserInstalled)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a PackageVersionInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageVersionInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets available package updates for currently installed packages"
    },
    "/Packages/{Name}": {
      "get": {
        "tags": [
          "PackageService"
        ],
        "summary": "Gets a package, by name or assembly guid",
        "description": "Requires authentication as user",
        "operationId": "getPackagesByName",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "The name of the package",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AssemblyGuid",
            "description": "The guid of the associated assembly",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a PackageInfo object.",
            "schema": {
              "$ref": "#/definitions/PackageInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a package, by name or assembly guid"
    },
    "/Persons/{Name}": {
      "get": {
        "tags": [
          "PersonsService"
        ],
        "summary": "Gets a person, by name",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Items by name",
          "url": "https://dev.emby.media/doc/restapi/Items-by-Name.html"
        },
        "operationId": "getPersonsByName",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "The person name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto object.",
            "schema": {
              "$ref": "#/definitions/BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a person, by name"
    },
    "/Playback/BitrateTest": {
      "get": {
        "tags": [
          "MediaInfoService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getPlaybackBitratetest",
        "parameters": [
          {
            "in": "query",
            "name": "Size",
            "description": "Size",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Plugins/{Id}": {
      "delete": {
        "tags": [
          "PluginService"
        ],
        "summary": "Uninstalls a plugin",
        "description": "Requires authentication as administrator",
        "operationId": "deletePluginsById",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Plugin Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Uninstalls a plugin"
    },
    "/ScheduledTasks/{Id}": {
      "get": {
        "tags": [
          "ScheduledTaskService"
        ],
        "summary": "Gets a scheduled task, by Id",
        "description": "Requires authentication as administrator",
        "operationId": "getScheduledtasksById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a TaskInfo object.",
            "schema": {
              "$ref": "#/definitions/TaskInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a scheduled task, by Id"
    },
    "/Sessions/PlayQueue": {
      "get": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Gets a the current play queue from a session",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getSessionsPlayqueue",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Id",
            "description": "Optional. Filter by session id.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "Optional. Filter by device id.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a the current play queue from a session"
    },
    "/Sessions/Logout": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Reports that a session has ended",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Authentication",
          "url": "https://dev.emby.media/doc/restapi/User-Authentication.html"
        },
        "operationId": "postSessionsLogout",
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Reports that a session has ended"
    },
    "/Sessions/Capabilities": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Updates capabilities for a device",
        "description": "Requires authentication as user",
        "operationId": "postSessionsCapabilities",
        "parameters": [
          {
            "in": "query",
            "name": "Id",
            "description": "Session Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "PlayableMediaTypes",
            "description": "A list of playable media types, comma delimited. Audio, Video, Book, Game, Photo.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SupportedCommands",
            "description": "A list of supported remote control commands, comma delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SupportsMediaControl",
            "description": "Determines whether media can be played remotely.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SupportsSync",
            "description": "Determines whether sync is supported.",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Updates capabilities for a device"
    },
    "/Sessions/Playing": {
      "post": {
        "tags": [
          "PlaystateService"
        ],
        "summary": "Reports playback has started within a session",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Playback Check-ins",
          "url": "https://dev.emby.media/doc/restapi/Playback-Check-ins.html"
        },
        "operationId": "postSessionsPlaying",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "PlaybackStartInfo: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlaybackStartInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Reports playback has started within a session"
    },
    "/Shows/Missing": {
      "get": {
        "tags": [
          "TvShowsService"
        ],
        "summary": "Gets a list of missing episodes",
        "description": "Requires authentication as user",
        "operationId": "getShowsMissing",
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a list of missing episodes"
    },
    "/Shows/Upcoming": {
      "get": {
        "tags": [
          "TvShowsService"
        ],
        "summary": "Gets a list of upcoming episodes",
        "description": "Requires authentication as user",
        "operationId": "getShowsUpcoming",
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a list of upcoming episodes"
    },
    "/Shows/NextUp": {
      "get": {
        "tags": [
          "TvShowsService"
        ],
        "summary": "Gets a list of next up episodes",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getShowsNextup",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SeriesId",
            "description": "Optional. Filter by series id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a list of next up episodes"
    },
    "/Studios/{Name}": {
      "get": {
        "tags": [
          "StudiosService"
        ],
        "summary": "Gets a studio, by name",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Items by name",
          "url": "https://dev.emby.media/doc/restapi/Items-by-Name.html"
        },
        "operationId": "getStudiosByName",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "The studio name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto object.",
            "schema": {
              "$ref": "#/definitions/BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a studio, by name"
    },
    "/Sync/Targets": {
      "get": {
        "tags": [
          "SyncService"
        ],
        "summary": "Gets a list of available sync targets.",
        "description": "Requires authentication as user",
        "operationId": "getSyncTargets",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "UserId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<SyncTarget> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SyncTarget"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a list of available sync targets."
    },
    "/Sync/Jobs": {
      "get": {
        "tags": [
          "SyncService"
        ],
        "summary": "Gets sync jobs.",
        "description": "Requires authentication as user",
        "operationId": "getSyncJobs",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<SyncJob> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_SyncJob"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "SyncService"
        ],
        "summary": "Gets sync jobs.",
        "description": "Requires authentication as user",
        "operationId": "postSyncJobs",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SyncJobRequest: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SyncJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a SyncJobCreationResult object.",
            "schema": {
              "$ref": "#/definitions/SyncJobCreationResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets sync jobs."
    },
    "/Sync/JobItems": {
      "get": {
        "tags": [
          "SyncService"
        ],
        "summary": "Gets sync job items.",
        "description": "Requires authentication as user",
        "operationId": "getSyncJobitems",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "TargetId",
            "description": "TargetId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<SyncJobItem> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_SyncJobItem"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets sync job items."
    },
    "/Sync/Options": {
      "get": {
        "tags": [
          "SyncService"
        ],
        "summary": "Gets a list of available sync targets.",
        "description": "Requires authentication as user",
        "operationId": "getSyncOptions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "UserId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ItemIds",
            "description": "ItemIds",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "ParentId",
            "type": "string"
          },
          {
            "in": "query",
            "name": "TargetId",
            "description": "TargetId",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Category",
            "description": "Category"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a SyncDialogOptions object.",
            "schema": {
              "$ref": "#/definitions/SyncDialogOptions"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a list of available sync targets."
    },
    "/Sync/OfflineActions": {
      "post": {
        "tags": [
          "SyncService"
        ],
        "summary": "Reports an action that occurred while offline.",
        "description": "Requires authentication as user",
        "operationId": "postSyncOfflineactions",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List`1: ",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserAction"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Reports an action that occurred while offline."
    },
    "/Sync/Data": {
      "post": {
        "tags": [
          "SyncService"
        ],
        "summary": "Syncs data between device and server",
        "description": "Requires authentication as user",
        "operationId": "postSyncData",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "TargetId",
            "description": "TargetId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "SyncDataRequest: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SyncDataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a SyncDataResponse object.",
            "schema": {
              "$ref": "#/definitions/SyncDataResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Syncs data between device and server"
    },
    "/System/Configuration": {
      "get": {
        "tags": [
          "ConfigurationService"
        ],
        "summary": "Gets application configuration",
        "description": "Requires authentication as user",
        "operationId": "getSystemConfiguration",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ServerConfiguration object.",
            "schema": {
              "$ref": "#/definitions/ServerConfiguration"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "ConfigurationService"
        ],
        "summary": "Updates application configuration",
        "description": "Requires authentication as administrator",
        "operationId": "postSystemConfiguration",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ServerConfiguration: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServerConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets application configuration"
    },
    "/System/ReleaseNotes": {
      "get": {
        "tags": [
          "SystemService"
        ],
        "summary": "Gets release notes",
        "description": "Requires authentication as user",
        "operationId": "getSystemReleasenotes",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a PackageVersionInfo object.",
            "schema": {
              "$ref": "#/definitions/PackageVersionInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets release notes"
    },
    "/System/Ping": {
      "post": {
        "tags": [
          "SystemService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postSystemPing",
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "get": {
        "tags": [
          "SystemService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getSystemPing",
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/System/WakeOnLanInfo": {
      "get": {
        "tags": [
          "SystemService"
        ],
        "summary": "Gets wake on lan information",
        "description": "Requires authentication as user",
        "operationId": "getSystemWakeonlaninfo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a WakeOnLanInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WakeOnLanInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets wake on lan information"
    },
    "/System/Info": {
      "get": {
        "tags": [
          "SystemService"
        ],
        "summary": "Gets information about the server",
        "description": "Requires authentication as user",
        "operationId": "getSystemInfo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a SystemInfo object.",
            "schema": {
              "$ref": "#/definitions/SystemInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets information about the server"
    },
    "/System/Restart": {
      "post": {
        "tags": [
          "SystemService"
        ],
        "summary": "Restarts the application, if needed",
        "description": "Requires authentication as administrator",
        "operationId": "postSystemRestart",
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Restarts the application, if needed"
    },
    "/System/Shutdown": {
      "post": {
        "tags": [
          "SystemService"
        ],
        "summary": "Shuts down the application",
        "description": "Requires authentication as administrator",
        "operationId": "postSystemShutdown",
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Shuts down the application"
    },
    "/System/Endpoint": {
      "get": {
        "tags": [
          "SystemService"
        ],
        "summary": "Gets information about the request endpoint",
        "description": "Requires authentication as user",
        "operationId": "getSystemEndpoint",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a EndPointInfo object.",
            "schema": {
              "$ref": "#/definitions/Net.EndPointInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets information about the request endpoint"
    },
    "/UI/View": {
      "get": {
        "tags": [
          "GenericUIApiService"
        ],
        "summary": "Gets UI view data",
        "description": "Requires authentication as user",
        "operationId": "getUIView",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "PageId",
            "description": "Id of the page controller",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ClientLocale",
            "description": "Locale identifier of the client",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UIViewInfo object.",
            "schema": {
              "$ref": "#/definitions/UIViewInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets UI view data"
    },
    "/UI/Command": {
      "post": {
        "tags": [
          "GenericUIApiService"
        ],
        "summary": "Execute a command in the context of tv setup",
        "description": "Requires authentication as user",
        "operationId": "postUICommand",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RunUICommand",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunUICommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UIViewInfo object.",
            "schema": {
              "$ref": "#/definitions/UIViewInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Execute a command in the context of tv setup"
    },
    "/Users/Public": {
      "get": {
        "tags": [
          "UserService"
        ],
        "summary": "Gets a list of publicly visible users for display on a login screen.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Authentication",
          "url": "https://dev.emby.media/doc/restapi/User-Authentication.html"
        },
        "operationId": "getUsersPublic",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserDto[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserDto"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a list of publicly visible users for display on a login screen."
    },
    "/Users/Query": {
      "get": {
        "tags": [
          "UserService"
        ],
        "summary": "Gets a list of users",
        "description": "Requires authentication as administrator",
        "operationId": "getUsersQuery",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "IsHidden",
            "description": "Optional filter by IsHidden=true or false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsDisabled",
            "description": "Optional filter by IsDisabled=true or false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<UserDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_UserDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a list of users"
    },
    "/Users/Prefixes": {
      "get": {
        "tags": [
          "UserService"
        ],
        "summary": "Gets a list of users",
        "description": "Requires authentication as administrator",
        "operationId": "getUsersPrefixes",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "IsHidden",
            "description": "Optional filter by IsHidden=true or false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsDisabled",
            "description": "Optional filter by IsDisabled=true or false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a NameIdPair[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NameIdPair"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a list of users"
    },
    "/Users/ItemAccess": {
      "get": {
        "tags": [
          "UserService"
        ],
        "summary": "Gets a list of users",
        "description": "Requires authentication as user",
        "operationId": "getUsersItemaccess",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "IsHidden",
            "description": "Optional filter by IsHidden=true or false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsDisabled",
            "description": "Optional filter by IsDisabled=true or false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<UserDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_UserDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a list of users"
    },
    "/Users/{Id}": {
      "get": {
        "tags": [
          "UserService"
        ],
        "summary": "Gets a user by Id",
        "description": "Requires authentication as user",
        "operationId": "getUsersById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserDto object.",
            "schema": {
              "$ref": "#/definitions/UserDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "UserService"
        ],
        "summary": "Deletes a user",
        "description": "Requires authentication as administrator",
        "operationId": "deleteUsersById",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "Updates a user",
        "description": "Requires authentication as user",
        "operationId": "postUsersById",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "UserDto: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a user by Id"
    },
    "/Users/AuthenticateByName": {
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "Authenticates a user",
        "description": "Authenticate a user by nane and password. A 200 status code indicates success, while anything in the 400 or 500 range indicates failure\n---\nRequires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Authentication",
          "url": "https://dev.emby.media/doc/restapi/User-Authentication.html"
        },
        "operationId": "postUsersAuthenticatebyname",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Emby-Authorization",
            "description": "The authorization header can be either named 'Authorization' or 'X-Emby-Authorization'.   \nIt must be of the following schema:    \nEmby UserId=\"(guid)\", Client=\"(string)\", Device=\"(string)\", DeviceId=\"(string)\", Version=\"string\", Token=\"(string)\"    \nPlease consult the documentation for further details.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "AuthenticateUserByName",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticateUserByName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a AuthenticationResult object.",
            "schema": {
              "$ref": "#/definitions/Authentication.AuthenticationResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Authenticates a user",
      "x-description": "Authenticate a user by nane and password. A 200 status code indicates success, while anything in the 400 or 500 range indicates failure"
    },
    "/Users/New": {
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "Creates a user",
        "description": "Requires authentication as administrator",
        "operationId": "postUsersNew",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "CreateUserByName",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserByName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserDto object.",
            "schema": {
              "$ref": "#/definitions/UserDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Creates a user"
    },
    "/Users/ForgotPassword": {
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "Initiates the forgot password process for a local user",
        "description": "Requires authentication as user",
        "operationId": "postUsersForgotpassword",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ForgotPassword",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForgotPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ForgotPasswordResult object.",
            "schema": {
              "$ref": "#/definitions/ForgotPasswordResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Initiates the forgot password process for a local user"
    },
    "/Videos/MergeVersions": {
      "post": {
        "tags": [
          "VideosService"
        ],
        "summary": "Merges videos into a single record",
        "description": "Requires authentication as administrator",
        "operationId": "postVideosMergeversions",
        "parameters": [
          {
            "in": "query",
            "name": "Ids",
            "description": "Item id list. This allows multiple, comma delimited.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Merges videos into a single record"
    },
    "/Videos/ActiveEncodings": {
      "delete": {
        "tags": [
          "HlsSegmentService"
        ],
        "description": "Requires authentication as user",
        "operationId": "deleteVideosActiveencodings",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "PlaySessionId",
            "description": "The play session id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/web/ConfigurationPage": {
      "get": {
        "tags": [
          "WebAppService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getWebConfigurationpage",
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/web/ConfigurationPages": {
      "get": {
        "tags": [
          "WebAppService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getWebConfigurationpages",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<ConfigurationPageInfo> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Api.ConfigurationPageInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/web/strings": {
      "get": {
        "tags": [
          "WebAppService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getWebStrings",
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/web/stringset": {
      "get": {
        "tags": [
          "WebAppService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getWebStringset",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a String[] object.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Albums/{Id}/InstantMix": {
      "get": {
        "tags": [
          "InstantMixService"
        ],
        "summary": "Creates an instant playlist based on a given album",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getAlbumsByIdInstantmix",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Creates an instant playlist based on a given album"
    },
    "/Albums/{Id}/Similar": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Finds albums similar to a given album.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getAlbumsByIdSimilar",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Finds albums similar to a given album."
    },
    "/Artists/{Id}/Similar": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Finds albums similar to a given album.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getArtistsByIdSimilar",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Finds albums similar to a given album."
    },
    "/Audio/{Id}/universal.{Container}": {
      "get": {
        "tags": [
          "UniversalAudioService"
        ],
        "summary": "Gets an audio stream",
        "description": "Requires authentication as user",
        "operationId": "getAudioByIdUniversalByContainer",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "UniversalAudioService"
        ],
        "summary": "Gets an audio stream",
        "description": "Requires authentication as user",
        "operationId": "headAudioByIdUniversalByContainer",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets an audio stream"
    },
    "/Audio/{Id}/universal": {
      "get": {
        "tags": [
          "UniversalAudioService"
        ],
        "summary": "Gets an audio stream",
        "description": "Requires authentication as user",
        "operationId": "getAudioByIdUniversal",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "UniversalAudioService"
        ],
        "summary": "Gets an audio stream",
        "description": "Requires authentication as user",
        "operationId": "headAudioByIdUniversal",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets an audio stream"
    },
    "/Audio/{Id}/stream.{Container}": {
      "get": {
        "tags": [
          "AudioService"
        ],
        "summary": "Gets an audio stream",
        "description": "Requires authentication as user",
        "operationId": "getAudioByIdStreamByContainer",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "AudioService"
        ],
        "summary": "Gets an audio stream",
        "description": "Requires authentication as user",
        "operationId": "headAudioByIdStreamByContainer",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets an audio stream"
    },
    "/Audio/{Id}/stream": {
      "get": {
        "tags": [
          "AudioService"
        ],
        "summary": "Gets an audio stream",
        "description": "Requires authentication as user",
        "operationId": "getAudioByIdStream",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "AudioService"
        ],
        "summary": "Gets an audio stream",
        "description": "Requires authentication as user",
        "operationId": "headAudioByIdStream",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets an audio stream"
    },
    "/Audio/{Id}/{StreamFileName}": {
      "get": {
        "tags": [
          "AudioService"
        ],
        "summary": "Gets an audio stream",
        "description": "Requires authentication as user",
        "operationId": "getAudioByIdByStreamfilename",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "StreamFileName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "AudioService"
        ],
        "summary": "Gets an audio stream",
        "description": "Requires authentication as user",
        "operationId": "headAudioByIdByStreamfilename",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "StreamFileName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets an audio stream"
    },
    "/Audio/{Id}/master.m3u8": {
      "get": {
        "tags": [
          "DynamicHlsService"
        ],
        "summary": "Gets an audio stream using HTTP live streaming.",
        "description": "Requires authentication as user",
        "operationId": "getAudioByIdMasterM3u8",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "DynamicHlsService"
        ],
        "summary": "Gets an audio stream using HTTP live streaming.",
        "description": "Requires authentication as user",
        "operationId": "headAudioByIdMasterM3u8",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets an audio stream using HTTP live streaming."
    },
    "/Audio/{Id}/live.m3u8": {
      "get": {
        "tags": [
          "DynamicHlsService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getAudioByIdLiveM3u8",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Audio/{Id}/main.m3u8": {
      "get": {
        "tags": [
          "DynamicHlsService"
        ],
        "summary": "Gets an audio stream using HTTP live streaming.",
        "description": "Requires authentication as user",
        "operationId": "getAudioByIdMainM3u8",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets an audio stream using HTTP live streaming."
    },
    "/Auth/Keys/{Key}": {
      "delete": {
        "tags": [
          "SessionsService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "deleteAuthKeysByKey",
        "parameters": [
          {
            "in": "path",
            "name": "Key",
            "description": "Auth Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/Collections/{Id}/Items": {
      "post": {
        "tags": [
          "CollectionService"
        ],
        "summary": "Adds items to a collection",
        "description": "Requires authentication as user",
        "operationId": "postCollectionsByIdItems",
        "parameters": [
          {
            "in": "query",
            "name": "Ids",
            "description": "Item id, comma delimited",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "CollectionService"
        ],
        "summary": "Removes items from a collection",
        "description": "Requires authentication as user",
        "operationId": "deleteCollectionsByIdItems",
        "parameters": [
          {
            "in": "query",
            "name": "Ids",
            "description": "Item id, comma delimited",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Adds items to a collection"
    },
    "/Dlna/{UuId}/description.xml": {
      "get": {
        "tags": [
          "DlnaServerService"
        ],
        "summary": "Gets dlna server info",
        "description": "No authentication required",
        "operationId": "getDlnaByUuidDescriptionXml",
        "parameters": [
          {
            "in": "path",
            "name": "UuId",
            "description": "Server UuId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Gets dlna server info"
    },
    "/Dlna/{UuId}/description": {
      "get": {
        "tags": [
          "DlnaServerService"
        ],
        "summary": "Gets dlna server info",
        "description": "No authentication required",
        "operationId": "getDlnaByUuidDescription",
        "parameters": [
          {
            "in": "path",
            "name": "UuId",
            "description": "Server UuId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Gets dlna server info"
    },
    "/Dlna/icons/{Filename}": {
      "get": {
        "tags": [
          "DlnaServerService"
        ],
        "summary": "Gets a server icon",
        "description": "No authentication required",
        "operationId": "getDlnaIconsByFilename",
        "parameters": [
          {
            "in": "query",
            "name": "UuId",
            "description": "Server UuId",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Filename",
            "description": "The icon filename",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Gets a server icon"
    },
    "/Dlna/Profiles/{Id}": {
      "get": {
        "tags": [
          "DlnaService"
        ],
        "summary": "Gets a single profile",
        "description": "Requires authentication as administrator",
        "operationId": "getDlnaProfilesById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Profile Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a DlnaProfile object.",
            "schema": {
              "$ref": "#/definitions/Dlna.Profiles.DlnaProfile"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "delete": {
        "tags": [
          "DlnaService"
        ],
        "summary": "Deletes a profile",
        "description": "Requires authentication as administrator",
        "operationId": "deleteDlnaProfilesById",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Profile Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "post": {
        "tags": [
          "DlnaService"
        ],
        "summary": "Updates a profile",
        "description": "Requires authentication as administrator",
        "operationId": "postDlnaProfilesById",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "DlnaProfile: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dlna.Profiles.DlnaProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a single profile"
    },
    "/Dlna/Profiles/Default": {
      "get": {
        "tags": [
          "DlnaService"
        ],
        "summary": "Gets the default profile",
        "description": "Requires authentication as administrator",
        "operationId": "getDlnaProfilesDefault",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a DlnaProfile object.",
            "schema": {
              "$ref": "#/definitions/Dlna.Profiles.DlnaProfile"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets the default profile"
    },
    "/Encoding/CodecInformation/Video": {
      "get": {
        "tags": [
          "EncodingInfoService"
        ],
        "summary": "Gets details about available video encoders and decoders",
        "description": "Requires authentication as administrator",
        "operationId": "getEncodingCodecinformationVideo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a VideoCodecBase[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VideoCodecBase"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets details about available video encoders and decoders"
    },
    "/Encoding/CodecConfiguration/Defaults": {
      "get": {
        "tags": [
          "EncodingInfoService"
        ],
        "summary": "Gets default codec configurations",
        "description": "Requires authentication as administrator",
        "operationId": "getEncodingCodecconfigurationDefaults",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a CodecConfiguration[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodecConfiguration"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets default codec configurations"
    },
    "/Games/{Id}/Similar": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Finds games similar to a given game.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getGamesByIdSimilar",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Finds games similar to a given game."
    },
    "/Items/{Id}/ExternalIdInfos": {
      "get": {
        "tags": [
          "ItemLookupService"
        ],
        "summary": "Gets external id infos for an item",
        "description": "Requires authentication as administrator",
        "operationId": "getItemsByIdExternalidinfos",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<ExternalIdInfo> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExternalIdInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets external id infos for an item"
    },
    "/Items/RemoteSearch/Trailer": {
      "post": {
        "tags": [
          "ItemLookupService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postItemsRemotesearchTrailer",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RemoteSearchQuery`1: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoteSearchQuery_TrailerInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<RemoteSearchResult> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RemoteSearchResult"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/RemoteSearch/Book": {
      "post": {
        "tags": [
          "ItemLookupService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postItemsRemotesearchBook",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RemoteSearchQuery`1: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoteSearchQuery_BookInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<RemoteSearchResult> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RemoteSearchResult"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/RemoteSearch/Movie": {
      "post": {
        "tags": [
          "ItemLookupService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postItemsRemotesearchMovie",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RemoteSearchQuery`1: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoteSearchQuery_MovieInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<RemoteSearchResult> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RemoteSearchResult"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/RemoteSearch/Series": {
      "post": {
        "tags": [
          "ItemLookupService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postItemsRemotesearchSeries",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RemoteSearchQuery`1: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoteSearchQuery_SeriesInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<RemoteSearchResult> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RemoteSearchResult"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/RemoteSearch/Game": {
      "post": {
        "tags": [
          "ItemLookupService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postItemsRemotesearchGame",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RemoteSearchQuery`1: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoteSearchQuery_GameInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<RemoteSearchResult> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RemoteSearchResult"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/RemoteSearch/BoxSet": {
      "post": {
        "tags": [
          "ItemLookupService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postItemsRemotesearchBoxset",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RemoteSearchQuery`1: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoteSearchQuery_ItemLookupInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<RemoteSearchResult> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RemoteSearchResult"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/RemoteSearch/MusicVideo": {
      "post": {
        "tags": [
          "ItemLookupService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postItemsRemotesearchMusicvideo",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RemoteSearchQuery`1: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoteSearchQuery_MusicVideoInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<RemoteSearchResult> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RemoteSearchResult"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/RemoteSearch/Person": {
      "post": {
        "tags": [
          "ItemLookupService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postItemsRemotesearchPerson",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RemoteSearchQuery`1: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoteSearchQuery_PersonLookupInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<RemoteSearchResult> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RemoteSearchResult"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/Items/RemoteSearch/MusicAlbum": {
      "post": {
        "tags": [
          "ItemLookupService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postItemsRemotesearchMusicalbum",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RemoteSearchQuery`1: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoteSearchQuery_AlbumInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<RemoteSearchResult> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RemoteSearchResult"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/RemoteSearch/MusicArtist": {
      "post": {
        "tags": [
          "ItemLookupService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postItemsRemotesearchMusicartist",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RemoteSearchQuery`1: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoteSearchQuery_ArtistInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<RemoteSearchResult> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RemoteSearchResult"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/RemoteSearch/Image": {
      "get": {
        "tags": [
          "ItemLookupService"
        ],
        "summary": "Gets a remote image",
        "description": "Requires authentication as administrator",
        "operationId": "getItemsRemotesearchImage",
        "parameters": [
          {
            "in": "query",
            "name": "ImageUrl",
            "description": "The image url",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ProviderName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a remote image"
    },
    "/Items/Metadata/Reset": {
      "post": {
        "tags": [
          "ItemLookupService"
        ],
        "summary": "Resets metadata for one or more items",
        "description": "Requires authentication as administrator",
        "operationId": "postItemsMetadataReset",
        "parameters": [
          {
            "in": "query",
            "name": "ItemIds",
            "description": "The item ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Resets metadata for one or more items"
    },
    "/Items/{Id}/Refresh": {
      "post": {
        "tags": [
          "ItemRefreshService"
        ],
        "summary": "Refreshes metadata for an item",
        "description": "Requires authentication as user",
        "operationId": "postItemsByIdRefresh",
        "parameters": [
          {
            "in": "query",
            "name": "Recursive",
            "description": "Indicates if the refresh should occur recursively.",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MetadataRefreshMode",
            "description": "Specifies the metadata refresh mode"
          },
          {
            "in": "query",
            "name": "ImageRefreshMode",
            "description": "Specifies the image refresh mode"
          },
          {
            "in": "query",
            "name": "ReplaceAllMetadata",
            "description": "Determines if metadata should be replaced. Only applicable if mode is FullRefresh",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ReplaceAllImages",
            "description": "Determines if images should be replaced. Only applicable if mode is FullRefresh",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Refreshes metadata for an item"
    },
    "/Items/{ItemId}/MetadataEditor": {
      "get": {
        "tags": [
          "ItemUpdateService"
        ],
        "summary": "Gets metadata editor info for an item",
        "description": "Requires authentication as administrator",
        "operationId": "getItemsByItemidMetadataeditor",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ItemId",
            "description": "The id of the item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a MetadataEditorInfo object.",
            "schema": {
              "$ref": "#/definitions/MetadataEditorInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets metadata editor info for an item"
    },
    "/Items/{Id}/MakePublic": {
      "post": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Makes an item public to all users",
        "description": "Requires authentication as user",
        "operationId": "postItemsByIdMakepublic",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Makes an item public to all users"
    },
    "/Items/{Id}/MakePrivate": {
      "post": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Makes an item private",
        "description": "Requires authentication as user",
        "operationId": "postItemsByIdMakeprivate",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Makes an item private"
    },
    "/Items/Shared/Leave": {
      "post": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Leaves a shared item",
        "description": "Requires authentication as user",
        "operationId": "postItemsSharedLeave",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LeaveSharedItems",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLibrary.LeaveSharedItems"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Leaves a shared item"
    },
    "/Items/{Id}/InstantMix": {
      "get": {
        "tags": [
          "InstantMixService"
        ],
        "summary": "Creates an instant playlist based on a given item",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getItemsByIdInstantmix",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Creates an instant playlist based on a given item"
    },
    "/Items/{Id}/DeleteInfo": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Gets delete info for an item",
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdDeleteinfo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a DeleteInfo object.",
            "schema": {
              "$ref": "#/definitions/Library.DeleteInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets delete info for an item"
    },
    "/Items/{Id}/Similar": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Gets similar items",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getItemsByIdSimilar",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets similar items"
    },
    "/Items/{Id}/Download": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Downloads item media",
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdDownload",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Downloads item media"
    },
    "/Items/{Id}/File": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Gets the original file of an item",
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdFile",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets the original file of an item"
    },
    "/Items/{Id}/Ancestors": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Gets all parents of an item",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getItemsByIdAncestors",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BaseItemDto"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets all parents of an item"
    },
    "/Items/{Id}/CriticReviews": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Gets critic reviews for an item",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getItemsByIdCriticreviews",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets critic reviews for an item"
    },
    "/Items/{Id}/Delete": {
      "post": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Deletes an item from the library and file system",
        "description": "Requires authentication as user",
        "operationId": "postItemsByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deletes an item from the library and file system"
    },
    "/Items/{Id}/ThemeMedia": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Gets theme videos and songs for an item",
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdThememedia",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "InheritFromParent",
            "description": "Determines whether or not parent items should be searched for theme media.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a AllThemeMediaResult object.",
            "schema": {
              "$ref": "#/definitions/AllThemeMediaResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets theme videos and songs for an item"
    },
    "/Items/{Id}/ThemeSongs": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Gets theme songs for an item",
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdThemesongs",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "InheritFromParent",
            "description": "Determines whether or not parent items should be searched for theme media.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ThemeMediaResult object.",
            "schema": {
              "$ref": "#/definitions/ThemeMediaResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets theme songs for an item"
    },
    "/Items/{Id}/ThemeVideos": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Gets theme videos for an item",
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdThemevideos",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "InheritFromParent",
            "description": "Determines whether or not parent items should be searched for theme media.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ThemeMediaResult object.",
            "schema": {
              "$ref": "#/definitions/ThemeMediaResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets theme videos for an item"
    },
    "/Items/{Id}/Images": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "summary": "Gets information about an item's images",
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdImages",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<ImageInfo> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImageInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets information about an item's images"
    },
    "/Items/{Id}/RemoteImages": {
      "get": {
        "tags": [
          "RemoteImageService"
        ],
        "summary": "Gets available remote images for an item",
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdRemoteimages",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Type",
            "description": "The image type"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ProviderName",
            "description": "Optional. The image provider to use",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeAllLanguages",
            "description": "Optional.",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a RemoteImageResult object.",
            "schema": {
              "$ref": "#/definitions/RemoteImageResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets available remote images for an item"
    },
    "/Items/{Id}/ThumbnailSet": {
      "get": {
        "tags": [
          "BifService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdThumbnailset",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Width",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ThumbnailSetInfo object.",
            "schema": {
              "$ref": "#/definitions/RokuMetadata.Api.ThumbnailSetInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/{Id}/PlaybackInfo": {
      "get": {
        "tags": [
          "MediaInfoService"
        ],
        "summary": "Gets live playback media info for an item",
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdPlaybackinfo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a PlaybackInfoResponse object.",
            "schema": {
              "$ref": "#/definitions/PlaybackInfoResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "MediaInfoService"
        ],
        "summary": "Gets live playback media info for an item",
        "description": "Requires authentication as user",
        "operationId": "postItemsByIdPlaybackinfo",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "PlaybackInfoRequest: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlaybackInfoRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a PlaybackInfoResponse object.",
            "schema": {
              "$ref": "#/definitions/PlaybackInfoResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets live playback media info for an item"
    },
    "/Library/Series/Added": {
      "post": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Deprecated. Use /Library/Media/Updated",
        "description": "Requires authentication as user",
        "operationId": "postLibrarySeriesAdded",
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deprecated. Use /Library/Media/Updated"
    },
    "/Library/Series/Updated": {
      "post": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Deprecated. Use /Library/Media/Updated",
        "description": "Requires authentication as user",
        "operationId": "postLibrarySeriesUpdated",
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deprecated. Use /Library/Media/Updated"
    },
    "/Library/Media/Updated": {
      "post": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Reports that new movies have been added by an external source",
        "description": "Requires authentication as user",
        "operationId": "postLibraryMediaUpdated",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "PostUpdatedMedia",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Library.PostUpdatedMedia"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Reports that new movies have been added by an external source"
    },
    "/Library/Movies/Added": {
      "post": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Deprecated. Use /Library/Media/Updated",
        "description": "Requires authentication as user",
        "operationId": "postLibraryMoviesAdded",
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deprecated. Use /Library/Media/Updated"
    },
    "/Library/Movies/Updated": {
      "post": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Deprecated. Use /Library/Media/Updated",
        "description": "Requires authentication as user",
        "operationId": "postLibraryMoviesUpdated",
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deprecated. Use /Library/Media/Updated"
    },
    "/Library/VirtualFolders/Query": {
      "get": {
        "tags": [
          "LibraryStructureService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getLibraryVirtualfoldersQuery",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<VirtualFolderInfo> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_VirtualFolderInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Library/VirtualFolders/LibraryOptions": {
      "post": {
        "tags": [
          "LibraryStructureService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postLibraryVirtualfoldersLibraryoptions",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "UpdateLibraryOptions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Library.UpdateLibraryOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/Library/VirtualFolders/Name": {
      "post": {
        "tags": [
          "LibraryStructureService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postLibraryVirtualfoldersName",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RenameVirtualFolder",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Library.RenameVirtualFolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/Library/VirtualFolders/Delete": {
      "post": {
        "tags": [
          "LibraryStructureService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postLibraryVirtualfoldersDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RemoveVirtualFolder",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Library.RemoveVirtualFolder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/Library/VirtualFolders/Paths": {
      "post": {
        "tags": [
          "LibraryStructureService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postLibraryVirtualfoldersPaths",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "AddMediaPath",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Library.AddMediaPath"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "delete": {
        "tags": [
          "LibraryStructureService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "deleteLibraryVirtualfoldersPaths",
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/LiveTv/Programs/{Id}": {
      "get": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Gets a live tv program",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getLivetvProgramsById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto object.",
            "schema": {
              "$ref": "#/definitions/BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a live tv program"
    },
    "/LiveTv/TunerHosts/Types": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getLivetvTunerhostsTypes",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<NameIdPair> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NameIdPair"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/LiveTv/Manage/Channels": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets the channel management list",
        "description": "Requires authentication as administrator",
        "operationId": "getLivetvManageChannels",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Name, StartDate",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<ChannelManagementInfo> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_ChannelManagementInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets the channel management list"
    },
    "/LiveTv/ChannelTags/Prefixes": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets live tv channel tag prefixes",
        "description": "Requires authentication as user",
        "operationId": "getLivetvChanneltagsPrefixes",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a TagItem[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Api.TagItem"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets live tv channel tag prefixes"
    },
    "/LiveTv/Recordings/Folders": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets recording folders",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getLivetvRecordingsFolders",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional filter by user and attach user data.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BaseItemDto"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets recording folders"
    },
    "/LiveTv/Tuners/Discvover": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getLivetvTunersDiscvover",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<TunerHostInfo> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LiveTv.TunerHostInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/LiveTv/ListingProviders/Default": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getLivetvListingprovidersDefault",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ListingsProviderInfo object.",
            "schema": {
              "$ref": "#/definitions/LiveTv.ListingsProviderInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/LiveTv/ListingProviders/Delete": {
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Deletes a listing provider",
        "description": "Requires authentication as administrator",
        "operationId": "postLivetvListingprovidersDelete",
        "parameters": [
          {
            "in": "query",
            "name": "Id",
            "description": "Provider id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Deletes a listing provider"
    },
    "/LiveTv/TunerHosts/Delete": {
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Deletes a tuner host",
        "description": "Requires authentication as administrator",
        "operationId": "postLivetvTunerhostsDelete",
        "parameters": [
          {
            "in": "query",
            "name": "Id",
            "description": "Tuner host id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Deletes a tuner host"
    },
    "/LiveTv/ListingProviders/Lineups": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets available lineups",
        "description": "Requires authentication as administrator",
        "operationId": "getLivetvListingprovidersLineups",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Id",
            "description": "Provider id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Type",
            "description": "Provider Type",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Location",
            "description": "Location",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Country",
            "description": "Country",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<NameIdPair> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NameIdPair"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets available lineups"
    },
    "/LiveTv/Channels/{Id}": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets a live tv channel",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getLivetvChannelsById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Channel Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional attach user data.",
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto object.",
            "schema": {
              "$ref": "#/definitions/BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a live tv channel"
    },
    "/LiveTv/Programs/Recommended": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets available live tv epgs..",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getLivetvProgramsRecommended",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional filter by user id.",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "IsAiring",
            "description": "Optional. Filter by programs that are currently airing, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasAired",
            "description": "Optional. Filter by programs that have completed airing, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "GenreIds",
            "description": "The genres to return guide information for.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets available live tv epgs.."
    },
    "/LiveTv/Recordings/Series": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets live tv recordings",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getLivetvRecordingsSeries",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets live tv recordings"
    },
    "/LiveTv/Recordings/{Id}": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets a live tv recording",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getLivetvRecordingsById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Recording Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional attach user data.",
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto object.",
            "schema": {
              "$ref": "#/definitions/BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Deletes a live tv recording",
        "description": "Requires authentication as user",
        "operationId": "deleteLivetvRecordingsById",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Recording Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a live tv recording"
    },
    "/LiveTv/Timers/{Id}": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets a live tv timer",
        "description": "Requires authentication as user",
        "operationId": "getLivetvTimersById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Timer Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a TimerInfoDto object.",
            "schema": {
              "$ref": "#/definitions/LiveTv.TimerInfoDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Cancels a live tv timer",
        "description": "Requires authentication as user",
        "operationId": "deleteLivetvTimersById",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Timer Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Updates a live tv timer",
        "description": "Requires authentication as user",
        "operationId": "postLivetvTimersById",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "TimerInfoDto: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiveTv.TimerInfoDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a live tv timer"
    },
    "/LiveTv/SeriesTimers/{Id}": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets a live tv series timer",
        "description": "Requires authentication as user",
        "operationId": "getLivetvSeriestimersById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Timer Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a TimerInfoDto object.",
            "schema": {
              "$ref": "#/definitions/LiveTv.TimerInfoDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Cancels a live tv series timer",
        "description": "Requires authentication as user",
        "operationId": "deleteLivetvSeriestimersById",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Timer Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Updates a live tv series timer",
        "description": "Requires authentication as user",
        "operationId": "postLivetvSeriestimersById",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "SeriesTimerInfo: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiveTv.SeriesTimerInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a live tv series timer"
    },
    "/LiveTv/Timers/Defaults": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets default values for a new timer",
        "description": "Requires authentication as user",
        "operationId": "getLivetvTimersDefaults",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ProgramId",
            "description": "Optional, to attach default values based on a program.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a SeriesTimerInfoDto object.",
            "schema": {
              "$ref": "#/definitions/LiveTv.SeriesTimerInfoDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets default values for a new timer"
    },
    "/LiveTv/Recordings/Groups": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets live tv recording groups",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getLivetvRecordingsGroups",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets live tv recording groups"
    },
    "/LiveTv/ListingProviders/Available": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets listing provider",
        "description": "Requires authentication as administrator",
        "operationId": "getLivetvListingprovidersAvailable",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a ListingProviderTypeInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Api.ListingProviderTypeInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets listing provider"
    },
    "/Movies/{Id}/Similar": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Finds movies and trailers similar to a given movie.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getMoviesByIdSimilar",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Finds movies and trailers similar to a given movie."
    },
    "/MusicGenres/{Name}/InstantMix": {
      "get": {
        "tags": [
          "InstantMixService"
        ],
        "summary": "Creates an instant playlist based on a music genre",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getMusicgenresByNameInstantmix",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "The genre name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Creates an instant playlist based on a music genre"
    },
    "/Notifications/Services/Test": {
      "post": {
        "tags": [
          "UserNotificationsService"
        ],
        "summary": "Sends a test notification",
        "description": "Requires authentication as user",
        "operationId": "postNotificationsServicesTest",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "UserNotificationInfo: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserNotificationInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Sends a test notification"
    },
    "/Notifications/Services/Defaults": {
      "get": {
        "tags": [
          "UserNotificationsService"
        ],
        "summary": "Gets default notification info",
        "description": "Requires authentication as user",
        "operationId": "getNotificationsServicesDefaults",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserNotificationInfo object.",
            "schema": {
              "$ref": "#/definitions/UserNotificationInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets default notification info"
    },
    "/Packages/Installed/{Name}": {
      "post": {
        "tags": [
          "PackageService"
        ],
        "summary": "Installs a package",
        "description": "Requires authentication as administrator",
        "operationId": "postPackagesInstalledByName",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Package name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AssemblyGuid",
            "description": "Guid of the associated assembly",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Version",
            "description": "Optional version. Defaults to latest version.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UpdateClass",
            "description": "Optional update class (Dev, Beta, Release). Defaults to Release."
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Installs a package"
    },
    "/Packages/Installing/{Id}": {
      "delete": {
        "tags": [
          "PackageService"
        ],
        "summary": "Cancels a package installation",
        "description": "Requires authentication as administrator",
        "operationId": "deletePackagesInstallingById",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Installation Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Cancels a package installation"
    },
    "/Playlists/{Id}/AddToPlaylistInfo": {
      "get": {
        "tags": [
          "PlaylistService"
        ],
        "summary": "Gets add to playlist info",
        "description": "Requires authentication as user",
        "operationId": "getPlaylistsByIdAddtoplaylistinfo",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Item id, comma delimited",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a GetAddToPlaylistInfo object.",
            "schema": { }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets add to playlist info"
    },
    "/Playlists/{Id}/Items": {
      "post": {
        "tags": [
          "PlaylistService"
        ],
        "summary": "Adds items to a playlist",
        "description": "Requires authentication as user",
        "operationId": "postPlaylistsByIdItems",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Item id, comma delimited",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a AddToPlaylistResult object.",
            "schema": {
              "$ref": "#/definitions/Playlists.AddToPlaylistResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "PlaylistService"
        ],
        "summary": "Removes items from a playlist",
        "description": "Requires authentication as user",
        "operationId": "deletePlaylistsByIdItems",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "EntryIds",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "get": {
        "tags": [
          "PlaylistService"
        ],
        "summary": "Gets the original items of a playlist",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getPlaylistsByIdItems",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Adds items to a playlist"
    },
    "/Playlists/{Id}/InstantMix": {
      "get": {
        "tags": [
          "InstantMixService"
        ],
        "summary": "Creates an instant playlist based on a given playlist",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getPlaylistsByIdInstantmix",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Creates an instant playlist based on a given playlist"
    },
    "/Plugins/{Id}/Thumb": {
      "get": {
        "tags": [
          "PluginService"
        ],
        "summary": "Gets a plugin thumb image",
        "description": "Requires authentication as user",
        "operationId": "getPluginsByIdThumb",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Plugin Id",
            "required": true,
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a plugin thumb image"
    },
    "/Plugins/{Id}/Configuration": {
      "get": {
        "tags": [
          "PluginService"
        ],
        "summary": "Gets a plugin's configuration",
        "description": "Requires authentication as administrator",
        "operationId": "getPluginsByIdConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Plugin Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "post": {
        "tags": [
          "PluginService"
        ],
        "summary": "Updates a plugin's configuration",
        "description": "Requires authentication as administrator",
        "operationId": "postPluginsByIdConfiguration",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Plugin Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a plugin's configuration"
    },
    "/Plugins/{Id}/Delete": {
      "post": {
        "tags": [
          "PluginService"
        ],
        "summary": "Uninstalls a plugin",
        "description": "Requires authentication as administrator",
        "operationId": "postPluginsByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Plugin Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Uninstalls a plugin"
    },
    "/ScheduledTasks/Running/{Id}": {
      "post": {
        "tags": [
          "ScheduledTaskService"
        ],
        "summary": "Starts a scheduled task",
        "description": "Requires authentication as administrator",
        "operationId": "postScheduledtasksRunningById",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "delete": {
        "tags": [
          "ScheduledTaskService"
        ],
        "summary": "Stops a scheduled task",
        "description": "Requires authentication as administrator",
        "operationId": "deleteScheduledtasksRunningById",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Starts a scheduled task"
    },
    "/ScheduledTasks/{Id}/Triggers": {
      "post": {
        "tags": [
          "ScheduledTaskService"
        ],
        "summary": "Updates the triggers for a scheduled task",
        "description": "Requires authentication as administrator",
        "operationId": "postScheduledtasksByIdTriggers",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "List`1: ",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskTriggerInfo"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Updates the triggers for a scheduled task"
    },
    "/Sessions/{Id}/Viewing": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Instructs a session to browse to an item or view",
        "description": "Requires authentication as user",
        "operationId": "postSessionsByIdViewing",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Session Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ItemType",
            "description": "The type of item to browse to.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ItemId",
            "description": "The Id of the item.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ItemName",
            "description": "The name of the item.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Instructs a session to browse to an item or view"
    },
    "/Sessions/{Id}/Message": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Issues a command to a client to display a message to the user",
        "description": "Requires authentication as user",
        "operationId": "postSessionsByIdMessage",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Session Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Text",
            "description": "The message text.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Header",
            "description": "The message header.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "TimeoutMs",
            "description": "The message timeout. If omitted the user will have to confirm viewing the message.",
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Issues a command to a client to display a message to the user"
    },
    "/Sessions/{Id}/Playing": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Instructs a session to play an item",
        "description": "Requires authentication as user",
        "operationId": "postSessionsByIdPlaying",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Session Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ItemIds",
            "description": "The ids of the items to play, comma delimited",
            "required": true,
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "query",
            "name": "StartPositionTicks",
            "description": "The starting position of the first item.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "PlayCommand",
            "description": "The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "PlayRequest: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlayRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Instructs a session to play an item"
    },
    "/Sessions/{Id}/Command": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Issues a system command to a client",
        "description": "Requires authentication as user",
        "operationId": "postSessionsByIdCommand",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Session Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "GeneralCommand: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeneralCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Issues a system command to a client"
    },
    "/Sessions/Capabilities/Full": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Updates capabilities for a device",
        "description": "Requires authentication as user",
        "operationId": "postSessionsCapabilitiesFull",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Id",
            "description": "Session Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ClientCapabilities: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientCapabilities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Updates capabilities for a device"
    },
    "/Sessions/Playing/Progress": {
      "post": {
        "tags": [
          "PlaystateService"
        ],
        "summary": "Reports playback progress within a session",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Playback Check-ins",
          "url": "https://dev.emby.media/doc/restapi/Playback-Check-ins.html"
        },
        "operationId": "postSessionsPlayingProgress",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "PlaybackProgressInfo: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlaybackProgressInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Reports playback progress within a session"
    },
    "/Sessions/Playing/Ping": {
      "post": {
        "tags": [
          "PlaystateService"
        ],
        "summary": "Pings a playback session",
        "description": "Requires authentication as user",
        "operationId": "postSessionsPlayingPing",
        "parameters": [
          {
            "in": "query",
            "name": "PlaySessionId",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Pings a playback session"
    },
    "/Sessions/Playing/Stopped": {
      "post": {
        "tags": [
          "PlaystateService"
        ],
        "summary": "Reports playback has stopped within a session",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Playback Check-ins",
          "url": "https://dev.emby.media/doc/restapi/Playback-Check-ins.html"
        },
        "operationId": "postSessionsPlayingStopped",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "PlaybackStopInfo: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlaybackStopInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Reports playback has stopped within a session"
    },
    "/Shows/{Id}/Seasons": {
      "get": {
        "tags": [
          "TvShowsService"
        ],
        "summary": "Gets seasons for a tv series",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getShowsByIdSeasons",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "The series id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsSpecialSeason",
            "description": "Optional. Filter by special season.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets seasons for a tv series"
    },
    "/Shows/{Id}/Episodes": {
      "get": {
        "tags": [
          "TvShowsService"
        ],
        "summary": "Gets episodes for a tv season",
        "description": "Requires authentication as user",
        "operationId": "getShowsByIdEpisodes",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "The series id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Season",
            "description": "Optional filter by season number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SeasonId",
            "description": "Optional. Filter by season id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartItemId",
            "description": "Optional. Skip through the list until a given item is found.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "User Id",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets episodes for a tv season"
    },
    "/Shows/{Id}/Similar": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Finds tv shows similar to a given one.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getShowsByIdSimilar",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Finds tv shows similar to a given one."
    },
    "/Songs/{Id}/InstantMix": {
      "get": {
        "tags": [
          "InstantMixService"
        ],
        "summary": "Creates an instant playlist based on a given song",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getSongsByIdInstantmix",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Creates an instant playlist based on a given song"
    },
    "/Sync/{ItemId}/Status": {
      "post": {
        "tags": [
          "SyncService"
        ],
        "summary": "Gets sync status for an item.",
        "description": "Requires authentication as user",
        "operationId": "postSyncByItemidStatus",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ItemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "SyncedItemProgress: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SyncedItemProgress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets sync status for an item."
    },
    "/Sync/Jobs/{Id}": {
      "get": {
        "tags": [
          "SyncService"
        ],
        "summary": "Gets a sync job.",
        "description": "Requires authentication as user",
        "operationId": "getSyncJobsById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a SyncJob object.",
            "schema": {
              "$ref": "#/definitions/SyncJob"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "SyncService"
        ],
        "summary": "Cancels a sync job.",
        "description": "Requires authentication as user",
        "operationId": "deleteSyncJobsById",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "SyncService"
        ],
        "summary": "Updates a sync job.",
        "description": "Requires authentication as user",
        "operationId": "postSyncJobsById",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "SyncJob: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SyncJob"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a sync job."
    },
    "/Sync/Items/Cancel": {
      "post": {
        "tags": [
          "SyncService"
        ],
        "summary": "Cancels items from a sync target",
        "description": "Requires authentication as user",
        "operationId": "postSyncItemsCancel",
        "parameters": [
          {
            "in": "query",
            "name": "ItemIds",
            "description": "ItemIds",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Cancels items from a sync target"
    },
    "/Sync/{TargetId}/Items": {
      "delete": {
        "tags": [
          "SyncService"
        ],
        "summary": "Cancels items from a sync target",
        "description": "Requires authentication as user",
        "operationId": "deleteSyncByTargetidItems",
        "parameters": [
          {
            "in": "path",
            "name": "TargetId",
            "description": "TargetId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ItemIds",
            "description": "ItemIds",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Cancels items from a sync target"
    },
    "/Sync/Items/Ready": {
      "get": {
        "tags": [
          "SyncService"
        ],
        "summary": "Gets ready to download sync items.",
        "description": "Requires authentication as user",
        "operationId": "getSyncItemsReady",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "TargetId",
            "description": "TargetId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<SyncedItem> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SyncedItem"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets ready to download sync items."
    },
    "/Sync/JobItems/{Id}": {
      "delete": {
        "tags": [
          "SyncService"
        ],
        "summary": "Cancels a sync job item",
        "description": "Requires authentication as user",
        "operationId": "deleteSyncJobitemsById",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Cancels a sync job item"
    },
    "/System/Configuration/Partial": {
      "post": {
        "tags": [
          "ConfigurationService"
        ],
        "summary": "Updates application configuration",
        "description": "Requires authentication as administrator",
        "operationId": "postSystemConfigurationPartial",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ServerConfiguration: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServerConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Updates application configuration"
    },
    "/System/Configuration/{Key}": {
      "get": {
        "tags": [
          "ConfigurationService"
        ],
        "summary": "Gets a named configuration",
        "description": "Requires authentication as user",
        "operationId": "getSystemConfigurationByKey",
        "parameters": [
          {
            "in": "path",
            "name": "Key",
            "description": "Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "ConfigurationService"
        ],
        "summary": "Updates named configuration",
        "description": "Requires authentication as administrator",
        "operationId": "postSystemConfigurationByKey",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Key",
            "description": "Key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a named configuration"
    },
    "/System/ReleaseNotes/Versions": {
      "get": {
        "tags": [
          "SystemService"
        ],
        "summary": "Gets release notes",
        "description": "Requires authentication as user",
        "operationId": "getSystemReleasenotesVersions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a PackageVersionInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PackageVersionInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets release notes"
    },
    "/System/Logs/Query": {
      "get": {
        "tags": [
          "SystemService"
        ],
        "summary": "Gets a list of available server log files",
        "description": "Requires authentication as administrator",
        "operationId": "getSystemLogsQuery",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<LogFile> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_LogFile"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a list of available server log files"
    },
    "/System/Logs/{Name}": {
      "get": {
        "tags": [
          "SystemService"
        ],
        "summary": "Gets a log file",
        "description": "Requires authentication as administrator",
        "operationId": "getSystemLogsByName",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "The log file name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Sanitize",
            "description": "Return sanitized log",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a log file"
    },
    "/System/Info/Public": {
      "get": {
        "tags": [
          "SystemService"
        ],
        "summary": "Gets public information about the server",
        "description": "Requires authentication as user",
        "operationId": "getSystemInfoPublic",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a PublicSystemInfo object.",
            "schema": {
              "$ref": "#/definitions/PublicSystemInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets public information about the server"
    },
    "/System/ActivityLog/Entries": {
      "get": {
        "tags": [
          "ActivityLogService"
        ],
        "summary": "Gets activity log entries",
        "description": "Requires authentication as administrator",
        "operationId": "getSystemActivitylogEntries",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinDate",
            "description": "Optional. The minimum date. Format = ISO",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<ActivityLogEntry> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_ActivityLogEntry"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets activity log entries"
    },
    "/Trailers/{Id}/Similar": {
      "get": {
        "tags": [
          "LibraryService"
        ],
        "summary": "Finds movies and trailers similar to a given trailer.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getTrailersByIdSimilar",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Finds movies and trailers similar to a given trailer."
    },
    "/Users/{UserId}/Suggestions": {
      "get": {
        "tags": [
          "SuggestionsService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getUsersByUseridSuggestions",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/Users/{Id}/Delete": {
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "Deletes a user",
        "description": "Requires authentication as administrator",
        "operationId": "postUsersByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Deletes a user"
    },
    "/Users/{Id}/Authenticate": {
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "Authenticates a user",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Authentication",
          "url": "https://dev.emby.media/doc/restapi/User-Authentication.html"
        },
        "operationId": "postUsersByIdAuthenticate",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "AuthenticateUser",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a AuthenticationResult object.",
            "schema": {
              "$ref": "#/definitions/Authentication.AuthenticationResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Authenticates a user"
    },
    "/Users/{Id}/Password": {
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "Updates a user's password",
        "description": "Requires authentication as user",
        "operationId": "postUsersByIdPassword",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "UpdateUserPassword",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Updates a user's password"
    },
    "/Users/ForgotPassword/Pin": {
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "Redeems a forgot password pin",
        "description": "Requires authentication as user",
        "operationId": "postUsersForgotpasswordPin",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ForgotPasswordPin",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForgotPasswordPin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a PinRedeemResult object.",
            "schema": {
              "$ref": "#/definitions/PinRedeemResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Redeems a forgot password pin"
    },
    "/Users/{Id}/Configuration": {
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "Updates a user configuration",
        "description": "Requires authentication as user",
        "operationId": "postUsersByIdConfiguration",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "UserConfiguration: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Updates a user configuration"
    },
    "/Users/{Id}/Policy": {
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "Updates a user policy",
        "description": "Requires authentication as administrator",
        "operationId": "postUsersByIdPolicy",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "UserPolicy: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Updates a user policy"
    },
    "/Users/{UserId}/Items": {
      "get": {
        "tags": [
          "ItemsService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Browsing the Library",
          "url": "https://dev.emby.media/doc/restapi/Browsing-the-Library.html"
        },
        "operationId": "getUsersByUseridItems",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/Users/{UserId}/Views": {
      "get": {
        "tags": [
          "UserViewsService"
        ],
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Browsing the Library",
          "url": "https://dev.emby.media/doc/restapi/Browsing-the-Library.html"
        },
        "operationId": "getUsersByUseridViews",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeExternalContent",
            "description": "Whether or not to include external views such as channels or live tv",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Videos/{Id}/AlternateSources": {
      "delete": {
        "tags": [
          "VideosService"
        ],
        "summary": "Removes alternate video sources.",
        "description": "Requires authentication as administrator",
        "operationId": "deleteVideosByIdAlternatesources",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Removes alternate video sources."
    },
    "/Videos/{Id}/AdditionalParts": {
      "get": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Gets additional parts for a video.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getVideosByIdAdditionalparts",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "UserId",
            "description": "Optional. Filter by user id, and attach user data",
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets additional parts for a video."
    },
    "/Videos/{Id}/index.bif": {
      "get": {
        "tags": [
          "BifService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getVideosByIdIndexBif",
        "parameters": [
          {
            "in": "query",
            "name": "Width",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Videos/{Id}/stream.{Container}": {
      "get": {
        "tags": [
          "VideoService"
        ],
        "summary": "Gets a video stream",
        "description": "Requires authentication as user",
        "operationId": "getVideosByIdStreamByContainer",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "VideoService"
        ],
        "summary": "Gets a video stream",
        "description": "Requires authentication as user",
        "operationId": "headVideosByIdStreamByContainer",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a video stream"
    },
    "/Videos/{Id}/stream": {
      "get": {
        "tags": [
          "VideoService"
        ],
        "summary": "Gets a video stream",
        "description": "Requires authentication as user",
        "operationId": "getVideosByIdStream",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "VideoService"
        ],
        "summary": "Gets a video stream",
        "description": "Requires authentication as user",
        "operationId": "headVideosByIdStream",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a video stream"
    },
    "/Videos/{Id}/{StreamFileName}": {
      "get": {
        "tags": [
          "VideoService"
        ],
        "summary": "Gets a video stream",
        "description": "Requires authentication as user",
        "operationId": "getVideosByIdByStreamfilename",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "StreamFileName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "VideoService"
        ],
        "summary": "Gets a video stream",
        "description": "Requires authentication as user",
        "operationId": "headVideosByIdByStreamfilename",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "StreamFileName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a video stream"
    },
    "/Videos/{Id}/master.m3u8": {
      "get": {
        "tags": [
          "DynamicHlsService"
        ],
        "summary": "Gets a video stream using HTTP live streaming.",
        "description": "Requires authentication as user",
        "operationId": "getVideosByIdMasterM3u8",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "DynamicHlsService"
        ],
        "summary": "Gets a video stream using HTTP live streaming.",
        "description": "Requires authentication as user",
        "operationId": "headVideosByIdMasterM3u8",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a video stream using HTTP live streaming."
    },
    "/Videos/{Id}/live.m3u8": {
      "get": {
        "tags": [
          "DynamicHlsService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getVideosByIdLiveM3u8",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Videos/{Id}/main.m3u8": {
      "get": {
        "tags": [
          "DynamicHlsService"
        ],
        "summary": "Gets a video stream using HTTP live streaming.",
        "description": "Requires authentication as user",
        "operationId": "getVideosByIdMainM3u8",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceProfileId",
            "description": "Optional. The dlna device profile id to utilize.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Container",
            "description": "Container",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodec",
            "description": "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableAutoStreamCopy",
            "description": "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioSampleRate",
            "description": "Optional. Specify a specific audio sample rate, e.g. 44100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioBitRate",
            "description": "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "AudioChannels",
            "description": "Optional. Specify a specific number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxAudioChannels",
            "description": "Optional. Specify a maximum number of audio channels to encode to, e.g. 2",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Static",
            "description": "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "StartTimeTicks",
            "description": "Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "Optional. The fixed horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "Optional. The fixed vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "Optional. The maximum horizontal resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "Optional. The maximum vertical resolution of the encoded video.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoBitRate",
            "description": "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "description": "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleMethod",
            "description": "Optional. Specify the subtitle delivery method."
          },
          {
            "in": "query",
            "name": "MaxVideoBitDepth",
            "description": "Optional.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoCodec",
            "description": "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h264, mpeg4, theora, vpx, wmv.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "description": "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VideoStreamIndex",
            "description": "Optional. The index of the video stream to use. If omitted the first video stream will be used.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a video stream using HTTP live streaming."
    },
    "/Videos/{Id}/subtitles.m3u8": {
      "get": {
        "tags": [
          "DynamicHlsService"
        ],
        "summary": "Gets an HLS subtitle playlist.",
        "description": "Requires authentication as user",
        "operationId": "getVideosByIdSubtitlesM3u8",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleSegmentLength",
            "description": "The subtitle segment length",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ManifestSubtitles",
            "description": "The subtitle segment format",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets an HLS subtitle playlist."
    },
    "/Videos/{Id}/live_subtitles.m3u8": {
      "get": {
        "tags": [
          "DynamicHlsService"
        ],
        "summary": "Gets an HLS subtitle playlist.",
        "description": "Requires authentication as user",
        "operationId": "getVideosByIdLiveSubtitlesM3u8",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleSegmentLength",
            "description": "The subtitle segment length",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ManifestSubtitles",
            "description": "The subtitle segment format",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets an HLS subtitle playlist."
    },
    "/Videos/ActiveEncodings/Delete": {
      "post": {
        "tags": [
          "HlsSegmentService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postVideosActiveencodingsDelete",
        "parameters": [
          {
            "in": "query",
            "name": "DeviceId",
            "description": "The device id of the client requesting. Used to stop encoding processes when needed.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "PlaySessionId",
            "description": "The play session id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Artists/{Name}/Images/{Type}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getArtistsByNameImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headArtistsByNameImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Auth/Keys/{Key}/Delete": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postAuthKeysByKeyDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Key",
            "description": "Auth Key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/Collections/{Id}/Items/Delete": {
      "post": {
        "tags": [
          "CollectionService"
        ],
        "summary": "Removes items from a collection",
        "description": "Requires authentication as user",
        "operationId": "postCollectionsByIdItemsDelete",
        "parameters": [
          {
            "in": "query",
            "name": "Ids",
            "description": "Item id, comma delimited",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Removes items from a collection"
    },
    "/Dlna/{UuId}/contentdirectory/contentdirectory.xml": {
      "get": {
        "tags": [
          "DlnaServerService"
        ],
        "summary": "Gets dlna content directory xml",
        "description": "No authentication required",
        "operationId": "getDlnaByUuidContentdirectoryContentdirectoryXml",
        "parameters": [
          {
            "in": "path",
            "name": "UuId",
            "description": "Server UuId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Gets dlna content directory xml"
    },
    "/Dlna/{UuId}/contentdirectory/contentdirectory": {
      "get": {
        "tags": [
          "DlnaServerService"
        ],
        "summary": "Gets dlna content directory xml",
        "description": "No authentication required",
        "operationId": "getDlnaByUuidContentdirectoryContentdirectory",
        "parameters": [
          {
            "in": "path",
            "name": "UuId",
            "description": "Server UuId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Gets dlna content directory xml"
    },
    "/Dlna/{UuId}/connectionmanager/connectionmanager.xml": {
      "get": {
        "tags": [
          "DlnaServerService"
        ],
        "summary": "Gets dlna connection manager xml",
        "description": "No authentication required",
        "operationId": "getDlnaByUuidConnectionmanagerConnectionmanagerXml",
        "parameters": [
          {
            "in": "path",
            "name": "UuId",
            "description": "Server UuId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Gets dlna connection manager xml"
    },
    "/Dlna/{UuId}/connectionmanager/connectionmanager": {
      "get": {
        "tags": [
          "DlnaServerService"
        ],
        "summary": "Gets dlna connection manager xml",
        "description": "No authentication required",
        "operationId": "getDlnaByUuidConnectionmanagerConnectionmanager",
        "parameters": [
          {
            "in": "path",
            "name": "UuId",
            "description": "Server UuId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Gets dlna connection manager xml"
    },
    "/Dlna/{UuId}/contentdirectory/control": {
      "post": {
        "tags": [
          "DlnaServerService"
        ],
        "summary": "Processes a control request",
        "description": "No authentication required",
        "operationId": "postDlnaByUuidContentdirectoryControl",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UuId",
            "description": "Server UuId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Processes a control request"
    },
    "/Dlna/{UuId}/connectionmanager/control": {
      "post": {
        "tags": [
          "DlnaServerService"
        ],
        "summary": "Processes a control request",
        "description": "No authentication required",
        "operationId": "postDlnaByUuidConnectionmanagerControl",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UuId",
            "description": "Server UuId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Processes a control request"
    },
    "/Dlna/{UuId}/icons/{Filename}": {
      "get": {
        "tags": [
          "DlnaServerService"
        ],
        "summary": "Gets a server icon",
        "description": "No authentication required",
        "operationId": "getDlnaByUuidIconsByFilename",
        "parameters": [
          {
            "in": "path",
            "name": "UuId",
            "description": "Server UuId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Filename",
            "description": "The icon filename",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "x-RequiredAuthentication": "No authentication required"
      },
      "x-summary": "Gets a server icon"
    },
    "/GameGenres/{Name}/Images/{Type}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getGamegenresByNameImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headGamegenresByNameImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Genres/{Name}/Images/{Type}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getGenresByNameImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headGenresByNameImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/RemoteSearch/Apply/{Id}": {
      "post": {
        "tags": [
          "ItemLookupService"
        ],
        "summary": "Applies search criteria to an item and refreshes metadata",
        "description": "Requires authentication as administrator",
        "operationId": "postItemsRemotesearchApplyById",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "The item id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ReplaceAllImages",
            "description": "Whether or not to replace all images",
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "body",
            "description": "RemoteSearchResult: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoteSearchResult"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Applies search criteria to an item and refreshes metadata"
    },
    "/Items/{Id}/Tags/Add": {
      "post": {
        "tags": [
          "TagService"
        ],
        "summary": "Adds new tags to an item",
        "description": "Requires authentication as user",
        "operationId": "postItemsByIdTagsAdd",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "AddTags",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLibrary.AddTags"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Adds new tags to an item"
    },
    "/Items/{Id}/Tags/Delete": {
      "post": {
        "tags": [
          "TagService"
        ],
        "summary": "Removes tags from an item",
        "description": "Requires authentication as user",
        "operationId": "postItemsByIdTagsDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "RemoveTags",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLibrary.RemoveTags"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Removes tags from an item"
    },
    "/Items/{Id}/Subtitles/{Index}": {
      "delete": {
        "tags": [
          "SubtitleService"
        ],
        "summary": "Deletes an external subtitle file",
        "description": "Requires authentication as user",
        "operationId": "deleteItemsByIdSubtitlesByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MediaSourceId",
            "description": "MediaSourceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Index",
            "description": "The subtitle stream index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deletes an external subtitle file"
    },
    "/Items/{Id}/Images/{Type}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headItemsByIdImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "ImageService"
        ],
        "summary": "Uploads an image for an item, must be base64 encoded.",
        "description": "Requires authentication as administrator",
        "operationId": "postItemsByIdImagesByType",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "delete": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "deleteItemsByIdImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/Items/{Id}/RemoteImages/Providers": {
      "get": {
        "tags": [
          "RemoteImageService"
        ],
        "summary": "Gets available remote image providers for an item",
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdRemoteimagesProviders",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a List<ImageProviderInfo> object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImageProviderInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets available remote image providers for an item"
    },
    "/Items/{Id}/RemoteImages/Download": {
      "post": {
        "tags": [
          "RemoteImageService"
        ],
        "summary": "Downloads a remote image for an item",
        "description": "Requires authentication as administrator",
        "operationId": "postItemsByIdRemoteimagesDownload",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Type",
            "description": "The image type",
            "required": true
          },
          {
            "in": "query",
            "name": "ProviderName",
            "description": "The image provider",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageUrl",
            "description": "The image url",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Downloads a remote image for an item"
    },
    "/Library/VirtualFolders/Paths/Update": {
      "post": {
        "tags": [
          "LibraryStructureService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postLibraryVirtualfoldersPathsUpdate",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "UpdateMediaPath",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Library.UpdateMediaPath"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/Library/VirtualFolders/Paths/Delete": {
      "post": {
        "tags": [
          "LibraryStructureService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postLibraryVirtualfoldersPathsDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RemoveMediaPath",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Library.RemoveMediaPath"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/LiveTv/LiveStreamFiles/{Id}/stream.{Container}": {
      "get": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live tv channel",
        "description": "Requires authentication as user",
        "operationId": "getLivetvLivestreamfilesByIdStreamByContainer",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Container",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a live tv channel"
    },
    "/LiveTv/LiveRecordings/{Id}/stream": {
      "get": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live tv channel",
        "description": "Requires authentication as user",
        "operationId": "getLivetvLiverecordingsByIdStream",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a live tv channel"
    },
    "/LiveTv/ListingProviders/SchedulesDirect/Countries": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets available lineups",
        "description": "Requires authentication as administrator",
        "operationId": "getLivetvListingprovidersSchedulesdirectCountries",
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets available lineups"
    },
    "/LiveTv/TunerHosts/Default/{Type}": {
      "get": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Gets tuner hosts",
        "description": "Requires authentication as administrator",
        "operationId": "getLivetvTunerhostsDefaultByType",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Type",
            "description": "Type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a TunerHostInfo object.",
            "schema": {
              "$ref": "#/definitions/LiveTv.TunerHostInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets tuner hosts"
    },
    "/LiveTv/Recordings/{Id}/Delete": {
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Deletes a live tv recording",
        "description": "Requires authentication as user",
        "operationId": "postLivetvRecordingsByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Recording Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deletes a live tv recording"
    },
    "/LiveTv/Timers/{Id}/Delete": {
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Cancels a live tv timer",
        "description": "Requires authentication as user",
        "operationId": "postLivetvTimersByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Timer Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Cancels a live tv timer"
    },
    "/LiveTv/SeriesTimers/{Id}/Delete": {
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Cancels a live tv series timer",
        "description": "Requires authentication as user",
        "operationId": "postLivetvSeriestimersByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Timer Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Cancels a live tv series timer"
    },
    "/LiveTv/Tuners/{Id}/Reset": {
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Resets a tv tuner",
        "description": "Requires authentication as administrator",
        "operationId": "postLivetvTunersByIdReset",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Tuner Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Resets a tv tuner"
    },
    "/MusicGenres/{Name}/Images/{Type}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getMusicgenresByNameImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headMusicgenresByNameImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Packages/Installing/{Id}/Delete": {
      "post": {
        "tags": [
          "PackageService"
        ],
        "summary": "Cancels a package installation",
        "description": "Requires authentication as administrator",
        "operationId": "postPackagesInstallingByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Installation Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Cancels a package installation"
    },
    "/Persons/{Name}/Images/{Type}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getPersonsByNameImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headPersonsByNameImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Playlists/{Id}/Items/Delete": {
      "post": {
        "tags": [
          "PlaylistService"
        ],
        "summary": "Removes items from a playlist",
        "description": "Requires authentication as user",
        "operationId": "postPlaylistsByIdItemsDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "EntryIds",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Removes items from a playlist"
    },
    "/Providers/Subtitles/Subtitles/{Id}": {
      "get": {
        "tags": [
          "SubtitleService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getProvidersSubtitlesSubtitlesById",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/ScheduledTasks/Running/{Id}/Delete": {
      "post": {
        "tags": [
          "ScheduledTaskService"
        ],
        "summary": "Stops a scheduled task",
        "description": "Requires authentication as administrator",
        "operationId": "postScheduledtasksRunningByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Stops a scheduled task"
    },
    "/Sessions/{Id}/Playing/{Command}": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Issues a playstate command to a client",
        "description": "Requires authentication as user",
        "operationId": "postSessionsByIdPlayingByCommand",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Session Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Command",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "PlaystateRequest: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PlaystateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Issues a playstate command to a client"
    },
    "/Sessions/{Id}/System/{Command}": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Issues a system command to a client",
        "description": "Requires authentication as user",
        "operationId": "postSessionsByIdSystemByCommand",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Session Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Command",
            "description": "The command to send.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Issues a system command to a client"
    },
    "/Sessions/{Id}/Command/{Command}": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Issues a system command to a client",
        "description": "Requires authentication as user",
        "operationId": "postSessionsByIdCommandByCommand",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Session Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Command",
            "description": "The command to send.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Issues a system command to a client"
    },
    "/Sessions/{Id}/Users/{UserId}": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Adds an additional user to a session",
        "description": "Requires authentication as user",
        "operationId": "postSessionsByIdUsersByUserid",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Session Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "UserId",
            "description": "UserId Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Removes an additional user from a session",
        "description": "Requires authentication as user",
        "operationId": "deleteSessionsByIdUsersByUserid",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Session Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "UserId",
            "description": "UserId Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Adds an additional user to a session"
    },
    "/Studios/{Name}/Images/{Type}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getStudiosByNameImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headStudiosByNameImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Sync/Jobs/{Id}/Delete": {
      "post": {
        "tags": [
          "SyncService"
        ],
        "summary": "Cancels a sync job.",
        "description": "Requires authentication as user",
        "operationId": "postSyncJobsByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Cancels a sync job."
    },
    "/Sync/{TargetId}/Items/Delete": {
      "post": {
        "tags": [
          "SyncService"
        ],
        "summary": "Cancels items from a sync target",
        "description": "Requires authentication as user",
        "operationId": "postSyncByTargetidItemsDelete",
        "parameters": [
          {
            "in": "path",
            "name": "TargetId",
            "description": "TargetId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ItemIds",
            "description": "ItemIds",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Cancels items from a sync target"
    },
    "/Sync/JobItems/{Id}/Transferred": {
      "post": {
        "tags": [
          "SyncService"
        ],
        "summary": "Reports that a sync job item has successfully been transferred.",
        "description": "Requires authentication as user",
        "operationId": "postSyncJobitemsByIdTransferred",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Reports that a sync job item has successfully been transferred."
    },
    "/Sync/JobItems/{Id}/File": {
      "get": {
        "tags": [
          "SyncService"
        ],
        "summary": "Gets a sync job item file",
        "description": "Requires authentication as user",
        "operationId": "getSyncJobitemsByIdFile",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a sync job item file"
    },
    "/Sync/JobItems/{Id}/AdditionalFiles": {
      "get": {
        "tags": [
          "SyncService"
        ],
        "summary": "Gets a sync job item file",
        "description": "Requires authentication as user",
        "operationId": "getSyncJobitemsByIdAdditionalfiles",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Name",
            "description": "Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a sync job item file"
    },
    "/Sync/JobItems/{Id}/Enable": {
      "post": {
        "tags": [
          "SyncService"
        ],
        "summary": "Enables a cancelled or queued sync job item",
        "description": "Requires authentication as user",
        "operationId": "postSyncJobitemsByIdEnable",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Enables a cancelled or queued sync job item"
    },
    "/Sync/JobItems/{Id}/Delete": {
      "post": {
        "tags": [
          "SyncService"
        ],
        "summary": "Cancels a sync job item",
        "description": "Requires authentication as user",
        "operationId": "postSyncJobitemsByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Cancels a sync job item"
    },
    "/Sync/JobItems/{Id}/MarkForRemoval": {
      "post": {
        "tags": [
          "SyncService"
        ],
        "summary": "Marks a job item for removal",
        "description": "Requires authentication as user",
        "operationId": "postSyncJobitemsByIdMarkforremoval",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Marks a job item for removal"
    },
    "/Sync/JobItems/{Id}/UnmarkForRemoval": {
      "post": {
        "tags": [
          "SyncService"
        ],
        "summary": "Unmarks a job item for removal",
        "description": "Requires authentication as user",
        "operationId": "postSyncJobitemsByIdUnmarkforremoval",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Unmarks a job item for removal"
    },
    "/System/Logs/{Name}/Lines": {
      "get": {
        "tags": [
          "SystemService"
        ],
        "summary": "Gets a log file",
        "description": "Requires authentication as administrator",
        "operationId": "getSystemLogsByNameLines",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "The log file name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<String> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_String"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Gets a log file"
    },
    "/Users/{Id}/TrackSelections/{TrackType}": {
      "delete": {
        "tags": [
          "UserService"
        ],
        "summary": "Clears audio or subtitle track selections for a user",
        "description": "Requires authentication as user",
        "operationId": "deleteUsersByIdTrackselectionsByTracktype",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "TrackType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Clears audio or subtitle track selections for a user"
    },
    "/Users/{Id}/Configuration/Partial": {
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "Updates a user configuration",
        "description": "Requires authentication as user",
        "operationId": "postUsersByIdConfigurationPartial",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Updates a user configuration"
    },
    "/Users/{UserId}/TypedSettings/{Key}": {
      "get": {
        "tags": [
          "UserService"
        ],
        "summary": "Gets a typed user setting",
        "description": "Requires authentication as user",
        "operationId": "getUsersByUseridTypedsettingsByKey",
        "parameters": [
          {
            "in": "path",
            "name": "Key",
            "description": "Key",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "UserId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "Updates a typed user setting",
        "description": "Requires authentication as user",
        "operationId": "postUsersByUseridTypedsettingsByKey",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Key",
            "description": "Key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a typed user setting"
    },
    "/Users/{UserId}/Items/Resume": {
      "get": {
        "tags": [
          "ItemsService"
        ],
        "summary": "Gets items based on a query.",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getUsersByUseridItemsResume",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ArtistType",
            "description": "Artist or AlbumArtist",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxOfficialRating",
            "description": "Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasThemeSong",
            "description": "Optional filter by items with theme songs.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasThemeVideo",
            "description": "Optional filter by items with theme videos.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSubtitles",
            "description": "Optional filter by items with subtitles.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasSpecialFeature",
            "description": "Optional filter by items with special features.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTrailer",
            "description": "Optional filter by items with trailers.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AdjacentTo",
            "description": "Optional. Return items that are siblings of a supplied item.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinIndexNumber",
            "description": "Optional filter by minimum index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinStartDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxStartDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinEndDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxEndDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinPlayers",
            "description": "Optional filter by minimum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxPlayers",
            "description": "Optional filter by maximum number of game players.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentIndexNumber",
            "description": "Optional filter by parent index number.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "HasParentalRating",
            "description": "Optional filter by items that have or do not have a parental rating",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHD",
            "description": "Optional filter by items that are HD or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsUnaired",
            "description": "Optional filter by items that are unaired episodes or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MinCommunityRating",
            "description": "Optional filter by minimum community rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "MinCriticRating",
            "description": "Optional filter by minimum critic rating.",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "AiredDuringSeason",
            "description": "Gets all episodes that aired during a season, including specials.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MinPremiereDate",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSaved",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MinDateLastSavedForUser",
            "description": "Optional. The minimum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxPremiereDate",
            "description": "Optional. The maximum premiere date. Format = ISO",
            "type": "string"
          },
          {
            "in": "query",
            "name": "HasOverview",
            "description": "Optional filter by items that have an overview or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasImdbId",
            "description": "Optional filter by items that have an imdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTmdbId",
            "description": "Optional filter by items that have a tmdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasTvdbId",
            "description": "Optional filter by items that have a tvdb id or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ExcludeItemIds",
            "description": "Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartIndex",
            "description": "Optional. The record index to start at. All items with a lower index will be dropped from the results.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Optional. The maximum number of records to return",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Recursive",
            "description": "When searching within folders, this determines whether or not the search will be recursive. true/false",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SearchTerm",
            "description": "Enter a search term to perform a search request",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortOrder",
            "description": "Sort Order - Ascending,Descending",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AnyProviderIdEquals",
            "description": "Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Filters",
            "description": "Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFavorite",
            "description": "Optional filter by items that are marked as favorite, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMovie",
            "description": "Optional filter for movies.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSeries",
            "description": "Optional filter for series.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Optional filter for folders.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNews",
            "description": "Optional filter for news.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsKids",
            "description": "Optional filter for kids.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsSports",
            "description": "Optional filter for sports.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNew",
            "description": "Optional filter for IsNew.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPremiere",
            "description": "Optional filter for IsPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsNewOrPremiere",
            "description": "Optional filter for IsNewOrPremiere.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsRepeat",
            "description": "Optional filter for IsRepeat.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ProjectToMedia",
            "description": "ProjectToMedia",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ImageTypes",
            "description": "Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SortBy",
            "description": "Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Optional filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Genres",
            "description": "Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "OfficialRatings",
            "description": "Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Tags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExcludeTags",
            "description": "Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Years",
            "description": "Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Person",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonIds",
            "description": "Optional. If specified, results will be filtered to include only those containing the specified person.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PersonTypes",
            "description": "Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Studios",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "StudioIds",
            "description": "Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Artists",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistIds",
            "description": "Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Albums",
            "description": "Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Ids",
            "description": "Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoTypes",
            "description": "Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Containers",
            "description": "Optional filter by Container. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioCodecs",
            "description": "Optional filter by AudioCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AudioLayouts",
            "description": "Optional filter by AudioLayout. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "VideoCodecs",
            "description": "Optional filter by VideoCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ExtendedVideoTypes",
            "description": "Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "SubtitleCodecs",
            "description": "Optional filter by SubtitleCodec. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "description": "Optional filter by Path.",
            "type": "string"
          },
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "MinOfficialRating",
            "description": "Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsLocked",
            "description": "Optional filter by items that are locked.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlaceHolder",
            "description": "Optional filter by items that are placeholders",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "HasOfficialRating",
            "description": "Optional filter by items that have official ratings",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItemsIntoCollections",
            "description": "Whether or not to hide items behind their boxsets.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Is3D",
            "description": "Optional filter by items that are 3D, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "SeriesStatus",
            "description": "Optional filter by Series Status. Allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AlbumArtistStartsWithOrGreater",
            "description": "Optional filter by items whose name is sorted equally or greater than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameStartsWith",
            "description": "Optional filter by items whose name is sorted equally than a given input string.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "NameLessThan",
            "description": "Optional filter by items whose name is equally or lesser than a given input string.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets items based on a query."
    },
    "/Users/{UserId}/Items/Latest": {
      "get": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Gets latest media",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Latest Items",
          "url": "https://dev.emby.media/doc/restapi/Latest-Items.html"
        },
        "operationId": "getUsersByUseridItemsLatest",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Limit",
            "description": "Limit",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ParentId",
            "description": "Specify this to localize the search to a specific item or folder. Omit to use the root",
            "type": "string"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, SortName, Studios, Taglines",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IncludeItemTypes",
            "description": "Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "MediaTypes",
            "description": "Optional filter by MediaType. Allows multiple, comma delimited.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsFolder",
            "description": "Filter by items that are folders, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsPlayed",
            "description": "Filter by items that are played, or not.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "GroupItems",
            "description": "Whether or not to group items into a parent container.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BaseItemDto"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets latest media"
    },
    "/Users/{UserId}/Items/{Id}": {
      "get": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Gets an item from a user's library",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getUsersByUseridItemsById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string",
            "format": "guid"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto object.",
            "schema": {
              "$ref": "#/definitions/BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets an item from a user's library"
    },
    "/Users/{UserId}/Items/Root": {
      "get": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Gets the root folder from a user's library",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getUsersByUseridItemsRoot",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto object.",
            "schema": {
              "$ref": "#/definitions/BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets the root folder from a user's library"
    },
    "/Users/{UserId}/FavoriteItems/{Id}": {
      "post": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Marks an item as a favorite",
        "description": "Requires authentication as user",
        "operationId": "postUsersByUseridFavoriteitemsById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserItemDataDto object.",
            "schema": {
              "$ref": "#/definitions/UserItemDataDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Unmarks an item as a favorite",
        "description": "Requires authentication as user",
        "operationId": "deleteUsersByUseridFavoriteitemsById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserItemDataDto object.",
            "schema": {
              "$ref": "#/definitions/UserItemDataDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Marks an item as a favorite"
    },
    "/Users/{Id}/Images/{Type}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Authentication",
          "url": "https://dev.emby.media/doc/restapi/User-Authentication.html"
        },
        "operationId": "getUsersByIdImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headUsersByIdImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "ImageService"
        ],
        "summary": "Uploads an image for an item, must be base64 encoded.",
        "description": "Requires authentication as user",
        "operationId": "postUsersByIdImagesByType",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "deleteUsersByIdImagesByType",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Users/{UserId}/PlayedItems/{Id}": {
      "post": {
        "tags": [
          "PlaystateService"
        ],
        "summary": "Marks an item as played",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Playback Check-ins",
          "url": "https://dev.emby.media/doc/restapi/Playback-Check-ins.html"
        },
        "operationId": "postUsersByUseridPlayeditemsById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "DatePlayed",
            "description": "The date the item was played (if any). Format = yyyyMMddHHmmss",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserItemDataDto object.",
            "schema": {
              "$ref": "#/definitions/UserItemDataDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "PlaystateService"
        ],
        "summary": "Marks an item as unplayed",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Playback Check-ins",
          "url": "https://dev.emby.media/doc/restapi/Playback-Check-ins.html"
        },
        "operationId": "deleteUsersByUseridPlayeditemsById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserItemDataDto object.",
            "schema": {
              "$ref": "#/definitions/UserItemDataDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Marks an item as played"
    },
    "/Users/{UserId}/PlayingItems/{Id}": {
      "post": {
        "tags": [
          "PlaystateService"
        ],
        "summary": "Reports that a user has begun playing an item",
        "description": "Requires authentication as user",
        "operationId": "postUsersByUseridPlayingitemsById",
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MediaSourceId",
            "description": "The id of the MediaSource",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "CanSeek",
            "description": "Indicates if the client can seek",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "PlayMethod"
          },
          {
            "in": "query",
            "name": "LiveStreamId",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PlaySessionId",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "PlaystateService"
        ],
        "summary": "Reports that a user has stopped playing an item",
        "description": "Requires authentication as user",
        "operationId": "deleteUsersByUseridPlayingitemsById",
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MediaSourceId",
            "description": "The id of the MediaSource",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "NextMediaType",
            "description": "The next media type that will play",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "PositionTicks",
            "description": "Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "LiveStreamId",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PlaySessionId",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Reports that a user has begun playing an item"
    },
    "/Users/{Id}/Connect/Link": {
      "post": {
        "tags": [
          "ConnectService"
        ],
        "summary": "Creates a Connect link for a user",
        "description": "Requires authentication as administrator",
        "operationId": "postUsersByIdConnectLink",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "User Id",
            "required": true,
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "ConnectUsername",
            "description": "Connect username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserLinkResult object.",
            "schema": {
              "$ref": "#/definitions/Connect.UserLinkResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "delete": {
        "tags": [
          "ConnectService"
        ],
        "summary": "Removes a Connect link for a user",
        "description": "Requires authentication as administrator",
        "operationId": "deleteUsersByIdConnectLink",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "User Id",
            "required": true,
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Creates a Connect link for a user"
    },
    "/Videos/{Id}/AlternateSources/Delete": {
      "post": {
        "tags": [
          "VideosService"
        ],
        "summary": "Removes alternate video sources.",
        "description": "Requires authentication as administrator",
        "operationId": "postVideosByIdAlternatesourcesDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Removes alternate video sources."
    },
    "/Videos/{Id}/Subtitles/{Index}": {
      "delete": {
        "tags": [
          "SubtitleService"
        ],
        "summary": "Deletes an external subtitle file",
        "description": "Requires authentication as user",
        "operationId": "deleteVideosByIdSubtitlesByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MediaSourceId",
            "description": "MediaSourceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Index",
            "description": "The subtitle stream index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deletes an external subtitle file"
    },
    "/Artists/{Name}/Images/{Type}/{Index}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getArtistsByNameImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headArtistsByNameImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Audio/{Id}/hls1/{PlaylistId}/{SegmentId}.{SegmentContainer}": {
      "get": {
        "tags": [
          "DynamicHlsService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer",
        "parameters": [
          {
            "in": "path",
            "name": "SegmentContainer",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "SegmentId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "PlaylistId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "DynamicHlsService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer",
        "parameters": [
          {
            "in": "path",
            "name": "SegmentContainer",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "SegmentId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "PlaylistId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Audio/{Id}/hls/{PlaylistId}/{SegmentId}.{SegmentContainer}": {
      "get": {
        "tags": [
          "VideoHlsService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getAudioByIdHlsByPlaylistidBySegmentidBySegmentcontainer",
        "parameters": [
          {
            "in": "path",
            "name": "SegmentContainer",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "SegmentId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "PlaylistId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/GameGenres/{Name}/Images/{Type}/{Index}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getGamegenresByNameImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headGamegenresByNameImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Genres/{Name}/Images/{Type}/{Index}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getGenresByNameImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headGenresByNameImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/{Id}/RemoteSearch/Subtitles/{Language}": {
      "get": {
        "tags": [
          "SubtitleService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdRemotesearchSubtitlesByLanguage",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MediaSourceId",
            "description": "MediaSourceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Language",
            "description": "Language",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "IsPerfectMatch",
            "description": "IsPerfectMatch",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsForced",
            "description": "IsForced",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsHearingImpaired",
            "description": "IsHearingImpaired",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a RemoteSubtitleInfo[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RemoteSubtitleInfo"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/{Id}/Subtitles/{Index}/Delete": {
      "post": {
        "tags": [
          "SubtitleService"
        ],
        "summary": "Deletes an external subtitle file",
        "description": "Requires authentication as user",
        "operationId": "postItemsByIdSubtitlesByIndexDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MediaSourceId",
            "description": "MediaSourceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Index",
            "description": "The subtitle stream index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deletes an external subtitle file"
    },
    "/Items/{Id}/RemoteSearch/Subtitles/{SubtitleId}": {
      "post": {
        "tags": [
          "SubtitleService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postItemsByIdRemotesearchSubtitlesBySubtitleid",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MediaSourceId",
            "description": "MediaSourceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "SubtitleId",
            "description": "SubtitleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a SubtitleDownloadResult object.",
            "schema": {
              "$ref": "#/definitions/Subtitles.SubtitleDownloadResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/{Id}/Images/{Type}/{Index}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headItemsByIdImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "ImageService"
        ],
        "summary": "Uploads an image for an item, must be base64 encoded.",
        "description": "Requires authentication as administrator",
        "operationId": "postItemsByIdImagesByTypeByIndex",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "delete": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "deleteItemsByIdImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/Items/{Id}/Images/{Type}/Delete": {
      "post": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postItemsByIdImagesByTypeDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/LiveTv/LiveStreamFiles/{Id}/hls/master.m3u8": {
      "get": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live tv channel",
        "description": "Requires authentication as user",
        "operationId": "getLivetvLivestreamfilesByIdHlsMasterM3u8",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live tv channel",
        "description": "Requires authentication as user",
        "operationId": "headLivetvLivestreamfilesByIdHlsMasterM3u8",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a live tv channel"
    },
    "/LiveTv/LiveRecordings/{Id}/hls/master.m3u8": {
      "get": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live recording",
        "description": "Requires authentication as user",
        "operationId": "getLivetvLiverecordingsByIdHlsMasterM3u8",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live recording",
        "description": "Requires authentication as user",
        "operationId": "headLivetvLiverecordingsByIdHlsMasterM3u8",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a live recording"
    },
    "/LiveTv/LiveRecordings/{Id}/hls/live.m3u8": {
      "get": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live recording",
        "description": "Requires authentication as user",
        "operationId": "getLivetvLiverecordingsByIdHlsLiveM3u8",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live recording",
        "description": "Requires authentication as user",
        "operationId": "headLivetvLiverecordingsByIdHlsLiveM3u8",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a live recording"
    },
    "/LiveTv/LiveStreamFiles/{Id}/hls/live.m3u8": {
      "get": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live tv channel",
        "description": "Requires authentication as user",
        "operationId": "getLivetvLivestreamfilesByIdHlsLiveM3u8",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live tv channel",
        "description": "Requires authentication as user",
        "operationId": "headLivetvLivestreamfilesByIdHlsLiveM3u8",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a live tv channel"
    },
    "/LiveTv/LiveStreamFiles/{Id}/hls/{Segment}": {
      "get": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live tv channel",
        "description": "Requires authentication as user",
        "operationId": "getLivetvLivestreamfilesByIdHlsBySegment",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Segment",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live tv channel",
        "description": "Requires authentication as user",
        "operationId": "headLivetvLivestreamfilesByIdHlsBySegment",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Segment",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a live tv channel"
    },
    "/LiveTv/LiveRecordings/{Id}/hls/{Segment}": {
      "get": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live recording",
        "description": "Requires authentication as user",
        "operationId": "getLivetvLiverecordingsByIdHlsBySegment",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Segment",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "LiveStreamService"
        ],
        "summary": "Gets a live recording",
        "description": "Requires authentication as user",
        "operationId": "headLivetvLiverecordingsByIdHlsBySegment",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Segment",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets a live recording"
    },
    "/LiveTv/Manage/Channels/{Id}/Disabled": {
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Sets a channel disabled or not",
        "description": "Requires authentication as administrator",
        "operationId": "postLivetvManageChannelsByIdDisabled",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "SetChannelDisabled",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.SetChannelDisabled"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<ChannelManagementInfo> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_ChannelManagementInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Sets a channel disabled or not"
    },
    "/LiveTv/Manage/Channels/{Id}/SortIndex": {
      "post": {
        "tags": [
          "LiveTvService"
        ],
        "summary": "Sets a channel sort index",
        "description": "Requires authentication as administrator",
        "operationId": "postLivetvManageChannelsByIdSortindex",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "SetChannelSortIndex",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.SetChannelSortIndex"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<ChannelManagementInfo> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_ChannelManagementInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Sets a channel sort index"
    },
    "/MusicGenres/{Name}/Images/{Type}/{Index}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getMusicgenresByNameImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headMusicgenresByNameImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Persons/{Name}/Images/{Type}/{Index}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getPersonsByNameImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headPersonsByNameImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Sessions/{Id}/Users/{UserId}/Delete": {
      "post": {
        "tags": [
          "SessionsService"
        ],
        "summary": "Removes an additional user from a session",
        "description": "Requires authentication as user",
        "operationId": "postSessionsByIdUsersByUseridDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Session Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "UserId",
            "description": "UserId Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Removes an additional user from a session"
    },
    "/Studios/{Name}/Images/{Type}/{Index}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getStudiosByNameImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headStudiosByNameImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Name",
            "description": "Item name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Users/{Id}/TrackSelections/{TrackType}/Delete": {
      "post": {
        "tags": [
          "UserService"
        ],
        "summary": "Clears audio or subtitle track selections for a user",
        "description": "Requires authentication as user",
        "operationId": "postUsersByIdTrackselectionsByTracktypeDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "TrackType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Clears audio or subtitle track selections for a user"
    },
    "/Users/{UserId}/Items/{Id}/SpecialFeatures": {
      "get": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Gets special features for an item",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getUsersByUseridItemsByIdSpecialfeatures",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Movie Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BaseItemDto"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets special features for an item"
    },
    "/Users/{UserId}/Items/{Id}/LocalTrailers": {
      "get": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Gets local trailers for an item",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getUsersByUseridItemsByIdLocaltrailers",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a BaseItemDto[] object.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BaseItemDto"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets local trailers for an item"
    },
    "/Users/{UserId}/Items/{Id}/Intros": {
      "get": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Gets intros to play before the main media item plays",
        "description": "Requires authentication as user",
        "externalDocs": {
          "description": "API Documentation: Item Information",
          "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
        },
        "operationId": "getUsersByUseridItemsByIdIntros",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string",
            "format": "guid"
          },
          {
            "in": "query",
            "name": "Fields",
            "description": "Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls",
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableImages",
            "description": "Optional, include image information in output",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "ImageTypeLimit",
            "description": "Optional, the max number of images to return, per image type",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "EnableImageTypes",
            "description": "Optional. The image types to include in the output.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "EnableUserData",
            "description": "Optional, include user data",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a QueryResult<BaseItemDto> object.",
            "schema": {
              "$ref": "#/definitions/QueryResult_BaseItemDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets intros to play before the main media item plays"
    },
    "/Users/{UserId}/FavoriteItems/{Id}/Delete": {
      "post": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Unmarks an item as a favorite",
        "description": "Requires authentication as user",
        "operationId": "postUsersByUseridFavoriteitemsByIdDelete",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserItemDataDto object.",
            "schema": {
              "$ref": "#/definitions/UserItemDataDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Unmarks an item as a favorite"
    },
    "/Users/{UserId}/Items/{Id}/Rating": {
      "delete": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Deletes a user's saved personal rating for an item",
        "description": "Requires authentication as user",
        "operationId": "deleteUsersByUseridItemsByIdRating",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserItemDataDto object.",
            "schema": {
              "$ref": "#/definitions/UserItemDataDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Updates a user's rating for an item",
        "description": "Requires authentication as user",
        "operationId": "postUsersByUseridItemsByIdRating",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Likes",
            "description": "Whether the user likes the item or not. true/false",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserItemDataDto object.",
            "schema": {
              "$ref": "#/definitions/UserItemDataDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deletes a user's saved personal rating for an item"
    },
    "/Users/{UserId}/Items/{Id}/HideFromResume": {
      "post": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Updates a user's hide from resume for an item",
        "description": "Requires authentication as user",
        "operationId": "postUsersByUseridItemsByIdHidefromresume",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Hide",
            "description": "Whether the item should be hidden from reusme or not. true/false",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserItemDataDto object.",
            "schema": {
              "$ref": "#/definitions/UserItemDataDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Updates a user's hide from resume for an item"
    },
    "/Users/{Id}/Images/{Type}/{Index}": {
      "get": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getUsersByIdImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headUsersByIdImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MaxWidth",
            "description": "The maximum image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "MaxHeight",
            "description": "The maximum image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Width",
            "description": "The fixed image width to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Height",
            "description": "The fixed image height to return.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Quality",
            "description": "Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Tag",
            "description": "Optional. Supply the cache tag from the item object to receive strong caching headers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "CropWhitespace",
            "description": "Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "EnableImageEnhancers",
            "description": "Enable or disable image enhancers such as cover art.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "Format",
            "description": "Determines the output foramt of the image - original,gif,jpg,png",
            "type": "string"
          },
          {
            "in": "query",
            "name": "BackgroundColor",
            "description": "Optional. Apply a background color for transparent images.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ForegroundLayer",
            "description": "Optional. Apply a foreground layer on top of the image.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "AutoOrient",
            "description": "Set to true to force normalization of orientation in the event the renderer does not support it.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "KeepAnimation",
            "description": "Set to true to retain image animation (when supported).",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "post": {
        "tags": [
          "ImageService"
        ],
        "summary": "Uploads an image for an item, must be base64 encoded.",
        "description": "Requires authentication as user",
        "operationId": "postUsersByIdImagesByTypeByIndex",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Binary stream",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "delete": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "deleteUsersByIdImagesByTypeByIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Users/{Id}/Images/{Type}/Delete": {
      "post": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postUsersByIdImagesByTypeDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "query",
            "name": "Index",
            "description": "Image Index",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Users/{UserId}/Items/{ItemId}/UserData": {
      "post": {
        "tags": [
          "PlaystateService"
        ],
        "summary": "Updates userdata for an item",
        "description": "Requires authentication as user",
        "operationId": "postUsersByUseridItemsByItemidUserdata",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "ItemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "UserItemDataDto: ",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserItemDataDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Updates userdata for an item"
    },
    "/Users/{UserId}/PlayingItems/{Id}/Progress": {
      "post": {
        "tags": [
          "PlaystateService"
        ],
        "summary": "Reports a user's playback progress",
        "description": "Requires authentication as user",
        "operationId": "postUsersByUseridPlayingitemsByIdProgress",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MediaSourceId",
            "description": "The id of the MediaSource",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "PositionTicks",
            "description": "Optional. The current position, in ticks. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "IsPaused",
            "description": "Indicates if the player is paused.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "IsMuted",
            "description": "Indicates if the player is muted.",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "AudioStreamIndex",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "SubtitleStreamIndex",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "VolumeLevel",
            "description": "Scale of 0-100",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "PlayMethod"
          },
          {
            "in": "query",
            "name": "LiveStreamId",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PlaySessionId",
            "type": "string"
          },
          {
            "in": "query",
            "name": "RepeatMode"
          },
          {
            "in": "query",
            "name": "SubtitleOffset",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "PlaybackRate",
            "type": "number",
            "format": "double"
          },
          {
            "in": "body",
            "name": "body",
            "description": "OnPlaybackProgress",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.OnPlaybackProgress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Reports a user's playback progress"
    },
    "/Users/{UserId}/PlayingItems/{Id}/Delete": {
      "post": {
        "tags": [
          "PlaystateService"
        ],
        "summary": "Reports that a user has stopped playing an item",
        "description": "Requires authentication as user",
        "operationId": "postUsersByUseridPlayingitemsByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MediaSourceId",
            "description": "The id of the MediaSource",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "NextMediaType",
            "description": "The next media type that will play",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "PositionTicks",
            "description": "Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "LiveStreamId",
            "type": "string"
          },
          {
            "in": "query",
            "name": "PlaySessionId",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Reports that a user has stopped playing an item"
    },
    "/Users/{UserId}/PlayedItems/{Id}/Delete": {
      "post": {
        "tags": [
          "PlaystateService"
        ],
        "summary": "Marks an item as unplayed",
        "description": "Requires authentication as user",
        "operationId": "postUsersByUseridPlayeditemsByIdDelete",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserItemDataDto object.",
            "schema": {
              "$ref": "#/definitions/UserItemDataDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Marks an item as unplayed"
    },
    "/Users/{Id}/Connect/Link/Delete": {
      "post": {
        "tags": [
          "ConnectService"
        ],
        "summary": "Removes a Connect link for a user",
        "description": "Requires authentication as administrator",
        "operationId": "postUsersByIdConnectLinkDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "User Id",
            "required": true,
            "type": "string",
            "format": "guid"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Removes a Connect link for a user"
    },
    "/Videos/{Id}/Subtitles/{Index}/Delete": {
      "post": {
        "tags": [
          "SubtitleService"
        ],
        "summary": "Deletes an external subtitle file",
        "description": "Requires authentication as user",
        "operationId": "postVideosByIdSubtitlesByIndexDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "MediaSourceId",
            "description": "MediaSourceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Index",
            "description": "The subtitle stream index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deletes an external subtitle file"
    },
    "/Videos/{Id}/hls1/{PlaylistId}/{SegmentId}.{SegmentContainer}": {
      "get": {
        "tags": [
          "DynamicHlsService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer",
        "parameters": [
          {
            "in": "path",
            "name": "SegmentContainer",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "SegmentId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "PlaylistId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "head": {
        "tags": [
          "DynamicHlsService"
        ],
        "description": "Requires authentication as user",
        "operationId": "headVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer",
        "parameters": [
          {
            "in": "path",
            "name": "SegmentContainer",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "SegmentId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "PlaylistId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Videos/{Id}/hls/{PlaylistId}/{SegmentId}.{SegmentContainer}": {
      "get": {
        "tags": [
          "VideoHlsService"
        ],
        "description": "Requires authentication as user",
        "operationId": "getVideosByIdHlsByPlaylistidBySegmentidBySegmentcontainer",
        "parameters": [
          {
            "in": "path",
            "name": "SegmentContainer",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "SegmentId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "PlaylistId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Items/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}": {
      "get": {
        "tags": [
          "SubtitleService"
        ],
        "summary": "Gets subtitles in a specified format.",
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdByMediasourceidSubtitlesByIndexStreamByFormat",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "MediaSourceId",
            "description": "MediaSourceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Index",
            "description": "The subtitle stream index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "Format",
            "description": "Format",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartPositionTicks",
            "description": "StartPositionTicks",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "EndPositionTicks",
            "description": "EndPositionTicks",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "CopyTimestamps",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets subtitles in a specified format."
    },
    "/Items/{Id}/Images/{Type}/{Index}/Delete": {
      "post": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as administrator",
        "operationId": "postItemsByIdImagesByTypeByIndexDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      }
    },
    "/Items/{Id}/Images/{Type}/{Index}/Index": {
      "post": {
        "tags": [
          "ImageService"
        ],
        "summary": "Updates the index for an item image",
        "description": "Requires authentication as administrator",
        "operationId": "postItemsByIdImagesByTypeByIndexIndex",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "NewIndex",
            "description": "The new image index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Updates the index for an item image"
    },
    "/Items/{Id}/Images/{Type}/{Index}/Url": {
      "post": {
        "tags": [
          "ImageService"
        ],
        "summary": "Updates the index for an item image",
        "description": "Requires authentication as administrator",
        "operationId": "postItemsByIdImagesByTypeByIndexUrl",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "Url",
            "description": "The url for the new image",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as administrator"
      },
      "x-summary": "Updates the index for an item image"
    },
    "/Playlists/{Id}/Items/{ItemId}/Move/{NewIndex}": {
      "post": {
        "tags": [
          "PlaylistService"
        ],
        "summary": "Moves a playlist item",
        "description": "Requires authentication as user",
        "operationId": "postPlaylistsByIdItemsByItemidMoveByNewindex",
        "parameters": [
          {
            "in": "path",
            "name": "ItemId",
            "description": "ItemId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "path",
            "name": "Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "NewIndex",
            "description": "NewIndex",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Moves a playlist item"
    },
    "/Users/{UserId}/Items/{Id}/Rating/Delete": {
      "post": {
        "tags": [
          "UserLibraryService"
        ],
        "summary": "Deletes a user's saved personal rating for an item",
        "description": "Requires authentication as user",
        "operationId": "postUsersByUseridItemsByIdRatingDelete",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "UserId",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Returning a UserItemDataDto object.",
            "schema": {
              "$ref": "#/definitions/UserItemDataDto"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Deletes a user's saved personal rating for an item"
    },
    "/Users/{Id}/Images/{Type}/{Index}/Delete": {
      "post": {
        "tags": [
          "ImageService"
        ],
        "description": "Requires authentication as user",
        "operationId": "postUsersByIdImagesByTypeByIndexDelete",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "User Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Type",
            "description": "Image Type",
            "required": true
          },
          {
            "in": "path",
            "name": "Index",
            "description": "Image Index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Empty response."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      }
    },
    "/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}": {
      "get": {
        "tags": [
          "SubtitleService"
        ],
        "summary": "Gets subtitles in a specified format.",
        "description": "Requires authentication as user",
        "operationId": "getVideosByIdByMediasourceidSubtitlesByIndexStreamByFormat",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "MediaSourceId",
            "description": "MediaSourceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Index",
            "description": "The subtitle stream index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "Format",
            "description": "Format",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "StartPositionTicks",
            "description": "StartPositionTicks",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "EndPositionTicks",
            "description": "EndPositionTicks",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "CopyTimestamps",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets subtitles in a specified format."
    },
    "/Items/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}": {
      "get": {
        "tags": [
          "SubtitleService"
        ],
        "summary": "Gets subtitles in a specified format.",
        "description": "Requires authentication as user",
        "operationId": "getItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "MediaSourceId",
            "description": "MediaSourceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Index",
            "description": "The subtitle stream index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "Format",
            "description": "Format",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "StartPositionTicks",
            "description": "StartPositionTicks",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "EndPositionTicks",
            "description": "EndPositionTicks",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "CopyTimestamps",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets subtitles in a specified format."
    },
    "/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}": {
      "get": {
        "tags": [
          "SubtitleService"
        ],
        "summary": "Gets subtitles in a specified format.",
        "description": "Requires authentication as user",
        "operationId": "getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat",
        "parameters": [
          {
            "in": "path",
            "name": "Id",
            "description": "Item Id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "MediaSourceId",
            "description": "MediaSourceId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "Index",
            "description": "The subtitle stream index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "Format",
            "description": "Format",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "StartPositionTicks",
            "description": "StartPositionTicks",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "EndPositionTicks",
            "description": "EndPositionTicks",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "CopyTimestamps",
            "description": "CopyTimestamps",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful. Response content unknown."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "security": [
          {
            "apikeyauth": [ ]
          },
          {
            "embyauth": [ ]
          }
        ],
        "x-RequiredAuthentication": "Requires authentication as user"
      },
      "x-summary": "Gets subtitles in a specified format."
    }
  },
  "definitions": {
    "QueryResult_BaseItemDto": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseItemDto"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "BaseItemDto": {
      "description": "This is strictly used as a data transfer object from the api layer. This holds information about a BaseItem in a format that is convenient for the client.\r\n",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "OriginalTitle": {
          "type": "string"
        },
        "ServerId": {
          "description": "The server identifier.",
          "type": "string"
        },
        "Id": {
          "description": "The id.",
          "type": "string"
        },
        "Guid": {
          "type": "string"
        },
        "Etag": {
          "description": "The etag.",
          "type": "string"
        },
        "Prefix": {
          "description": "The Prefix.",
          "type": "string"
        },
        "PlaylistItemId": {
          "description": "The playlist item identifier.",
          "type": "string"
        },
        "DateCreated": {
          "format": "date-time",
          "description": "The date created.",
          "type": "string"
        },
        "ExtraType": {
          "type": "string"
        },
        "SortIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "SortParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "CanDelete": {
          "type": "boolean"
        },
        "CanDownload": {
          "type": "boolean"
        },
        "CanEditItems": {
          "type": "boolean"
        },
        "SupportsResume": {
          "type": "boolean"
        },
        "PresentationUniqueKey": {
          "type": "string"
        },
        "PreferredMetadataLanguage": {
          "type": "string"
        },
        "PreferredMetadataCountryCode": {
          "type": "string"
        },
        "SupportsSync": {
          "description": "A value indicating whether \\[supports synchronize\\].",
          "type": "boolean"
        },
        "SyncStatus": {
          "$ref": "#/definitions/SyncJobItemStatus"
        },
        "CanManageAccess": {
          "type": "boolean"
        },
        "CanLeaveContent": {
          "type": "boolean"
        },
        "CanMakePublic": {
          "type": "boolean"
        },
        "Container": {
          "type": "string"
        },
        "SortName": {
          "description": "The name of the sort.",
          "type": "string"
        },
        "ForcedSortName": {
          "type": "string"
        },
        "Video3DFormat": {
          "$ref": "#/definitions/Video3DFormat"
        },
        "PremiereDate": {
          "format": "date-time",
          "description": "The premiere date.",
          "type": "string"
        },
        "ExternalUrls": {
          "description": "The external urls.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalUrl"
          }
        },
        "MediaSources": {
          "description": "The media versions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaSourceInfo"
          }
        },
        "CriticRating": {
          "format": "float",
          "description": "The critic rating.",
          "type": "number"
        },
        "GameSystemId": {
          "format": "int64",
          "type": "integer"
        },
        "AsSeries": {
          "type": "boolean"
        },
        "GameSystem": {
          "description": "The game system.",
          "type": "string"
        },
        "ProductionLocations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Path": {
          "description": "The path.",
          "type": "string"
        },
        "OfficialRating": {
          "description": "The official rating.",
          "type": "string"
        },
        "CustomRating": {
          "description": "The custom rating.",
          "type": "string"
        },
        "ChannelId": {
          "description": "The channel identifier.",
          "type": "string"
        },
        "ChannelName": {
          "type": "string"
        },
        "Overview": {
          "description": "The overview.",
          "type": "string"
        },
        "Taglines": {
          "description": "The taglines.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Genres": {
          "description": "The genres.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CommunityRating": {
          "format": "float",
          "description": "The community rating.",
          "type": "number"
        },
        "RunTimeTicks": {
          "format": "int64",
          "description": "The run time ticks.",
          "type": "integer"
        },
        "Size": {
          "format": "int64",
          "type": "integer"
        },
        "FileName": {
          "type": "string"
        },
        "Bitrate": {
          "format": "int32",
          "type": "integer"
        },
        "ProductionYear": {
          "format": "int32",
          "description": "The production year.",
          "type": "integer"
        },
        "Number": {
          "description": "The number.",
          "type": "string"
        },
        "ChannelNumber": {
          "type": "string"
        },
        "IndexNumber": {
          "format": "int32",
          "description": "The index number.",
          "type": "integer"
        },
        "IndexNumberEnd": {
          "format": "int32",
          "description": "The index number end.",
          "type": "integer"
        },
        "ParentIndexNumber": {
          "format": "int32",
          "description": "The parent index number.",
          "type": "integer"
        },
        "RemoteTrailers": {
          "description": "The trailer urls.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaUrl"
          }
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "IsFolder": {
          "description": "A value indicating whether this instance is folder.",
          "type": "boolean"
        },
        "ParentId": {
          "description": "The parent id.",
          "type": "string"
        },
        "Type": {
          "description": "The type.",
          "type": "string"
        },
        "People": {
          "description": "The people.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseItemPerson"
          }
        },
        "Studios": {
          "description": "The studios.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameLongIdPair"
          }
        },
        "GenreItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameLongIdPair"
          }
        },
        "TagItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameLongIdPair"
          }
        },
        "ParentLogoItemId": {
          "description": "If the item does not have a logo, this will hold the Id of the Parent that has one.",
          "type": "string"
        },
        "ParentBackdropItemId": {
          "description": "If the item does not have any backdrops, this will hold the Id of the Parent that has one.",
          "type": "string"
        },
        "ParentBackdropImageTags": {
          "description": "The parent backdrop image tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LocalTrailerCount": {
          "format": "int32",
          "description": "The local trailer count.",
          "type": "integer"
        },
        "UserData": {
          "$ref": "#/definitions/UserItemDataDto"
        },
        "RecursiveItemCount": {
          "format": "int32",
          "description": "The recursive item count.",
          "type": "integer"
        },
        "ChildCount": {
          "format": "int32",
          "description": "The child count.",
          "type": "integer"
        },
        "SeriesName": {
          "description": "The name of the series.",
          "type": "string"
        },
        "SeriesId": {
          "description": "The series id.",
          "type": "string"
        },
        "SeasonId": {
          "description": "The season identifier.",
          "type": "string"
        },
        "SpecialFeatureCount": {
          "format": "int32",
          "description": "The special feature count.",
          "type": "integer"
        },
        "DisplayPreferencesId": {
          "description": "The display preferences id.",
          "type": "string"
        },
        "Status": {
          "description": "The status.",
          "type": "string"
        },
        "AirDays": {
          "description": "The air days.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DayOfWeek"
          }
        },
        "Tags": {
          "description": "The tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PrimaryImageAspectRatio": {
          "format": "double",
          "description": "The primary image aspect ratio, after image enhancements.",
          "type": "number"
        },
        "Artists": {
          "description": "The artists.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ArtistItems": {
          "description": "The artist items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameIdPair"
          }
        },
        "Composers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameIdPair"
          }
        },
        "Album": {
          "description": "The album.",
          "type": "string"
        },
        "CollectionType": {
          "description": "The type of the collection.",
          "type": "string"
        },
        "DisplayOrder": {
          "description": "The display order.",
          "type": "string"
        },
        "AlbumId": {
          "description": "The album id.",
          "type": "string"
        },
        "AlbumPrimaryImageTag": {
          "description": "The album image tag.",
          "type": "string"
        },
        "SeriesPrimaryImageTag": {
          "description": "The series primary image tag.",
          "type": "string"
        },
        "AlbumArtist": {
          "description": "The album artist.",
          "type": "string"
        },
        "AlbumArtists": {
          "description": "The album artists.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameIdPair"
          }
        },
        "SeasonName": {
          "description": "The name of the season.",
          "type": "string"
        },
        "MediaStreams": {
          "description": "The media streams.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaStream"
          }
        },
        "PartCount": {
          "format": "int32",
          "description": "The part count.",
          "type": "integer"
        },
        "ImageTags": {
          "description": "The image tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "BackdropImageTags": {
          "description": "The backdrop image tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ParentLogoImageTag": {
          "description": "The parent logo image tag.",
          "type": "string"
        },
        "SeriesStudio": {
          "description": "The series studio.",
          "type": "string"
        },
        "PrimaryImageItemId": {
          "type": "string"
        },
        "PrimaryImageTag": {
          "type": "string"
        },
        "ParentThumbItemId": {
          "description": "The parent thumb item id.",
          "type": "string"
        },
        "ParentThumbImageTag": {
          "description": "The parent thumb image tag.",
          "type": "string"
        },
        "Chapters": {
          "description": "The chapters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChapterInfo"
          }
        },
        "LocationType": {
          "$ref": "#/definitions/LocationType"
        },
        "MediaType": {
          "description": "The type of the media.",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "description": "The end date.",
          "type": "string"
        },
        "LockedFields": {
          "description": "The locked fields.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataFields"
          }
        },
        "LockData": {
          "description": "A value indicating whether \\[enable internet providers\\].",
          "type": "boolean"
        },
        "Width": {
          "format": "int32",
          "type": "integer"
        },
        "Height": {
          "format": "int32",
          "type": "integer"
        },
        "CameraMake": {
          "type": "string"
        },
        "CameraModel": {
          "type": "string"
        },
        "Software": {
          "type": "string"
        },
        "ExposureTime": {
          "format": "double",
          "type": "number"
        },
        "FocalLength": {
          "format": "double",
          "type": "number"
        },
        "ImageOrientation": {
          "$ref": "#/definitions/Drawing.ImageOrientation"
        },
        "Aperture": {
          "format": "double",
          "type": "number"
        },
        "ShutterSpeed": {
          "format": "double",
          "type": "number"
        },
        "Latitude": {
          "format": "double",
          "type": "number"
        },
        "Longitude": {
          "format": "double",
          "type": "number"
        },
        "Altitude": {
          "format": "double",
          "type": "number"
        },
        "IsoSpeedRating": {
          "format": "int32",
          "type": "integer"
        },
        "SeriesTimerId": {
          "description": "The series timer identifier.",
          "type": "string"
        },
        "ChannelPrimaryImageTag": {
          "description": "The channel primary image tag.",
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "description": "The start date of the recording, in UTC.",
          "type": "string"
        },
        "CompletionPercentage": {
          "format": "double",
          "description": "The completion percentage.",
          "type": "number"
        },
        "IsRepeat": {
          "description": "A value indicating whether this instance is repeat.",
          "type": "boolean"
        },
        "IsNew": {
          "type": "boolean"
        },
        "EpisodeTitle": {
          "description": "The episode title.",
          "type": "string"
        },
        "IsMovie": {
          "description": "A value indicating whether this instance is movie.",
          "type": "boolean"
        },
        "IsSports": {
          "description": "A value indicating whether this instance is sports.",
          "type": "boolean"
        },
        "IsSeries": {
          "description": "A value indicating whether this instance is series.",
          "type": "boolean"
        },
        "IsLive": {
          "description": "A value indicating whether this instance is live.",
          "type": "boolean"
        },
        "IsNews": {
          "description": "A value indicating whether this instance is news.",
          "type": "boolean"
        },
        "IsKids": {
          "description": "A value indicating whether this instance is kids.",
          "type": "boolean"
        },
        "IsPremiere": {
          "description": "A value indicating whether this instance is premiere.",
          "type": "boolean"
        },
        "TimerType": {
          "$ref": "#/definitions/LiveTv.TimerType"
        },
        "Disabled": {
          "type": "boolean"
        },
        "ManagementId": {
          "type": "string"
        },
        "TimerId": {
          "description": "The timer identifier.",
          "type": "string"
        },
        "CurrentProgram": {
          "$ref": "#/definitions/BaseItemDto"
        },
        "MovieCount": {
          "format": "int32",
          "type": "integer"
        },
        "SeriesCount": {
          "format": "int32",
          "type": "integer"
        },
        "AlbumCount": {
          "format": "int32",
          "type": "integer"
        },
        "SongCount": {
          "format": "int32",
          "type": "integer"
        },
        "MusicVideoCount": {
          "format": "int32",
          "type": "integer"
        },
        "Subviews": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ListingsProviderId": {
          "type": "string"
        },
        "ListingsChannelId": {
          "type": "string"
        },
        "ListingsPath": {
          "type": "string"
        },
        "ListingsId": {
          "type": "string"
        },
        "ListingsChannelName": {
          "type": "string"
        },
        "ListingsChannelNumber": {
          "type": "string"
        },
        "AffiliateCallSign": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dto.BaseItemDto"
    },
    "SyncJobItemStatus": {
      "enum": [
        "Queued",
        "Converting",
        "ReadyToTransfer",
        "Transferring",
        "Synced",
        "Failed"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Sync.SyncJobItemStatus"
    },
    "Video3DFormat": {
      "enum": [
        "HalfSideBySide",
        "FullSideBySide",
        "FullTopAndBottom",
        "HalfTopAndBottom",
        "MVC"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Entities.Video3DFormat"
    },
    "ExternalUrl": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Url": {
          "description": "The type of the item.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Providers.ExternalUrl"
    },
    "MediaSourceInfo": {
      "type": "object",
      "properties": {
        "Protocol": {
          "$ref": "#/definitions/MediaProtocol"
        },
        "Id": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "EncoderPath": {
          "type": "string"
        },
        "EncoderProtocol": {
          "$ref": "#/definitions/MediaProtocol"
        },
        "Type": {
          "$ref": "#/definitions/MediaSourceType"
        },
        "ProbePath": {
          "type": "string"
        },
        "ProbeProtocol": {
          "$ref": "#/definitions/MediaProtocol"
        },
        "Container": {
          "type": "string"
        },
        "Size": {
          "format": "int64",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "SortName": {
          "type": "string"
        },
        "IsRemote": {
          "description": "Differentiate internet url vs local network",
          "type": "boolean"
        },
        "HasMixedProtocols": {
          "type": "boolean"
        },
        "RunTimeTicks": {
          "format": "int64",
          "type": "integer"
        },
        "ContainerStartTimeTicks": {
          "format": "int64",
          "type": "integer"
        },
        "SupportsTranscoding": {
          "type": "boolean"
        },
        "TrancodeLiveStartIndex": {
          "format": "int32",
          "type": "integer"
        },
        "WallClockStart": {
          "format": "date-time",
          "type": "string"
        },
        "SupportsDirectStream": {
          "type": "boolean"
        },
        "SupportsDirectPlay": {
          "type": "boolean"
        },
        "IsInfiniteStream": {
          "type": "boolean"
        },
        "RequiresOpening": {
          "type": "boolean"
        },
        "OpenToken": {
          "type": "string"
        },
        "RequiresClosing": {
          "type": "boolean"
        },
        "LiveStreamId": {
          "type": "string"
        },
        "BufferMs": {
          "format": "int32",
          "type": "integer"
        },
        "RequiresLooping": {
          "type": "boolean"
        },
        "SupportsProbing": {
          "type": "boolean"
        },
        "Video3DFormat": {
          "$ref": "#/definitions/Video3DFormat"
        },
        "MediaStreams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaStream"
          }
        },
        "Formats": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Bitrate": {
          "format": "int32",
          "type": "integer"
        },
        "Timestamp": {
          "$ref": "#/definitions/TransportStreamTimestamp"
        },
        "RequiredHttpHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "DirectStreamUrl": {
          "type": "string"
        },
        "AddApiKeyToDirectStreamUrl": {
          "type": "boolean"
        },
        "TranscodingUrl": {
          "type": "string"
        },
        "TranscodingSubProtocol": {
          "type": "string"
        },
        "TranscodingContainer": {
          "type": "string"
        },
        "AnalyzeDurationMs": {
          "format": "int32",
          "type": "integer"
        },
        "ReadAtNativeFramerate": {
          "type": "boolean"
        },
        "DefaultAudioStreamIndex": {
          "format": "int32",
          "type": "integer"
        },
        "DefaultSubtitleStreamIndex": {
          "format": "int32",
          "type": "integer"
        },
        "ItemId": {
          "description": "Used only by our Windows app. Not used by Emby Server.",
          "type": "string"
        },
        "ServerId": {
          "description": "Used only by our Windows app. Not used by Emby Server.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dto.MediaSourceInfo"
    },
    "MediaProtocol": {
      "enum": [
        "File",
        "Http",
        "Rtmp",
        "Rtsp",
        "Udp",
        "Rtp",
        "Ftp",
        "Mms"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.MediaInfo.MediaProtocol"
    },
    "MediaSourceType": {
      "enum": [
        "Default",
        "Grouping",
        "Placeholder"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Dto.MediaSourceType"
    },
    "MediaStream": {
      "description": "MediaStream information.\r\n\r\n\r\nMediaStream itens are typically included in a `MediaBrowser.Model.Dto.MediaSourceInfo` object.\r\n\r\n\r\n`MediaBrowser.Model.Dto.MediaSourceInfo.MediaStreams`\r\n",
      "type": "object",
      "properties": {
        "Codec": {
          "description": "The codec.\r\n\r\nProbe Field: `codec_name`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`  \r\nRelated Enums: `T:Emby.Media.Model.Enums.VideoMediaTypes`, `Emby.Media.Model.Enums.AudioMediaTypes`, `Emby.Media.Model.Enums.SubtitleMediaTypes`.",
          "type": "string"
        },
        "CodecTag": {
          "description": "The codec tag.\r\n\r\nProbe Field: `codec_tag`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.",
          "type": "string"
        },
        "Language": {
          "description": "The language.\r\n\r\nProbe Field: `tags[\"language\"]`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.",
          "type": "string"
        },
        "ColorTransfer": {
          "description": "The color transfer characteristics.\r\n\r\nProbe Field: `color_transfer`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`  \r\nRelated Enum: `Emby.Media.Model.Enums.ColorTransfers`.",
          "type": "string"
        },
        "ColorPrimaries": {
          "description": "The chromaticity coordinates of the source primaries.\r\n\r\nProbe Field: `color_primaries`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`  \r\nRelated Enum: `Emby.Media.Model.Enums.ColorPrimaries`.",
          "type": "string"
        },
        "ColorSpace": {
          "description": "The YUV colorspace type.\r\n\r\nProbe Field: `color_space`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`  \r\nRelated Enum: `Emby.Media.Model.Enums.ColorSpaces`.",
          "type": "string"
        },
        "Comment": {
          "description": "The comment.\r\n\r\nProbe Field: `tags[\"comment\"]`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.",
          "type": "string"
        },
        "StreamStartTimeTicks": {
          "format": "int64",
          "description": "The start time of the stream.\r\n\r\nProbe Field: `start_time`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.  \r\nActual type: `System.TimeSpan`.",
          "type": "integer"
        },
        "TimeBase": {
          "description": "The time\\-base.\r\n\r\nProbe Field: `time_base`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.  \r\nActual type: `Emby.Media.Model.Types.Rational`.",
          "type": "string"
        },
        "Title": {
          "description": "The title.\r\n\r\nProbe Field: `tags[\"title\"]`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.",
          "type": "string"
        },
        "Extradata": {
          "description": "The extradata.\r\n\r\nProbe Field: `extradata`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.\r\n\r\nCurrently, this value is only parsed for subtitle streams with codec `Emby.Media.Model.Enums.SubtitleMediaTypes.dvb_teletext`.",
          "type": "string"
        },
        "VideoRange": {
          "type": "string"
        },
        "DisplayTitle": {
          "description": "The display title.\r\n\r\nCustom property set by the application.",
          "type": "string"
        },
        "DisplayLanguage": {
          "description": "The display language.\r\n\r\nCustom property set by the application.",
          "type": "string"
        },
        "NalLengthSize": {
          "description": "The nal length size.\r\n\r\nProbe Field: `nal_length_size`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video` of type `Emby.Media.Model.Enums.VideoMediaTypes.h264`.  \r\nActual type: `System.Int32`.",
          "type": "string"
        },
        "IsInterlaced": {
          "description": "A value indicating whether this instance is interlaced.\r\n\r\nProbe Field: `field_order` \\!\\= `progressive`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.",
          "type": "boolean"
        },
        "IsAVC": {
          "type": "boolean"
        },
        "ChannelLayout": {
          "description": "The channel layout.\r\n\r\nProbe Field: `channel_layout`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`  \r\nRelated Enum: `MediaBrowser.Model.Entities.MediaStream.ChannelLayout`.",
          "type": "string"
        },
        "BitRate": {
          "format": "int32",
          "description": "The bit rate.\r\n\r\nProbe Field: `bit_rate`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`.\r\n\r\nTHIS VALUE IS PROCESSED BY CUSTOM LOGIC AND DOES NOT NECESSARILY MATCH FFPROBE RESULTS\\!",
          "type": "integer"
        },
        "BitDepth": {
          "format": "int32",
          "description": "The bit depth.\r\n\r\nProbe Field: `bits_per_sample` or `bits_per_raw_sample`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`.",
          "type": "integer"
        },
        "RefFrames": {
          "format": "int32",
          "description": "The reference frames.\r\n\r\nProbe Field: `refs`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.",
          "type": "integer"
        },
        "Rotation": {
          "format": "int32",
          "type": "integer"
        },
        "Channels": {
          "format": "int32",
          "description": "The audio channel count.\r\n\r\nProbe Field: `channels`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`.",
          "type": "integer"
        },
        "SampleRate": {
          "format": "int32",
          "description": "The sample rate.\r\n\r\nProbe Field: `sample_rate`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`  \r\nRelated Enum: `Emby.Media.Model.Enums.SampleRates`.",
          "type": "integer"
        },
        "IsDefault": {
          "description": "A value indicating whether this instance is default.\r\n\r\nProbe Field: `disposition[\"default\"]`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.",
          "type": "boolean"
        },
        "IsForced": {
          "description": "A value indicating whether this instance is forced.\r\n\r\nProbe Field: `disposition[\"forced\"]`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.",
          "type": "boolean"
        },
        "IsHearingImpaired": {
          "type": "boolean"
        },
        "Height": {
          "format": "int32",
          "description": "The height.\r\n\r\nProbe Field: `height`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.",
          "type": "integer"
        },
        "Width": {
          "format": "int32",
          "description": "The width.\r\n\r\nProbe Field: `width`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.",
          "type": "integer"
        },
        "AverageFrameRate": {
          "format": "float",
          "description": "The average frame rate..\r\n\r\nProbe Field: `avg_frame_rate`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.  \r\nActual type: `Emby.Media.Model.Types.Rational`.",
          "type": "number"
        },
        "RealFrameRate": {
          "format": "float",
          "description": "The real frame rate..\r\n\r\nProbe Field: `r_frame_rate`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.  \r\nActual type: `Emby.Media.Model.Types.Rational`.",
          "type": "number"
        },
        "Profile": {
          "description": "The profile.\r\n\r\nProbe Field: `profile`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`  \r\nRelated Enums: `Emby.Media.Model.Enums.AacProfiles`, `Emby.Media.Model.Enums.AvcProfiles`, `Emby.Media.Model.Enums.H263Profiles`, `Emby.Media.Model.Enums.HevcProfiles`, `Emby.Media.Model.Enums.Mpeg2Profiles`,`Emby.Media.Model.Enums.Vc1Profiles`, `Emby.Media.Model.Enums.Mpeg4Profiles`, `Emby.Media.Model.Enums.Vp8Profiles`, `Emby.Media.Model.Enums.Vp9Profiles`.",
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/MediaStreamType"
        },
        "AspectRatio": {
          "description": "The aspect ratio.\r\n\r\nProbe Field: `display_aspect_ratio`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.  \r\nActual type: `Emby.Media.Model.Types.Rational`.",
          "type": "string"
        },
        "Index": {
          "format": "int32",
          "description": "The index of the stream inside its container.\r\n\r\nProbe Field: `index`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.",
          "type": "integer"
        },
        "IsExternal": {
          "description": "A value indicating whether this instance is external.\r\n\r\nCustom property set by the application.",
          "type": "boolean"
        },
        "DeliveryMethod": {
          "$ref": "#/definitions/SubtitleDeliveryMethod"
        },
        "DeliveryUrl": {
          "description": "The delivery URL.\r\n\r\nCustom property set by the application.",
          "type": "string"
        },
        "IsExternalUrl": {
          "description": "A value indicating whether this instance is external URL.\r\n\r\nCustom property set by the application.",
          "type": "boolean"
        },
        "IsTextSubtitleStream": {
          "type": "boolean"
        },
        "SupportsExternalStream": {
          "description": "A value indicating whether \\[supports external stream\\].",
          "type": "boolean"
        },
        "Path": {
          "description": "The filename.",
          "type": "string"
        },
        "Protocol": {
          "$ref": "#/definitions/MediaProtocol"
        },
        "PixelFormat": {
          "description": "The pixel format.\r\n\r\nProbe Field: `pix_fmt`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.  \r\nActual type: `MediaBrowser.Model.Entities.MediaStream.PixelFormat`.",
          "type": "string"
        },
        "Level": {
          "format": "double",
          "description": "The codec level.\r\n\r\nProbe Field: `level`  \r\nApplies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`  \r\nRelated Enums: `Emby.Media.Model.Enums.AvcLevels`, `Emby.Media.Model.Enums.H263Levels`, `Emby.Media.Model.Enums.HevcLevels`, `Emby.Media.Model.Enums.Mpeg2Levels`,`Emby.Media.Model.Enums.Vc1Levels`, `Emby.Media.Model.Enums.Mpeg4Levels`, `Emby.Media.Model.Enums.Vp8Levels`, `Emby.Media.Model.Enums.Vp9Levels`.",
          "type": "number"
        },
        "IsAnamorphic": {
          "description": "A value indicating whether this instance is anamorphic.",
          "type": "boolean"
        },
        "ExtendedVideoType": {
          "$ref": "#/definitions/ExtendedVideoTypes"
        },
        "ExtendedVideoSubType": {
          "$ref": "#/definitions/ExtendedVideoSubTypes"
        },
        "ExtendedVideoSubTypeDescription": {
          "description": "The extended video sub\\-type description.",
          "type": "string"
        },
        "ItemId": {
          "description": "Used only by our Windows app. Not used by Emby Server.",
          "type": "string"
        },
        "ServerId": {
          "description": "Used only by our Windows app. Not used by Emby Server.",
          "type": "string"
        },
        "AttachmentSize": {
          "format": "int32",
          "description": "The size of the attachment.",
          "type": "integer"
        },
        "MimeType": {
          "description": "The type of the MIME.",
          "type": "string"
        },
        "SubtitleLocationType": {
          "$ref": "#/definitions/SubtitleLocationType"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Entities.MediaStream"
    },
    "MediaStreamType": {
      "description": "Enum MediaStreamType\r\n",
      "enum": [
        "Unknown",
        "Audio",
        "Video",
        "Subtitle",
        "EmbeddedImage",
        "Attachment",
        "Data"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Entities.MediaStreamType"
    },
    "SubtitleDeliveryMethod": {
      "enum": [
        "Encode",
        "Embed",
        "External",
        "Hls",
        "VideoSideData"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.SubtitleDeliveryMethod"
    },
    "ExtendedVideoTypes": {
      "enum": [
        "None",
        "Hdr10",
        "Hdr10Plus",
        "HyperLogGamma",
        "DolbyVision"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Entities.ExtendedVideoTypes"
    },
    "ExtendedVideoSubTypes": {
      "enum": [
        "None",
        "Hdr10",
        "HyperLogGamma",
        "Hdr10Plus0",
        "DoviProfile02",
        "DoviProfile10",
        "DoviProfile22",
        "DoviProfile30",
        "DoviProfile42",
        "DoviProfile50",
        "DoviProfile61",
        "DoviProfile76",
        "DoviProfile81",
        "DoviProfile82",
        "DoviProfile83",
        "DoviProfile84",
        "DoviProfile85",
        "DoviProfile92"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Entities.ExtendedVideoSubTypes"
    },
    "SubtitleLocationType": {
      "enum": [
        "InternalStream",
        "VideoSideData"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Entities.SubtitleLocationType"
    },
    "TransportStreamTimestamp": {
      "enum": [
        "None",
        "Zero",
        "Valid"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.MediaInfo.TransportStreamTimestamp"
    },
    "MediaUrl": {
      "type": "object",
      "properties": {
        "Url": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Entities.MediaUrl"
    },
    "ProviderIdDictionary": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-internal-ref-name": "MediaBrowser.Model.Entities.ProviderIdDictionary"
    },
    "BaseItemPerson": {
      "description": "This is used by the api to get information about a Person within a BaseItem\r\n",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Id": {
          "description": "The identifier.",
          "type": "string"
        },
        "Role": {
          "description": "The role.",
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/PersonType"
        },
        "PrimaryImageTag": {
          "description": "The primary image tag.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dto.BaseItemPerson"
    },
    "PersonType": {
      "enum": [
        "Actor",
        "Director",
        "Writer",
        "Producer",
        "GuestStar",
        "Composer",
        "Conductor",
        "Lyricist"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Entities.PersonType"
    },
    "NameLongIdPair": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "description": "The identifier.",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dto.NameLongIdPair"
    },
    "UserItemDataDto": {
      "description": "Class UserItemDataDto\r\n",
      "type": "object",
      "properties": {
        "Rating": {
          "format": "double",
          "description": "The rating.",
          "type": "number"
        },
        "PlayedPercentage": {
          "format": "double",
          "description": "The played percentage.",
          "type": "number"
        },
        "UnplayedItemCount": {
          "format": "int32",
          "description": "The unplayed item count.",
          "type": "integer"
        },
        "PlaybackPositionTicks": {
          "format": "int64",
          "description": "The playback position ticks.",
          "type": "integer"
        },
        "PlayCount": {
          "format": "int32",
          "description": "The play count.",
          "type": "integer"
        },
        "IsFavorite": {
          "description": "A value indicating whether this instance is favorite.",
          "type": "boolean"
        },
        "LastPlayedDate": {
          "format": "date-time",
          "description": "The last played date.",
          "type": "string"
        },
        "Played": {
          "description": "A value indicating whether this `MediaBrowser.Model.Dto.UserItemDataDto` is played.",
          "type": "boolean"
        },
        "Key": {
          "description": "The key.",
          "type": "string"
        },
        "ItemId": {
          "description": "The item identifier.",
          "type": "string"
        },
        "ServerId": {
          "description": "Used only by our Windows app. Not used by Emby Server.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dto.UserItemDataDto"
    },
    "DayOfWeek": {
      "enum": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ],
      "type": "string",
      "x-internal-ref-name": "System.DayOfWeek"
    },
    "NameIdPair": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Id": {
          "description": "The identifier.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dto.NameIdPair"
    },
    "ChapterInfo": {
      "description": "Class ChapterInfo\r\n",
      "type": "object",
      "properties": {
        "StartPositionTicks": {
          "format": "int64",
          "description": "The start position ticks.",
          "type": "integer"
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "ImageTag": {
          "type": "string"
        },
        "MarkerType": {
          "$ref": "#/definitions/MarkerType"
        },
        "ChapterIndex": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Entities.ChapterInfo"
    },
    "MarkerType": {
      "enum": [
        "Chapter",
        "IntroStart",
        "IntroEnd",
        "CreditsStart"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Entities.MarkerType"
    },
    "LocationType": {
      "description": "Enum LocationType\r\n",
      "enum": [
        "FileSystem",
        "Virtual"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Entities.LocationType"
    },
    "MetadataFields": {
      "description": "Enum MetadataFields\r\n",
      "enum": [
        "Cast",
        "Genres",
        "ProductionLocations",
        "Studios",
        "Tags",
        "Name",
        "Overview",
        "Runtime",
        "OfficialRating",
        "Collections",
        "ChannelNumber",
        "SortName",
        "OriginalTitle",
        "SortIndexNumber",
        "SortParentIndexNumber",
        "CommunityRating",
        "CriticRating",
        "Tagline"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Entities.MetadataFields"
    },
    "Drawing.ImageOrientation": {
      "enum": [
        "TopLeft",
        "TopRight",
        "BottomRight",
        "BottomLeft",
        "LeftTop",
        "RightTop",
        "RightBottom",
        "LeftBottom"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Drawing.ImageOrientation"
    },
    "LiveTv.TimerType": {
      "enum": [
        "Program",
        "DateTime",
        "Keyword"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.LiveTv.TimerType"
    },
    "QueryResult_UserLibrary.TagItem": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserLibrary.TagItem"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "UserLibrary.TagItem": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Api.UserLibrary.TagItem"
    },
    "Collections.CollectionCreationResult": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Collections.CollectionCreationResult"
    },
    "QueryResult_Devices.DeviceInfo": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Devices.DeviceInfo"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Devices.DeviceInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Id": {
          "description": "The identifier.",
          "type": "string"
        },
        "InternalId": {
          "format": "int64",
          "type": "integer"
        },
        "ReportedDeviceId": {
          "type": "string"
        },
        "LastUserName": {
          "description": "The last name of the user.",
          "type": "string"
        },
        "AppName": {
          "description": "The name of the application.",
          "type": "string"
        },
        "AppVersion": {
          "description": "The application version.",
          "type": "string"
        },
        "LastUserId": {
          "description": "The last user identifier.",
          "type": "string"
        },
        "DateLastActivity": {
          "format": "date-time",
          "type": "string"
        },
        "IconUrl": {
          "type": "string"
        },
        "IpAddress": {
          "format": "ipv4",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Devices.DeviceInfo"
    },
    "FeatureInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "FeatureType": {
          "$ref": "#/definitions/FeatureType"
        }
      },
      "x-internal-ref-name": "Emby.Features.FeatureInfo"
    },
    "FeatureType": {
      "enum": [
        "System",
        "User"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Features.FeatureType"
    },
    "QueryResult_UserLibrary.OfficialRatingItem": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserLibrary.OfficialRatingItem"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "UserLibrary.OfficialRatingItem": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Api.UserLibrary.OfficialRatingItem"
    },
    "PackageInfo": {
      "description": "Class PackageInfo\r\n",
      "type": "object",
      "properties": {
        "id": {
          "description": "The internal id of this package.",
          "type": "string"
        },
        "name": {
          "description": "The name.",
          "type": "string"
        },
        "shortDescription": {
          "description": "The short description.",
          "type": "string"
        },
        "overview": {
          "description": "The overview.",
          "type": "string"
        },
        "isPremium": {
          "description": "A value indicating whether this instance is premium.",
          "type": "boolean"
        },
        "adult": {
          "description": "A value indicating whether this instance is adult only content.",
          "type": "boolean"
        },
        "richDescUrl": {
          "description": "The rich desc URL.",
          "type": "string"
        },
        "thumbImage": {
          "description": "The thumb image.",
          "type": "string"
        },
        "previewImage": {
          "description": "The preview image.",
          "type": "string"
        },
        "type": {
          "description": "The type.",
          "type": "string"
        },
        "targetFilename": {
          "description": "The target filename.",
          "type": "string"
        },
        "owner": {
          "description": "The owner.",
          "type": "string"
        },
        "category": {
          "description": "The category.",
          "type": "string"
        },
        "tileColor": {
          "description": "The catalog tile color.",
          "type": "string"
        },
        "featureId": {
          "description": "The feature id of this package (if premium).",
          "type": "string"
        },
        "price": {
          "format": "float",
          "description": "The price for this package (if premium).",
          "type": "number"
        },
        "targetSystem": {
          "$ref": "#/definitions/PackageTargetSystem"
        },
        "guid": {
          "description": "The guid of the assembly associated with this package (if a plug\\-in). This is used to identify the proper item for automatic updates.",
          "type": "string"
        },
        "isRegistered": {
          "description": "Whether or not this package is registered.",
          "type": "boolean"
        },
        "expDate": {
          "format": "date-time",
          "description": "The expiration date for this package.",
          "type": "string"
        },
        "versions": {
          "description": "The versions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageVersionInfo"
          }
        },
        "enableInAppStore": {
          "description": "A value indicating whether \\[enable in application store\\].",
          "type": "boolean"
        },
        "installs": {
          "format": "int32",
          "description": "The installs.",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Updates.PackageInfo"
    },
    "PackageTargetSystem": {
      "description": "Enum PackageType\r\n",
      "enum": [
        "Server",
        "MBTheater",
        "MBClassic",
        "Other"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Updates.PackageTargetSystem"
    },
    "PackageVersionInfo": {
      "description": "Class PackageVersionInfo\r\n",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name.",
          "type": "string"
        },
        "guid": {
          "description": "The guid.",
          "type": "string"
        },
        "versionStr": {
          "description": "The version STR.",
          "type": "string"
        },
        "classification": {
          "$ref": "#/definitions/PackageVersionClass"
        },
        "description": {
          "description": "The description.",
          "type": "string"
        },
        "requiredVersionStr": {
          "description": "The required version STR.",
          "type": "string"
        },
        "sourceUrl": {
          "description": "The source URL.",
          "type": "string"
        },
        "checksum": {
          "description": "The source URL.",
          "type": "string"
        },
        "targetFilename": {
          "description": "The target filename.",
          "type": "string"
        },
        "infoUrl": {
          "type": "string"
        },
        "runtimes": {
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Updates.PackageVersionInfo"
    },
    "PackageVersionClass": {
      "description": "Enum PackageVersionClass\r\n",
      "enum": [
        "Release",
        "Beta",
        "Dev"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Updates.PackageVersionClass"
    },
    "Playlists.PlaylistCreationResult": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ItemAddedCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Playlists.PlaylistCreationResult"
    },
    "Plugins.PluginInfo": {
      "description": "This is a serializable stub class that is used by the api to provide information about installed plugins.\r\n",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Version": {
          "description": "The version.",
          "type": "string"
        },
        "ConfigurationFileName": {
          "description": "The name of the configuration file.",
          "type": "string"
        },
        "Description": {
          "description": "The description.",
          "type": "string"
        },
        "Id": {
          "description": "The unique id.",
          "type": "string"
        },
        "ImageTag": {
          "description": "The image URL.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Plugins.PluginInfo"
    },
    "TaskInfo": {
      "description": "Class TaskInfo\r\n",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "State": {
          "$ref": "#/definitions/TaskState"
        },
        "CurrentProgressPercentage": {
          "format": "double",
          "description": "The progress.",
          "type": "number"
        },
        "Id": {
          "description": "The id.",
          "type": "string"
        },
        "LastExecutionResult": {
          "$ref": "#/definitions/TaskResult"
        },
        "Triggers": {
          "description": "The triggers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskTriggerInfo"
          }
        },
        "Description": {
          "description": "The description.",
          "type": "string"
        },
        "Category": {
          "description": "The category.",
          "type": "string"
        },
        "IsHidden": {
          "description": "A value indicating whether this instance is hidden.",
          "type": "boolean"
        },
        "Key": {
          "description": "The key.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Tasks.TaskInfo"
    },
    "TaskState": {
      "description": "Enum TaskState\r\n",
      "enum": [
        "Idle",
        "Cancelling",
        "Running"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Tasks.TaskState"
    },
    "TaskResult": {
      "description": "Class TaskExecutionInfo\r\n",
      "type": "object",
      "properties": {
        "StartTimeUtc": {
          "format": "date-time",
          "description": "The start time UTC.",
          "type": "string"
        },
        "EndTimeUtc": {
          "format": "date-time",
          "description": "The end time UTC.",
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/TaskCompletionStatus"
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Key": {
          "description": "The key.",
          "type": "string"
        },
        "Id": {
          "description": "The id.",
          "type": "string"
        },
        "ErrorMessage": {
          "description": "The error message.",
          "type": "string"
        },
        "LongErrorMessage": {
          "description": "The long error message.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Tasks.TaskResult"
    },
    "TaskCompletionStatus": {
      "description": "Enum TaskCompletionStatus\r\n",
      "enum": [
        "Completed",
        "Failed",
        "Cancelled",
        "Aborted"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Tasks.TaskCompletionStatus"
    },
    "TaskTriggerInfo": {
      "description": "Class TaskTriggerInfo\r\n",
      "type": "object",
      "properties": {
        "Type": {
          "description": "The type.",
          "type": "string"
        },
        "TimeOfDayTicks": {
          "format": "int64",
          "description": "The time of day.",
          "type": "integer"
        },
        "IntervalTicks": {
          "format": "int64",
          "description": "The interval.",
          "type": "integer"
        },
        "SystemEvent": {
          "$ref": "#/definitions/SystemEvent"
        },
        "DayOfWeek": {
          "$ref": "#/definitions/DayOfWeek"
        },
        "MaxRuntimeTicks": {
          "format": "int64",
          "description": "The maximum runtime ticks.",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Tasks.TaskTriggerInfo"
    },
    "SystemEvent": {
      "description": "Enum SystemEvent\r\n",
      "enum": [
        "WakeFromSleep",
        "DisplayConfigurationChange",
        "NetworkChange"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Tasks.SystemEvent"
    },
    "Session.SessionInfo": {
      "description": "Class SessionInfo\r\n",
      "type": "object",
      "properties": {
        "PlayState": {
          "$ref": "#/definitions/PlayerStateInfo"
        },
        "AdditionalUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SessionUserInfo"
          }
        },
        "RemoteEndPoint": {
          "format": "ipv4",
          "description": "The remote end point.",
          "type": "string"
        },
        "Protocol": {
          "type": "string"
        },
        "PlayableMediaTypes": {
          "description": "The playable media types.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PlaylistItemId": {
          "type": "string"
        },
        "PlaylistIndex": {
          "format": "int32",
          "type": "integer"
        },
        "PlaylistLength": {
          "format": "int32",
          "type": "integer"
        },
        "Id": {
          "description": "The id.",
          "type": "string"
        },
        "ServerId": {
          "type": "string"
        },
        "UserId": {
          "description": "The user id.",
          "type": "string"
        },
        "UserName": {
          "description": "The username.",
          "type": "string"
        },
        "UserPrimaryImageTag": {
          "type": "string"
        },
        "Client": {
          "description": "The type of the client.",
          "type": "string"
        },
        "LastActivityDate": {
          "format": "date-time",
          "description": "The last activity date.",
          "type": "string"
        },
        "DeviceName": {
          "description": "The name of the device.",
          "type": "string"
        },
        "DeviceType": {
          "type": "string"
        },
        "NowPlayingItem": {
          "$ref": "#/definitions/BaseItemDto"
        },
        "InternalDeviceId": {
          "format": "int64",
          "type": "integer"
        },
        "DeviceId": {
          "description": "The device id.",
          "type": "string"
        },
        "ApplicationVersion": {
          "description": "The application version.",
          "type": "string"
        },
        "AppIconUrl": {
          "description": "The application icon URL.",
          "type": "string"
        },
        "SupportedCommands": {
          "description": "The supported commands.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TranscodingInfo": {
          "$ref": "#/definitions/TranscodingInfo"
        },
        "SupportsRemoteControl": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Session.SessionInfo"
    },
    "PlayerStateInfo": {
      "type": "object",
      "properties": {
        "PositionTicks": {
          "format": "int64",
          "description": "The now playing position ticks.",
          "type": "integer"
        },
        "CanSeek": {
          "description": "A value indicating whether this instance can seek.",
          "type": "boolean"
        },
        "IsPaused": {
          "description": "A value indicating whether this instance is paused.",
          "type": "boolean"
        },
        "IsMuted": {
          "description": "A value indicating whether this instance is muted.",
          "type": "boolean"
        },
        "VolumeLevel": {
          "format": "int32",
          "description": "The volume level.",
          "type": "integer"
        },
        "AudioStreamIndex": {
          "format": "int32",
          "description": "The index of the now playing audio stream.",
          "type": "integer"
        },
        "SubtitleStreamIndex": {
          "format": "int32",
          "description": "The index of the now playing subtitle stream.",
          "type": "integer"
        },
        "MediaSourceId": {
          "description": "The now playing media version identifier.",
          "type": "string"
        },
        "PlayMethod": {
          "$ref": "#/definitions/PlayMethod"
        },
        "RepeatMode": {
          "$ref": "#/definitions/RepeatMode"
        },
        "SubtitleOffset": {
          "format": "int32",
          "type": "integer"
        },
        "PlaybackRate": {
          "format": "double",
          "type": "number"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Session.PlayerStateInfo"
    },
    "PlayMethod": {
      "enum": [
        "Transcode",
        "DirectStream",
        "DirectPlay"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Session.PlayMethod"
    },
    "RepeatMode": {
      "enum": [
        "RepeatNone",
        "RepeatAll",
        "RepeatOne"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Session.RepeatMode"
    },
    "SessionUserInfo": {
      "description": "Class SessionUserInfo.\r\n",
      "type": "object",
      "properties": {
        "UserId": {
          "description": "The user identifier.",
          "type": "string"
        },
        "UserName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "UserInternalId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Session.SessionUserInfo"
    },
    "TranscodingInfo": {
      "type": "object",
      "properties": {
        "AudioCodec": {
          "type": "string"
        },
        "VideoCodec": {
          "type": "string"
        },
        "SubProtocol": {
          "type": "string"
        },
        "Container": {
          "type": "string"
        },
        "IsVideoDirect": {
          "type": "boolean"
        },
        "IsAudioDirect": {
          "type": "boolean"
        },
        "Bitrate": {
          "format": "int32",
          "type": "integer"
        },
        "AudioBitrate": {
          "format": "int32",
          "type": "integer"
        },
        "VideoBitrate": {
          "format": "int32",
          "type": "integer"
        },
        "Framerate": {
          "format": "float",
          "type": "number"
        },
        "CompletionPercentage": {
          "format": "double",
          "type": "number"
        },
        "TranscodingPositionTicks": {
          "format": "double",
          "type": "number"
        },
        "TranscodingStartPositionTicks": {
          "format": "double",
          "type": "number"
        },
        "Width": {
          "format": "int32",
          "type": "integer"
        },
        "Height": {
          "format": "int32",
          "type": "integer"
        },
        "AudioChannels": {
          "format": "int32",
          "type": "integer"
        },
        "TranscodeReasons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TranscodeReason"
          }
        },
        "CurrentCpuUsage": {
          "format": "double",
          "description": "Deprecated, please use ProcessStatistics instead",
          "type": "number"
        },
        "AverageCpuUsage": {
          "format": "double",
          "description": "Deprecated, please use ProcessStatistics instead",
          "type": "number"
        },
        "CpuHistory": {
          "description": "Deprecated, please use ProcessStatistics instead",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tuple_Double-Double"
          }
        },
        "ProcessStatistics": {
          "$ref": "#/definitions/ProcessRun.Metrics.ProcessStatistics"
        },
        "CurrentThrottle": {
          "format": "int32",
          "type": "integer"
        },
        "VideoDecoder": {
          "type": "string"
        },
        "VideoDecoderIsHardware": {
          "type": "boolean"
        },
        "VideoDecoderMediaType": {
          "type": "string"
        },
        "VideoDecoderHwAccel": {
          "type": "string"
        },
        "VideoEncoder": {
          "type": "string"
        },
        "VideoEncoderIsHardware": {
          "type": "boolean"
        },
        "VideoEncoderMediaType": {
          "type": "string"
        },
        "VideoEncoderHwAccel": {
          "type": "string"
        },
        "VideoPipelineInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transcoding.VpStepInfo"
          }
        },
        "SubtitlePipelineInfos": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Transcoding.VpStepInfo"
            }
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Session.TranscodingInfo"
    },
    "TranscodeReason": {
      "enum": [
        "ContainerNotSupported",
        "VideoCodecNotSupported",
        "AudioCodecNotSupported",
        "ContainerBitrateExceedsLimit",
        "AudioBitrateNotSupported",
        "AudioChannelsNotSupported",
        "VideoResolutionNotSupported",
        "UnknownVideoStreamInfo",
        "UnknownAudioStreamInfo",
        "AudioProfileNotSupported",
        "AudioSampleRateNotSupported",
        "AnamorphicVideoNotSupported",
        "InterlacedVideoNotSupported",
        "SecondaryAudioNotSupported",
        "RefFramesNotSupported",
        "VideoBitDepthNotSupported",
        "VideoBitrateNotSupported",
        "VideoFramerateNotSupported",
        "VideoLevelNotSupported",
        "VideoProfileNotSupported",
        "AudioBitDepthNotSupported",
        "SubtitleCodecNotSupported",
        "DirectPlayError",
        "VideoRangeNotSupported",
        "SubtitleContentOptionsEnabled"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Session.TranscodeReason"
    },
    "Tuple_Double-Double": {
      "type": "object",
      "properties": {
        "Item1": {
          "format": "double",
          "type": "number"
        },
        "Item2": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ProcessRun.Metrics.ProcessStatistics": {
      "type": "object",
      "properties": {
        "CurrentCpu": {
          "format": "double",
          "description": "The current cpu.",
          "type": "number"
        },
        "AverageCpu": {
          "format": "double",
          "description": "The average cpu.",
          "type": "number"
        },
        "CurrentVirtualMemory": {
          "format": "double",
          "description": "The currently allocated virtual memory.",
          "type": "number"
        },
        "CurrentWorkingSet": {
          "format": "double",
          "description": "The currently allocated working set.",
          "type": "number"
        },
        "Metrics": {
          "description": "The metrics.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessRun.Metrics.ProcessMetricPoint"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.ProcessRun.Metrics.ProcessStatistics"
    },
    "ProcessRun.Metrics.ProcessMetricPoint": {
      "type": "object",
      "properties": {
        "Time": {
          "format": "time",
          "description": "The time.",
          "type": "string"
        },
        "CpuPercent": {
          "format": "double",
          "description": "The cpu percent.",
          "type": "number"
        },
        "VirtualMemory": {
          "format": "double",
          "description": "The virtual memory.",
          "type": "number"
        },
        "WorkingSet": {
          "format": "double",
          "description": "The working set.",
          "type": "number"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.ProcessRun.Metrics.ProcessMetricPoint"
    },
    "Transcoding.VpStepInfo": {
      "type": "object",
      "properties": {
        "StepType": {
          "$ref": "#/definitions/Transcoding.VpStepTypes"
        },
        "StepTypeName": {
          "type": "string"
        },
        "HardwareContextName": {
          "type": "string"
        },
        "IsHardwareContext": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        },
        "Short": {
          "type": "string"
        },
        "FfmpegName": {
          "type": "string"
        },
        "FfmpegDescription": {
          "type": "string"
        },
        "FfmpegOptions": {
          "type": "string"
        },
        "Param": {
          "type": "string"
        },
        "ParamShort": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Session.Transcoding.VpStepInfo"
    },
    "Transcoding.VpStepTypes": {
      "description": "Video Processing Step Type enum.\r\n",
      "enum": [
        "Decoder",
        "Encoder",
        "Scaling",
        "Deinterlace",
        "SubtitleOverlay",
        "ToneMapping",
        "ColorConversion",
        "SplitCaptions",
        "TextSub2Video",
        "GraphicSub2Video",
        "GraphicSub2Text",
        "BurnInTextSubs",
        "BurnInGraphicSubs",
        "ScaleSubs",
        "TextMod",
        "Censor",
        "ShowSpeaker",
        "StripStyles",
        "ConnectTo"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Session.Transcoding.VpStepTypes"
    },
    "ImageType": {
      "description": "Enum ImageType\r\n",
      "enum": [
        "Primary",
        "Art",
        "Backdrop",
        "Banner",
        "Logo",
        "Thumb",
        "Disc",
        "Box",
        "Screenshot",
        "Menu",
        "Chapter",
        "BoxRear",
        "Thumbnail",
        "LogoLight",
        "LogoLightColor"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Entities.ImageType"
    },
    "NameValuePair": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Value": {
          "description": "The value.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dto.NameValuePair"
    },
    "MBBackup.Api.RestoreOptions": {
      "type": "object",
      "properties": {
        "RestoreServerId": {
          "type": "boolean"
        },
        "UseFiles": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MBBackup.Api.RestoreOptions"
    },
    "MBBackup.Api.DataRestoreOptions": {
      "type": "object",
      "properties": {
        "Users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MBBackup.Api.UserRestoreInfo"
          }
        }
      },
      "x-internal-ref-name": "MBBackup.Api.DataRestoreOptions"
    },
    "MBBackup.Api.UserRestoreInfo": {
      "type": "object",
      "properties": {
        "SourceUserId": {
          "type": "string"
        },
        "TargetUserId": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MBBackup.Api.UserRestoreInfo"
    },
    "MBBackup.Api.AllBackupsInfo": {
      "type": "object",
      "properties": {
        "FullBackupInfo": {
          "$ref": "#/definitions/MBBackup.BackupInfo"
        },
        "LightBackups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MBBackup.BackupInfo"
          }
        }
      },
      "x-internal-ref-name": "MBBackup.Api.AllBackupsInfo"
    },
    "MBBackup.BackupInfo": {
      "type": "object",
      "properties": {
        "ServerVersion": {
          "type": "string"
        },
        "PluginVersion": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CanRestore": {
          "type": "boolean"
        },
        "IsFullBackup": {
          "type": "boolean"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "Users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameIdPair"
          }
        }
      },
      "x-internal-ref-name": "MBBackup.BackupInfo"
    },
    "Branding.BrandingOptions": {
      "type": "object",
      "properties": {
        "LoginDisclaimer": {
          "description": "The login disclaimer.",
          "type": "string"
        },
        "CustomCss": {
          "description": "The custom CSS.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Branding.BrandingOptions"
    },
    "Connect.ConnectAuthenticationExchangeResult": {
      "type": "object",
      "properties": {
        "LocalUserId": {
          "type": "string"
        },
        "AccessToken": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Server.Connect.ConnectAuthenticationExchangeResult"
    },
    "Devices.DeviceOptions": {
      "type": "object",
      "properties": {
        "CustomName": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Devices.DeviceOptions"
    },
    "Devices.ContentUploadHistory": {
      "type": "object",
      "properties": {
        "DeviceId": {
          "type": "string"
        },
        "FilesUploaded": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Devices.LocalFileInfo"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Devices.ContentUploadHistory"
    },
    "Devices.LocalFileInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Album": {
          "type": "string"
        },
        "MimeType": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Devices.LocalFileInfo"
    },
    "DisplayPreferences": {
      "description": "Defines the display preferences for any item that supports them (usually Folders)\r\n",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The user id.",
          "type": "string"
        },
        "SortBy": {
          "description": "The sort by.",
          "type": "string"
        },
        "CustomPrefs": {
          "description": "The custom prefs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "SortOrder": {
          "$ref": "#/definitions/SortOrder"
        },
        "Client": {
          "description": "The client",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Entities.DisplayPreferences"
    },
    "SortOrder": {
      "description": "Enum SortOrder\r\n",
      "enum": [
        "Ascending",
        "Descending"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Entities.SortOrder"
    },
    "Dlna.Profiles.DlnaProfile": {
      "type": "object",
      "properties": {
        "Type": {
          "$ref": "#/definitions/Dlna.Profiles.DeviceProfileType"
        },
        "Path": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "AlbumArtPn": {
          "type": "string"
        },
        "MaxAlbumArtWidth": {
          "format": "int32",
          "type": "integer"
        },
        "MaxAlbumArtHeight": {
          "format": "int32",
          "type": "integer"
        },
        "MaxIconWidth": {
          "format": "int32",
          "type": "integer"
        },
        "MaxIconHeight": {
          "format": "int32",
          "type": "integer"
        },
        "FriendlyName": {
          "type": "string"
        },
        "Manufacturer": {
          "type": "string"
        },
        "ManufacturerUrl": {
          "type": "string"
        },
        "ModelName": {
          "type": "string"
        },
        "ModelDescription": {
          "type": "string"
        },
        "ModelNumber": {
          "type": "string"
        },
        "ModelUrl": {
          "type": "string"
        },
        "SerialNumber": {
          "type": "string"
        },
        "EnableAlbumArtInDidl": {
          "type": "boolean"
        },
        "EnableSingleAlbumArtLimit": {
          "type": "boolean"
        },
        "EnableSingleSubtitleLimit": {
          "type": "boolean"
        },
        "ProtocolInfo": {
          "type": "string"
        },
        "TimelineOffsetSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "RequiresPlainVideoItems": {
          "type": "boolean"
        },
        "RequiresPlainFolders": {
          "type": "boolean"
        },
        "IgnoreTranscodeByteRangeRequests": {
          "type": "boolean"
        },
        "SupportsSamsungBookmark": {
          "type": "boolean"
        },
        "Identification": {
          "$ref": "#/definitions/Dlna.Profiles.DeviceIdentification"
        },
        "ProtocolInfoDetection": {
          "$ref": "#/definitions/Dlna.Profiles.ProtocolInfoDetection"
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "SupportedMediaTypes": {
          "type": "string"
        },
        "MaxStreamingBitrate": {
          "format": "int64",
          "type": "integer"
        },
        "MusicStreamingTranscodingBitrate": {
          "format": "int32",
          "type": "integer"
        },
        "MaxStaticMusicBitrate": {
          "format": "int32",
          "type": "integer"
        },
        "DirectPlayProfiles": {
          "description": "The direct play profiles.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DirectPlayProfile"
          }
        },
        "TranscodingProfiles": {
          "description": "The transcoding profiles.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TranscodingProfile"
          }
        },
        "ContainerProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerProfile"
          }
        },
        "CodecProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodecProfile"
          }
        },
        "ResponseProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseProfile"
          }
        },
        "SubtitleProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubtitleProfile"
          }
        }
      },
      "x-internal-ref-name": "Emby.Dlna.Profiles.DlnaProfile"
    },
    "Dlna.Profiles.DeviceProfileType": {
      "enum": [
        "System",
        "User"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Dlna.Profiles.DeviceProfileType"
    },
    "Dlna.Profiles.DeviceIdentification": {
      "type": "object",
      "properties": {
        "FriendlyName": {
          "type": "string"
        },
        "ModelNumber": {
          "type": "string"
        },
        "SerialNumber": {
          "type": "string"
        },
        "ModelName": {
          "type": "string"
        },
        "ModelDescription": {
          "type": "string"
        },
        "DeviceDescription": {
          "type": "string"
        },
        "ModelUrl": {
          "type": "string"
        },
        "Manufacturer": {
          "type": "string"
        },
        "ManufacturerUrl": {
          "type": "string"
        },
        "Headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dlna.Profiles.HttpHeaderInfo"
          }
        }
      },
      "x-internal-ref-name": "Emby.Dlna.Profiles.DeviceIdentification"
    },
    "Dlna.Profiles.HttpHeaderInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        },
        "Match": {
          "$ref": "#/definitions/Dlna.Profiles.HeaderMatchType"
        }
      },
      "x-internal-ref-name": "Emby.Dlna.Profiles.HttpHeaderInfo"
    },
    "Dlna.Profiles.HeaderMatchType": {
      "enum": [
        "Equals",
        "Regex",
        "Substring"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Dlna.Profiles.HeaderMatchType"
    },
    "Dlna.Profiles.ProtocolInfoDetection": {
      "type": "object",
      "properties": {
        "EnabledForVideo": {
          "type": "boolean"
        },
        "EnabledForAudio": {
          "type": "boolean"
        },
        "EnabledForPhotos": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "Emby.Dlna.Profiles.ProtocolInfoDetection"
    },
    "DirectPlayProfile": {
      "type": "object",
      "properties": {
        "Container": {
          "type": "string"
        },
        "AudioCodec": {
          "type": "string"
        },
        "VideoCodec": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/DlnaProfileType"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.DirectPlayProfile"
    },
    "DlnaProfileType": {
      "enum": [
        "Audio",
        "Video",
        "Photo"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.DlnaProfileType"
    },
    "TranscodingProfile": {
      "type": "object",
      "properties": {
        "Container": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/DlnaProfileType"
        },
        "VideoCodec": {
          "type": "string"
        },
        "AudioCodec": {
          "type": "string"
        },
        "Protocol": {
          "type": "string"
        },
        "EstimateContentLength": {
          "type": "boolean"
        },
        "EnableMpegtsM2TsMode": {
          "type": "boolean"
        },
        "TranscodeSeekInfo": {
          "$ref": "#/definitions/TranscodeSeekInfo"
        },
        "CopyTimestamps": {
          "type": "boolean"
        },
        "Context": {
          "$ref": "#/definitions/EncodingContext"
        },
        "MaxAudioChannels": {
          "type": "string"
        },
        "MinSegments": {
          "format": "int32",
          "type": "integer"
        },
        "SegmentLength": {
          "format": "int32",
          "type": "integer"
        },
        "BreakOnNonKeyFrames": {
          "type": "boolean"
        },
        "AllowInterlacedVideoStreamCopy": {
          "type": "boolean"
        },
        "ManifestSubtitles": {
          "type": "string"
        },
        "MaxManifestSubtitles": {
          "format": "int32",
          "type": "integer"
        },
        "MaxWidth": {
          "format": "int32",
          "type": "integer"
        },
        "MaxHeight": {
          "format": "int32",
          "type": "integer"
        },
        "FillEmptySubtitleSegments": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.TranscodingProfile"
    },
    "TranscodeSeekInfo": {
      "enum": [
        "Auto",
        "Bytes"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.TranscodeSeekInfo"
    },
    "EncodingContext": {
      "enum": [
        "Streaming",
        "Static"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.EncodingContext"
    },
    "ContainerProfile": {
      "type": "object",
      "properties": {
        "Type": {
          "$ref": "#/definitions/DlnaProfileType"
        },
        "Conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileCondition"
          }
        },
        "Container": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.ContainerProfile"
    },
    "ProfileCondition": {
      "type": "object",
      "properties": {
        "Condition": {
          "$ref": "#/definitions/ProfileConditionType"
        },
        "Property": {
          "$ref": "#/definitions/ProfileConditionValue"
        },
        "Value": {
          "type": "string"
        },
        "IsRequired": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.ProfileCondition"
    },
    "ProfileConditionType": {
      "enum": [
        "Equals",
        "NotEquals",
        "LessThanEqual",
        "GreaterThanEqual",
        "EqualsAny"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.ProfileConditionType"
    },
    "ProfileConditionValue": {
      "enum": [
        "AudioChannels",
        "AudioBitrate",
        "AudioProfile",
        "Width",
        "Height",
        "Has64BitOffsets",
        "PacketLength",
        "VideoBitDepth",
        "VideoBitrate",
        "VideoFramerate",
        "VideoLevel",
        "VideoProfile",
        "VideoTimestamp",
        "IsAnamorphic",
        "RefFrames",
        "NumAudioStreams",
        "NumVideoStreams",
        "IsSecondaryAudio",
        "VideoCodecTag",
        "IsAvc",
        "IsInterlaced",
        "AudioSampleRate",
        "AudioBitDepth",
        "VideoRange",
        "VideoRotation"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.ProfileConditionValue"
    },
    "CodecProfile": {
      "type": "object",
      "properties": {
        "Type": {
          "$ref": "#/definitions/CodecType"
        },
        "Conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileCondition"
          }
        },
        "ApplyConditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileCondition"
          }
        },
        "Codec": {
          "type": "string"
        },
        "Container": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.CodecProfile"
    },
    "CodecType": {
      "enum": [
        "Video",
        "VideoAudio",
        "Audio"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.CodecType"
    },
    "ResponseProfile": {
      "type": "object",
      "properties": {
        "Container": {
          "type": "string"
        },
        "AudioCodec": {
          "type": "string"
        },
        "VideoCodec": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/DlnaProfileType"
        },
        "OrgPn": {
          "type": "string"
        },
        "MimeType": {
          "type": "string"
        },
        "Conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileCondition"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.ResponseProfile"
    },
    "SubtitleProfile": {
      "type": "object",
      "properties": {
        "Format": {
          "type": "string"
        },
        "Method": {
          "$ref": "#/definitions/SubtitleDeliveryMethod"
        },
        "DidlMode": {
          "type": "string"
        },
        "Language": {
          "type": "string"
        },
        "Container": {
          "type": "string"
        },
        "Protocol": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.SubtitleProfile"
    },
    "Configuration.ToneMapping.ToneMapOptionsVisibility": {
      "type": "object",
      "properties": {
        "ShowAdvanced": {
          "type": "boolean"
        },
        "IsSoftwareToneMappingAvailable": {
          "type": "boolean"
        },
        "IsAnyHardwareToneMappingAvailable": {
          "type": "boolean"
        },
        "ShowNvidiaOptions": {
          "type": "boolean"
        },
        "ShowQuickSyncOptions": {
          "type": "boolean"
        },
        "ShowVaapiOptions": {
          "type": "boolean"
        },
        "IsOpenClAvailable": {
          "type": "boolean"
        },
        "IsOpenClSuperTAvailable": {
          "type": "boolean"
        },
        "IsVaapiNativeAvailable": {
          "type": "boolean"
        },
        "IsQuickSyncNativeAvailable": {
          "type": "boolean"
        },
        "OperatingSystem": {
          "$ref": "#/definitions/OperatingSystem"
        }
      },
      "x-internal-ref-name": "Emby.Server.MediaEncoding.Configuration.ToneMapping.ToneMapOptionsVisibility"
    },
    "OperatingSystem": {
      "enum": [
        "Windows",
        "Linux",
        "OSX",
        "BSD",
        "Android"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.System.OperatingSystem"
    },
    "EditObjectContainer": {
      "type": "object",
      "properties": {
        "Object": {
          "type": "object"
        },
        "DefaultObject": {
          "type": "object"
        },
        "TypeName": {
          "type": "string"
        },
        "EditorRoot": {
          "$ref": "#/definitions/Editors.EditorRoot"
        }
      },
      "x-internal-ref-name": "Emby.Web.GenericEdit.EditObjectContainer"
    },
    "Editors.EditorRoot": {
      "type": "object",
      "properties": {
        "PropertyConditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Conditions.PropertyCondition"
          }
        },
        "PostbackActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Actions.PostbackAction"
          }
        },
        "TitleButton": {
          "$ref": "#/definitions/Editors.EditorButtonItem"
        },
        "EditorItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Editors.EditorBase"
          }
        },
        "EditorType": {
          "$ref": "#/definitions/Common.EditorTypes"
        },
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "AllowEmpty": {
          "type": "boolean"
        },
        "IsReadOnly": {
          "type": "boolean"
        },
        "IsAdvanced": {
          "type": "boolean"
        },
        "DisplayName": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "ParentId": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Web.GenericEdit.Editors.EditorRoot"
    },
    "Conditions.PropertyCondition": {
      "type": "object",
      "properties": {
        "AffectedPropertyId": {
          "type": "string"
        },
        "ConditionType": {
          "$ref": "#/definitions/Conditions.PropertyConditionType"
        },
        "TargetPropertyId": {
          "description": "The target property name or path.",
          "type": "string"
        },
        "SimpleCondition": {
          "$ref": "#/definitions/Attributes.SimpleCondition"
        },
        "ValueCondition": {
          "$ref": "#/definitions/Attributes.ValueCondition"
        },
        "Value": {
          "description": "The value.",
          "type": "object"
        }
      },
      "x-internal-ref-name": "Emby.Web.GenericEdit.Conditions.PropertyCondition"
    },
    "Conditions.PropertyConditionType": {
      "enum": [
        "Visible",
        "Enabled"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Web.GenericEdit.Conditions.PropertyConditionType"
    },
    "Attributes.SimpleCondition": {
      "description": "Conditions on the source value.\r\n",
      "enum": [
        "IsTrue",
        "IsFalse",
        "IsNull",
        "IsNotNullOrEmpty"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Attributes.SimpleCondition"
    },
    "Attributes.ValueCondition": {
      "description": "Conditions for comparing with a target value.\r\n",
      "enum": [
        "IsEqual",
        "IsNotEqual",
        "IsGreater",
        "IsGreaterOrEqual",
        "IsLess",
        "IsLessOrEqual"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Attributes.ValueCondition"
    },
    "Actions.PostbackAction": {
      "type": "object",
      "properties": {
        "TargetEditorId": {
          "type": "string"
        },
        "PostbackCommandId": {
          "type": "string"
        },
        "CommandParameterPropertyId": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Web.GenericEdit.Actions.PostbackAction"
    },
    "Editors.EditorButtonItem": {
      "type": "object",
      "properties": {
        "EditorType": {
          "$ref": "#/definitions/Common.EditorTypes"
        },
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "AllowEmpty": {
          "type": "boolean"
        },
        "IsReadOnly": {
          "type": "boolean"
        },
        "IsAdvanced": {
          "type": "boolean"
        },
        "DisplayName": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "ParentId": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Web.GenericEdit.Editors.EditorButtonItem"
    },
    "Common.EditorTypes": {
      "enum": [
        "Group",
        "Text",
        "Numeric",
        "Boolean",
        "SelectSingle",
        "SelectMultiple",
        "Date",
        "FilePath",
        "FolderPath",
        "StatusItem",
        "ProgressItem",
        "ButtonItem",
        "ButtonGroup",
        "CaptionItem",
        "LabelItem",
        "ItemList",
        "RadioGroup",
        "DxDataGrid",
        "DxPivotGrid",
        "SpacerItem"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Web.GenericEdit.Common.EditorTypes"
    },
    "Editors.EditorBase": {
      "type": "object",
      "properties": {
        "EditorType": {
          "$ref": "#/definitions/Common.EditorTypes"
        },
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "AllowEmpty": {
          "type": "boolean"
        },
        "IsReadOnly": {
          "type": "boolean"
        },
        "IsAdvanced": {
          "type": "boolean"
        },
        "DisplayName": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "ParentId": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Web.GenericEdit.Editors.EditorBase"
    },
    "MediaEncoding.CodecParameterContext": {
      "enum": [
        "Playback",
        "Conversion"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Controller.MediaEncoding.CodecParameterContext"
    },
    "ValidatePath": {
      "type": "object",
      "properties": {
        "ValidateWriteable": {
          "type": "boolean"
        },
        "IsFile": {
          "type": "boolean"
        },
        "Username": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Api.ValidatePath"
    },
    "DefaultDirectoryBrowserInfo": {
      "type": "object",
      "properties": {
        "Path": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Api.DefaultDirectoryBrowserInfo"
    },
    "IO.FileSystemEntryInfo": {
      "description": "Class FileSystemEntryInfo\r\n",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Path": {
          "description": "The path.",
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/IO.FileSystemEntryType"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.IO.FileSystemEntryInfo"
    },
    "IO.FileSystemEntryType": {
      "description": "Enum FileSystemEntryType\r\n",
      "enum": [
        "File",
        "Directory",
        "NetworkComputer",
        "NetworkShare"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.IO.FileSystemEntryType"
    },
    "GetDirectoryContents": {
      "type": "object",
      "properties": {
        "Username": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Api.GetDirectoryContents"
    },
    "UserLibrary.UpdateUserItemAccess": {
      "type": "object",
      "properties": {
        "ItemIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ItemAccess": {
          "$ref": "#/definitions/UserItemShareLevel"
        }
      },
      "x-internal-ref-name": "Emby.Api.UserLibrary.UpdateUserItemAccess"
    },
    "UserItemShareLevel": {
      "enum": [
        "None",
        "Read",
        "Write",
        "Manage",
        "ManageDelete"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Dto.UserItemShareLevel"
    },
    "ItemCounts": {
      "description": "Class LibrarySummary\r\n",
      "type": "object",
      "properties": {
        "MovieCount": {
          "format": "int32",
          "description": "The movie count.",
          "type": "integer"
        },
        "SeriesCount": {
          "format": "int32",
          "description": "The series count.",
          "type": "integer"
        },
        "EpisodeCount": {
          "format": "int32",
          "description": "The episode count.",
          "type": "integer"
        },
        "GameCount": {
          "format": "int32",
          "description": "The game count.",
          "type": "integer"
        },
        "ArtistCount": {
          "format": "int32",
          "type": "integer"
        },
        "ProgramCount": {
          "format": "int32",
          "type": "integer"
        },
        "GameSystemCount": {
          "format": "int32",
          "description": "The game system count.",
          "type": "integer"
        },
        "TrailerCount": {
          "format": "int32",
          "description": "The trailer count.",
          "type": "integer"
        },
        "SongCount": {
          "format": "int32",
          "description": "The song count.",
          "type": "integer"
        },
        "AlbumCount": {
          "format": "int32",
          "description": "The album count.",
          "type": "integer"
        },
        "MusicVideoCount": {
          "format": "int32",
          "description": "The music video count.",
          "type": "integer"
        },
        "BoxSetCount": {
          "format": "int32",
          "description": "The box set count.",
          "type": "integer"
        },
        "BookCount": {
          "format": "int32",
          "description": "The book count.",
          "type": "integer"
        },
        "ItemCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dto.ItemCounts"
    },
    "Persistence.IntroDebugInfo": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer"
        },
        "Path": {
          "type": "string"
        },
        "Start": {
          "format": "int64",
          "type": "integer"
        },
        "End": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Persistence.IntroDebugInfo"
    },
    "Library.LibraryOptionsResult": {
      "type": "object",
      "properties": {
        "MetadataSavers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Library.LibraryOptionInfo"
          }
        },
        "MetadataReaders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Library.LibraryOptionInfo"
          }
        },
        "SubtitleFetchers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Library.LibraryOptionInfo"
          }
        },
        "LyricsFetchers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Library.LibraryOptionInfo"
          }
        },
        "TypeOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Library.LibraryTypeOptions"
          }
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.LibraryOptionsResult"
    },
    "Library.LibraryOptionInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "SetupUrl": {
          "type": "string"
        },
        "DefaultEnabled": {
          "type": "boolean"
        },
        "Features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataFeatures"
          }
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.LibraryOptionInfo"
    },
    "MetadataFeatures": {
      "enum": [
        "Collections",
        "Adult",
        "RequiredSetup"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.MetadataFeatures"
    },
    "Library.LibraryTypeOptions": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "MetadataFetchers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Library.LibraryOptionInfo"
          }
        },
        "ImageFetchers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Library.LibraryOptionInfo"
          }
        },
        "SupportedImageTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageType"
          }
        },
        "DefaultImageOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageOption"
          }
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.LibraryTypeOptions"
    },
    "ImageOption": {
      "type": "object",
      "properties": {
        "Type": {
          "$ref": "#/definitions/ImageType"
        },
        "Limit": {
          "format": "int32",
          "description": "The limit.",
          "type": "integer"
        },
        "MinWidth": {
          "format": "int32",
          "description": "The minimum width.",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.ImageOption"
    },
    "Library.MediaFolder": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Guid": {
          "type": "string"
        },
        "SubFolders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Library.SubFolder"
          }
        },
        "IsUserAccessConfigurable": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.MediaFolder"
    },
    "Library.SubFolder": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "IsUserAccessConfigurable": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.SubFolder"
    },
    "Library.AddVirtualFolder": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "CollectionType": {
          "type": "string"
        },
        "RefreshLibrary": {
          "type": "boolean"
        },
        "Paths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LibraryOptions": {
          "$ref": "#/definitions/LibraryOptions"
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.AddVirtualFolder"
    },
    "LibraryOptions": {
      "type": "object",
      "properties": {
        "EnableArchiveMediaFiles": {
          "type": "boolean"
        },
        "EnablePhotos": {
          "type": "boolean"
        },
        "EnableRealtimeMonitor": {
          "type": "boolean"
        },
        "EnableMarkerDetection": {
          "type": "boolean"
        },
        "EnableMarkerDetectionDuringLibraryScan": {
          "type": "boolean"
        },
        "IntroDetectionFingerprintLength": {
          "format": "int32",
          "type": "integer"
        },
        "EnableChapterImageExtraction": {
          "type": "boolean"
        },
        "ExtractChapterImagesDuringLibraryScan": {
          "type": "boolean"
        },
        "DownloadImagesInAdvance": {
          "type": "boolean"
        },
        "CacheImages": {
          "type": "boolean"
        },
        "PathInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaPathInfo"
          }
        },
        "IgnoreHiddenFiles": {
          "type": "boolean"
        },
        "IgnoreFileExtensions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SaveLocalMetadata": {
          "type": "boolean"
        },
        "SaveMetadataHidden": {
          "type": "boolean"
        },
        "SaveLocalThumbnailSets": {
          "type": "boolean"
        },
        "ImportPlaylists": {
          "type": "boolean"
        },
        "EnableAutomaticSeriesGrouping": {
          "type": "boolean"
        },
        "ShareEmbeddedMusicAlbumImages": {
          "type": "boolean"
        },
        "EnableEmbeddedTitles": {
          "type": "boolean"
        },
        "EnableAudioResume": {
          "type": "boolean"
        },
        "AutoGenerateChapters": {
          "type": "boolean"
        },
        "AutomaticRefreshIntervalDays": {
          "format": "int32",
          "type": "integer"
        },
        "PlaceholderMetadataRefreshIntervalDays": {
          "format": "int32",
          "type": "integer"
        },
        "PreferredMetadataLanguage": {
          "description": "The preferred metadata language.",
          "type": "string"
        },
        "PreferredImageLanguage": {
          "type": "string"
        },
        "ContentType": {
          "type": "string"
        },
        "MetadataCountryCode": {
          "description": "The metadata country code.",
          "type": "string"
        },
        "MetadataSavers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DisabledLocalMetadataReaders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LocalMetadataReaderOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DisabledLyricsFetchers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SaveLyricsWithMedia": {
          "type": "boolean"
        },
        "LyricsDownloadMaxAgeDays": {
          "format": "int32",
          "type": "integer"
        },
        "LyricsFetcherOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LyricsDownloadLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DisabledSubtitleFetchers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SubtitleFetcherOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SkipSubtitlesIfEmbeddedSubtitlesPresent": {
          "type": "boolean"
        },
        "SkipSubtitlesIfAudioTrackMatches": {
          "type": "boolean"
        },
        "SubtitleDownloadLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SubtitleDownloadMaxAgeDays": {
          "format": "int32",
          "type": "integer"
        },
        "RequirePerfectSubtitleMatch": {
          "type": "boolean"
        },
        "SaveSubtitlesWithMedia": {
          "type": "boolean"
        },
        "ForcedSubtitlesOnly": {
          "type": "boolean"
        },
        "HearingImpairedSubtitlesOnly": {
          "type": "boolean"
        },
        "TypeOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypeOptions"
          }
        },
        "CollapseSingleItemFolders": {
          "type": "boolean"
        },
        "EnableAdultMetadata": {
          "type": "boolean"
        },
        "ImportCollections": {
          "type": "boolean"
        },
        "MinCollectionItems": {
          "format": "int32",
          "type": "integer"
        },
        "MusicFolderStructure": {
          "type": "string"
        },
        "MinResumePct": {
          "format": "int32",
          "description": "The minimum percentage of an item that must be played in order for playstate to be updated.",
          "type": "integer"
        },
        "MaxResumePct": {
          "format": "int32",
          "description": "The maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.",
          "type": "integer"
        },
        "MinResumeDurationSeconds": {
          "format": "int32",
          "description": "The minimum duration that an item must have in order to be eligible for playstate updates..",
          "type": "integer"
        },
        "ThumbnailImagesIntervalSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "SampleIgnoreSize": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.LibraryOptions"
    },
    "MediaPathInfo": {
      "type": "object",
      "properties": {
        "Path": {
          "type": "string"
        },
        "NetworkPath": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.MediaPathInfo"
    },
    "TypeOptions": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "MetadataFetchers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MetadataFetcherOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ImageFetchers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ImageFetcherOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ImageOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageOption"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.TypeOptions"
    },
    "LiveStreamRequest": {
      "type": "object",
      "properties": {
        "OpenToken": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "PlaySessionId": {
          "type": "string"
        },
        "MaxStreamingBitrate": {
          "format": "int64",
          "type": "integer"
        },
        "StartTimeTicks": {
          "format": "int64",
          "type": "integer"
        },
        "AudioStreamIndex": {
          "format": "int32",
          "type": "integer"
        },
        "SubtitleStreamIndex": {
          "format": "int32",
          "type": "integer"
        },
        "MaxAudioChannels": {
          "format": "int32",
          "type": "integer"
        },
        "ItemId": {
          "format": "int64",
          "type": "integer"
        },
        "DeviceProfile": {
          "$ref": "#/definitions/DeviceProfile"
        },
        "EnableDirectPlay": {
          "type": "boolean"
        },
        "EnableDirectStream": {
          "type": "boolean"
        },
        "EnableTranscoding": {
          "type": "boolean"
        },
        "AllowVideoStreamCopy": {
          "type": "boolean"
        },
        "AllowInterlacedVideoStreamCopy": {
          "type": "boolean"
        },
        "AllowAudioStreamCopy": {
          "type": "boolean"
        },
        "DirectPlayProtocols": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaProtocol"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.MediaInfo.LiveStreamRequest"
    },
    "DeviceProfile": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "SupportedMediaTypes": {
          "type": "string"
        },
        "MaxStreamingBitrate": {
          "format": "int64",
          "type": "integer"
        },
        "MusicStreamingTranscodingBitrate": {
          "format": "int32",
          "type": "integer"
        },
        "MaxStaticMusicBitrate": {
          "format": "int32",
          "type": "integer"
        },
        "DirectPlayProfiles": {
          "description": "The direct play profiles.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DirectPlayProfile"
          }
        },
        "TranscodingProfiles": {
          "description": "The transcoding profiles.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TranscodingProfile"
          }
        },
        "ContainerProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerProfile"
          }
        },
        "CodecProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodecProfile"
          }
        },
        "ResponseProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseProfile"
          }
        },
        "SubtitleProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubtitleProfile"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.DeviceProfile"
    },
    "LiveStreamResponse": {
      "type": "object",
      "properties": {
        "MediaSource": {
          "$ref": "#/definitions/MediaSourceInfo"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.MediaInfo.LiveStreamResponse"
    },
    "Api.SetChannelMapping": {
      "type": "object",
      "properties": {
        "TunerChannelId": {
          "type": "string"
        },
        "ProviderChannelId": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.LiveTV.Api.SetChannelMapping"
    },
    "LiveTv.ListingsProviderInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "SetupUrl": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Username": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "ListingsId": {
          "type": "string"
        },
        "ZipCode": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "EnabledTuners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EnableAllTuners": {
          "type": "boolean"
        },
        "NewsCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SportsCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "KidsCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MovieCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ChannelMappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValuePair"
          }
        },
        "MoviePrefix": {
          "type": "string"
        },
        "PreferredLanguage": {
          "type": "string"
        },
        "UserAgent": {
          "type": "string"
        },
        "DataVersion": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.LiveTv.ListingsProviderInfo"
    },
    "LiveTv.TunerHostInfo": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "DeviceId": {
          "type": "string"
        },
        "FriendlyName": {
          "type": "string"
        },
        "SetupUrl": {
          "type": "string"
        },
        "ImportFavoritesOnly": {
          "type": "boolean"
        },
        "PreferEpgChannelImages": {
          "type": "boolean"
        },
        "PreferEpgChannelNumbers": {
          "type": "boolean"
        },
        "AllowHWTranscoding": {
          "type": "boolean"
        },
        "AllowMappingByNumber": {
          "type": "boolean"
        },
        "ImportGuideData": {
          "type": "boolean"
        },
        "Source": {
          "type": "string"
        },
        "TunerCount": {
          "format": "int32",
          "type": "integer"
        },
        "UserAgent": {
          "type": "string"
        },
        "Referrer": {
          "type": "string"
        },
        "ProviderOptions": {
          "type": "string"
        },
        "DataVersion": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.LiveTv.TunerHostInfo"
    },
    "LiveTv.LiveTvInfo": {
      "type": "object",
      "properties": {
        "IsEnabled": {
          "description": "A value indicating whether this instance is enabled.",
          "type": "boolean"
        },
        "EnabledUsers": {
          "description": "The enabled users.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.LiveTv.LiveTvInfo"
    },
    "LiveTv.ChannelType": {
      "description": "Enum ChannelType\r\n",
      "enum": [
        "TV",
        "Radio"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.LiveTv.ChannelType"
    },
    "QueryResult_Api.EpgRow": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.EpgRow"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Api.EpgRow": {
      "type": "object",
      "properties": {
        "Channel": {
          "$ref": "#/definitions/BaseItemDto"
        },
        "Programs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseItemDto"
          }
        }
      },
      "x-internal-ref-name": "Emby.LiveTV.Api.EpgRow"
    },
    "Api.BaseItemsRequest": {
      "type": "object",
      "properties": {
        "Is4K": {
          "type": "boolean"
        },
        "EnableTotalRecordCount": {
          "type": "boolean"
        },
        "RecordingKeyword": {
          "type": "string"
        },
        "RecordingKeywordType": {
          "$ref": "#/definitions/LiveTv.KeywordType"
        },
        "RandomSeed": {
          "format": "int32",
          "type": "integer"
        },
        "GenreIds": {
          "type": "string"
        },
        "CollectionIds": {
          "type": "string"
        },
        "TagIds": {
          "type": "string"
        },
        "ExcludeTagIds": {
          "type": "string"
        },
        "ExcludeArtistIds": {
          "type": "string"
        },
        "AlbumArtistIds": {
          "type": "string"
        },
        "ContributingArtistIds": {
          "type": "string"
        },
        "AlbumIds": {
          "type": "string"
        },
        "OuterIds": {
          "type": "string"
        },
        "ListItemIds": {
          "type": "string"
        },
        "AudioLanguages": {
          "type": "string"
        },
        "SubtitleLanguages": {
          "type": "string"
        },
        "CanEditItems": {
          "type": "boolean"
        },
        "GroupItemsInto": {
          "$ref": "#/definitions/Library.ItemLinkType"
        },
        "MinWidth": {
          "format": "int32",
          "type": "integer"
        },
        "MinHeight": {
          "format": "int32",
          "type": "integer"
        },
        "MaxWidth": {
          "format": "int32",
          "type": "integer"
        },
        "MaxHeight": {
          "format": "int32",
          "type": "integer"
        },
        "GroupProgramsBySeries": {
          "type": "boolean"
        },
        "AirDays": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DayOfWeek"
          }
        },
        "IsAiring": {
          "type": "boolean"
        },
        "HasAired": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Api.BaseItemsRequest"
    },
    "LiveTv.KeywordType": {
      "enum": [
        "Name",
        "EpisodeTitle",
        "Overview",
        "Actor",
        "Director"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.LiveTv.KeywordType"
    },
    "Library.ItemLinkType": {
      "enum": [
        "Artists",
        "AlbumArtists",
        "Genres",
        "Studios",
        "Tags",
        "Composers",
        "Collections",
        "Albums",
        "CollectionFolders"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Controller.Library.ItemLinkType"
    },
    "LiveTv.RecordingStatus": {
      "enum": [
        "New",
        "InProgress",
        "Completed",
        "Cancelled",
        "ConflictedOk",
        "ConflictedNotOk",
        "Error"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.LiveTv.RecordingStatus"
    },
    "QueryResult_LiveTv.TimerInfoDto": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiveTv.TimerInfoDto"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "LiveTv.TimerInfoDto": {
      "type": "object",
      "properties": {
        "Status": {
          "$ref": "#/definitions/LiveTv.RecordingStatus"
        },
        "SeriesTimerId": {
          "description": "The series timer identifier.",
          "type": "string"
        },
        "RunTimeTicks": {
          "format": "int64",
          "description": "The run time ticks.",
          "type": "integer"
        },
        "ProgramInfo": {
          "$ref": "#/definitions/BaseItemDto"
        },
        "TimerType": {
          "$ref": "#/definitions/LiveTv.TimerType"
        },
        "Id": {
          "description": "Id of the recording.",
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "ServerId": {
          "description": "The server identifier.",
          "type": "string"
        },
        "ChannelId": {
          "description": "ChannelId of the recording.",
          "type": "string"
        },
        "ChannelName": {
          "description": "ChannelName of the recording.",
          "type": "string"
        },
        "ChannelNumber": {
          "type": "string"
        },
        "ChannelPrimaryImageTag": {
          "type": "string"
        },
        "ProgramId": {
          "description": "The program identifier.",
          "type": "string"
        },
        "Name": {
          "description": "Name of the recording.",
          "type": "string"
        },
        "Overview": {
          "description": "Description of the recording.",
          "type": "string"
        },
        "ParentFolderId": {
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "description": "The start date of the recording, in UTC.",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "description": "The end date of the recording, in UTC.",
          "type": "string"
        },
        "Priority": {
          "format": "int32",
          "description": "The priority.",
          "type": "integer"
        },
        "PrePaddingSeconds": {
          "format": "int32",
          "description": "The pre padding seconds.",
          "type": "integer"
        },
        "PostPaddingSeconds": {
          "format": "int32",
          "description": "The post padding seconds.",
          "type": "integer"
        },
        "IsPrePaddingRequired": {
          "description": "A value indicating whether this instance is pre padding required.",
          "type": "boolean"
        },
        "ParentBackdropItemId": {
          "description": "If the item does not have any backdrops, this will hold the Id of the Parent that has one.",
          "type": "string"
        },
        "ParentBackdropImageTags": {
          "description": "The parent backdrop image tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IsPostPaddingRequired": {
          "description": "A value indicating whether this instance is post padding required.",
          "type": "boolean"
        },
        "KeepUntil": {
          "$ref": "#/definitions/LiveTv.KeepUntil"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.LiveTv.TimerInfoDto"
    },
    "LiveTv.KeepUntil": {
      "enum": [
        "UntilDeleted",
        "UntilSpaceNeeded",
        "UntilWatched",
        "UntilDate"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.LiveTv.KeepUntil"
    },
    "QueryResult_LiveTv.SeriesTimerInfoDto": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiveTv.SeriesTimerInfoDto"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "LiveTv.SeriesTimerInfoDto": {
      "description": "Class SeriesTimerInfoDto.\r\n",
      "type": "object",
      "properties": {
        "RecordAnyTime": {
          "description": "A value indicating whether \\[record any time\\].",
          "type": "boolean"
        },
        "SkipEpisodesInLibrary": {
          "type": "boolean"
        },
        "RecordAnyChannel": {
          "description": "A value indicating whether \\[record any channel\\].",
          "type": "boolean"
        },
        "KeepUpTo": {
          "format": "int32",
          "type": "integer"
        },
        "MaxRecordingSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "RecordNewOnly": {
          "description": "A value indicating whether \\[record new only\\].",
          "type": "boolean"
        },
        "ChannelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Days": {
          "description": "The days.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DayOfWeek"
          }
        },
        "ImageTags": {
          "description": "The image tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ParentThumbItemId": {
          "description": "The parent thumb item id.",
          "type": "string"
        },
        "ParentThumbImageTag": {
          "description": "The parent thumb image tag.",
          "type": "string"
        },
        "ParentPrimaryImageItemId": {
          "description": "The parent primary image item identifier.",
          "type": "string"
        },
        "ParentPrimaryImageTag": {
          "description": "The parent primary image tag.",
          "type": "string"
        },
        "SeriesId": {
          "type": "string"
        },
        "Keywords": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiveTv.KeywordInfo"
          }
        },
        "TimerType": {
          "$ref": "#/definitions/LiveTv.TimerType"
        },
        "Id": {
          "description": "Id of the recording.",
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "ServerId": {
          "description": "The server identifier.",
          "type": "string"
        },
        "ChannelId": {
          "description": "ChannelId of the recording.",
          "type": "string"
        },
        "ChannelName": {
          "description": "ChannelName of the recording.",
          "type": "string"
        },
        "ChannelNumber": {
          "type": "string"
        },
        "ChannelPrimaryImageTag": {
          "type": "string"
        },
        "ProgramId": {
          "description": "The program identifier.",
          "type": "string"
        },
        "Name": {
          "description": "Name of the recording.",
          "type": "string"
        },
        "Overview": {
          "description": "Description of the recording.",
          "type": "string"
        },
        "ParentFolderId": {
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "description": "The start date of the recording, in UTC.",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "description": "The end date of the recording, in UTC.",
          "type": "string"
        },
        "Priority": {
          "format": "int32",
          "description": "The priority.",
          "type": "integer"
        },
        "PrePaddingSeconds": {
          "format": "int32",
          "description": "The pre padding seconds.",
          "type": "integer"
        },
        "PostPaddingSeconds": {
          "format": "int32",
          "description": "The post padding seconds.",
          "type": "integer"
        },
        "IsPrePaddingRequired": {
          "description": "A value indicating whether this instance is pre padding required.",
          "type": "boolean"
        },
        "ParentBackdropItemId": {
          "description": "If the item does not have any backdrops, this will hold the Id of the Parent that has one.",
          "type": "string"
        },
        "ParentBackdropImageTags": {
          "description": "The parent backdrop image tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IsPostPaddingRequired": {
          "description": "A value indicating whether this instance is post padding required.",
          "type": "boolean"
        },
        "KeepUntil": {
          "$ref": "#/definitions/LiveTv.KeepUntil"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.LiveTv.SeriesTimerInfoDto"
    },
    "LiveTv.KeywordInfo": {
      "type": "object",
      "properties": {
        "KeywordType": {
          "$ref": "#/definitions/LiveTv.KeywordType"
        },
        "Keyword": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.LiveTv.KeywordInfo"
    },
    "LiveTv.SeriesTimerInfo": {
      "type": "object",
      "properties": {
        "Id": {
          "description": "Id of the recording.",
          "type": "string"
        },
        "ChannelId": {
          "description": "ChannelId of the recording.",
          "type": "string"
        },
        "ChannelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ParentFolderId": {
          "format": "int64",
          "type": "integer"
        },
        "ProgramId": {
          "description": "The program identifier.",
          "type": "string"
        },
        "Name": {
          "description": "Name of the recording.",
          "type": "string"
        },
        "ServiceName": {
          "type": "string"
        },
        "Overview": {
          "description": "Description of the recording.",
          "type": "string"
        },
        "StartDate": {
          "format": "date-time",
          "description": "The start date of the recording, in UTC.",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "description": "The end date of the recording, in UTC.",
          "type": "string"
        },
        "RecordAnyTime": {
          "description": "A value indicating whether \\[record any time\\].",
          "type": "boolean"
        },
        "KeepUpTo": {
          "format": "int32",
          "type": "integer"
        },
        "KeepUntil": {
          "$ref": "#/definitions/LiveTv.KeepUntil"
        },
        "SkipEpisodesInLibrary": {
          "type": "boolean"
        },
        "RecordNewOnly": {
          "description": "A value indicating whether \\[record new only\\].",
          "type": "boolean"
        },
        "Days": {
          "description": "The days.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DayOfWeek"
          }
        },
        "Priority": {
          "format": "int32",
          "description": "The priority.",
          "type": "integer"
        },
        "PrePaddingSeconds": {
          "format": "int32",
          "description": "The pre padding seconds.",
          "type": "integer"
        },
        "PostPaddingSeconds": {
          "format": "int32",
          "description": "The post padding seconds.",
          "type": "integer"
        },
        "IsPrePaddingRequired": {
          "description": "A value indicating whether this instance is pre padding required.",
          "type": "boolean"
        },
        "IsPostPaddingRequired": {
          "description": "A value indicating whether this instance is post padding required.",
          "type": "boolean"
        },
        "SeriesId": {
          "description": "The series identifier.",
          "type": "string"
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "MaxRecordingSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "Keywords": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LiveTv.KeywordInfo"
          }
        },
        "TimerType": {
          "$ref": "#/definitions/LiveTv.TimerType"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.LiveTv.SeriesTimerInfo"
    },
    "LiveTv.GuideInfo": {
      "type": "object",
      "properties": {
        "StartDate": {
          "format": "date-time",
          "description": "The start date.",
          "type": "string"
        },
        "EndDate": {
          "format": "date-time",
          "description": "The end date.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.LiveTv.GuideInfo"
    },
    "Api.AvailableRecordingOptions": {
      "type": "object",
      "properties": {
        "RecordingFolders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.NameIdDescriptionPair"
          }
        },
        "MovieRecordingFolders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.NameIdDescriptionPair"
          }
        },
        "SeriesRecordingFolders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.NameIdDescriptionPair"
          }
        }
      },
      "x-internal-ref-name": "Emby.LiveTV.Api.AvailableRecordingOptions"
    },
    "Api.NameIdDescriptionPair": {
      "type": "object",
      "properties": {
        "ShortOverview": {
          "type": "string"
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Id": {
          "description": "The identifier.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.LiveTV.Api.NameIdDescriptionPair"
    },
    "ParentalRating": {
      "description": "Class ParentalRating\r\n",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Value": {
          "format": "int32",
          "description": "The value.",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Entities.ParentalRating"
    },
    "Globalization.LocalizatonOption": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Globalization.LocalizatonOption"
    },
    "Globalization.CountryInfo": {
      "description": "Class CountryInfo\r\n",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "DisplayName": {
          "description": "The display name.",
          "type": "string"
        },
        "EnglishName": {
          "description": "The English name.",
          "type": "string"
        },
        "TwoLetterISORegionName": {
          "description": "The name of the two letter ISO region.",
          "type": "string"
        },
        "ThreeLetterISORegionName": {
          "description": "The name of the three letter ISO region.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Globalization.CountryInfo"
    },
    "Globalization.CultureDto": {
      "description": "Class CultureDto\r\n",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "DisplayName": {
          "description": "The display name.",
          "type": "string"
        },
        "TwoLetterISOLanguageName": {
          "description": "The name of the two letter ISO language.",
          "type": "string"
        },
        "ThreeLetterISOLanguageName": {
          "description": "The name of the three letter ISO language.",
          "type": "string"
        },
        "ThreeLetterISOLanguageNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TwoLetterISOLanguageNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Globalization.CultureDto"
    },
    "RecommendationDto": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseItemDto"
          }
        },
        "RecommendationType": {
          "$ref": "#/definitions/RecommendationType"
        },
        "BaselineItemName": {
          "type": "string"
        },
        "CategoryId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dto.RecommendationDto"
    },
    "RecommendationType": {
      "enum": [
        "SimilarToRecentlyPlayed",
        "SimilarToLikedItem",
        "HasDirectorFromRecentlyPlayed",
        "HasActorFromRecentlyPlayed",
        "HasLikedDirector",
        "HasLikedActor"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Dto.RecommendationType"
    },
    "NotificationCategoryInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationTypeInfo"
          }
        }
      },
      "x-internal-ref-name": "Emby.Notifications.NotificationCategoryInfo"
    },
    "NotificationTypeInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "CategoryName": {
          "type": "string"
        },
        "CategoryId": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Notifications.NotificationTypeInfo"
    },
    "PlaybackStartInfo": {
      "description": "Class PlaybackStartInfo.\r\n",
      "type": "object",
      "properties": {
        "CanSeek": {
          "description": "A value indicating whether this instance can seek.",
          "type": "boolean"
        },
        "Item": {
          "$ref": "#/definitions/BaseItemDto"
        },
        "NowPlayingQueue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueueItem"
          }
        },
        "PlaylistItemId": {
          "type": "string"
        },
        "ItemId": {
          "description": "The item identifier.",
          "type": "string"
        },
        "SessionId": {
          "description": "The session id.",
          "type": "string"
        },
        "MediaSourceId": {
          "description": "The media version identifier.",
          "type": "string"
        },
        "AudioStreamIndex": {
          "format": "int32",
          "description": "The index of the audio stream.",
          "type": "integer"
        },
        "SubtitleStreamIndex": {
          "format": "int32",
          "description": "The index of the subtitle stream.",
          "type": "integer"
        },
        "IsPaused": {
          "description": "A value indicating whether this instance is paused.",
          "type": "boolean"
        },
        "PlaylistIndex": {
          "format": "int32",
          "type": "integer"
        },
        "PlaylistLength": {
          "format": "int32",
          "type": "integer"
        },
        "IsMuted": {
          "description": "A value indicating whether this instance is muted.",
          "type": "boolean"
        },
        "PositionTicks": {
          "format": "int64",
          "description": "The position ticks.",
          "type": "integer"
        },
        "RunTimeTicks": {
          "format": "int64",
          "type": "integer"
        },
        "PlaybackStartTimeTicks": {
          "format": "int64",
          "type": "integer"
        },
        "VolumeLevel": {
          "format": "int32",
          "description": "The volume level.",
          "type": "integer"
        },
        "Brightness": {
          "format": "int32",
          "type": "integer"
        },
        "AspectRatio": {
          "type": "string"
        },
        "EventName": {
          "$ref": "#/definitions/ProgressEvent"
        },
        "PlayMethod": {
          "$ref": "#/definitions/PlayMethod"
        },
        "LiveStreamId": {
          "description": "The live stream identifier.",
          "type": "string"
        },
        "PlaySessionId": {
          "description": "The play session identifier.",
          "type": "string"
        },
        "RepeatMode": {
          "$ref": "#/definitions/RepeatMode"
        },
        "SubtitleOffset": {
          "format": "int32",
          "type": "integer"
        },
        "PlaybackRate": {
          "format": "double",
          "type": "number"
        },
        "PlaylistItemIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Session.PlaybackStartInfo"
    },
    "QueueItem": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer"
        },
        "PlaylistItemId": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Session.QueueItem"
    },
    "ProgressEvent": {
      "enum": [
        "TimeUpdate",
        "Pause",
        "Unpause",
        "VolumeChange",
        "RepeatModeChange",
        "AudioTrackChange",
        "SubtitleTrackChange",
        "PlaylistItemMove",
        "PlaylistItemRemove",
        "PlaylistItemAdd",
        "QualityChange",
        "StateChange",
        "SubtitleOffsetChange",
        "PlaybackRateChange"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Session.ProgressEvent"
    },
    "SyncTarget": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Id": {
          "description": "The identifier.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Sync.SyncTarget"
    },
    "QueryResult_SyncJob": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncJob"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SyncJob": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "description": "The identifier.",
          "type": "integer"
        },
        "TargetId": {
          "description": "The device identifier.",
          "type": "string"
        },
        "InternalTargetId": {
          "format": "int64",
          "type": "integer"
        },
        "TargetName": {
          "description": "The name of the target.",
          "type": "string"
        },
        "Quality": {
          "description": "The quality.",
          "type": "string"
        },
        "Bitrate": {
          "format": "int32",
          "description": "The bitrate.",
          "type": "integer"
        },
        "Container": {
          "type": "string"
        },
        "VideoCodec": {
          "type": "string"
        },
        "AudioCodec": {
          "type": "string"
        },
        "Profile": {
          "description": "The profile.",
          "type": "string"
        },
        "Category": {
          "$ref": "#/definitions/SyncCategory"
        },
        "ParentId": {
          "format": "int64",
          "description": "The parent identifier.",
          "type": "integer"
        },
        "Progress": {
          "format": "double",
          "description": "The current progress.",
          "type": "number"
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/SyncJobStatus"
        },
        "UserId": {
          "format": "int64",
          "description": "The user identifier.",
          "type": "integer"
        },
        "UnwatchedOnly": {
          "description": "A value indicating whether \\[unwatched only\\].",
          "type": "boolean"
        },
        "SyncNewContent": {
          "description": "A value indicating whether \\[synchronize new content\\].",
          "type": "boolean"
        },
        "ItemLimit": {
          "format": "int32",
          "description": "The item limit.",
          "type": "integer"
        },
        "RequestedItemIds": {
          "description": "The requested item ids.",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "ItemId": {
          "format": "int64",
          "type": "integer"
        },
        "DateCreated": {
          "format": "date-time",
          "description": "The date created.",
          "type": "string"
        },
        "DateLastModified": {
          "format": "date-time",
          "description": "The date last modified.",
          "type": "string"
        },
        "ItemCount": {
          "format": "int32",
          "description": "The item count.",
          "type": "integer"
        },
        "ParentName": {
          "type": "string"
        },
        "PrimaryImageItemId": {
          "type": "string"
        },
        "PrimaryImageTag": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Sync.SyncJob"
    },
    "SyncCategory": {
      "enum": [
        "Latest",
        "NextUp",
        "Resume"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Sync.SyncCategory"
    },
    "SyncJobStatus": {
      "enum": [
        "Queued",
        "Converting",
        "ReadyToTransfer",
        "Transferring",
        "Completed",
        "CompletedWithError",
        "Failed"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Sync.SyncJobStatus"
    },
    "QueryResult_SyncJobItem": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncJobItem"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SyncJobItem": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer"
        },
        "JobId": {
          "format": "int64",
          "type": "integer"
        },
        "ItemId": {
          "format": "int64",
          "type": "integer"
        },
        "ItemName": {
          "type": "string"
        },
        "MediaSourceId": {
          "type": "string"
        },
        "MediaSource": {
          "$ref": "#/definitions/MediaSourceInfo"
        },
        "TargetId": {
          "type": "string"
        },
        "InternalTargetId": {
          "format": "int64",
          "type": "integer"
        },
        "OutputPath": {
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/SyncJobItemStatus"
        },
        "Progress": {
          "format": "double",
          "type": "number"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "PrimaryImageItemId": {
          "type": "string"
        },
        "PrimaryImageTag": {
          "type": "string"
        },
        "TemporaryPath": {
          "type": "string"
        },
        "AdditionalFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemFileInfo"
          }
        }
      },
      "x-internal-ref-name": "Emby.Server.Sync.Model.SyncJobItem"
    },
    "ItemFileInfo": {
      "type": "object",
      "properties": {
        "Type": {
          "$ref": "#/definitions/ItemFileType"
        },
        "Name": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "ImageType": {
          "$ref": "#/definitions/ImageType"
        },
        "Index": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "Emby.Server.Sync.Model.ItemFileInfo"
    },
    "ItemFileType": {
      "enum": [
        "Media",
        "Image",
        "Subtitles"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Server.Sync.Model.ItemFileType"
    },
    "SyncJobRequest": {
      "type": "object",
      "properties": {
        "TargetId": {
          "type": "string"
        },
        "ItemIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Category": {
          "$ref": "#/definitions/SyncCategory"
        },
        "ParentId": {
          "type": "string"
        },
        "Quality": {
          "type": "string"
        },
        "Profile": {
          "type": "string"
        },
        "Container": {
          "type": "string"
        },
        "VideoCodec": {
          "type": "string"
        },
        "AudioCodec": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "UnwatchedOnly": {
          "type": "boolean"
        },
        "SyncNewContent": {
          "type": "boolean"
        },
        "ItemLimit": {
          "format": "int32",
          "type": "integer"
        },
        "Bitrate": {
          "format": "int32",
          "type": "integer"
        },
        "Downloaded": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "Emby.Server.Sync.Model.SyncJobRequest"
    },
    "SyncJobCreationResult": {
      "type": "object",
      "properties": {
        "Job": {
          "$ref": "#/definitions/SyncJob"
        },
        "JobItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncJobItem"
          }
        }
      },
      "x-internal-ref-name": "Emby.Server.Sync.Model.SyncJobCreationResult"
    },
    "SyncDialogOptions": {
      "type": "object",
      "properties": {
        "Targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncTarget"
          }
        },
        "Options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncJobOption"
          }
        },
        "QualityOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncQualityOption"
          }
        },
        "ProfileOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SyncProfileOption"
          }
        }
      },
      "x-internal-ref-name": "Emby.Server.Sync.Model.SyncDialogOptions"
    },
    "SyncJobOption": {
      "enum": [
        "Name",
        "Quality",
        "UnwatchedOnly",
        "SyncNewContent",
        "ItemLimit",
        "Profile"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Server.Sync.Model.SyncJobOption"
    },
    "SyncQualityOption": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "IsOriginalQuality": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "Emby.Server.Sync.Model.SyncQualityOption"
    },
    "SyncProfileOption": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "EnableQualityOptions": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "Emby.Server.Sync.Model.SyncProfileOption"
    },
    "UserAction": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ServerId": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "ItemId": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/UserActionType"
        },
        "Date": {
          "format": "date-time",
          "type": "string"
        },
        "PositionTicks": {
          "format": "int64",
          "type": "integer"
        },
        "Played": {
          "type": "boolean"
        },
        "IsFavorite": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Users.UserAction"
    },
    "UserActionType": {
      "enum": [
        "PlayedItem",
        "MarkPlayed",
        "MarkFavorite"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Users.UserActionType"
    },
    "SyncDataRequest": {
      "type": "object",
      "properties": {
        "LocalItemIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "InternalTargetIds": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "x-internal-ref-name": "Emby.Server.Sync.Model.SyncDataRequest"
    },
    "SyncDataResponse": {
      "type": "object",
      "properties": {
        "ItemIdsToRemove": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-internal-ref-name": "Emby.Server.Sync.Model.SyncDataResponse"
    },
    "ServerConfiguration": {
      "description": "Represents the server configuration.\r\n",
      "type": "object",
      "properties": {
        "EnableUPnP": {
          "description": "A value indicating whether \\[enable u pn p\\].",
          "type": "boolean"
        },
        "PublicPort": {
          "format": "int32",
          "description": "The public mapped port.",
          "type": "integer"
        },
        "PublicHttpsPort": {
          "format": "int32",
          "description": "The public HTTPS port.",
          "type": "integer"
        },
        "HttpServerPortNumber": {
          "format": "int32",
          "description": "The HTTP server port number.",
          "type": "integer"
        },
        "HttpsPortNumber": {
          "format": "int32",
          "description": "The HTTPS server port number.",
          "type": "integer"
        },
        "EnableHttps": {
          "description": "A value indicating whether \\[use HTTPS\\].",
          "type": "boolean"
        },
        "CertificatePath": {
          "description": "The value pointing to the file system where the ssl certiifcate is located..",
          "type": "string"
        },
        "CertificatePassword": {
          "type": "string"
        },
        "IsPortAuthorized": {
          "description": "A value indicating whether this instance is port authorized.",
          "type": "boolean"
        },
        "AutoRunWebApp": {
          "type": "boolean"
        },
        "EnableRemoteAccess": {
          "type": "boolean"
        },
        "LogAllQueryTimes": {
          "type": "boolean"
        },
        "EnableCaseSensitiveItemIds": {
          "description": "A value indicating whether \\[enable case sensitive item ids\\].",
          "type": "boolean"
        },
        "MetadataPath": {
          "description": "The metadata path.",
          "type": "string"
        },
        "MetadataNetworkPath": {
          "type": "string"
        },
        "PreferredMetadataLanguage": {
          "description": "The preferred metadata language.",
          "type": "string"
        },
        "MetadataCountryCode": {
          "description": "The metadata country code.",
          "type": "string"
        },
        "SortRemoveWords": {
          "description": "Words to be removed from strings to create a sort name",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LibraryMonitorDelay": {
          "format": "int32",
          "description": "The delay in seconds that we will wait after a file system change to try and discover what has been added\\/removed Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several different directories and files.",
          "type": "integer"
        },
        "EnableDashboardResponseCaching": {
          "description": "A value indicating whether \\[enable dashboard response caching\\]. Allows potential contributors without visual studio to modify production dashboard code and test changes.",
          "type": "boolean"
        },
        "DashboardSourcePath": {
          "description": "Allows the dashboard to be served from a custom path.",
          "type": "string"
        },
        "ImageSavingConvention": {
          "$ref": "#/definitions/ImageSavingConvention"
        },
        "EnableAutomaticRestart": {
          "type": "boolean"
        },
        "ServerName": {
          "type": "string"
        },
        "PreferredDetectedRemoteAddressFamily": {
          "$ref": "#/definitions/Net.Sockets.AddressFamily"
        },
        "WanDdns": {
          "type": "string"
        },
        "UICulture": {
          "type": "string"
        },
        "RemoteClientBitrateLimit": {
          "format": "int32",
          "type": "integer"
        },
        "LocalNetworkSubnets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LocalNetworkAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EnableExternalContentInSuggestions": {
          "type": "boolean"
        },
        "RequireHttps": {
          "type": "boolean"
        },
        "IsBehindProxy": {
          "type": "boolean"
        },
        "RemoteIPFilter": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IsRemoteIPFilterBlacklist": {
          "type": "boolean"
        },
        "ImageExtractionTimeoutMs": {
          "format": "int32",
          "type": "integer"
        },
        "PathSubstitutions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PathSubstitution"
          }
        },
        "UninstalledPlugins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CollapseVideoFolders": {
          "type": "boolean"
        },
        "EnableOriginalTrackTitles": {
          "type": "boolean"
        },
        "VacuumDatabaseOnStartup": {
          "type": "boolean"
        },
        "SimultaneousStreamLimit": {
          "format": "int32",
          "type": "integer"
        },
        "DatabaseCacheSizeMB": {
          "format": "int32",
          "type": "integer"
        },
        "EnableSqLiteMmio": {
          "type": "boolean"
        },
        "PlaylistsUpgradedToM3U": {
          "type": "boolean"
        },
        "ImageExtractorUpgraded1": {
          "type": "boolean"
        },
        "EnablePeopleLetterSubFolders": {
          "type": "boolean"
        },
        "OptimizeDatabaseOnShutdown": {
          "type": "boolean"
        },
        "DatabaseAnalysisLimit": {
          "format": "int32",
          "type": "integer"
        },
        "DisableAsyncIO": {
          "type": "boolean"
        },
        "MigratedToUserItemShares6": {
          "type": "boolean"
        },
        "MigratedLibraryOptionsToDb": {
          "type": "boolean"
        },
        "AllowLegacyLocalNetworkPassword": {
          "type": "boolean"
        },
        "EnableSavedMetadataForPeople": {
          "type": "boolean"
        },
        "TvChannelsRefreshed": {
          "type": "boolean"
        },
        "ProxyHeaderMode": {
          "$ref": "#/definitions/ProxyHeaderMode"
        },
        "EnableDebugLevelLogging": {
          "description": "A value indicating whether \\[enable debug level logging\\].",
          "type": "boolean"
        },
        "RevertDebugLogging": {
          "type": "string"
        },
        "EnableAutoUpdate": {
          "description": "Enable automatically and silently updating of the application",
          "type": "boolean"
        },
        "LogFileRetentionDays": {
          "format": "int32",
          "description": "The number of days we should retain log files",
          "type": "integer"
        },
        "RunAtStartup": {
          "description": "A value indicating whether \\[run at startup\\].",
          "type": "boolean"
        },
        "IsStartupWizardCompleted": {
          "description": "A value indicating whether this instance is first run.",
          "type": "boolean"
        },
        "CachePath": {
          "description": "The cache path.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.ServerConfiguration"
    },
    "ImageSavingConvention": {
      "enum": [
        "Legacy",
        "Compatible"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.ImageSavingConvention"
    },
    "Net.Sockets.AddressFamily": {
      "enum": [
        "Unspecified",
        "Unix",
        "InterNetwork",
        "ImpLink",
        "Pup",
        "Chaos",
        "NS",
        "Ipx",
        "Osi",
        "Iso",
        "Ecma",
        "DataKit",
        "Ccitt",
        "Sna",
        "DecNet",
        "DataLink",
        "Lat",
        "HyperChannel",
        "AppleTalk",
        "NetBios",
        "VoiceView",
        "FireFox",
        "Banyan",
        "Atm",
        "InterNetworkV6",
        "Cluster",
        "Ieee12844",
        "Irda",
        "NetworkDesigners",
        "Max",
        "Packet",
        "ControllerAreaNetwork",
        "Unknown"
      ],
      "type": "string",
      "x-internal-ref-name": "System.Net.Sockets.AddressFamily"
    },
    "PathSubstitution": {
      "type": "object",
      "properties": {
        "From": {
          "type": "string"
        },
        "To": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.PathSubstitution"
    },
    "ProxyHeaderMode": {
      "enum": [
        "None",
        "LanAddressesOnly",
        "RemoteAddressesOnly",
        "AllAddresses"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.ProxyHeaderMode"
    },
    "WakeOnLanInfo": {
      "type": "object",
      "properties": {
        "MacAddress": {
          "type": "string"
        },
        "BroadcastAddress": {
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.System.WakeOnLanInfo"
    },
    "SystemInfo": {
      "description": "Class SystemInfo\r\n",
      "type": "object",
      "properties": {
        "SystemUpdateLevel": {
          "$ref": "#/definitions/PackageVersionClass"
        },
        "OperatingSystemDisplayName": {
          "description": "The display name of the operating system.",
          "type": "string"
        },
        "PackageName": {
          "type": "string"
        },
        "HasPendingRestart": {
          "description": "A value indicating whether this instance has pending restart.",
          "type": "boolean"
        },
        "IsShuttingDown": {
          "type": "boolean"
        },
        "HasImageEnhancers": {
          "type": "boolean"
        },
        "OperatingSystem": {
          "description": "The operating sytem.",
          "type": "string"
        },
        "SupportsLibraryMonitor": {
          "description": "A value indicating whether \\[supports library monitor\\].",
          "type": "boolean"
        },
        "SupportsLocalPortConfiguration": {
          "type": "boolean"
        },
        "SupportsWakeServer": {
          "type": "boolean"
        },
        "WebSocketPortNumber": {
          "format": "int32",
          "description": "The web socket port number.",
          "type": "integer"
        },
        "CompletedInstallations": {
          "description": "The completed installations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstallationInfo"
          }
        },
        "CanSelfRestart": {
          "description": "A value indicating whether this instance can self restart.",
          "type": "boolean"
        },
        "CanSelfUpdate": {
          "description": "A value indicating whether this instance can self update.",
          "type": "boolean"
        },
        "CanLaunchWebBrowser": {
          "type": "boolean"
        },
        "ProgramDataPath": {
          "description": "The program data path.",
          "type": "string"
        },
        "ItemsByNamePath": {
          "description": "The items by name path.",
          "type": "string"
        },
        "CachePath": {
          "description": "The cache path.",
          "type": "string"
        },
        "LogPath": {
          "description": "The log path.",
          "type": "string"
        },
        "InternalMetadataPath": {
          "description": "The internal metadata path.",
          "type": "string"
        },
        "TranscodingTempPath": {
          "description": "The transcoding temporary path.",
          "type": "string"
        },
        "HttpServerPortNumber": {
          "format": "int32",
          "description": "The HTTP server port number.",
          "type": "integer"
        },
        "SupportsHttps": {
          "description": "A value indicating whether \\[enable HTTPS\\].",
          "type": "boolean"
        },
        "HttpsPortNumber": {
          "format": "int32",
          "description": "The HTTPS server port number.",
          "type": "integer"
        },
        "HasUpdateAvailable": {
          "description": "A value indicating whether this instance has update available.",
          "type": "boolean"
        },
        "SupportsAutoRunAtStartup": {
          "description": "A value indicating whether \\[supports automatic run at startup\\].",
          "type": "boolean"
        },
        "HardwareAccelerationRequiresPremiere": {
          "type": "boolean"
        },
        "WakeOnLanInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WakeOnLanInfo"
          }
        },
        "LocalAddress": {
          "description": "The local address.",
          "type": "string"
        },
        "LocalAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "WanAddress": {
          "description": "The wan address.",
          "type": "string"
        },
        "RemoteAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ServerName": {
          "description": "The name of the server.",
          "type": "string"
        },
        "Version": {
          "description": "The version.",
          "type": "string"
        },
        "Id": {
          "description": "The id.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.System.SystemInfo"
    },
    "InstallationInfo": {
      "description": "Class InstallationInfo\r\n",
      "type": "object",
      "properties": {
        "Id": {
          "format": "guid",
          "description": "The id.",
          "type": "string"
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "AssemblyGuid": {
          "description": "The assembly guid.",
          "type": "string"
        },
        "Version": {
          "description": "The version.",
          "type": "string"
        },
        "UpdateClass": {
          "$ref": "#/definitions/PackageVersionClass"
        },
        "PercentComplete": {
          "format": "double",
          "description": "The percent complete.",
          "type": "number"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Updates.InstallationInfo"
    },
    "Net.EndPointInfo": {
      "type": "object",
      "properties": {
        "IsLocal": {
          "type": "boolean"
        },
        "IsInNetwork": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Net.EndPointInfo"
    },
    "UIViewInfo": {
      "type": "object",
      "properties": {
        "ViewId": {
          "type": "string"
        },
        "PageId": {
          "type": "string"
        },
        "Caption": {
          "type": "string"
        },
        "SubCaption": {
          "type": "string"
        },
        "PluginId": {
          "type": "string"
        },
        "ViewType": {
          "$ref": "#/definitions/Enums.UIViewType"
        },
        "ShowDialogFullScreen": {
          "type": "boolean"
        },
        "IsInSequence": {
          "type": "boolean"
        },
        "RedirectViewUrl": {
          "type": "string"
        },
        "EditObjectContainer": {
          "$ref": "#/definitions/GenericEdit.IEditObjectContainer"
        },
        "Commands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UICommand"
          }
        },
        "TabPageInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UITabPageInfo"
          }
        },
        "IsPageChangeInfo": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "Emby.Web.GenericUI.Model.UIViewInfo"
    },
    "Enums.UIViewType": {
      "enum": [
        "RegularPage",
        "Dialog",
        "Wizard"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Web.GenericUI.Model.Enums.UIViewType"
    },
    "GenericEdit.IEditObjectContainer": {
      "type": "object",
      "properties": {
        "Object": {
          "type": "object"
        },
        "DefaultObject": {
          "type": "object"
        },
        "TypeName": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.GenericEdit.IEditObjectContainer"
    },
    "UICommand": {
      "type": "object",
      "properties": {
        "CommandType": {
          "$ref": "#/definitions/Enums.UICommandType"
        },
        "CommandId": {
          "type": "string"
        },
        "IsVisible": {
          "type": "boolean"
        },
        "IsEnabled": {
          "type": "boolean"
        },
        "Caption": {
          "type": "string"
        },
        "SetFocus": {
          "type": "boolean"
        },
        "ConfirmationPrompt": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Web.GenericUI.Model.UICommand"
    },
    "Enums.UICommandType": {
      "enum": [
        "Custom",
        "WizardCancel",
        "WizardBack",
        "WizardNext",
        "WizardFinish",
        "DialogCancel",
        "DialogOk",
        "PageSave",
        "PageBack",
        "WizardButton1",
        "WizardButton2",
        "WizardButton3"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Web.GenericUI.Model.Enums.UICommandType"
    },
    "UITabPageInfo": {
      "type": "object",
      "properties": {
        "PageId": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "PluginId": {
          "type": "string"
        },
        "Href": {
          "type": "string"
        },
        "NavKey": {
          "type": "string"
        },
        "Index": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "Emby.Web.GenericUI.Model.UITabPageInfo"
    },
    "RunUICommand": {
      "type": "object",
      "properties": {
        "PageId": {
          "type": "string"
        },
        "CommandId": {
          "type": "string"
        },
        "Data": {
          "type": "string"
        },
        "ItemId": {
          "type": "string"
        },
        "ClientLocale": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Web.GenericUI.Api.Endpoints.RunUICommand"
    },
    "UserDto": {
      "description": "Class UserDto\r\n",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "ServerId": {
          "description": "The server identifier.",
          "type": "string"
        },
        "ServerName": {
          "description": "The name of the server. This is not used by the server and is for client\\-side usage only.",
          "type": "string"
        },
        "Prefix": {
          "type": "string"
        },
        "ConnectUserName": {
          "description": "The name of the connect user.",
          "type": "string"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "ConnectLinkType": {
          "$ref": "#/definitions/Connect.UserLinkType"
        },
        "Id": {
          "description": "The id.",
          "type": "string"
        },
        "PrimaryImageTag": {
          "description": "The primary image tag.",
          "type": "string"
        },
        "HasPassword": {
          "description": "A value indicating whether this instance has password.",
          "type": "boolean"
        },
        "HasConfiguredPassword": {
          "description": "A value indicating whether this instance has configured password.",
          "type": "boolean"
        },
        "EnableAutoLogin": {
          "type": "boolean"
        },
        "LastLoginDate": {
          "format": "date-time",
          "description": "The last login date.",
          "type": "string"
        },
        "LastActivityDate": {
          "format": "date-time",
          "description": "The last activity date.",
          "type": "string"
        },
        "Configuration": {
          "$ref": "#/definitions/UserConfiguration"
        },
        "Policy": {
          "$ref": "#/definitions/UserPolicy"
        },
        "PrimaryImageAspectRatio": {
          "format": "double",
          "description": "The primary image aspect ratio.",
          "type": "number"
        },
        "HasConfiguredEasyPassword": {
          "type": "boolean"
        },
        "UserItemShareLevel": {
          "$ref": "#/definitions/UserItemShareLevel"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dto.UserDto"
    },
    "Connect.UserLinkType": {
      "enum": [
        "LinkedUser",
        "Guest"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Connect.UserLinkType"
    },
    "UserConfiguration": {
      "description": "Class UserConfiguration\r\n",
      "type": "object",
      "properties": {
        "AudioLanguagePreference": {
          "description": "The audio language preference.",
          "type": "string"
        },
        "PlayDefaultAudioTrack": {
          "description": "A value indicating whether \\[play default audio track\\].",
          "type": "boolean"
        },
        "SubtitleLanguagePreference": {
          "description": "The subtitle language preference.",
          "type": "string"
        },
        "ProfilePin": {
          "type": "string"
        },
        "DisplayMissingEpisodes": {
          "type": "boolean"
        },
        "SubtitleMode": {
          "$ref": "#/definitions/SubtitlePlaybackMode"
        },
        "OrderedViews": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LatestItemsExcludes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MyMediaExcludes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "HidePlayedInLatest": {
          "type": "boolean"
        },
        "HidePlayedInMoreLikeThis": {
          "type": "boolean"
        },
        "HidePlayedInSuggestions": {
          "type": "boolean"
        },
        "RememberAudioSelections": {
          "type": "boolean"
        },
        "RememberSubtitleSelections": {
          "type": "boolean"
        },
        "EnableNextEpisodeAutoPlay": {
          "type": "boolean"
        },
        "ResumeRewindSeconds": {
          "format": "int32",
          "type": "integer"
        },
        "IntroSkipMode": {
          "$ref": "#/definitions/SegmentSkipMode"
        },
        "EnableLocalPassword": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.UserConfiguration"
    },
    "SubtitlePlaybackMode": {
      "enum": [
        "Default",
        "Always",
        "OnlyForced",
        "None",
        "Smart",
        "HearingImpaired"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.SubtitlePlaybackMode"
    },
    "SegmentSkipMode": {
      "enum": [
        "ShowButton",
        "AutoSkip",
        "None"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.SegmentSkipMode"
    },
    "UserPolicy": {
      "type": "object",
      "properties": {
        "IsAdministrator": {
          "description": "A value indicating whether this instance is administrator.",
          "type": "boolean"
        },
        "IsHidden": {
          "description": "A value indicating whether this instance is hidden.",
          "type": "boolean"
        },
        "IsHiddenRemotely": {
          "type": "boolean"
        },
        "IsHiddenFromUnusedDevices": {
          "type": "boolean"
        },
        "IsDisabled": {
          "description": "A value indicating whether this instance is disabled.",
          "type": "boolean"
        },
        "LockedOutDate": {
          "format": "int64",
          "type": "integer"
        },
        "MaxParentalRating": {
          "format": "int32",
          "description": "The max parental rating.",
          "type": "integer"
        },
        "AllowTagOrRating": {
          "type": "boolean"
        },
        "BlockedTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IsTagBlockingModeInclusive": {
          "type": "boolean"
        },
        "IncludeTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EnableUserPreferenceAccess": {
          "type": "boolean"
        },
        "AccessSchedules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessSchedule"
          }
        },
        "BlockUnratedItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnratedItem"
          }
        },
        "EnableRemoteControlOfOtherUsers": {
          "type": "boolean"
        },
        "EnableSharedDeviceControl": {
          "type": "boolean"
        },
        "EnableRemoteAccess": {
          "type": "boolean"
        },
        "EnableLiveTvManagement": {
          "type": "boolean"
        },
        "EnableLiveTvAccess": {
          "type": "boolean"
        },
        "EnableMediaPlayback": {
          "type": "boolean"
        },
        "EnableAudioPlaybackTranscoding": {
          "type": "boolean"
        },
        "EnableVideoPlaybackTranscoding": {
          "type": "boolean"
        },
        "EnablePlaybackRemuxing": {
          "type": "boolean"
        },
        "EnableContentDeletion": {
          "type": "boolean"
        },
        "RestrictedFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EnableContentDeletionFromFolders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EnableContentDownloading": {
          "type": "boolean"
        },
        "EnableSubtitleDownloading": {
          "type": "boolean"
        },
        "EnableSubtitleManagement": {
          "type": "boolean"
        },
        "EnableSyncTranscoding": {
          "description": "A value indicating whether \\[enable synchronize\\].",
          "type": "boolean"
        },
        "EnableMediaConversion": {
          "type": "boolean"
        },
        "EnabledChannels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EnableAllChannels": {
          "type": "boolean"
        },
        "EnabledFolders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EnableAllFolders": {
          "type": "boolean"
        },
        "InvalidLoginAttemptCount": {
          "format": "int32",
          "type": "integer"
        },
        "EnablePublicSharing": {
          "type": "boolean"
        },
        "BlockedMediaFolders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RemoteClientBitrateLimit": {
          "format": "int32",
          "type": "integer"
        },
        "AuthenticationProviderId": {
          "type": "string"
        },
        "ExcludedSubFolders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SimultaneousStreamLimit": {
          "format": "int32",
          "type": "integer"
        },
        "EnabledDevices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EnableAllDevices": {
          "type": "boolean"
        },
        "AllowCameraUpload": {
          "type": "boolean"
        },
        "AllowSharingPersonalItems": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Users.UserPolicy"
    },
    "AccessSchedule": {
      "type": "object",
      "properties": {
        "DayOfWeek": {
          "$ref": "#/definitions/DynamicDayOfWeek"
        },
        "StartHour": {
          "format": "double",
          "description": "The start hour.",
          "type": "number"
        },
        "EndHour": {
          "format": "double",
          "description": "The end hour.",
          "type": "number"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.AccessSchedule"
    },
    "DynamicDayOfWeek": {
      "enum": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Everyday",
        "Weekday",
        "Weekend"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.DynamicDayOfWeek"
    },
    "UnratedItem": {
      "enum": [
        "Movie",
        "Trailer",
        "Series",
        "Music",
        "Game",
        "Book",
        "LiveTvChannel",
        "LiveTvProgram",
        "ChannelContent",
        "Other"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.UnratedItem"
    },
    "QueryResult_UserDto": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDto"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "AuthenticateUserByName": {
      "type": "object",
      "properties": {
        "Username": {
          "type": "string"
        },
        "Pw": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Api.AuthenticateUserByName"
    },
    "Authentication.AuthenticationResult": {
      "type": "object",
      "properties": {
        "User": {
          "$ref": "#/definitions/UserDto"
        },
        "SessionInfo": {
          "$ref": "#/definitions/Session.SessionInfo"
        },
        "AccessToken": {
          "description": "The authentication token.",
          "type": "string"
        },
        "ServerId": {
          "description": "The server identifier.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Authentication.AuthenticationResult"
    },
    "CreateUserByName": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "CopyFromUserId": {
          "type": "string"
        },
        "UserCopyOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Library.UserCopyOptions"
          }
        }
      },
      "x-internal-ref-name": "Emby.Api.CreateUserByName"
    },
    "Library.UserCopyOptions": {
      "enum": [
        "UserPolicy",
        "UserConfiguration"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Controller.Library.UserCopyOptions"
    },
    "ForgotPassword": {
      "type": "object",
      "properties": {
        "EnteredUsername": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Api.ForgotPassword"
    },
    "ForgotPasswordResult": {
      "type": "object",
      "properties": {
        "Action": {
          "$ref": "#/definitions/ForgotPasswordAction"
        },
        "PinFile": {
          "description": "The pin file.",
          "type": "string"
        },
        "PinExpirationDate": {
          "format": "date-time",
          "description": "The pin expiration date.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Users.ForgotPasswordResult"
    },
    "ForgotPasswordAction": {
      "enum": [
        "ContactAdmin",
        "PinCode"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Users.ForgotPasswordAction"
    },
    "Api.ConfigurationPageInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "EnableInMainMenu": {
          "type": "boolean"
        },
        "EnableInUserMenu": {
          "type": "boolean"
        },
        "FeatureId": {
          "type": "string"
        },
        "MenuSection": {
          "type": "string"
        },
        "MenuIcon": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "ConfigurationPageType": {
          "$ref": "#/definitions/Plugins.ConfigurationPageType"
        },
        "PluginId": {
          "type": "string"
        },
        "Href": {
          "type": "string"
        },
        "NavMenuId": {
          "type": "string"
        },
        "Plugin": {
          "$ref": "#/definitions/Common.Plugins.IPlugin"
        },
        "Translations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-internal-ref-name": "Emby.Web.Api.ConfigurationPageInfo"
    },
    "Plugins.ConfigurationPageType": {
      "description": "Enum ConfigurationPageType\r\n",
      "enum": [
        "PluginConfiguration",
        "None"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Controller.Plugins.ConfigurationPageType"
    },
    "Common.Plugins.IPlugin": {
      "description": "Interface IPlugin\r\n",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the plugin",
          "type": "string"
        },
        "Description": {
          "description": "The description.",
          "type": "string"
        },
        "Id": {
          "format": "guid",
          "description": "The unique id.",
          "type": "string"
        },
        "Version": {
          "$ref": "#/definitions/Version"
        },
        "AssemblyFilePath": {
          "description": "The path to the assembly file",
          "type": "string"
        },
        "DataFolderPath": {
          "description": "The full path to the data folder, where the plugin can store any miscellaneous files needed",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Common.Plugins.IPlugin"
    },
    "Version": {
      "type": "object",
      "properties": {
        "Major": {
          "format": "int32",
          "type": "integer"
        },
        "Minor": {
          "format": "int32",
          "type": "integer"
        },
        "Build": {
          "format": "int32",
          "type": "integer"
        },
        "Revision": {
          "format": "int32",
          "type": "integer"
        },
        "MajorRevision": {
          "format": "int32",
          "type": "integer"
        },
        "MinorRevision": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "System.Version"
    },
    "VideoCodecBase": {
      "type": "object",
      "properties": {
        "CodecDeviceInfo": {
          "$ref": "#/definitions/Common.Interfaces.ICodecDeviceInfo"
        },
        "CodecKind": {
          "$ref": "#/definitions/CodecKinds"
        },
        "MediaTypeName": {
          "type": "string"
        },
        "VideoMediaType": {
          "$ref": "#/definitions/VideoMediaTypes"
        },
        "MinWidth": {
          "format": "int32",
          "type": "integer"
        },
        "MaxWidth": {
          "format": "int32",
          "type": "integer"
        },
        "MinHeight": {
          "format": "int32",
          "type": "integer"
        },
        "MaxHeight": {
          "format": "int32",
          "type": "integer"
        },
        "WidthAlignment": {
          "format": "int32",
          "type": "integer"
        },
        "HeightAlignment": {
          "format": "int32",
          "type": "integer"
        },
        "MaxBitRate": {
          "$ref": "#/definitions/BitRate"
        },
        "SupportedColorFormats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ColorFormats"
          }
        },
        "SupportedColorFormatStrings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ProfileAndLevelInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileLevelInformation"
          }
        },
        "Id": {
          "type": "string"
        },
        "Direction": {
          "$ref": "#/definitions/CodecDirections"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "FrameworkCodec": {
          "type": "string"
        },
        "IsHardwareCodec": {
          "type": "boolean"
        },
        "SecondaryFramework": {
          "$ref": "#/definitions/SecondaryFrameworks"
        },
        "SecondaryFrameworkCodec": {
          "type": "string"
        },
        "MaxInstanceCount": {
          "format": "int32",
          "type": "integer"
        },
        "IsEnabledByDefault": {
          "type": "boolean"
        },
        "DefaultPriority": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "Emby.Server.MediaEncoding.Codecs.VideoCodecs.VideoCodecBase"
    },
    "Common.Interfaces.ICodecDeviceInfo": {
      "type": "object",
      "properties": {
        "Capabilities": {
          "$ref": "#/definitions/Common.Interfaces.ICodecDeviceCapabilities"
        },
        "Adapter": {
          "format": "int32",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "Desription": {
          "type": "string"
        },
        "Driver": {
          "type": "string"
        },
        "DriverVersion": {
          "$ref": "#/definitions/Version"
        },
        "ApiVersion": {
          "$ref": "#/definitions/Version"
        },
        "VendorId": {
          "format": "int32",
          "type": "integer"
        },
        "DeviceId": {
          "format": "int32",
          "type": "integer"
        },
        "DeviceIdentifier": {
          "type": "string"
        },
        "HardwareContextFramework": {
          "$ref": "#/definitions/SecondaryFrameworks"
        },
        "DevPath": {
          "type": "string"
        },
        "DrmNode": {
          "type": "string"
        },
        "VendorName": {
          "type": "string"
        },
        "DeviceName": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Server.MediaEncoding.Codecs.Common.Interfaces.ICodecDeviceInfo"
    },
    "Common.Interfaces.ICodecDeviceCapabilities": {
      "type": "object",
      "properties": {
        "SupportsHwUpload": {
          "type": "boolean"
        },
        "SupportsHwDownload": {
          "type": "boolean"
        },
        "SupportsStandaloneDeviceInit": {
          "type": "boolean"
        },
        "Supports10BitProcessing": {
          "type": "boolean"
        },
        "SupportsNativeToneMapping": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "Emby.Server.MediaEncoding.Codecs.Common.Interfaces.ICodecDeviceCapabilities"
    },
    "SecondaryFrameworks": {
      "description": "Enum defining secondary frameworks for encoding and decoding.\r\n\r\n\r\nWhile most of these are hardware acceleration frameworks, this is not a necessity             (e.g. Android MediaCodec offers software codecs as well).\r\n",
      "enum": [
        "Unknown",
        "None",
        "AmdAmf",
        "MediaCodec",
        "NvEncDec",
        "OpenMax",
        "QuickSync",
        "VaApi",
        "V4L2",
        "DxVa",
        "D3d11va",
        "VideoToolbox",
        "Mmal"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Media.Model.Enums.SecondaryFrameworks"
    },
    "CodecKinds": {
      "description": "Enum defining the kind of media a codec is processing.\r\n",
      "enum": [
        "Audio",
        "Video",
        "SubTitles"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Media.Model.Enums.CodecKinds"
    },
    "VideoMediaTypes": {
      "description": "Enum listing video media types.\r\n\r\n\r\nThe enum member names are matching exactly those that are used by ffmpeg. Exception: Items that are starting with a number are prefixed with an underscore here.\r\n",
      "enum": [
        "Unknown",
        "copy",
        "flv1",
        "h263",
        "h263p",
        "h264",
        "hevc",
        "mjpeg",
        "mpeg1video",
        "mpeg2video",
        "mpeg4",
        "msvideo1",
        "theora",
        "vc1image",
        "vc1",
        "vp8",
        "vp9",
        "wmv1",
        "wmv2",
        "wmv3",
        "_012v",
        "_4xm",
        "_8bps",
        "a64_multi",
        "a64_multi5",
        "aasc",
        "aic",
        "alias_pix",
        "amv",
        "anm",
        "ansi",
        "apng",
        "asv1",
        "asv2",
        "aura",
        "aura2",
        "av1",
        "avrn",
        "avrp",
        "avs",
        "avui",
        "ayuv",
        "bethsoftvid",
        "bfi",
        "binkvideo",
        "bintext",
        "bitpacked",
        "bmp",
        "bmv_video",
        "brender_pix",
        "c93",
        "cavs",
        "cdgraphics",
        "cdxl",
        "cfhd",
        "cinepak",
        "clearvideo",
        "cljr",
        "cllc",
        "cmv",
        "cpia",
        "cscd",
        "cyuv",
        "daala",
        "dds",
        "dfa",
        "dirac",
        "dnxhd",
        "dpx",
        "dsicinvideo",
        "dvvideo",
        "dxa",
        "dxtory",
        "dxv",
        "escape124",
        "escape130",
        "exr",
        "ffv1",
        "ffvhuff",
        "fic",
        "fits",
        "flashsv",
        "flashsv2",
        "flic",
        "fmvc",
        "fraps",
        "frwu",
        "g2m",
        "gdv",
        "gif",
        "h261",
        "h263i",
        "hap",
        "hnm4video",
        "hq_hqa",
        "hqx",
        "huffyuv",
        "idcin",
        "idf",
        "iff_ilbm",
        "indeo2",
        "indeo3",
        "indeo4",
        "indeo5",
        "interplayvideo",
        "jpeg2000",
        "jpegls",
        "jv",
        "kgv1",
        "kmvc",
        "lagarith",
        "ljpeg",
        "loco",
        "m101",
        "mad",
        "magicyuv",
        "mdec",
        "mimic",
        "mjpegb",
        "mmvideo",
        "motionpixels",
        "msa1",
        "mscc",
        "msmpeg4v1",
        "msmpeg4v2",
        "msmpeg4v3",
        "msrle",
        "mss1",
        "mss2",
        "mszh",
        "mts2",
        "mvc1",
        "mvc2",
        "mxpeg",
        "nuv",
        "paf_video",
        "pam",
        "pbm",
        "pcx",
        "pgm",
        "pgmyuv",
        "pictor",
        "pixlet",
        "png",
        "ppm",
        "prores",
        "psd",
        "ptx",
        "qdraw",
        "qpeg",
        "qtrle",
        "r10k",
        "r210",
        "rawvideo",
        "rl2",
        "roq",
        "rpza",
        "rscc",
        "rv10",
        "rv20",
        "rv30",
        "rv40",
        "sanm",
        "scpr",
        "screenpresso",
        "sgi",
        "sgirle",
        "sheervideo",
        "smackvideo",
        "smc",
        "smvjpeg",
        "snow",
        "sp5x",
        "speedhq",
        "srgc",
        "sunrast",
        "svg",
        "svq1",
        "svq3",
        "targa",
        "targa_y216",
        "tdsc",
        "tgq",
        "tgv",
        "thp",
        "tiertexseqvideo",
        "tiff",
        "tmv",
        "tqi",
        "truemotion1",
        "truemotion2",
        "truemotion2rt",
        "tscc",
        "tscc2",
        "txd",
        "ulti",
        "utvideo",
        "v210",
        "v210x",
        "v308",
        "v408",
        "v410",
        "vb",
        "vble",
        "vcr1",
        "vixl",
        "vmdvideo",
        "vmnc",
        "vp3",
        "vp5",
        "vp6",
        "vp6a",
        "vp6f",
        "vp7",
        "webp",
        "wmv3image",
        "wnv1",
        "wrapped_avframe",
        "ws_vqa",
        "xan_wc3",
        "xan_wc4",
        "xbin",
        "xbm",
        "xface",
        "xpm",
        "xwd",
        "y41p",
        "ylc",
        "yop",
        "yuv4",
        "zerocodec",
        "zlib",
        "zmbv"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Media.Model.Enums.VideoMediaTypes"
    },
    "BitRate": {
      "description": "A type for handling bit rates.\r\n\r\n\r\nThe purpose of this type is to avoid manual calculations and conversions in code,             unified handling and conversion as well as presentation through its various To\\*\\*\\*String methods.\r\n\r\n\r\n`System.IComparable`\r\n\r\n\r\n`System.IEquatable`1`\r\n",
      "type": "object",
      "properties": {
        "bps": {
          "format": "int64",
          "type": "integer"
        },
        "kbps": {
          "format": "double",
          "type": "number"
        },
        "Mbps": {
          "format": "double",
          "type": "number"
        }
      },
      "x-internal-ref-name": "Emby.Media.Model.Types.BitRate"
    },
    "ColorFormats": {
      "description": "Enum listing color formats.\r\n\r\n\r\nThe enum member names are matching those that are used by ffmpeg. (execute 'ffmpeg \\-pix\\_fmts' to list them) Exception: Items that are starting with a number are prefixed with an underscore here. In ffmpeg code these are prefixed with 'AV\\_PIX\\_FMT\\_' and all\\-caps.\r\n",
      "enum": [
        "Unknown",
        "yuv420p",
        "yuyv422",
        "rgb24",
        "bgr24",
        "yuv422p",
        "yuv444p",
        "yuv410p",
        "yuv411p",
        "gray",
        "monow",
        "monob",
        "pal8",
        "yuvj420p",
        "yuvj422p",
        "yuvj444p",
        "uyvy422",
        "uyyvyy411",
        "bgr8",
        "bgr4",
        "bgr4_byte",
        "rgb8",
        "rgb4",
        "rgb4_byte",
        "nv12",
        "nv21",
        "argb",
        "rgba",
        "abgr",
        "bgra",
        "gray16",
        "yuv440p",
        "yuvj440p",
        "yuva420p",
        "rgb48",
        "rgb565",
        "rgb555",
        "bgr565",
        "bgr555",
        "vaapi_moco",
        "vaapi_idct",
        "vaapi_vld",
        "yuv420p16",
        "yuv422p16",
        "yuv444p16",
        "dxva2_vld",
        "rgb444",
        "bgr444",
        "ya8",
        "bgr48",
        "yuv420p9",
        "yuv420p10",
        "yuv422p10",
        "yuv444p9",
        "yuv444p10",
        "yuv422p9",
        "gbrp",
        "gbrp9",
        "gbrp10",
        "gbrp16",
        "yuva422p",
        "yuva444p",
        "yuva420p9",
        "yuva422p9",
        "yuva444p9",
        "yuva420p10",
        "yuva422p10",
        "yuva444p10",
        "yuva420p16",
        "yuva422p16",
        "yuva444p16",
        "vdpau",
        "xyz12",
        "nv16",
        "nv20",
        "rgba64",
        "bgra64",
        "yvyu422",
        "ya16",
        "gbrap",
        "gbrap16",
        "qsv",
        "mmal",
        "d3d11va_vld",
        "cuda",
        "_0rgb",
        "rgb0",
        "_0bgr",
        "bgr0",
        "yuv420p12",
        "yuv420p14",
        "yuv422p12",
        "yuv422p14",
        "yuv444p12",
        "yuv444p14",
        "gbrp12",
        "gbrp14",
        "yuvj411p",
        "bayer_bggr8",
        "bayer_rggb8",
        "bayer_gbrg8",
        "bayer_grbg8",
        "bayer_bggr16",
        "bayer_rggb16",
        "bayer_gbrg16",
        "bayer_grbg16",
        "xvmc",
        "yuv440p10",
        "yuv440p12",
        "ayuv64",
        "videotoolbox_vld",
        "p010",
        "gbrap12",
        "gbrap10",
        "mediacodec",
        "gray12",
        "gray10",
        "gray14",
        "p016",
        "d3d11",
        "gray9",
        "gbrpf32",
        "gbrapf32",
        "drm_prime",
        "opencl",
        "grayf32",
        "yuva422p12",
        "yuva444p12",
        "nv24",
        "nv42"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Media.Model.Enums.ColorFormats"
    },
    "ProfileLevelInformation": {
      "description": "A class combining both `Emby.Media.Model.Types.ProfileInformation` and `Emby.Media.Model.Types.LevelInformation`.\r\n",
      "type": "object",
      "properties": {
        "Profile": {
          "$ref": "#/definitions/ProfileInformation"
        },
        "Level": {
          "$ref": "#/definitions/LevelInformation"
        }
      },
      "x-internal-ref-name": "Emby.Media.Model.Types.ProfileLevelInformation"
    },
    "ProfileInformation": {
      "description": "Class for unified presentation of all information associated with a specific codec profile.\r\n",
      "type": "object",
      "properties": {
        "ShortName": {
          "description": "The enum member name of the profile.",
          "type": "string"
        },
        "Description": {
          "description": "The common name of the profile.",
          "type": "string"
        },
        "Details": {
          "description": "Detail information about the profile.",
          "type": "string"
        },
        "Id": {
          "description": "A unique identifier.",
          "type": "string"
        },
        "BitDepths": {
          "description": "The bit depths.",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "x-internal-ref-name": "Emby.Media.Model.Types.ProfileInformation"
    },
    "LevelInformation": {
      "description": "Class for unified presentation of all information associated with a specific codec level.\r\n",
      "type": "object",
      "properties": {
        "ShortName": {
          "description": "The enum member name of the level.",
          "type": "string"
        },
        "Description": {
          "description": "The common name of the level.",
          "type": "string"
        },
        "Ordinal": {
          "format": "int32",
          "description": "A value indicating the level's ranking relative to other levels.",
          "type": "integer"
        },
        "MaxBitRate": {
          "$ref": "#/definitions/BitRate"
        },
        "MaxBitRateDisplay": {
          "description": "A display value of the `Emby.Media.Model.Types.LevelInformation.MaxBitRate` property.",
          "type": "string"
        },
        "Id": {
          "description": "A unique identifier.",
          "type": "string"
        },
        "ResolutionRates": {
          "description": "Examples for the maximum supported combinations of resolution and rate for this level.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResolutionWithRate"
          }
        },
        "ResolutionRateStrings": {
          "description": "Examples for the maximum supported combinations of resolution and rate for this level as string values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ResolutionRatesDisplay": {
          "description": "A single string from the `Emby.Media.Model.Types.LevelInformation.ResolutionRateStrings` list.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Media.Model.Types.LevelInformation"
    },
    "ResolutionWithRate": {
      "description": "Struct representing a combination of video resolution and frame rate.\r\n\r\n\r\n`System.IEquatable`1`\r\n",
      "type": "object",
      "properties": {
        "Width": {
          "format": "int32",
          "description": "The resolution width.",
          "type": "integer"
        },
        "Height": {
          "format": "int32",
          "description": "The resolution height.",
          "type": "integer"
        },
        "FrameRate": {
          "format": "double",
          "description": "The frame rate in frames\\/second (fps).",
          "type": "number"
        },
        "Resolution": {
          "$ref": "#/definitions/Resolution"
        }
      },
      "x-internal-ref-name": "Emby.Media.Model.Types.ResolutionWithRate"
    },
    "Resolution": {
      "description": "Struct representing a video resolution specified in X and Y dimension.\r\n\r\n\r\n`System.IComparable`\r\n\r\n\r\n`System.IEquatable`1`\r\n",
      "type": "object",
      "properties": {
        "Width": {
          "format": "int32",
          "description": "The resolution width.",
          "type": "integer"
        },
        "Height": {
          "format": "int32",
          "description": "The resolution height.",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "Emby.Media.Model.Types.Resolution"
    },
    "CodecDirections": {
      "description": "Enum for indicating the processing direction of a codec.\r\n",
      "enum": [
        "Encoder",
        "Decoder"
      ],
      "type": "string",
      "x-internal-ref-name": "Emby.Media.Model.Enums.CodecDirections"
    },
    "CodecConfiguration": {
      "type": "object",
      "properties": {
        "IsEnabled": {
          "description": "A value indicating whether the codec is enabled.",
          "type": "boolean"
        },
        "Priority": {
          "format": "int32",
          "description": "The selection priority for the codec.\r\n\r\nHigher values mean higher priority.",
          "type": "integer"
        },
        "CodecId": {
          "description": "The codec identifier.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Configuration.CodecConfiguration"
    },
    "ExternalIdInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Key": {
          "description": "The key.",
          "type": "string"
        },
        "Website": {
          "type": "string"
        },
        "UrlFormatString": {
          "description": "The URL format string.",
          "type": "string"
        },
        "IsSupportedAsIdentifier": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Providers.ExternalIdInfo"
    },
    "RemoteSearchQuery_TrailerInfo": {
      "type": "object",
      "properties": {
        "SearchInfo": {
          "$ref": "#/definitions/TrailerInfo"
        },
        "ItemId": {
          "format": "int64",
          "type": "integer"
        },
        "SearchProviderName": {
          "type": "string"
        },
        "Providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludeDisabledProviders": {
          "type": "boolean"
        }
      }
    },
    "TrailerInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "MetadataLanguage": {
          "description": "The metadata language.",
          "type": "string"
        },
        "MetadataCountryCode": {
          "description": "The metadata country code.",
          "type": "string"
        },
        "MetadataLanguages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Globalization.CultureDto"
          }
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "Year": {
          "format": "int32",
          "description": "The year.",
          "type": "integer"
        },
        "IndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "ParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PremiereDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsAutomated": {
          "type": "boolean"
        },
        "EnableAdultMetadata": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Providers.TrailerInfo"
    },
    "RemoteSearchResult": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "ProductionYear": {
          "format": "int32",
          "description": "The year.",
          "type": "integer"
        },
        "IndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "IndexNumberEnd": {
          "format": "int32",
          "type": "integer"
        },
        "ParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "SortIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "SortParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PremiereDate": {
          "format": "date-time",
          "type": "string"
        },
        "ImageUrl": {
          "type": "string"
        },
        "SearchProviderName": {
          "type": "string"
        },
        "GameSystem": {
          "type": "string"
        },
        "Overview": {
          "type": "string"
        },
        "DisambiguationComment": {
          "type": "string"
        },
        "AlbumArtist": {
          "$ref": "#/definitions/RemoteSearchResult"
        },
        "Artists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemoteSearchResult"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Providers.RemoteSearchResult"
    },
    "RemoteSearchQuery_BookInfo": {
      "type": "object",
      "properties": {
        "SearchInfo": {
          "$ref": "#/definitions/BookInfo"
        },
        "ItemId": {
          "format": "int64",
          "type": "integer"
        },
        "SearchProviderName": {
          "type": "string"
        },
        "Providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludeDisabledProviders": {
          "type": "boolean"
        }
      }
    },
    "BookInfo": {
      "type": "object",
      "properties": {
        "SeriesName": {
          "type": "string"
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "MetadataLanguage": {
          "description": "The metadata language.",
          "type": "string"
        },
        "MetadataCountryCode": {
          "description": "The metadata country code.",
          "type": "string"
        },
        "MetadataLanguages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Globalization.CultureDto"
          }
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "Year": {
          "format": "int32",
          "description": "The year.",
          "type": "integer"
        },
        "IndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "ParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PremiereDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsAutomated": {
          "type": "boolean"
        },
        "EnableAdultMetadata": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Providers.BookInfo"
    },
    "RemoteSearchQuery_MovieInfo": {
      "type": "object",
      "properties": {
        "SearchInfo": {
          "$ref": "#/definitions/MovieInfo"
        },
        "ItemId": {
          "format": "int64",
          "type": "integer"
        },
        "SearchProviderName": {
          "type": "string"
        },
        "Providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludeDisabledProviders": {
          "type": "boolean"
        }
      }
    },
    "MovieInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "MetadataLanguage": {
          "description": "The metadata language.",
          "type": "string"
        },
        "MetadataCountryCode": {
          "description": "The metadata country code.",
          "type": "string"
        },
        "MetadataLanguages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Globalization.CultureDto"
          }
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "Year": {
          "format": "int32",
          "description": "The year.",
          "type": "integer"
        },
        "IndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "ParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PremiereDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsAutomated": {
          "type": "boolean"
        },
        "EnableAdultMetadata": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Providers.MovieInfo"
    },
    "RemoteSearchQuery_SeriesInfo": {
      "type": "object",
      "properties": {
        "SearchInfo": {
          "$ref": "#/definitions/SeriesInfo"
        },
        "ItemId": {
          "format": "int64",
          "type": "integer"
        },
        "SearchProviderName": {
          "type": "string"
        },
        "Providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludeDisabledProviders": {
          "type": "boolean"
        }
      }
    },
    "SeriesInfo": {
      "type": "object",
      "properties": {
        "EpisodeAirDate": {
          "format": "date-time",
          "type": "string"
        },
        "DisplayOrder": {
          "$ref": "#/definitions/SeriesDisplayOrder"
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "MetadataLanguage": {
          "description": "The metadata language.",
          "type": "string"
        },
        "MetadataCountryCode": {
          "description": "The metadata country code.",
          "type": "string"
        },
        "MetadataLanguages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Globalization.CultureDto"
          }
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "Year": {
          "format": "int32",
          "description": "The year.",
          "type": "integer"
        },
        "IndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "ParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PremiereDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsAutomated": {
          "type": "boolean"
        },
        "EnableAdultMetadata": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Providers.SeriesInfo"
    },
    "SeriesDisplayOrder": {
      "enum": [
        "Aired",
        "Dvd",
        "Absolute"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Entities.SeriesDisplayOrder"
    },
    "RemoteSearchQuery_GameInfo": {
      "type": "object",
      "properties": {
        "SearchInfo": {
          "$ref": "#/definitions/GameInfo"
        },
        "ItemId": {
          "format": "int64",
          "type": "integer"
        },
        "SearchProviderName": {
          "type": "string"
        },
        "Providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludeDisabledProviders": {
          "type": "boolean"
        }
      }
    },
    "GameInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "MetadataLanguage": {
          "description": "The metadata language.",
          "type": "string"
        },
        "MetadataCountryCode": {
          "description": "The metadata country code.",
          "type": "string"
        },
        "MetadataLanguages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Globalization.CultureDto"
          }
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "Year": {
          "format": "int32",
          "description": "The year.",
          "type": "integer"
        },
        "IndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "ParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PremiereDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsAutomated": {
          "type": "boolean"
        },
        "EnableAdultMetadata": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Providers.GameInfo"
    },
    "RemoteSearchQuery_ItemLookupInfo": {
      "type": "object",
      "properties": {
        "SearchInfo": {
          "$ref": "#/definitions/ItemLookupInfo"
        },
        "ItemId": {
          "format": "int64",
          "type": "integer"
        },
        "SearchProviderName": {
          "type": "string"
        },
        "Providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludeDisabledProviders": {
          "type": "boolean"
        }
      }
    },
    "ItemLookupInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "MetadataLanguage": {
          "description": "The metadata language.",
          "type": "string"
        },
        "MetadataCountryCode": {
          "description": "The metadata country code.",
          "type": "string"
        },
        "MetadataLanguages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Globalization.CultureDto"
          }
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "Year": {
          "format": "int32",
          "description": "The year.",
          "type": "integer"
        },
        "IndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "ParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PremiereDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsAutomated": {
          "type": "boolean"
        },
        "EnableAdultMetadata": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Providers.ItemLookupInfo"
    },
    "RemoteSearchQuery_MusicVideoInfo": {
      "type": "object",
      "properties": {
        "SearchInfo": {
          "$ref": "#/definitions/MusicVideoInfo"
        },
        "ItemId": {
          "format": "int64",
          "type": "integer"
        },
        "SearchProviderName": {
          "type": "string"
        },
        "Providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludeDisabledProviders": {
          "type": "boolean"
        }
      }
    },
    "MusicVideoInfo": {
      "type": "object",
      "properties": {
        "Artists": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "MetadataLanguage": {
          "description": "The metadata language.",
          "type": "string"
        },
        "MetadataCountryCode": {
          "description": "The metadata country code.",
          "type": "string"
        },
        "MetadataLanguages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Globalization.CultureDto"
          }
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "Year": {
          "format": "int32",
          "description": "The year.",
          "type": "integer"
        },
        "IndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "ParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PremiereDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsAutomated": {
          "type": "boolean"
        },
        "EnableAdultMetadata": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Providers.MusicVideoInfo"
    },
    "RemoteSearchQuery_PersonLookupInfo": {
      "type": "object",
      "properties": {
        "SearchInfo": {
          "$ref": "#/definitions/PersonLookupInfo"
        },
        "ItemId": {
          "format": "int64",
          "type": "integer"
        },
        "SearchProviderName": {
          "type": "string"
        },
        "Providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludeDisabledProviders": {
          "type": "boolean"
        }
      }
    },
    "PersonLookupInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "MetadataLanguage": {
          "description": "The metadata language.",
          "type": "string"
        },
        "MetadataCountryCode": {
          "description": "The metadata country code.",
          "type": "string"
        },
        "MetadataLanguages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Globalization.CultureDto"
          }
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "Year": {
          "format": "int32",
          "description": "The year.",
          "type": "integer"
        },
        "IndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "ParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PremiereDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsAutomated": {
          "type": "boolean"
        },
        "EnableAdultMetadata": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Providers.PersonLookupInfo"
    },
    "RemoteSearchQuery_AlbumInfo": {
      "type": "object",
      "properties": {
        "SearchInfo": {
          "$ref": "#/definitions/AlbumInfo"
        },
        "ItemId": {
          "format": "int64",
          "type": "integer"
        },
        "SearchProviderName": {
          "type": "string"
        },
        "Providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludeDisabledProviders": {
          "type": "boolean"
        }
      }
    },
    "AlbumInfo": {
      "type": "object",
      "properties": {
        "AlbumArtists": {
          "description": "The album artist.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SongInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SongInfo"
          }
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "MetadataLanguage": {
          "description": "The metadata language.",
          "type": "string"
        },
        "MetadataCountryCode": {
          "description": "The metadata country code.",
          "type": "string"
        },
        "MetadataLanguages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Globalization.CultureDto"
          }
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "Year": {
          "format": "int32",
          "description": "The year.",
          "type": "integer"
        },
        "IndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "ParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PremiereDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsAutomated": {
          "type": "boolean"
        },
        "EnableAdultMetadata": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Providers.AlbumInfo"
    },
    "SongInfo": {
      "type": "object",
      "properties": {
        "AlbumArtists": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Album": {
          "type": "string"
        },
        "Artists": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Composers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "MetadataLanguage": {
          "description": "The metadata language.",
          "type": "string"
        },
        "MetadataCountryCode": {
          "description": "The metadata country code.",
          "type": "string"
        },
        "MetadataLanguages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Globalization.CultureDto"
          }
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "Year": {
          "format": "int32",
          "description": "The year.",
          "type": "integer"
        },
        "IndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "ParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PremiereDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsAutomated": {
          "type": "boolean"
        },
        "EnableAdultMetadata": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Providers.SongInfo"
    },
    "RemoteSearchQuery_ArtistInfo": {
      "type": "object",
      "properties": {
        "SearchInfo": {
          "$ref": "#/definitions/ArtistInfo"
        },
        "ItemId": {
          "format": "int64",
          "type": "integer"
        },
        "SearchProviderName": {
          "type": "string"
        },
        "Providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IncludeDisabledProviders": {
          "type": "boolean"
        }
      }
    },
    "ArtistInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "MetadataLanguage": {
          "description": "The metadata language.",
          "type": "string"
        },
        "MetadataCountryCode": {
          "description": "The metadata country code.",
          "type": "string"
        },
        "MetadataLanguages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Globalization.CultureDto"
          }
        },
        "ProviderIds": {
          "$ref": "#/definitions/ProviderIdDictionary"
        },
        "Year": {
          "format": "int32",
          "description": "The year.",
          "type": "integer"
        },
        "IndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "ParentIndexNumber": {
          "format": "int32",
          "type": "integer"
        },
        "PremiereDate": {
          "format": "date-time",
          "type": "string"
        },
        "IsAutomated": {
          "type": "boolean"
        },
        "EnableAdultMetadata": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Providers.ArtistInfo"
    },
    "MetadataRefreshMode": {
      "enum": [
        "ValidationOnly",
        "Default",
        "FullRefresh"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Controller.Providers.MetadataRefreshMode"
    },
    "MetadataEditorInfo": {
      "type": "object",
      "properties": {
        "ParentalRatingOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParentalRating"
          }
        },
        "Countries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Globalization.CountryInfo"
          }
        },
        "Cultures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Globalization.CultureDto"
          }
        },
        "ExternalIdInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalIdInfo"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dto.MetadataEditorInfo"
    },
    "UserLibrary.LeaveSharedItems": {
      "type": "object",
      "properties": {
        "ItemIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UserId": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Api.UserLibrary.LeaveSharedItems"
    },
    "Library.DeleteInfo": {
      "type": "object",
      "properties": {
        "Paths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.DeleteInfo"
    },
    "AllThemeMediaResult": {
      "type": "object",
      "properties": {
        "ThemeVideosResult": {
          "$ref": "#/definitions/ThemeMediaResult"
        },
        "ThemeSongsResult": {
          "$ref": "#/definitions/ThemeMediaResult"
        },
        "SoundtrackSongsResult": {
          "$ref": "#/definitions/ThemeMediaResult"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Querying.AllThemeMediaResult"
    },
    "ThemeMediaResult": {
      "description": "Class ThemeMediaResult\r\n",
      "type": "object",
      "properties": {
        "OwnerId": {
          "format": "int64",
          "description": "The owner id.",
          "type": "integer"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseItemDto"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Querying.ThemeMediaResult"
    },
    "ImageInfo": {
      "description": "Class ImageInfo\r\n",
      "type": "object",
      "properties": {
        "ImageType": {
          "$ref": "#/definitions/ImageType"
        },
        "ImageIndex": {
          "format": "int32",
          "description": "The index of the image.",
          "type": "integer"
        },
        "Path": {
          "description": "The path.",
          "type": "string"
        },
        "Filename": {
          "type": "string"
        },
        "Height": {
          "format": "int32",
          "description": "The height.",
          "type": "integer"
        },
        "Width": {
          "format": "int32",
          "description": "The width.",
          "type": "integer"
        },
        "Size": {
          "format": "int64",
          "description": "The size.",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Dto.ImageInfo"
    },
    "RemoteImageResult": {
      "description": "Class RemoteImageResult.\r\n",
      "type": "object",
      "properties": {
        "Images": {
          "description": "The images.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemoteImageInfo"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "description": "The total record count.",
          "type": "integer"
        },
        "Providers": {
          "description": "The providers.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Providers.RemoteImageResult"
    },
    "RemoteImageInfo": {
      "description": "Class RemoteImageInfo\r\n",
      "type": "object",
      "properties": {
        "ProviderName": {
          "description": "The name of the provider.",
          "type": "string"
        },
        "Url": {
          "description": "The URL.",
          "type": "string"
        },
        "ThumbnailUrl": {
          "description": "A url used for previewing a smaller version",
          "type": "string"
        },
        "Height": {
          "format": "int32",
          "description": "The height.",
          "type": "integer"
        },
        "Width": {
          "format": "int32",
          "description": "The width.",
          "type": "integer"
        },
        "CommunityRating": {
          "format": "double",
          "description": "The community rating.",
          "type": "number"
        },
        "VoteCount": {
          "format": "int32",
          "description": "The vote count.",
          "type": "integer"
        },
        "Language": {
          "description": "The language.",
          "type": "string"
        },
        "DisplayLanguage": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/ImageType"
        },
        "RatingType": {
          "$ref": "#/definitions/RatingType"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Providers.RemoteImageInfo"
    },
    "RatingType": {
      "enum": [
        "Score",
        "Likes"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Dto.RatingType"
    },
    "RokuMetadata.Api.ThumbnailSetInfo": {
      "type": "object",
      "properties": {
        "AspectRatio": {
          "format": "double",
          "type": "number"
        },
        "Thumbnails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RokuMetadata.Api.ThumbnailInfo"
          }
        }
      },
      "x-internal-ref-name": "RokuMetadata.Api.ThumbnailSetInfo"
    },
    "RokuMetadata.Api.ThumbnailInfo": {
      "type": "object",
      "properties": {
        "PositionTicks": {
          "format": "int64",
          "type": "integer"
        },
        "ImageTag": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "RokuMetadata.Api.ThumbnailInfo"
    },
    "PlaybackInfoResponse": {
      "type": "object",
      "properties": {
        "MediaSources": {
          "description": "The media sources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaSourceInfo"
          }
        },
        "PlaySessionId": {
          "description": "The play session identifier.",
          "type": "string"
        },
        "ErrorCode": {
          "$ref": "#/definitions/PlaybackErrorCode"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.MediaInfo.PlaybackInfoResponse"
    },
    "PlaybackErrorCode": {
      "enum": [
        "NotAllowed",
        "NoCompatibleStream",
        "RateLimitExceeded"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Dlna.PlaybackErrorCode"
    },
    "PlaybackInfoRequest": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        },
        "MaxStreamingBitrate": {
          "format": "int64",
          "type": "integer"
        },
        "StartTimeTicks": {
          "format": "int64",
          "type": "integer"
        },
        "AudioStreamIndex": {
          "format": "int32",
          "type": "integer"
        },
        "SubtitleStreamIndex": {
          "format": "int32",
          "type": "integer"
        },
        "MaxAudioChannels": {
          "format": "int32",
          "type": "integer"
        },
        "MediaSourceId": {
          "type": "string"
        },
        "LiveStreamId": {
          "type": "string"
        },
        "DeviceProfile": {
          "$ref": "#/definitions/DeviceProfile"
        },
        "EnableDirectPlay": {
          "type": "boolean"
        },
        "EnableDirectStream": {
          "type": "boolean"
        },
        "EnableTranscoding": {
          "type": "boolean"
        },
        "AllowInterlacedVideoStreamCopy": {
          "type": "boolean"
        },
        "AllowVideoStreamCopy": {
          "type": "boolean"
        },
        "AllowAudioStreamCopy": {
          "type": "boolean"
        },
        "IsPlayback": {
          "type": "boolean"
        },
        "AutoOpenLiveStream": {
          "type": "boolean"
        },
        "DirectPlayProtocols": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaProtocol"
          }
        },
        "CurrentPlaySessionId": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.MediaInfo.PlaybackInfoRequest"
    },
    "Library.PostUpdatedMedia": {
      "type": "object",
      "properties": {
        "Updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Library.MediaUpdateInfo"
          }
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.PostUpdatedMedia"
    },
    "Library.MediaUpdateInfo": {
      "type": "object",
      "properties": {
        "Path": {
          "type": "string"
        },
        "UpdateType": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.MediaUpdateInfo"
    },
    "QueryResult_VirtualFolderInfo": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualFolderInfo"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "VirtualFolderInfo": {
      "description": "Used to hold information about a user's list of configured virtual folders\r\n",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Locations": {
          "description": "The locations.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CollectionType": {
          "description": "The type of the collection.",
          "type": "string"
        },
        "LibraryOptions": {
          "$ref": "#/definitions/LibraryOptions"
        },
        "ItemId": {
          "description": "The item identifier.",
          "type": "string"
        },
        "Id": {
          "description": "ItemId came first, so that is left for compatability purposes",
          "type": "string"
        },
        "Guid": {
          "type": "string"
        },
        "PrimaryImageItemId": {
          "description": "The primary image item identifier.",
          "type": "string"
        },
        "RefreshProgress": {
          "format": "double",
          "type": "number"
        },
        "RefreshStatus": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Entities.VirtualFolderInfo"
    },
    "Library.UpdateLibraryOptions": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "LibraryOptions": {
          "$ref": "#/definitions/LibraryOptions"
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.UpdateLibraryOptions"
    },
    "Library.RenameVirtualFolder": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "NewName": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.RenameVirtualFolder"
    },
    "Library.RemoveVirtualFolder": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "RefreshLibrary": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.RemoveVirtualFolder"
    },
    "Library.AddMediaPath": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "PathInfo": {
          "$ref": "#/definitions/MediaPathInfo"
        },
        "RefreshLibrary": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.AddMediaPath"
    },
    "QueryResult_ChannelManagementInfo": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelManagementInfo"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ChannelManagementInfo": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.LiveTV.ChannelManagementInfo"
    },
    "Api.TagItem": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.LiveTV.Api.TagItem"
    },
    "Api.ListingProviderTypeInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "SetupUrl": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.LiveTV.Api.ListingProviderTypeInfo"
    },
    "UserNotificationInfo": {
      "type": "object",
      "properties": {
        "NotifierKey": {
          "type": "string"
        },
        "SetupModuleUrl": {
          "type": "string"
        },
        "ServiceName": {
          "type": "string"
        },
        "PluginId": {
          "type": "string"
        },
        "FriendlyName": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Enabled": {
          "type": "boolean"
        },
        "UserIds": {
          "description": "Limit events based on user ids, for admin notifications",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DeviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LibraryIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EventIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UserId": {
          "description": "Notification intended for a specific user",
          "type": "string"
        },
        "IsSelfNotification": {
          "type": "boolean"
        },
        "Options": {
          "description": "This is for webhooks since this will cause xml serialization to fail",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-internal-ref-name": "Emby.Notifications.UserNotificationInfo"
    },
    "Playlists.AddToPlaylistResult": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ItemAddedCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Playlists.AddToPlaylistResult"
    },
    "PlayCommand": {
      "description": "Enum PlayCommand\r\n",
      "enum": [
        "PlayNow",
        "PlayNext",
        "PlayLast",
        "PlayInstantMix",
        "PlayShuffle"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Session.PlayCommand"
    },
    "PlayRequest": {
      "description": "Class PlayRequest\r\n",
      "type": "object",
      "properties": {
        "ControllingUserId": {
          "description": "The controlling user identifier.",
          "type": "string"
        },
        "SubtitleStreamIndex": {
          "format": "int32",
          "type": "integer"
        },
        "AudioStreamIndex": {
          "format": "int32",
          "type": "integer"
        },
        "MediaSourceId": {
          "type": "string"
        },
        "StartIndex": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Session.PlayRequest"
    },
    "GeneralCommand": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "ControllingUserId": {
          "type": "string"
        },
        "Arguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Session.GeneralCommand"
    },
    "ClientCapabilities": {
      "type": "object",
      "properties": {
        "PlayableMediaTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SupportedCommands": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SupportsMediaControl": {
          "type": "boolean"
        },
        "PushToken": {
          "type": "string"
        },
        "PushTokenType": {
          "type": "string"
        },
        "SupportsSync": {
          "type": "boolean"
        },
        "DeviceProfile": {
          "$ref": "#/definitions/DeviceProfile"
        },
        "IconUrl": {
          "type": "string"
        },
        "AppId": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Session.ClientCapabilities"
    },
    "PlaybackProgressInfo": {
      "description": "Class PlaybackProgressInfo.\r\n",
      "type": "object",
      "properties": {
        "CanSeek": {
          "description": "A value indicating whether this instance can seek.",
          "type": "boolean"
        },
        "Item": {
          "$ref": "#/definitions/BaseItemDto"
        },
        "NowPlayingQueue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueueItem"
          }
        },
        "PlaylistItemId": {
          "type": "string"
        },
        "ItemId": {
          "description": "The item identifier.",
          "type": "string"
        },
        "SessionId": {
          "description": "The session id.",
          "type": "string"
        },
        "MediaSourceId": {
          "description": "The media version identifier.",
          "type": "string"
        },
        "AudioStreamIndex": {
          "format": "int32",
          "description": "The index of the audio stream.",
          "type": "integer"
        },
        "SubtitleStreamIndex": {
          "format": "int32",
          "description": "The index of the subtitle stream.",
          "type": "integer"
        },
        "IsPaused": {
          "description": "A value indicating whether this instance is paused.",
          "type": "boolean"
        },
        "PlaylistIndex": {
          "format": "int32",
          "type": "integer"
        },
        "PlaylistLength": {
          "format": "int32",
          "type": "integer"
        },
        "IsMuted": {
          "description": "A value indicating whether this instance is muted.",
          "type": "boolean"
        },
        "PositionTicks": {
          "format": "int64",
          "description": "The position ticks.",
          "type": "integer"
        },
        "RunTimeTicks": {
          "format": "int64",
          "type": "integer"
        },
        "PlaybackStartTimeTicks": {
          "format": "int64",
          "type": "integer"
        },
        "VolumeLevel": {
          "format": "int32",
          "description": "The volume level.",
          "type": "integer"
        },
        "Brightness": {
          "format": "int32",
          "type": "integer"
        },
        "AspectRatio": {
          "type": "string"
        },
        "EventName": {
          "$ref": "#/definitions/ProgressEvent"
        },
        "PlayMethod": {
          "$ref": "#/definitions/PlayMethod"
        },
        "LiveStreamId": {
          "description": "The live stream identifier.",
          "type": "string"
        },
        "PlaySessionId": {
          "description": "The play session identifier.",
          "type": "string"
        },
        "RepeatMode": {
          "$ref": "#/definitions/RepeatMode"
        },
        "SubtitleOffset": {
          "format": "int32",
          "type": "integer"
        },
        "PlaybackRate": {
          "format": "double",
          "type": "number"
        },
        "PlaylistItemIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Session.PlaybackProgressInfo"
    },
    "PlaybackStopInfo": {
      "description": "Class PlaybackStopInfo.\r\n",
      "type": "object",
      "properties": {
        "NowPlayingQueue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueueItem"
          }
        },
        "PlaylistItemId": {
          "type": "string"
        },
        "PlaylistIndex": {
          "format": "int32",
          "type": "integer"
        },
        "PlaylistLength": {
          "format": "int32",
          "type": "integer"
        },
        "Item": {
          "$ref": "#/definitions/BaseItemDto"
        },
        "ItemId": {
          "description": "The item identifier.",
          "type": "string"
        },
        "SessionId": {
          "description": "The session id.",
          "type": "string"
        },
        "MediaSourceId": {
          "description": "The media version identifier.",
          "type": "string"
        },
        "PositionTicks": {
          "format": "int64",
          "description": "The position ticks.",
          "type": "integer"
        },
        "LiveStreamId": {
          "description": "The live stream identifier.",
          "type": "string"
        },
        "PlaySessionId": {
          "description": "The play session identifier.",
          "type": "string"
        },
        "Failed": {
          "description": "A value indicating whether this `MediaBrowser.Model.Session.PlaybackStopInfo` is failed.",
          "type": "boolean"
        },
        "IsAutomated": {
          "type": "boolean"
        },
        "NextMediaType": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Session.PlaybackStopInfo"
    },
    "SyncedItemProgress": {
      "type": "object",
      "properties": {
        "Progress": {
          "format": "double",
          "type": "number"
        },
        "Status": {
          "$ref": "#/definitions/SyncJobItemStatus"
        }
      },
      "x-internal-ref-name": "Emby.Server.Sync.Model.SyncedItemProgress"
    },
    "SyncedItem": {
      "type": "object",
      "properties": {
        "ServerId": {
          "type": "string"
        },
        "SyncJobId": {
          "format": "int64",
          "type": "integer"
        },
        "SyncJobName": {
          "type": "string"
        },
        "SyncJobDateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "SyncJobItemId": {
          "format": "int64",
          "type": "integer"
        },
        "OriginalFileName": {
          "type": "string"
        },
        "Item": {
          "$ref": "#/definitions/BaseItemDto"
        },
        "UserId": {
          "type": "string"
        },
        "AdditionalFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemFileInfo"
          }
        }
      },
      "x-internal-ref-name": "Emby.Server.Sync.Model.SyncedItem"
    },
    "QueryResult_LogFile": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogFile"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "LogFile": {
      "type": "object",
      "properties": {
        "DateCreated": {
          "format": "date-time",
          "description": "The date created.",
          "type": "string"
        },
        "DateModified": {
          "format": "date-time",
          "description": "The date modified.",
          "type": "string"
        },
        "Size": {
          "format": "int64",
          "description": "The size.",
          "type": "integer"
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.System.LogFile"
    },
    "PublicSystemInfo": {
      "type": "object",
      "properties": {
        "LocalAddress": {
          "description": "The local address.",
          "type": "string"
        },
        "LocalAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "WanAddress": {
          "description": "The wan address.",
          "type": "string"
        },
        "RemoteAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ServerName": {
          "description": "The name of the server.",
          "type": "string"
        },
        "Version": {
          "description": "The version.",
          "type": "string"
        },
        "Id": {
          "description": "The id.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.System.PublicSystemInfo"
    },
    "QueryResult_ActivityLogEntry": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityLogEntry"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ActivityLogEntry": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "description": "The identifier.",
          "type": "integer"
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "Overview": {
          "description": "The overview.",
          "type": "string"
        },
        "ShortOverview": {
          "description": "The short overview.",
          "type": "string"
        },
        "Type": {
          "description": "The type.",
          "type": "string"
        },
        "ItemId": {
          "description": "The item identifier.",
          "type": "string"
        },
        "Date": {
          "format": "date-time",
          "description": "The date.",
          "type": "string"
        },
        "UserId": {
          "description": "The user identifier.",
          "type": "string"
        },
        "UserPrimaryImageTag": {
          "description": "The user primary image tag.",
          "type": "string"
        },
        "Severity": {
          "$ref": "#/definitions/Logging.LogSeverity"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Activity.ActivityLogEntry"
    },
    "Logging.LogSeverity": {
      "description": "Enum LogSeverity\r\n",
      "enum": [
        "Info",
        "Debug",
        "Warn",
        "Error",
        "Fatal"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Logging.LogSeverity"
    },
    "AuthenticateUser": {
      "type": "object",
      "properties": {
        "Pw": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Api.AuthenticateUser"
    },
    "UpdateUserPassword": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "NewPw": {
          "type": "string"
        },
        "ResetPassword": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "Emby.Api.UpdateUserPassword"
    },
    "ForgotPasswordPin": {
      "type": "object",
      "properties": {
        "Pin": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "Emby.Api.ForgotPasswordPin"
    },
    "PinRedeemResult": {
      "type": "object",
      "properties": {
        "Success": {
          "description": "A value indicating whether this `MediaBrowser.Model.Users.PinRedeemResult` is success.",
          "type": "boolean"
        },
        "UsersReset": {
          "description": "The users reset.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Users.PinRedeemResult"
    },
    "UserLibrary.AddTags": {
      "type": "object",
      "properties": {
        "Tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameIdPair"
          }
        }
      },
      "x-internal-ref-name": "Emby.Api.UserLibrary.AddTags"
    },
    "UserLibrary.RemoveTags": {
      "type": "object",
      "properties": {
        "Tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameIdPair"
          }
        }
      },
      "x-internal-ref-name": "Emby.Api.UserLibrary.RemoveTags"
    },
    "ImageProviderInfo": {
      "description": "Class ImageProviderInfo.\r\n",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "SupportedImages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageType"
          }
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Providers.ImageProviderInfo"
    },
    "Library.UpdateMediaPath": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "PathInfo": {
          "$ref": "#/definitions/MediaPathInfo"
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.UpdateMediaPath"
    },
    "Library.RemoveMediaPath": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "RefreshLibrary": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "Emby.Api.Library.RemoveMediaPath"
    },
    "PlaystateCommand": {
      "description": "Enum PlaystateCommand\r\n",
      "enum": [
        "Stop",
        "Pause",
        "Unpause",
        "NextTrack",
        "PreviousTrack",
        "Seek",
        "Rewind",
        "FastForward",
        "PlayPause",
        "SeekRelative"
      ],
      "type": "string",
      "x-internal-ref-name": "MediaBrowser.Model.Session.PlaystateCommand"
    },
    "PlaystateRequest": {
      "type": "object",
      "properties": {
        "Command": {
          "$ref": "#/definitions/PlaystateCommand"
        },
        "SeekPositionTicks": {
          "format": "int64",
          "type": "integer"
        },
        "ControllingUserId": {
          "description": "The controlling user identifier.",
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Session.PlaystateRequest"
    },
    "QueryResult_String": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TotalRecordCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Connect.UserLinkResult": {
      "type": "object",
      "properties": {
        "IsPending": {
          "type": "boolean"
        },
        "IsNewUserInvitation": {
          "type": "boolean"
        },
        "GuestDisplayName": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Controller.Connect.UserLinkResult"
    },
    "RemoteSubtitleInfo": {
      "type": "object",
      "properties": {
        "ThreeLetterISOLanguageName": {
          "description": "Use language instead to return the language specified by the subtitle provider",
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "ProviderName": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Format": {
          "type": "string"
        },
        "Author": {
          "type": "string"
        },
        "Comment": {
          "type": "string"
        },
        "DateCreated": {
          "format": "date-time",
          "type": "string"
        },
        "CommunityRating": {
          "format": "float",
          "type": "number"
        },
        "DownloadCount": {
          "format": "int32",
          "type": "integer"
        },
        "IsHashMatch": {
          "type": "boolean"
        },
        "IsForced": {
          "type": "boolean"
        },
        "IsHearingImpaired": {
          "type": "boolean"
        },
        "Language": {
          "type": "string"
        }
      },
      "x-internal-ref-name": "MediaBrowser.Model.Providers.RemoteSubtitleInfo"
    },
    "Subtitles.SubtitleDownloadResult": {
      "type": "object",
      "properties": {
        "NewIndex": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "Emby.Api.Subtitles.SubtitleDownloadResult"
    },
    "Api.SetChannelDisabled": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ManagementId": {
          "type": "string"
        },
        "Disabled": {
          "type": "boolean"
        }
      },
      "x-internal-ref-name": "Emby.LiveTV.Api.SetChannelDisabled"
    },
    "Api.SetChannelSortIndex": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "ManagementId": {
          "type": "string"
        },
        "NewIndex": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-internal-ref-name": "Emby.LiveTV.Api.SetChannelSortIndex"
    },
    "Api.OnPlaybackProgress": {
      "type": "object",
      "properties": {
        "PlaylistIndex": {
          "format": "int32",
          "type": "integer"
        },
        "PlaylistLength": {
          "format": "int32",
          "type": "integer"
        },
        "EventName": {
          "$ref": "#/definitions/ProgressEvent"
        }
      },
      "x-internal-ref-name": "Emby.Server.MediaEncoding.Api.OnPlaybackProgress"
    }
  },
  "responses": {
    "400": {
      "description": "Bad Request. Server cannot process request."
    },
    "401": {
      "description": "Unauthorized. Client needs to authenticate."
    },
    "403": {
      "description": "Forbidden. No permission for the reqested operation."
    },
    "404": {
      "description": "Resource not found or unavailable."
    },
    "500": {
      "description": "Server error."
    }
  },
  "securityDefinitions": {
    "apikeyauth": {
      "type": "apiKey",
      "name": "api_key",
      "in": "query",
      "description": "**ApiKey Authentication**  \nAPI keys are static access tokens providing access to the Emby API for external applications.  \n  \nKeys can be created from the Server Dashboard under **Advanced > Security**  \nThe api key can alternatively be specified in an http header named _X-Emby-Token_  \nFor details please see the [API Documentation: ApiKey Authentication](https://github.com/MediaBrowser/Emby/wiki/ApiKeyAuthentication)"
    },
    "embyauth": { }
  },
  "tags": [
    {
      "name": "ArtistsService",
      "externalDocs": {
        "description": "API Reference: ArtistsService",
        "url": "https://betadev.emby.media/reference/RestAPI/ArtistsService.html"
      }
    },
    {
      "name": "TagService",
      "externalDocs": {
        "description": "API Reference: TagService",
        "url": "https://betadev.emby.media/reference/RestAPI/TagService.html"
      }
    },
    {
      "name": "ChannelService",
      "externalDocs": {
        "description": "API Reference: ChannelService",
        "url": "https://betadev.emby.media/reference/RestAPI/ChannelService.html"
      }
    },
    {
      "name": "CollectionService",
      "externalDocs": {
        "description": "API Reference: CollectionService",
        "url": "https://betadev.emby.media/reference/RestAPI/CollectionService.html"
      }
    },
    {
      "name": "DeviceService",
      "externalDocs": {
        "description": "API Reference: DeviceService",
        "url": "https://betadev.emby.media/reference/RestAPI/DeviceService.html"
      }
    },
    {
      "name": "FeatureService",
      "externalDocs": {
        "description": "API Reference: FeatureService",
        "url": "https://betadev.emby.media/reference/RestAPI/FeatureService.html"
      }
    },
    {
      "name": "GameGenresService",
      "externalDocs": {
        "description": "API Reference: GameGenresService",
        "url": "https://betadev.emby.media/reference/RestAPI/GameGenresService.html"
      }
    },
    {
      "name": "GenresService",
      "externalDocs": {
        "description": "API Reference: GenresService",
        "url": "https://betadev.emby.media/reference/RestAPI/GenresService.html"
      }
    },
    {
      "name": "ItemsService",
      "externalDocs": {
        "description": "API Documentation: Item Information",
        "url": "https://dev.emby.media/doc/restapi/Item-Information.html"
      }
    },
    {
      "name": "LibraryService",
      "externalDocs": {
        "description": "API Documentation: Browsing the Library",
        "url": "https://dev.emby.media/doc/restapi/Browsing-the-Library.html"
      }
    },
    {
      "name": "MusicGenresService",
      "externalDocs": {
        "description": "API Reference: MusicGenresService",
        "url": "https://betadev.emby.media/reference/RestAPI/MusicGenresService.html"
      }
    },
    {
      "name": "OfficialRatingService",
      "externalDocs": {
        "description": "API Reference: OfficialRatingService",
        "url": "https://betadev.emby.media/reference/RestAPI/OfficialRatingService.html"
      }
    },
    {
      "name": "OpenApiService",
      "externalDocs": {
        "description": "API Reference: OpenApiService",
        "url": "https://betadev.emby.media/reference/RestAPI/OpenApiService.html"
      }
    },
    {
      "name": "PackageService",
      "externalDocs": {
        "description": "API Reference: PackageService",
        "url": "https://betadev.emby.media/reference/RestAPI/PackageService.html"
      }
    },
    {
      "name": "PersonsService",
      "externalDocs": {
        "description": "API Reference: PersonsService",
        "url": "https://betadev.emby.media/reference/RestAPI/PersonsService.html"
      }
    },
    {
      "name": "PlaylistService",
      "externalDocs": {
        "description": "API Documentation: Playlists",
        "url": "https://dev.emby.media/doc/restapi/Playlists.html"
      }
    },
    {
      "name": "PluginService",
      "externalDocs": {
        "description": "API Reference: PluginService",
        "url": "https://betadev.emby.media/reference/RestAPI/PluginService.html"
      }
    },
    {
      "name": "ScheduledTaskService",
      "externalDocs": {
        "description": "API Reference: ScheduledTaskService",
        "url": "https://betadev.emby.media/reference/RestAPI/ScheduledTaskService.html"
      }
    },
    {
      "name": "SessionsService",
      "externalDocs": {
        "description": "API Documentation: Remote control",
        "url": "https://dev.emby.media/doc/restapi/Remote-Control.html"
      }
    },
    {
      "name": "StudiosService",
      "externalDocs": {
        "description": "API Reference: StudiosService",
        "url": "https://betadev.emby.media/reference/RestAPI/StudiosService.html"
      }
    },
    {
      "name": "TrailersService",
      "externalDocs": {
        "description": "API Reference: TrailersService",
        "url": "https://betadev.emby.media/reference/RestAPI/TrailersService.html"
      }
    },
    {
      "name": "ImageService",
      "externalDocs": {
        "description": "API Documentation: Images",
        "url": "https://dev.emby.media/doc/restapi/Images.html"
      }
    },
    {
      "name": "InstantMixService",
      "externalDocs": {
        "description": "API Reference: InstantMixService",
        "url": "https://betadev.emby.media/reference/RestAPI/InstantMixService.html"
      }
    },
    {
      "name": "BackupApi"
    },
    {
      "name": "BrandingService",
      "externalDocs": {
        "description": "API Reference: BrandingService",
        "url": "https://betadev.emby.media/reference/RestAPI/BrandingService.html"
      }
    },
    {
      "name": "ConnectService",
      "externalDocs": {
        "description": "API Reference: ConnectService",
        "url": "https://betadev.emby.media/reference/RestAPI/ConnectService.html"
      }
    },
    {
      "name": "DisplayPreferencesService",
      "externalDocs": {
        "description": "API Reference: DisplayPreferencesService",
        "url": "https://betadev.emby.media/reference/RestAPI/DisplayPreferencesService.html"
      }
    },
    {
      "name": "DlnaService",
      "externalDocs": {
        "description": "API Reference: DlnaService",
        "url": "https://betadev.emby.media/reference/RestAPI/DlnaService.html"
      }
    },
    {
      "name": "EncodingInfoService",
      "externalDocs": {
        "description": "API Reference: EncodingInfoService",
        "url": "https://betadev.emby.media/reference/RestAPI/EncodingInfoService.html"
      }
    },
    {
      "name": "ToneMapOptionsService",
      "externalDocs": {
        "description": "API Reference: ToneMapOptionsService",
        "url": "https://betadev.emby.media/reference/RestAPI/ToneMapOptionsService.html"
      }
    },
    {
      "name": "SubtitleOptionsService",
      "externalDocs": {
        "description": "API Reference: SubtitleOptionsService",
        "url": "https://betadev.emby.media/reference/RestAPI/SubtitleOptionsService.html"
      }
    },
    {
      "name": "FfmpegOptionsService",
      "externalDocs": {
        "description": "API Reference: FfmpegOptionsService",
        "url": "https://betadev.emby.media/reference/RestAPI/FfmpegOptionsService.html"
      }
    },
    {
      "name": "CodecParameterService",
      "externalDocs": {
        "description": "API Reference: CodecParameterService",
        "url": "https://betadev.emby.media/reference/RestAPI/CodecParameterService.html"
      }
    },
    {
      "name": "EnvironmentService",
      "externalDocs": {
        "description": "API Reference: EnvironmentService",
        "url": "https://betadev.emby.media/reference/RestAPI/EnvironmentService.html"
      }
    },
    {
      "name": "RemoteImageService",
      "externalDocs": {
        "description": "API Reference: RemoteImageService",
        "url": "https://betadev.emby.media/reference/RestAPI/RemoteImageService.html"
      }
    },
    {
      "name": "ItemUpdateService",
      "externalDocs": {
        "description": "API Reference: ItemUpdateService",
        "url": "https://betadev.emby.media/reference/RestAPI/ItemUpdateService.html"
      }
    },
    {
      "name": "UserLibraryService",
      "externalDocs": {
        "description": "API Documentation: Browsing the Library",
        "url": "https://dev.emby.media/doc/restapi/Browsing-the-Library.html"
      }
    },
    {
      "name": "LibraryStructureService",
      "externalDocs": {
        "description": "API Reference: LibraryStructureService",
        "url": "https://betadev.emby.media/reference/RestAPI/LibraryStructureService.html"
      }
    },
    {
      "name": "MediaInfoService",
      "externalDocs": {
        "description": "API Reference: MediaInfoService",
        "url": "https://betadev.emby.media/reference/RestAPI/MediaInfoService.html"
      }
    },
    {
      "name": "LiveTvService",
      "externalDocs": {
        "description": "API Reference: LiveTvService",
        "url": "https://betadev.emby.media/reference/RestAPI/LiveTvService.html"
      }
    },
    {
      "name": "LocalizationService",
      "externalDocs": {
        "description": "API Reference: LocalizationService",
        "url": "https://betadev.emby.media/reference/RestAPI/LocalizationService.html"
      }
    },
    {
      "name": "MoviesService",
      "externalDocs": {
        "description": "API Reference: MoviesService",
        "url": "https://betadev.emby.media/reference/RestAPI/MoviesService.html"
      }
    },
    {
      "name": "NotificationsService",
      "externalDocs": {
        "description": "API Reference: NotificationsService",
        "url": "https://betadev.emby.media/reference/RestAPI/NotificationsService.html"
      }
    },
    {
      "name": "PlaystateService",
      "externalDocs": {
        "description": "API Reference: PlaystateService",
        "url": "https://betadev.emby.media/reference/RestAPI/PlaystateService.html"
      }
    },
    {
      "name": "TvShowsService",
      "externalDocs": {
        "description": "API Reference: TvShowsService",
        "url": "https://betadev.emby.media/reference/RestAPI/TvShowsService.html"
      }
    },
    {
      "name": "SyncService",
      "externalDocs": {
        "description": "API Documentation: Sync",
        "url": "https://dev.emby.media/doc/restapi/Sync.html"
      }
    },
    {
      "name": "ConfigurationService",
      "externalDocs": {
        "description": "API Reference: ConfigurationService",
        "url": "https://betadev.emby.media/reference/RestAPI/ConfigurationService.html"
      }
    },
    {
      "name": "SystemService",
      "externalDocs": {
        "description": "API Reference: SystemService",
        "url": "https://betadev.emby.media/reference/RestAPI/SystemService.html"
      }
    },
    {
      "name": "GenericUIApiService",
      "externalDocs": {
        "description": "API Reference: GenericUIApiService",
        "url": "https://betadev.emby.media/reference/RestAPI/GenericUIApiService.html"
      }
    },
    {
      "name": "UserService",
      "externalDocs": {
        "description": "API Reference: UserService",
        "url": "https://betadev.emby.media/reference/RestAPI/UserService.html"
      }
    },
    {
      "name": "VideosService",
      "externalDocs": {
        "description": "API Reference: VideosService",
        "url": "https://betadev.emby.media/reference/RestAPI/VideosService.html"
      }
    },
    {
      "name": "HlsSegmentService",
      "externalDocs": {
        "description": "API Reference: HlsSegmentService",
        "url": "https://betadev.emby.media/reference/RestAPI/HlsSegmentService.html"
      }
    },
    {
      "name": "WebAppService",
      "externalDocs": {
        "description": "API Reference: WebAppService",
        "url": "https://betadev.emby.media/reference/RestAPI/WebAppService.html"
      }
    },
    {
      "name": "UniversalAudioService",
      "externalDocs": {
        "description": "API Documentation: Audio streaming",
        "url": "https://dev.emby.media/doc/restapi/Audio-Streaming.html"
      }
    },
    {
      "name": "AudioService",
      "externalDocs": {
        "description": "API Documentation: Audio streaming",
        "url": "https://dev.emby.media/doc/restapi/Audio-Streaming.html"
      }
    },
    {
      "name": "DynamicHlsService",
      "externalDocs": {
        "description": "API Documentation: Http Live Streaming",
        "url": "https://dev.emby.media/doc/restapi/Http-Live-Streaming.html"
      }
    },
    {
      "name": "VideoHlsService",
      "externalDocs": {
        "description": "API Reference: VideoHlsService",
        "url": "https://betadev.emby.media/reference/RestAPI/VideoHlsService.html"
      }
    },
    {
      "name": "DlnaServerService",
      "externalDocs": {
        "description": "API Reference: DlnaServerService",
        "url": "https://betadev.emby.media/reference/RestAPI/DlnaServerService.html"
      }
    },
    {
      "name": "ItemLookupService",
      "externalDocs": {
        "description": "API Reference: ItemLookupService",
        "url": "https://betadev.emby.media/reference/RestAPI/ItemLookupService.html"
      }
    },
    {
      "name": "ItemRefreshService",
      "externalDocs": {
        "description": "API Reference: ItemRefreshService",
        "url": "https://betadev.emby.media/reference/RestAPI/ItemRefreshService.html"
      }
    },
    {
      "name": "BifService",
      "externalDocs": {
        "description": "API Reference: BifService",
        "url": "https://betadev.emby.media/reference/RestAPI/BifService.html"
      }
    },
    {
      "name": "UserNotificationsService",
      "externalDocs": {
        "description": "API Reference: UserNotificationsService",
        "url": "https://betadev.emby.media/reference/RestAPI/UserNotificationsService.html"
      }
    },
    {
      "name": "ActivityLogService",
      "externalDocs": {
        "description": "API Reference: ActivityLogService",
        "url": "https://betadev.emby.media/reference/RestAPI/ActivityLogService.html"
      }
    },
    {
      "name": "SuggestionsService",
      "externalDocs": {
        "description": "API Reference: SuggestionsService",
        "url": "https://betadev.emby.media/reference/RestAPI/SuggestionsService.html"
      }
    },
    {
      "name": "UserViewsService",
      "externalDocs": {
        "description": "API Documentation: Browsing the Library",
        "url": "https://dev.emby.media/doc/restapi/Browsing-the-Library.html"
      }
    },
    {
      "name": "VideoService",
      "externalDocs": {
        "description": "API Documentation: Video streaming",
        "url": "https://dev.emby.media/doc/restapi/Video-Streaming.html"
      }
    },
    {
      "name": "SubtitleService",
      "externalDocs": {
        "description": "API Reference: SubtitleService",
        "url": "https://betadev.emby.media/reference/RestAPI/SubtitleService.html"
      }
    },
    {
      "name": "LiveStreamService",
      "externalDocs": {
        "description": "API Reference: LiveStreamService",
        "url": "https://betadev.emby.media/reference/RestAPI/LiveStreamService.html"
      }
    }
  ],
  "externalDocs": {
    "description": "embyDEV - REST API Documentation",
    "url": "https://dev.emby.media/doc/restapi/index.html"
  }
}
