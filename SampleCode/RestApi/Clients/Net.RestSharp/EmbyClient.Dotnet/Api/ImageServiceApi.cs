/*
 * EmbyClient.Dotnet
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using EmbyClient.Dotnet.Client;
using EmbyClient.Dotnet.Model;

namespace EmbyClient.Dotnet.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IImageServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void DeleteItemsByIdImagesByType (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemsByIdImagesByTypeWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void DeleteItemsByIdImagesByTypeByIndex (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemsByIdImagesByTypeByIndexWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void DeleteUsersByIdImagesByType (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUsersByIdImagesByTypeWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void DeleteUsersByIdImagesByTypeByIndex (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUsersByIdImagesByTypeByIndexWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void GetArtistsByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetArtistsByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void GetArtistsByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetArtistsByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void GetGamegenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGamegenresByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void GetGamegenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGamegenresByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void GetGenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGenresByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void GetGenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGenresByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// Gets information about an item&#x27;s images
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>List&lt;ImageInfo&gt;</returns>
        List<ImageInfo> GetItemsByIdImages (string id);

        /// <summary>
        /// Gets information about an item&#x27;s images
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of List&lt;ImageInfo&gt;</returns>
        ApiResponse<List<ImageInfo>> GetItemsByIdImagesWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void GetItemsByIdImagesByType (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemsByIdImagesByTypeWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void GetItemsByIdImagesByTypeByIndex (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemsByIdImagesByTypeByIndexWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithHttpInfo (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void GetMusicgenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetMusicgenresByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void GetMusicgenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetMusicgenresByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void GetPersonsByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPersonsByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void GetPersonsByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPersonsByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void GetStudiosByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetStudiosByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void GetStudiosByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetStudiosByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void GetUsersByIdImagesByType (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUsersByIdImagesByTypeWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void GetUsersByIdImagesByTypeByIndex (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetUsersByIdImagesByTypeByIndexWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void HeadArtistsByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadArtistsByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void HeadArtistsByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadArtistsByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void HeadGamegenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadGamegenresByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void HeadGamegenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadGamegenresByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void HeadGenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadGenresByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void HeadGenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadGenresByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void HeadItemsByIdImagesByType (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadItemsByIdImagesByTypeWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void HeadItemsByIdImagesByTypeByIndex (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadItemsByIdImagesByTypeByIndexWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithHttpInfo (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void HeadMusicgenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadMusicgenresByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void HeadMusicgenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadMusicgenresByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void HeadPersonsByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadPersonsByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void HeadPersonsByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadPersonsByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void HeadStudiosByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadStudiosByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void HeadStudiosByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadStudiosByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void HeadUsersByIdImagesByType (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadUsersByIdImagesByTypeWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void HeadUsersByIdImagesByTypeByIndex (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HeadUsersByIdImagesByTypeByIndexWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void PostItemsByIdImagesByType (Object body, string id, ImageType type, int? index);

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostItemsByIdImagesByTypeWithHttpInfo (Object body, string id, ImageType type, int? index);
        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void PostItemsByIdImagesByTypeByIndex (Object body, string id, ImageType type, int? index);

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostItemsByIdImagesByTypeByIndexWithHttpInfo (Object body, string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void PostItemsByIdImagesByTypeByIndexDelete (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostItemsByIdImagesByTypeByIndexDeleteWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// Updates the index for an item image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="newIndex">The new image index</param>
        /// <returns></returns>
        void PostItemsByIdImagesByTypeByIndexIndex (string id, ImageType type, int? index, int? newIndex);

        /// <summary>
        /// Updates the index for an item image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="newIndex">The new image index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostItemsByIdImagesByTypeByIndexIndexWithHttpInfo (string id, ImageType type, int? index, int? newIndex);
        /// <summary>
        /// Updates the index for an item image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="url">The url for the new image</param>
        /// <returns></returns>
        void PostItemsByIdImagesByTypeByIndexUrl (string id, ImageType type, int? index, string url);

        /// <summary>
        /// Updates the index for an item image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="url">The url for the new image</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostItemsByIdImagesByTypeByIndexUrlWithHttpInfo (string id, ImageType type, int? index, string url);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void PostItemsByIdImagesByTypeDelete (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostItemsByIdImagesByTypeDeleteWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void PostUsersByIdImagesByType (Object body, string id, ImageType type, int? index);

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUsersByIdImagesByTypeWithHttpInfo (Object body, string id, ImageType type, int? index);
        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void PostUsersByIdImagesByTypeByIndex (Object body, string id, ImageType type, int? index);

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUsersByIdImagesByTypeByIndexWithHttpInfo (Object body, string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        void PostUsersByIdImagesByTypeByIndexDelete (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUsersByIdImagesByTypeByIndexDeleteWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        void PostUsersByIdImagesByTypeDelete (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostUsersByIdImagesByTypeDeleteWithHttpInfo (string id, ImageType type, int? index);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemsByIdImagesByTypeAsync (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemsByIdImagesByTypeAsyncWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemsByIdImagesByTypeByIndexAsync (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemsByIdImagesByTypeByIndexAsyncWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUsersByIdImagesByTypeAsync (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUsersByIdImagesByTypeAsyncWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUsersByIdImagesByTypeByIndexAsync (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUsersByIdImagesByTypeByIndexAsyncWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetArtistsByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetArtistsByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetArtistsByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetArtistsByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetGamegenresByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetGamegenresByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetGamegenresByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetGamegenresByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetGenresByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetGenresByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetGenresByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetGenresByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// Gets information about an item&#x27;s images
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of List&lt;ImageInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ImageInfo>> GetItemsByIdImagesAsync (string id);

        /// <summary>
        /// Gets information about an item&#x27;s images
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (List&lt;ImageInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ImageInfo>>> GetItemsByIdImagesAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemsByIdImagesByTypeAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemsByIdImagesByTypeAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemsByIdImagesByTypeByIndexAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemsByIdImagesByTypeByIndexAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsync (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsyncWithHttpInfo (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetMusicgenresByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetMusicgenresByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetMusicgenresByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetMusicgenresByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPersonsByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPersonsByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPersonsByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPersonsByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetStudiosByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStudiosByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetStudiosByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStudiosByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUsersByIdImagesByTypeAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUsersByIdImagesByTypeAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetUsersByIdImagesByTypeByIndexAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetUsersByIdImagesByTypeByIndexAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadArtistsByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadArtistsByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadArtistsByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadArtistsByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadGamegenresByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadGamegenresByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadGamegenresByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadGamegenresByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadGenresByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadGenresByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadGenresByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadGenresByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadItemsByIdImagesByTypeAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadItemsByIdImagesByTypeAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadItemsByIdImagesByTypeByIndexAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadItemsByIdImagesByTypeByIndexAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsync (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsyncWithHttpInfo (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadMusicgenresByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadMusicgenresByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadMusicgenresByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadMusicgenresByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadPersonsByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadPersonsByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadPersonsByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadPersonsByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadStudiosByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadStudiosByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadStudiosByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadStudiosByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadUsersByIdImagesByTypeAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadUsersByIdImagesByTypeAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HeadUsersByIdImagesByTypeByIndexAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HeadUsersByIdImagesByTypeByIndexAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index);
        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostItemsByIdImagesByTypeAsync (Object body, string id, ImageType type, int? index);

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdImagesByTypeAsyncWithHttpInfo (Object body, string id, ImageType type, int? index);
        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostItemsByIdImagesByTypeByIndexAsync (Object body, string id, ImageType type, int? index);

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdImagesByTypeByIndexAsyncWithHttpInfo (Object body, string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostItemsByIdImagesByTypeByIndexDeleteAsync (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdImagesByTypeByIndexDeleteAsyncWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// Updates the index for an item image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="newIndex">The new image index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostItemsByIdImagesByTypeByIndexIndexAsync (string id, ImageType type, int? index, int? newIndex);

        /// <summary>
        /// Updates the index for an item image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="newIndex">The new image index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdImagesByTypeByIndexIndexAsyncWithHttpInfo (string id, ImageType type, int? index, int? newIndex);
        /// <summary>
        /// Updates the index for an item image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="url">The url for the new image</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostItemsByIdImagesByTypeByIndexUrlAsync (string id, ImageType type, int? index, string url);

        /// <summary>
        /// Updates the index for an item image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="url">The url for the new image</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdImagesByTypeByIndexUrlAsyncWithHttpInfo (string id, ImageType type, int? index, string url);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostItemsByIdImagesByTypeDeleteAsync (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdImagesByTypeDeleteAsyncWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUsersByIdImagesByTypeAsync (Object body, string id, ImageType type, int? index);

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUsersByIdImagesByTypeAsyncWithHttpInfo (Object body, string id, ImageType type, int? index);
        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUsersByIdImagesByTypeByIndexAsync (Object body, string id, ImageType type, int? index);

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUsersByIdImagesByTypeByIndexAsyncWithHttpInfo (Object body, string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUsersByIdImagesByTypeByIndexDeleteAsync (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUsersByIdImagesByTypeByIndexDeleteAsyncWithHttpInfo (string id, ImageType type, int? index);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostUsersByIdImagesByTypeDeleteAsync (string id, ImageType type, int? index);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostUsersByIdImagesByTypeDeleteAsyncWithHttpInfo (string id, ImageType type, int? index);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ImageServiceApi : IImageServiceApi
    {
        private EmbyClient.Dotnet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImageServiceApi(String basePath)
        {
            this.Configuration = new EmbyClient.Dotnet.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EmbyClient.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public ImageServiceApi()
        {
            this.Configuration = EmbyClient.Dotnet.Client.Configuration.Default;

            ExceptionFactory = EmbyClient.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ImageServiceApi(EmbyClient.Dotnet.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EmbyClient.Dotnet.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EmbyClient.Dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EmbyClient.Dotnet.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EmbyClient.Dotnet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void DeleteItemsByIdImagesByType (string id, ImageType type, int? index)
        {
             DeleteItemsByIdImagesByTypeWithHttpInfo(id, type, index);
        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemsByIdImagesByTypeWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->DeleteItemsByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->DeleteItemsByIdImagesByType");

            var localVarPath = "/Items/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemsByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemsByIdImagesByTypeAsync (string id, ImageType type, int? index)
        {
             await DeleteItemsByIdImagesByTypeAsyncWithHttpInfo(id, type, index);

        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemsByIdImagesByTypeAsyncWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->DeleteItemsByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->DeleteItemsByIdImagesByType");

            var localVarPath = "/Items/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemsByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void DeleteItemsByIdImagesByTypeByIndex (string id, ImageType type, int? index)
        {
             DeleteItemsByIdImagesByTypeByIndexWithHttpInfo(id, type, index);
        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemsByIdImagesByTypeByIndexWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->DeleteItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->DeleteItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->DeleteItemsByIdImagesByTypeByIndex");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemsByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemsByIdImagesByTypeByIndexAsync (string id, ImageType type, int? index)
        {
             await DeleteItemsByIdImagesByTypeByIndexAsyncWithHttpInfo(id, type, index);

        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemsByIdImagesByTypeByIndexAsyncWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->DeleteItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->DeleteItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->DeleteItemsByIdImagesByTypeByIndex");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemsByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void DeleteUsersByIdImagesByType (string id, ImageType type, int? index)
        {
             DeleteUsersByIdImagesByTypeWithHttpInfo(id, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUsersByIdImagesByTypeWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->DeleteUsersByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->DeleteUsersByIdImagesByType");

            var localVarPath = "/Users/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsersByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUsersByIdImagesByTypeAsync (string id, ImageType type, int? index)
        {
             await DeleteUsersByIdImagesByTypeAsyncWithHttpInfo(id, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUsersByIdImagesByTypeAsyncWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->DeleteUsersByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->DeleteUsersByIdImagesByType");

            var localVarPath = "/Users/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsersByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void DeleteUsersByIdImagesByTypeByIndex (string id, ImageType type, int? index)
        {
             DeleteUsersByIdImagesByTypeByIndexWithHttpInfo(id, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUsersByIdImagesByTypeByIndexWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->DeleteUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->DeleteUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->DeleteUsersByIdImagesByTypeByIndex");

            var localVarPath = "/Users/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsersByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUsersByIdImagesByTypeByIndexAsync (string id, ImageType type, int? index)
        {
             await DeleteUsersByIdImagesByTypeByIndexAsyncWithHttpInfo(id, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUsersByIdImagesByTypeByIndexAsyncWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->DeleteUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->DeleteUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->DeleteUsersByIdImagesByTypeByIndex");

            var localVarPath = "/Users/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsersByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void GetArtistsByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetArtistsByNameImagesByTypeWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetArtistsByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetArtistsByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetArtistsByNameImagesByType");

            var localVarPath = "/Artists/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtistsByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetArtistsByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetArtistsByNameImagesByTypeAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetArtistsByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetArtistsByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetArtistsByNameImagesByType");

            var localVarPath = "/Artists/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtistsByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void GetArtistsByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetArtistsByNameImagesByTypeByIndexWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetArtistsByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetArtistsByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetArtistsByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetArtistsByNameImagesByTypeByIndex");

            var localVarPath = "/Artists/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtistsByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetArtistsByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetArtistsByNameImagesByTypeByIndexAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetArtistsByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetArtistsByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetArtistsByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetArtistsByNameImagesByTypeByIndex");

            var localVarPath = "/Artists/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArtistsByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void GetGamegenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetGamegenresByNameImagesByTypeWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetGamegenresByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetGamegenresByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetGamegenresByNameImagesByType");

            var localVarPath = "/GameGenres/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGamegenresByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetGamegenresByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetGamegenresByNameImagesByTypeAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetGamegenresByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetGamegenresByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetGamegenresByNameImagesByType");

            var localVarPath = "/GameGenres/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGamegenresByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void GetGamegenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetGamegenresByNameImagesByTypeByIndexWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetGamegenresByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetGamegenresByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetGamegenresByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetGamegenresByNameImagesByTypeByIndex");

            var localVarPath = "/GameGenres/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGamegenresByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetGamegenresByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetGamegenresByNameImagesByTypeByIndexAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetGamegenresByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetGamegenresByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetGamegenresByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetGamegenresByNameImagesByTypeByIndex");

            var localVarPath = "/GameGenres/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGamegenresByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void GetGenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetGenresByNameImagesByTypeWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetGenresByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetGenresByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetGenresByNameImagesByType");

            var localVarPath = "/Genres/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGenresByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetGenresByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetGenresByNameImagesByTypeAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetGenresByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetGenresByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetGenresByNameImagesByType");

            var localVarPath = "/Genres/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGenresByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void GetGenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetGenresByNameImagesByTypeByIndexWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetGenresByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetGenresByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetGenresByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetGenresByNameImagesByTypeByIndex");

            var localVarPath = "/Genres/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGenresByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetGenresByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetGenresByNameImagesByTypeByIndexAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetGenresByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetGenresByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetGenresByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetGenresByNameImagesByTypeByIndex");

            var localVarPath = "/Genres/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGenresByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets information about an item&#x27;s images Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>List&lt;ImageInfo&gt;</returns>
        public List<ImageInfo> GetItemsByIdImages (string id)
        {
             ApiResponse<List<ImageInfo>> localVarResponse = GetItemsByIdImagesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets information about an item&#x27;s images Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>ApiResponse of List&lt;ImageInfo&gt;</returns>
        public ApiResponse< List<ImageInfo> > GetItemsByIdImagesWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->GetItemsByIdImages");

            var localVarPath = "/Items/{Id}/Images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ImageInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageInfo>)));
        }

        /// <summary>
        /// Gets information about an item&#x27;s images Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of List&lt;ImageInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ImageInfo>> GetItemsByIdImagesAsync (string id)
        {
             ApiResponse<List<ImageInfo>> localVarResponse = await GetItemsByIdImagesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets information about an item&#x27;s images Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (List&lt;ImageInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ImageInfo>>> GetItemsByIdImagesAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->GetItemsByIdImages");

            var localVarPath = "/Items/{Id}/Images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ImageInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageInfo>)));
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void GetItemsByIdImagesByType (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetItemsByIdImagesByTypeWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemsByIdImagesByTypeWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->GetItemsByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetItemsByIdImagesByType");

            var localVarPath = "/Items/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemsByIdImagesByTypeAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetItemsByIdImagesByTypeAsyncWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemsByIdImagesByTypeAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->GetItemsByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetItemsByIdImagesByType");

            var localVarPath = "/Items/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void GetItemsByIdImagesByTypeByIndex (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetItemsByIdImagesByTypeByIndexWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemsByIdImagesByTypeByIndexWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndex");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemsByIdImagesByTypeByIndexAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetItemsByIdImagesByTypeByIndexAsyncWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemsByIdImagesByTypeByIndexAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndex");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithHttpInfo(percentPlayed, unPlayedCount, id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithHttpInfo (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'percentPlayed' is set
            if (percentPlayed == null)
                throw new ApiException(400, "Missing required parameter 'percentPlayed' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'unPlayedCount' is set
            if (unPlayedCount == null)
                throw new ApiException(400, "Missing required parameter 'unPlayedCount' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'maxWidth' is set
            if (maxWidth == null)
                throw new ApiException(400, "Missing required parameter 'maxWidth' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'maxHeight' is set
            if (maxHeight == null)
                throw new ApiException(400, "Missing required parameter 'maxHeight' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (percentPlayed != null) localVarPathParams.Add("PercentPlayed", this.Configuration.ApiClient.ParameterToString(percentPlayed)); // path parameter
            if (unPlayedCount != null) localVarPathParams.Add("UnPlayedCount", this.Configuration.ApiClient.ParameterToString(unPlayedCount)); // path parameter
            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (maxWidth != null) localVarPathParams.Add("MaxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // path parameter
            if (maxHeight != null) localVarPathParams.Add("MaxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // path parameter
            if (tag != null) localVarPathParams.Add("Tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (format != null) localVarPathParams.Add("Format", this.Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsync (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsyncWithHttpInfo(percentPlayed, unPlayedCount, id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsyncWithHttpInfo (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'percentPlayed' is set
            if (percentPlayed == null)
                throw new ApiException(400, "Missing required parameter 'percentPlayed' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'unPlayedCount' is set
            if (unPlayedCount == null)
                throw new ApiException(400, "Missing required parameter 'unPlayedCount' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'maxWidth' is set
            if (maxWidth == null)
                throw new ApiException(400, "Missing required parameter 'maxWidth' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'maxHeight' is set
            if (maxHeight == null)
                throw new ApiException(400, "Missing required parameter 'maxHeight' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (percentPlayed != null) localVarPathParams.Add("PercentPlayed", this.Configuration.ApiClient.ParameterToString(percentPlayed)); // path parameter
            if (unPlayedCount != null) localVarPathParams.Add("UnPlayedCount", this.Configuration.ApiClient.ParameterToString(unPlayedCount)); // path parameter
            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (maxWidth != null) localVarPathParams.Add("MaxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // path parameter
            if (maxHeight != null) localVarPathParams.Add("MaxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // path parameter
            if (tag != null) localVarPathParams.Add("Tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (format != null) localVarPathParams.Add("Format", this.Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void GetMusicgenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetMusicgenresByNameImagesByTypeWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetMusicgenresByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetMusicgenresByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetMusicgenresByNameImagesByType");

            var localVarPath = "/MusicGenres/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicgenresByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetMusicgenresByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetMusicgenresByNameImagesByTypeAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetMusicgenresByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetMusicgenresByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetMusicgenresByNameImagesByType");

            var localVarPath = "/MusicGenres/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicgenresByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void GetMusicgenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetMusicgenresByNameImagesByTypeByIndexWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetMusicgenresByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetMusicgenresByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetMusicgenresByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetMusicgenresByNameImagesByTypeByIndex");

            var localVarPath = "/MusicGenres/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicgenresByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetMusicgenresByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetMusicgenresByNameImagesByTypeByIndexAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetMusicgenresByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetMusicgenresByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetMusicgenresByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetMusicgenresByNameImagesByTypeByIndex");

            var localVarPath = "/MusicGenres/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicgenresByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void GetPersonsByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetPersonsByNameImagesByTypeWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPersonsByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetPersonsByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetPersonsByNameImagesByType");

            var localVarPath = "/Persons/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonsByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPersonsByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetPersonsByNameImagesByTypeAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPersonsByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetPersonsByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetPersonsByNameImagesByType");

            var localVarPath = "/Persons/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonsByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void GetPersonsByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetPersonsByNameImagesByTypeByIndexWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPersonsByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetPersonsByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetPersonsByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetPersonsByNameImagesByTypeByIndex");

            var localVarPath = "/Persons/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonsByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPersonsByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetPersonsByNameImagesByTypeByIndexAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPersonsByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetPersonsByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetPersonsByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetPersonsByNameImagesByTypeByIndex");

            var localVarPath = "/Persons/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonsByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void GetStudiosByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetStudiosByNameImagesByTypeWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetStudiosByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetStudiosByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetStudiosByNameImagesByType");

            var localVarPath = "/Studios/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudiosByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetStudiosByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetStudiosByNameImagesByTypeAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStudiosByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetStudiosByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetStudiosByNameImagesByType");

            var localVarPath = "/Studios/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudiosByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void GetStudiosByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetStudiosByNameImagesByTypeByIndexWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetStudiosByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetStudiosByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetStudiosByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetStudiosByNameImagesByTypeByIndex");

            var localVarPath = "/Studios/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudiosByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetStudiosByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetStudiosByNameImagesByTypeByIndexAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStudiosByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->GetStudiosByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetStudiosByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetStudiosByNameImagesByTypeByIndex");

            var localVarPath = "/Studios/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudiosByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void GetUsersByIdImagesByType (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetUsersByIdImagesByTypeWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetUsersByIdImagesByTypeWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->GetUsersByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetUsersByIdImagesByType");

            var localVarPath = "/Users/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUsersByIdImagesByTypeAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetUsersByIdImagesByTypeAsyncWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUsersByIdImagesByTypeAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->GetUsersByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetUsersByIdImagesByType");

            var localVarPath = "/Users/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void GetUsersByIdImagesByTypeByIndex (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             GetUsersByIdImagesByTypeByIndexWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetUsersByIdImagesByTypeByIndexWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->GetUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetUsersByIdImagesByTypeByIndex");

            var localVarPath = "/Users/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetUsersByIdImagesByTypeByIndexAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await GetUsersByIdImagesByTypeByIndexAsyncWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetUsersByIdImagesByTypeByIndexAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->GetUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->GetUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->GetUsersByIdImagesByTypeByIndex");

            var localVarPath = "/Users/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void HeadArtistsByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadArtistsByNameImagesByTypeWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadArtistsByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadArtistsByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadArtistsByNameImagesByType");

            var localVarPath = "/Artists/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadArtistsByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadArtistsByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadArtistsByNameImagesByTypeAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadArtistsByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadArtistsByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadArtistsByNameImagesByType");

            var localVarPath = "/Artists/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadArtistsByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void HeadArtistsByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadArtistsByNameImagesByTypeByIndexWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadArtistsByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadArtistsByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadArtistsByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadArtistsByNameImagesByTypeByIndex");

            var localVarPath = "/Artists/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadArtistsByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadArtistsByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadArtistsByNameImagesByTypeByIndexAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadArtistsByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadArtistsByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadArtistsByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadArtistsByNameImagesByTypeByIndex");

            var localVarPath = "/Artists/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadArtistsByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void HeadGamegenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadGamegenresByNameImagesByTypeWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadGamegenresByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadGamegenresByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadGamegenresByNameImagesByType");

            var localVarPath = "/GameGenres/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadGamegenresByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadGamegenresByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadGamegenresByNameImagesByTypeAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadGamegenresByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadGamegenresByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadGamegenresByNameImagesByType");

            var localVarPath = "/GameGenres/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadGamegenresByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void HeadGamegenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadGamegenresByNameImagesByTypeByIndexWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadGamegenresByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadGamegenresByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadGamegenresByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadGamegenresByNameImagesByTypeByIndex");

            var localVarPath = "/GameGenres/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadGamegenresByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadGamegenresByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadGamegenresByNameImagesByTypeByIndexAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadGamegenresByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadGamegenresByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadGamegenresByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadGamegenresByNameImagesByTypeByIndex");

            var localVarPath = "/GameGenres/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadGamegenresByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void HeadGenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadGenresByNameImagesByTypeWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadGenresByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadGenresByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadGenresByNameImagesByType");

            var localVarPath = "/Genres/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadGenresByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadGenresByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadGenresByNameImagesByTypeAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadGenresByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadGenresByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadGenresByNameImagesByType");

            var localVarPath = "/Genres/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadGenresByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void HeadGenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadGenresByNameImagesByTypeByIndexWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadGenresByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadGenresByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadGenresByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadGenresByNameImagesByTypeByIndex");

            var localVarPath = "/Genres/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadGenresByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadGenresByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadGenresByNameImagesByTypeByIndexAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadGenresByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadGenresByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadGenresByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadGenresByNameImagesByTypeByIndex");

            var localVarPath = "/Genres/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadGenresByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void HeadItemsByIdImagesByType (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadItemsByIdImagesByTypeWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadItemsByIdImagesByTypeWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->HeadItemsByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadItemsByIdImagesByType");

            var localVarPath = "/Items/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadItemsByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadItemsByIdImagesByTypeAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadItemsByIdImagesByTypeAsyncWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadItemsByIdImagesByTypeAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->HeadItemsByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadItemsByIdImagesByType");

            var localVarPath = "/Items/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadItemsByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void HeadItemsByIdImagesByTypeByIndex (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadItemsByIdImagesByTypeByIndexWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadItemsByIdImagesByTypeByIndexWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndex");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadItemsByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadItemsByIdImagesByTypeByIndexAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadItemsByIdImagesByTypeByIndexAsyncWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadItemsByIdImagesByTypeByIndexAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndex");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadItemsByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithHttpInfo(percentPlayed, unPlayedCount, id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithHttpInfo (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'percentPlayed' is set
            if (percentPlayed == null)
                throw new ApiException(400, "Missing required parameter 'percentPlayed' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'unPlayedCount' is set
            if (unPlayedCount == null)
                throw new ApiException(400, "Missing required parameter 'unPlayedCount' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'maxWidth' is set
            if (maxWidth == null)
                throw new ApiException(400, "Missing required parameter 'maxWidth' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'maxHeight' is set
            if (maxHeight == null)
                throw new ApiException(400, "Missing required parameter 'maxHeight' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (percentPlayed != null) localVarPathParams.Add("PercentPlayed", this.Configuration.ApiClient.ParameterToString(percentPlayed)); // path parameter
            if (unPlayedCount != null) localVarPathParams.Add("UnPlayedCount", this.Configuration.ApiClient.ParameterToString(unPlayedCount)); // path parameter
            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (maxWidth != null) localVarPathParams.Add("MaxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // path parameter
            if (maxHeight != null) localVarPathParams.Add("MaxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // path parameter
            if (tag != null) localVarPathParams.Add("Tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (format != null) localVarPathParams.Add("Format", this.Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsync (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsyncWithHttpInfo(percentPlayed, unPlayedCount, id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsyncWithHttpInfo (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'percentPlayed' is set
            if (percentPlayed == null)
                throw new ApiException(400, "Missing required parameter 'percentPlayed' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'unPlayedCount' is set
            if (unPlayedCount == null)
                throw new ApiException(400, "Missing required parameter 'unPlayedCount' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'maxWidth' is set
            if (maxWidth == null)
                throw new ApiException(400, "Missing required parameter 'maxWidth' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'maxHeight' is set
            if (maxHeight == null)
                throw new ApiException(400, "Missing required parameter 'maxHeight' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (percentPlayed != null) localVarPathParams.Add("PercentPlayed", this.Configuration.ApiClient.ParameterToString(percentPlayed)); // path parameter
            if (unPlayedCount != null) localVarPathParams.Add("UnPlayedCount", this.Configuration.ApiClient.ParameterToString(unPlayedCount)); // path parameter
            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (maxWidth != null) localVarPathParams.Add("MaxWidth", this.Configuration.ApiClient.ParameterToString(maxWidth)); // path parameter
            if (maxHeight != null) localVarPathParams.Add("MaxHeight", this.Configuration.ApiClient.ParameterToString(maxHeight)); // path parameter
            if (tag != null) localVarPathParams.Add("Tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (format != null) localVarPathParams.Add("Format", this.Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void HeadMusicgenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadMusicgenresByNameImagesByTypeWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadMusicgenresByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadMusicgenresByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadMusicgenresByNameImagesByType");

            var localVarPath = "/MusicGenres/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadMusicgenresByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadMusicgenresByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadMusicgenresByNameImagesByTypeAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadMusicgenresByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadMusicgenresByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadMusicgenresByNameImagesByType");

            var localVarPath = "/MusicGenres/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadMusicgenresByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void HeadMusicgenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadMusicgenresByNameImagesByTypeByIndexWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadMusicgenresByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadMusicgenresByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadMusicgenresByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadMusicgenresByNameImagesByTypeByIndex");

            var localVarPath = "/MusicGenres/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadMusicgenresByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadMusicgenresByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadMusicgenresByNameImagesByTypeByIndexAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadMusicgenresByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadMusicgenresByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadMusicgenresByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadMusicgenresByNameImagesByTypeByIndex");

            var localVarPath = "/MusicGenres/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadMusicgenresByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void HeadPersonsByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadPersonsByNameImagesByTypeWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadPersonsByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadPersonsByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadPersonsByNameImagesByType");

            var localVarPath = "/Persons/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadPersonsByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadPersonsByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadPersonsByNameImagesByTypeAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadPersonsByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadPersonsByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadPersonsByNameImagesByType");

            var localVarPath = "/Persons/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadPersonsByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void HeadPersonsByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadPersonsByNameImagesByTypeByIndexWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadPersonsByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadPersonsByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadPersonsByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadPersonsByNameImagesByTypeByIndex");

            var localVarPath = "/Persons/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadPersonsByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadPersonsByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadPersonsByNameImagesByTypeByIndexAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadPersonsByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadPersonsByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadPersonsByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadPersonsByNameImagesByTypeByIndex");

            var localVarPath = "/Persons/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadPersonsByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void HeadStudiosByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadStudiosByNameImagesByTypeWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadStudiosByNameImagesByTypeWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadStudiosByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadStudiosByNameImagesByType");

            var localVarPath = "/Studios/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadStudiosByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadStudiosByNameImagesByTypeAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadStudiosByNameImagesByTypeAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadStudiosByNameImagesByTypeAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadStudiosByNameImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadStudiosByNameImagesByType");

            var localVarPath = "/Studios/{Name}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadStudiosByNameImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void HeadStudiosByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadStudiosByNameImagesByTypeByIndexWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadStudiosByNameImagesByTypeByIndexWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadStudiosByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadStudiosByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadStudiosByNameImagesByTypeByIndex");

            var localVarPath = "/Studios/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadStudiosByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadStudiosByNameImagesByTypeByIndexAsync (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadStudiosByNameImagesByTypeByIndexAsyncWithHttpInfo(name, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadStudiosByNameImagesByTypeByIndexAsyncWithHttpInfo (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImageServiceApi->HeadStudiosByNameImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadStudiosByNameImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadStudiosByNameImagesByTypeByIndex");

            var localVarPath = "/Studios/{Name}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadStudiosByNameImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void HeadUsersByIdImagesByType (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadUsersByIdImagesByTypeWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadUsersByIdImagesByTypeWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->HeadUsersByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadUsersByIdImagesByType");

            var localVarPath = "/Users/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadUsersByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadUsersByIdImagesByTypeAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadUsersByIdImagesByTypeAsyncWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadUsersByIdImagesByTypeAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->HeadUsersByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadUsersByIdImagesByType");

            var localVarPath = "/Users/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadUsersByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void HeadUsersByIdImagesByTypeByIndex (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             HeadUsersByIdImagesByTypeByIndexWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HeadUsersByIdImagesByTypeByIndexWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->HeadUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadUsersByIdImagesByTypeByIndex");

            var localVarPath = "/Users/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadUsersByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HeadUsersByIdImagesByTypeByIndexAsync (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
             await HeadUsersByIdImagesByTypeByIndexAsyncWithHttpInfo(id, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HeadUsersByIdImagesByTypeByIndexAsyncWithHttpInfo (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->HeadUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->HeadUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->HeadUsersByIdImagesByTypeByIndex");

            var localVarPath = "/Users/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (maxWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxWidth", maxWidth)); // query parameter
            if (maxHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MaxHeight", maxHeight)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Width", width)); // query parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Height", height)); // query parameter
            if (quality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Quality", quality)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Tag", tag)); // query parameter
            if (cropWhitespace != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CropWhitespace", cropWhitespace)); // query parameter
            if (enableImageEnhancers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EnableImageEnhancers", enableImageEnhancers)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Format", format)); // query parameter
            if (backgroundColor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BackgroundColor", backgroundColor)); // query parameter
            if (foregroundLayer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ForegroundLayer", foregroundLayer)); // query parameter
            if (autoOrient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AutoOrient", autoOrient)); // query parameter
            if (keepAnimation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeepAnimation", keepAnimation)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HeadUsersByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void PostItemsByIdImagesByType (Object body, string id, ImageType type, int? index)
        {
             PostItemsByIdImagesByTypeWithHttpInfo(body, id, type, index);
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostItemsByIdImagesByTypeWithHttpInfo (Object body, string id, ImageType type, int? index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ImageServiceApi->PostItemsByIdImagesByType");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByType");

            var localVarPath = "/Items/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostItemsByIdImagesByTypeAsync (Object body, string id, ImageType type, int? index)
        {
             await PostItemsByIdImagesByTypeAsyncWithHttpInfo(body, id, type, index);

        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdImagesByTypeAsyncWithHttpInfo (Object body, string id, ImageType type, int? index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ImageServiceApi->PostItemsByIdImagesByType");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByType");

            var localVarPath = "/Items/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void PostItemsByIdImagesByTypeByIndex (Object body, string id, ImageType type, int? index)
        {
             PostItemsByIdImagesByTypeByIndexWithHttpInfo(body, id, type, index);
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostItemsByIdImagesByTypeByIndexWithHttpInfo (Object body, string id, ImageType type, int? index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndex");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostItemsByIdImagesByTypeByIndexAsync (Object body, string id, ImageType type, int? index)
        {
             await PostItemsByIdImagesByTypeByIndexAsyncWithHttpInfo(body, id, type, index);

        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdImagesByTypeByIndexAsyncWithHttpInfo (Object body, string id, ImageType type, int? index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndex");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void PostItemsByIdImagesByTypeByIndexDelete (string id, ImageType type, int? index)
        {
             PostItemsByIdImagesByTypeByIndexDeleteWithHttpInfo(id, type, index);
        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostItemsByIdImagesByTypeByIndexDeleteWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexDelete");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexDelete");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexDelete");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}/Delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdImagesByTypeByIndexDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostItemsByIdImagesByTypeByIndexDeleteAsync (string id, ImageType type, int? index)
        {
             await PostItemsByIdImagesByTypeByIndexDeleteAsyncWithHttpInfo(id, type, index);

        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdImagesByTypeByIndexDeleteAsyncWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexDelete");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexDelete");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexDelete");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}/Delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdImagesByTypeByIndexDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the index for an item image Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="newIndex">The new image index</param>
        /// <returns></returns>
        public void PostItemsByIdImagesByTypeByIndexIndex (string id, ImageType type, int? index, int? newIndex)
        {
             PostItemsByIdImagesByTypeByIndexIndexWithHttpInfo(id, type, index, newIndex);
        }

        /// <summary>
        /// Updates the index for an item image Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="newIndex">The new image index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostItemsByIdImagesByTypeByIndexIndexWithHttpInfo (string id, ImageType type, int? index, int? newIndex)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexIndex");
            // verify the required parameter 'newIndex' is set
            if (newIndex == null)
                throw new ApiException(400, "Missing required parameter 'newIndex' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexIndex");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}/Index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (newIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NewIndex", newIndex)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdImagesByTypeByIndexIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the index for an item image Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="newIndex">The new image index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostItemsByIdImagesByTypeByIndexIndexAsync (string id, ImageType type, int? index, int? newIndex)
        {
             await PostItemsByIdImagesByTypeByIndexIndexAsyncWithHttpInfo(id, type, index, newIndex);

        }

        /// <summary>
        /// Updates the index for an item image Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="newIndex">The new image index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdImagesByTypeByIndexIndexAsyncWithHttpInfo (string id, ImageType type, int? index, int? newIndex)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexIndex");
            // verify the required parameter 'newIndex' is set
            if (newIndex == null)
                throw new ApiException(400, "Missing required parameter 'newIndex' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexIndex");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}/Index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (newIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NewIndex", newIndex)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdImagesByTypeByIndexIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the index for an item image Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="url">The url for the new image</param>
        /// <returns></returns>
        public void PostItemsByIdImagesByTypeByIndexUrl (string id, ImageType type, int? index, string url)
        {
             PostItemsByIdImagesByTypeByIndexUrlWithHttpInfo(id, type, index, url);
        }

        /// <summary>
        /// Updates the index for an item image Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="url">The url for the new image</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostItemsByIdImagesByTypeByIndexUrlWithHttpInfo (string id, ImageType type, int? index, string url)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexUrl");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexUrl");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexUrl");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexUrl");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}/Url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (url != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Url", url)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdImagesByTypeByIndexUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the index for an item image Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="url">The url for the new image</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostItemsByIdImagesByTypeByIndexUrlAsync (string id, ImageType type, int? index, string url)
        {
             await PostItemsByIdImagesByTypeByIndexUrlAsyncWithHttpInfo(id, type, index, url);

        }

        /// <summary>
        /// Updates the index for an item image Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="url">The url for the new image</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdImagesByTypeByIndexUrlAsyncWithHttpInfo (string id, ImageType type, int? index, string url)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexUrl");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexUrl");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexUrl");
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexUrl");

            var localVarPath = "/Items/{Id}/Images/{Type}/{Index}/Url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (url != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Url", url)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdImagesByTypeByIndexUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void PostItemsByIdImagesByTypeDelete (string id, ImageType type, int? index)
        {
             PostItemsByIdImagesByTypeDeleteWithHttpInfo(id, type, index);
        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostItemsByIdImagesByTypeDeleteWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeDelete");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeDelete");

            var localVarPath = "/Items/{Id}/Images/{Type}/Delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdImagesByTypeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostItemsByIdImagesByTypeDeleteAsync (string id, ImageType type, int? index)
        {
             await PostItemsByIdImagesByTypeDeleteAsyncWithHttpInfo(id, type, index);

        }

        /// <summary>
        ///  Requires authentication as administrator
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostItemsByIdImagesByTypeDeleteAsyncWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeDelete");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeDelete");

            var localVarPath = "/Items/{Id}/Images/{Type}/Delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostItemsByIdImagesByTypeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void PostUsersByIdImagesByType (Object body, string id, ImageType type, int? index)
        {
             PostUsersByIdImagesByTypeWithHttpInfo(body, id, type, index);
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUsersByIdImagesByTypeWithHttpInfo (Object body, string id, ImageType type, int? index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ImageServiceApi->PostUsersByIdImagesByType");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostUsersByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostUsersByIdImagesByType");

            var localVarPath = "/Users/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUsersByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUsersByIdImagesByTypeAsync (Object body, string id, ImageType type, int? index)
        {
             await PostUsersByIdImagesByTypeAsyncWithHttpInfo(body, id, type, index);

        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUsersByIdImagesByTypeAsyncWithHttpInfo (Object body, string id, ImageType type, int? index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ImageServiceApi->PostUsersByIdImagesByType");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostUsersByIdImagesByType");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostUsersByIdImagesByType");

            var localVarPath = "/Users/{Id}/Images/{Type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUsersByIdImagesByType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void PostUsersByIdImagesByTypeByIndex (Object body, string id, ImageType type, int? index)
        {
             PostUsersByIdImagesByTypeByIndexWithHttpInfo(body, id, type, index);
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUsersByIdImagesByTypeByIndexWithHttpInfo (Object body, string id, ImageType type, int? index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndex");

            var localVarPath = "/Users/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUsersByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUsersByIdImagesByTypeByIndexAsync (Object body, string id, ImageType type, int? index)
        {
             await PostUsersByIdImagesByTypeByIndexAsyncWithHttpInfo(body, id, type, index);

        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded. Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUsersByIdImagesByTypeByIndexAsyncWithHttpInfo (Object body, string id, ImageType type, int? index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndex");

            var localVarPath = "/Users/{Id}/Images/{Type}/{Index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUsersByIdImagesByTypeByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns></returns>
        public void PostUsersByIdImagesByTypeByIndexDelete (string id, ImageType type, int? index)
        {
             PostUsersByIdImagesByTypeByIndexDeleteWithHttpInfo(id, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUsersByIdImagesByTypeByIndexDeleteWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndexDelete");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndexDelete");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndexDelete");

            var localVarPath = "/Users/{Id}/Images/{Type}/{Index}/Delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUsersByIdImagesByTypeByIndexDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUsersByIdImagesByTypeByIndexDeleteAsync (string id, ImageType type, int? index)
        {
             await PostUsersByIdImagesByTypeByIndexDeleteAsyncWithHttpInfo(id, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUsersByIdImagesByTypeByIndexDeleteAsyncWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndexDelete");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndexDelete");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndexDelete");

            var localVarPath = "/Users/{Id}/Images/{Type}/{Index}/Delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarPathParams.Add("Index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUsersByIdImagesByTypeByIndexDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns></returns>
        public void PostUsersByIdImagesByTypeDelete (string id, ImageType type, int? index)
        {
             PostUsersByIdImagesByTypeDeleteWithHttpInfo(id, type, index);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostUsersByIdImagesByTypeDeleteWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostUsersByIdImagesByTypeDelete");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostUsersByIdImagesByTypeDelete");

            var localVarPath = "/Users/{Id}/Images/{Type}/Delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUsersByIdImagesByTypeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostUsersByIdImagesByTypeDeleteAsync (string id, ImageType type, int? index)
        {
             await PostUsersByIdImagesByTypeDeleteAsyncWithHttpInfo(id, type, index);

        }

        /// <summary>
        ///  Requires authentication as user
        /// </summary>
        /// <exception cref="EmbyClient.Dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostUsersByIdImagesByTypeDeleteAsyncWithHttpInfo (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ImageServiceApi->PostUsersByIdImagesByTypeDelete");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling ImageServiceApi->PostUsersByIdImagesByTypeDelete");

            var localVarPath = "/Users/{Id}/Images/{Type}/Delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("Id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("Type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            // authentication (apikeyauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (embyauth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUsersByIdImagesByTypeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
