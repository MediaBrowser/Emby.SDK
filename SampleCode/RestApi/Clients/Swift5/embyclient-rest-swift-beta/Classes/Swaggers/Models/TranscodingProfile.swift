//
// TranscodingProfile.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct TranscodingProfile: Codable {

    public var container: String?
    public var type: DlnaProfileType?
    public var videoCodec: String?
    public var audioCodec: String?
    public var _protocol: String?
    public var estimateContentLength: Bool?
    public var enableMpegtsM2TsMode: Bool?
    public var transcodeSeekInfo: TranscodeSeekInfo?
    public var copyTimestamps: Bool?
    public var context: EncodingContext?
    public var maxAudioChannels: String?
    public var minSegments: Int?
    public var segmentLength: Int?
    public var breakOnNonKeyFrames: Bool?
    public var allowInterlacedVideoStreamCopy: Bool?
    public var manifestSubtitles: String?
    public var maxManifestSubtitles: Int?
    public var maxWidth: Int?
    public var maxHeight: Int?
    public var fillEmptySubtitleSegments: Bool?

    public init(container: String? = nil, type: DlnaProfileType? = nil, videoCodec: String? = nil, audioCodec: String? = nil, _protocol: String? = nil, estimateContentLength: Bool? = nil, enableMpegtsM2TsMode: Bool? = nil, transcodeSeekInfo: TranscodeSeekInfo? = nil, copyTimestamps: Bool? = nil, context: EncodingContext? = nil, maxAudioChannels: String? = nil, minSegments: Int? = nil, segmentLength: Int? = nil, breakOnNonKeyFrames: Bool? = nil, allowInterlacedVideoStreamCopy: Bool? = nil, manifestSubtitles: String? = nil, maxManifestSubtitles: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, fillEmptySubtitleSegments: Bool? = nil) {
        self.container = container
        self.type = type
        self.videoCodec = videoCodec
        self.audioCodec = audioCodec
        self._protocol = _protocol
        self.estimateContentLength = estimateContentLength
        self.enableMpegtsM2TsMode = enableMpegtsM2TsMode
        self.transcodeSeekInfo = transcodeSeekInfo
        self.copyTimestamps = copyTimestamps
        self.context = context
        self.maxAudioChannels = maxAudioChannels
        self.minSegments = minSegments
        self.segmentLength = segmentLength
        self.breakOnNonKeyFrames = breakOnNonKeyFrames
        self.allowInterlacedVideoStreamCopy = allowInterlacedVideoStreamCopy
        self.manifestSubtitles = manifestSubtitles
        self.maxManifestSubtitles = maxManifestSubtitles
        self.maxWidth = maxWidth
        self.maxHeight = maxHeight
        self.fillEmptySubtitleSegments = fillEmptySubtitleSegments
    }

    public enum CodingKeys: String, CodingKey { 
        case container = "Container"
        case type = "Type"
        case videoCodec = "VideoCodec"
        case audioCodec = "AudioCodec"
        case _protocol = "Protocol"
        case estimateContentLength = "EstimateContentLength"
        case enableMpegtsM2TsMode = "EnableMpegtsM2TsMode"
        case transcodeSeekInfo = "TranscodeSeekInfo"
        case copyTimestamps = "CopyTimestamps"
        case context = "Context"
        case maxAudioChannels = "MaxAudioChannels"
        case minSegments = "MinSegments"
        case segmentLength = "SegmentLength"
        case breakOnNonKeyFrames = "BreakOnNonKeyFrames"
        case allowInterlacedVideoStreamCopy = "AllowInterlacedVideoStreamCopy"
        case manifestSubtitles = "ManifestSubtitles"
        case maxManifestSubtitles = "MaxManifestSubtitles"
        case maxWidth = "MaxWidth"
        case maxHeight = "MaxHeight"
        case fillEmptySubtitleSegments = "FillEmptySubtitleSegments"
    }

}
