//
// SessionSessionInfo.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct SessionSessionInfo: Codable {

    public var playState: PlayerStateInfo?
    public var additionalUsers: [SessionUserInfo]?
    public var remoteEndPoint: String?
    public var _protocol: String?
    public var playableMediaTypes: [String]?
    public var playlistItemId: String?
    public var playlistIndex: Int?
    public var playlistLength: Int?
    public var _id: String?
    public var serverId: String?
    public var userId: String?
    public var userName: String?
    public var userPrimaryImageTag: String?
    public var client: String?
    public var lastActivityDate: Date?
    public var deviceName: String?
    public var deviceType: String?
    public var nowPlayingItem: BaseItemDto?
    public var internalDeviceId: Int64?
    public var deviceId: String?
    public var applicationVersion: String?
    public var appIconUrl: String?
    public var supportedCommands: [String]?
    public var transcodingInfo: TranscodingInfo?
    public var supportsRemoteControl: Bool?

    public init(playState: PlayerStateInfo? = nil, additionalUsers: [SessionUserInfo]? = nil, remoteEndPoint: String? = nil, _protocol: String? = nil, playableMediaTypes: [String]? = nil, playlistItemId: String? = nil, playlistIndex: Int? = nil, playlistLength: Int? = nil, _id: String? = nil, serverId: String? = nil, userId: String? = nil, userName: String? = nil, userPrimaryImageTag: String? = nil, client: String? = nil, lastActivityDate: Date? = nil, deviceName: String? = nil, deviceType: String? = nil, nowPlayingItem: BaseItemDto? = nil, internalDeviceId: Int64? = nil, deviceId: String? = nil, applicationVersion: String? = nil, appIconUrl: String? = nil, supportedCommands: [String]? = nil, transcodingInfo: TranscodingInfo? = nil, supportsRemoteControl: Bool? = nil) {
        self.playState = playState
        self.additionalUsers = additionalUsers
        self.remoteEndPoint = remoteEndPoint
        self._protocol = _protocol
        self.playableMediaTypes = playableMediaTypes
        self.playlistItemId = playlistItemId
        self.playlistIndex = playlistIndex
        self.playlistLength = playlistLength
        self._id = _id
        self.serverId = serverId
        self.userId = userId
        self.userName = userName
        self.userPrimaryImageTag = userPrimaryImageTag
        self.client = client
        self.lastActivityDate = lastActivityDate
        self.deviceName = deviceName
        self.deviceType = deviceType
        self.nowPlayingItem = nowPlayingItem
        self.internalDeviceId = internalDeviceId
        self.deviceId = deviceId
        self.applicationVersion = applicationVersion
        self.appIconUrl = appIconUrl
        self.supportedCommands = supportedCommands
        self.transcodingInfo = transcodingInfo
        self.supportsRemoteControl = supportsRemoteControl
    }

    public enum CodingKeys: String, CodingKey { 
        case playState = "PlayState"
        case additionalUsers = "AdditionalUsers"
        case remoteEndPoint = "RemoteEndPoint"
        case _protocol = "Protocol"
        case playableMediaTypes = "PlayableMediaTypes"
        case playlistItemId = "PlaylistItemId"
        case playlistIndex = "PlaylistIndex"
        case playlistLength = "PlaylistLength"
        case _id = "Id"
        case serverId = "ServerId"
        case userId = "UserId"
        case userName = "UserName"
        case userPrimaryImageTag = "UserPrimaryImageTag"
        case client = "Client"
        case lastActivityDate = "LastActivityDate"
        case deviceName = "DeviceName"
        case deviceType = "DeviceType"
        case nowPlayingItem = "NowPlayingItem"
        case internalDeviceId = "InternalDeviceId"
        case deviceId = "DeviceId"
        case applicationVersion = "ApplicationVersion"
        case appIconUrl = "AppIconUrl"
        case supportedCommands = "SupportedCommands"
        case transcodingInfo = "TranscodingInfo"
        case supportsRemoteControl = "SupportsRemoteControl"
    }

}
