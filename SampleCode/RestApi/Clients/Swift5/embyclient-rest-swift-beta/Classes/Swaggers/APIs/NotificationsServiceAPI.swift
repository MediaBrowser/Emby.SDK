//
// NotificationsServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class NotificationsServiceAPI {
    /**
     Gets notifications

     - parameter userId: (path) User Id 
     - parameter isRead: (query) An optional filter by IsRead (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNotificationsByUserid(userId: String, isRead: Bool? = nil, startIndex: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: EmbyNotificationsApiNotificationResult?,_ error: Error?) -> Void)) {
        getNotificationsByUseridWithRequestBuilder(userId: userId, isRead: isRead, startIndex: startIndex, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets notifications
     - GET /Notifications/{UserId}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "TotalRecordCount" : 0,
  "Notifications" : [ {
    "Description" : "Description",
    "UserId" : "UserId",
    "Level" : "Normal",
    "Id" : "Id",
    "IsRead" : true,
    "Date" : "2000-01-23T04:56:07.000+00:00",
    "Url" : "Url",
    "Name" : "Name"
  }, {
    "Description" : "Description",
    "UserId" : "UserId",
    "Level" : "Normal",
    "Id" : "Id",
    "IsRead" : true,
    "Date" : "2000-01-23T04:56:07.000+00:00",
    "Url" : "Url",
    "Name" : "Name"
  } ]
}}]
     - parameter userId: (path) User Id 
     - parameter isRead: (query) An optional filter by IsRead (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)

     - returns: RequestBuilder<EmbyNotificationsApiNotificationResult> 
     */
    open class func getNotificationsByUseridWithRequestBuilder(userId: String, isRead: Bool? = nil, startIndex: Int? = nil, limit: Int? = nil) -> RequestBuilder<EmbyNotificationsApiNotificationResult> {
        var path = "/Notifications/{UserId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UserId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swift-betaAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "IsRead": isRead, 
                        "StartIndex": startIndex?.encodeToJSON(), 
                        "Limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<EmbyNotificationsApiNotificationResult>.Type = embyclient-rest-swift-betaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a notification summary for a user

     - parameter userId: (path) User Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNotificationsByUseridSummary(userId: String, completion: @escaping ((_ data: EmbyNotificationsApiNotificationsSummary?,_ error: Error?) -> Void)) {
        getNotificationsByUseridSummaryWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a notification summary for a user
     - GET /Notifications/{UserId}/Summary

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "MaxUnreadNotificationLevel" : "Normal",
  "UnreadCount" : 0
}}]
     - parameter userId: (path) User Id 

     - returns: RequestBuilder<EmbyNotificationsApiNotificationsSummary> 
     */
    open class func getNotificationsByUseridSummaryWithRequestBuilder(userId: String) -> RequestBuilder<EmbyNotificationsApiNotificationsSummary> {
        var path = "/Notifications/{UserId}/Summary"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UserId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swift-betaAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<EmbyNotificationsApiNotificationsSummary>.Type = embyclient-rest-swift-betaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets notification types

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNotificationsServices(completion: @escaping ((_ data: [NameIdPair]?,_ error: Error?) -> Void)) {
        getNotificationsServicesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets notification types
     - GET /Notifications/Services

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "Id" : "Id",
  "Name" : "Name"
}, {
  "Id" : "Id",
  "Name" : "Name"
} ]}]

     - returns: RequestBuilder<[NameIdPair]> 
     */
    open class func getNotificationsServicesWithRequestBuilder() -> RequestBuilder<[NameIdPair]> {
        let path = "/Notifications/Services"
        let URLString = embyclient-rest-swift-betaAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[NameIdPair]>.Type = embyclient-rest-swift-betaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets notification types

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNotificationsTypes(completion: @escaping ((_ data: [NotificationsNotificationTypeInfo]?,_ error: Error?) -> Void)) {
        getNotificationsTypesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets notification types
     - GET /Notifications/Types

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "Type" : "Type",
  "Category" : "Category",
  "IsBasedOnUserEvent" : true,
  "Enabled" : true,
  "Name" : "Name"
}, {
  "Type" : "Type",
  "Category" : "Category",
  "IsBasedOnUserEvent" : true,
  "Enabled" : true,
  "Name" : "Name"
} ]}]

     - returns: RequestBuilder<[NotificationsNotificationTypeInfo]> 
     */
    open class func getNotificationsTypesWithRequestBuilder() -> RequestBuilder<[NotificationsNotificationTypeInfo]> {
        let path = "/Notifications/Types"
        let URLString = embyclient-rest-swift-betaAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[NotificationsNotificationTypeInfo]>.Type = embyclient-rest-swift-betaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Sends a notification to all admin users

     - parameter name: (query) The notification&#x27;s name 
     - parameter _description: (query) The notification&#x27;s description 
     - parameter imageUrl: (query) The notification&#x27;s image url (optional)
     - parameter url: (query) The notification&#x27;s info url (optional)
     - parameter level: (query) The notification level (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postNotificationsAdmin(name: String, _description: String, imageUrl: String? = nil, url: String? = nil, level: NotificationsNotificationLevel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postNotificationsAdminWithRequestBuilder(name: name, _description: _description, imageUrl: imageUrl, url: url, level: level).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Sends a notification to all admin users
     - POST /Notifications/Admin

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (query) The notification&#x27;s name 
     - parameter _description: (query) The notification&#x27;s description 
     - parameter imageUrl: (query) The notification&#x27;s image url (optional)
     - parameter url: (query) The notification&#x27;s info url (optional)
     - parameter level: (query) The notification level (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postNotificationsAdminWithRequestBuilder(name: String, _description: String, imageUrl: String? = nil, url: String? = nil, level: NotificationsNotificationLevel? = nil) -> RequestBuilder<Void> {
        let path = "/Notifications/Admin"
        let URLString = embyclient-rest-swift-betaAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Name": name, 
                        "Description": _description, 
                        "ImageUrl": imageUrl, 
                        "Url": url, 
                        "Level": level
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swift-betaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Marks notifications as read

     - parameter userId: (path) User Id 
     - parameter ids: (query) A list of notification ids, comma delimited 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postNotificationsByUseridRead(userId: String, ids: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postNotificationsByUseridReadWithRequestBuilder(userId: userId, ids: ids).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Marks notifications as read
     - POST /Notifications/{UserId}/Read

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter userId: (path) User Id 
     - parameter ids: (query) A list of notification ids, comma delimited 

     - returns: RequestBuilder<Void> 
     */
    open class func postNotificationsByUseridReadWithRequestBuilder(userId: String, ids: String) -> RequestBuilder<Void> {
        var path = "/Notifications/{UserId}/Read"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UserId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swift-betaAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Ids": ids
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swift-betaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Marks notifications as unread

     - parameter userId: (path) User Id 
     - parameter ids: (query) A list of notification ids, comma delimited 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postNotificationsByUseridUnread(userId: String, ids: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postNotificationsByUseridUnreadWithRequestBuilder(userId: userId, ids: ids).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Marks notifications as unread
     - POST /Notifications/{UserId}/Unread

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter userId: (path) User Id 
     - parameter ids: (query) A list of notification ids, comma delimited 

     - returns: RequestBuilder<Void> 
     */
    open class func postNotificationsByUseridUnreadWithRequestBuilder(userId: String, ids: String) -> RequestBuilder<Void> {
        var path = "/Notifications/{UserId}/Unread"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UserId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swift-betaAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Ids": ids
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swift-betaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
