//
// DemoApiServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DemoApiServiceAPI {
    /**
     Gets GenericEdit demo data

     - parameter demoSet: (query) Set of demos 
     - parameter demoType: (query) Type of demo object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGenericeditdemoDemo(demoSet: Int, demoType: Int, completion: @escaping ((_ data: EmbyWebGenericEditEditObjectContainer?,_ error: Error?) -> Void)) {
        getGenericeditdemoDemoWithRequestBuilder(demoSet: demoSet, demoType: demoType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets GenericEdit demo data
     - GET /GenericEditDemo/Demo

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "TypeName" : "TypeName",
  "EditorRoot" : {
    "ParentId" : "ParentId",
    "AllowEmpty" : true,
    "Description" : "Description",
    "PropertyConditions" : [ {
      "AffectedPropertyId" : "AffectedPropertyId",
      "TargetPropertyId" : "TargetPropertyId",
      "SimpleCondition" : "IsTrue",
      "Value" : { },
      "ValueCondition" : "IsEqual",
      "ConditionType" : "Visible"
    }, {
      "AffectedPropertyId" : "AffectedPropertyId",
      "TargetPropertyId" : "TargetPropertyId",
      "SimpleCondition" : "IsTrue",
      "Value" : { },
      "ValueCondition" : "IsEqual",
      "ConditionType" : "Visible"
    } ],
    "TitleButton" : {
      "ParentId" : "ParentId",
      "AllowEmpty" : true,
      "Description" : "Description",
      "DisplayName" : "DisplayName",
      "EditorType" : "Group",
      "Id" : "Id",
      "IsAdvanced" : true,
      "IsReadOnly" : true,
      "Name" : "Name"
    },
    "Name" : "Name",
    "PostbackActions" : [ {
      "CommandParameterPropertyId" : "CommandParameterPropertyId",
      "TargetEditorId" : "TargetEditorId",
      "PostbackCommandId" : "PostbackCommandId"
    }, {
      "CommandParameterPropertyId" : "CommandParameterPropertyId",
      "TargetEditorId" : "TargetEditorId",
      "PostbackCommandId" : "PostbackCommandId"
    } ],
    "EditorItems" : [ {
      "ParentId" : "ParentId",
      "AllowEmpty" : true,
      "Description" : "Description",
      "DisplayName" : "DisplayName",
      "Id" : "Id",
      "IsAdvanced" : true,
      "IsReadOnly" : true,
      "Name" : "Name"
    }, {
      "ParentId" : "ParentId",
      "AllowEmpty" : true,
      "Description" : "Description",
      "DisplayName" : "DisplayName",
      "Id" : "Id",
      "IsAdvanced" : true,
      "IsReadOnly" : true,
      "Name" : "Name"
    } ],
    "DisplayName" : "DisplayName",
    "Id" : "Id",
    "IsAdvanced" : true,
    "IsReadOnly" : true
  },
  "DefaultObject" : { },
  "Object" : { }
}}]
     - parameter demoSet: (query) Set of demos 
     - parameter demoType: (query) Type of demo object 

     - returns: RequestBuilder<EmbyWebGenericEditEditObjectContainer> 
     */
    open class func getGenericeditdemoDemoWithRequestBuilder(demoSet: Int, demoType: Int) -> RequestBuilder<EmbyWebGenericEditEditObjectContainer> {
        let path = "/GenericEditDemo/Demo"
        let URLString = embyclient-rest-swift-betaAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "DemoSet": demoSet.encodeToJSON(), 
                        "DemoType": demoType.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<EmbyWebGenericEditEditObjectContainer>.Type = embyclient-rest-swift-betaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a list of demos

     - parameter demoSet: (query) Set of demos 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGenericeditdemoDemotypes(demoSet: Int, completion: @escaping ((_ data: [EmbyPluginGenericEditDemoDataDemoTypeInfo]?,_ error: Error?) -> Void)) {
        getGenericeditdemoDemotypesWithRequestBuilder(demoSet: demoSet).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a list of demos
     - GET /GenericEditDemo/DemoTypes

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "DemoType" : 0,
  "Name" : "Name"
}, {
  "DemoType" : 0,
  "Name" : "Name"
} ]}]
     - parameter demoSet: (query) Set of demos 

     - returns: RequestBuilder<[EmbyPluginGenericEditDemoDataDemoTypeInfo]> 
     */
    open class func getGenericeditdemoDemotypesWithRequestBuilder(demoSet: Int) -> RequestBuilder<[EmbyPluginGenericEditDemoDataDemoTypeInfo]> {
        let path = "/GenericEditDemo/DemoTypes"
        let URLString = embyclient-rest-swift-betaAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "DemoSet": demoSet.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[EmbyPluginGenericEditDemoDataDemoTypeInfo]>.Type = embyclient-rest-swift-betaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Updates GenericEdit demo data

     - parameter body: (body) Binary stream 
     - parameter demoSet: (query) Set of demos 
     - parameter demoType: (query) Type of demo object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGenericeditdemoDemo(body: Object, demoSet: Int, demoType: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postGenericeditdemoDemoWithRequestBuilder(body: body, demoSet: demoSet, demoType: demoType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates GenericEdit demo data
     - POST /GenericEditDemo/Demo

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) Binary stream 
     - parameter demoSet: (query) Set of demos 
     - parameter demoType: (query) Type of demo object 

     - returns: RequestBuilder<Void> 
     */
    open class func postGenericeditdemoDemoWithRequestBuilder(body: Object, demoSet: Int, demoType: Int) -> RequestBuilder<Void> {
        let path = "/GenericEditDemo/Demo"
        let URLString = embyclient-rest-swift-betaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "DemoSet": demoSet.encodeToJSON(), 
                        "DemoType": demoType.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swift-betaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
