//
// HlsSegmentServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class HlsSegmentServiceAPI {
    /**

     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. 
     - parameter playSessionId: (query) The play session id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteVideosActiveencodings(deviceId: String, playSessionId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteVideosActiveencodingsWithRequestBuilder(deviceId: deviceId, playSessionId: playSessionId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /Videos/ActiveEncodings

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. 
     - parameter playSessionId: (query) The play session id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteVideosActiveencodingsWithRequestBuilder(deviceId: String, playSessionId: String) -> RequestBuilder<Void> {
        let path = "/Videos/ActiveEncodings"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "DeviceId": deviceId, 
                        "PlaySessionId": playSessionId
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. 
     - parameter playSessionId: (query) The play session id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postVideosActiveencodingsDelete(deviceId: String, playSessionId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postVideosActiveencodingsDeleteWithRequestBuilder(deviceId: deviceId, playSessionId: playSessionId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /Videos/ActiveEncodings/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. 
     - parameter playSessionId: (query) The play session id 

     - returns: RequestBuilder<Void> 
     */
    open class func postVideosActiveencodingsDeleteWithRequestBuilder(deviceId: String, playSessionId: String) -> RequestBuilder<Void> {
        let path = "/Videos/ActiveEncodings/Delete"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "DeviceId": deviceId, 
                        "PlaySessionId": playSessionId
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
