//
// LibraryStructureServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class LibraryStructureServiceAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLibraryVirtualfolders(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteLibraryVirtualfoldersWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /Library/VirtualFolders

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLibraryVirtualfoldersWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLibraryVirtualfoldersPaths(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteLibraryVirtualfoldersPathsWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /Library/VirtualFolders/Paths

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLibraryVirtualfoldersPathsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders/Paths"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLibraryVirtualfoldersQuery(startIndex: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: QueryResultVirtualFolderInfo?,_ error: Error?) -> Void)) {
        getLibraryVirtualfoldersQueryWithRequestBuilder(startIndex: startIndex, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /Library/VirtualFolders/Query

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "TotalRecordCount" : 1,
  "Items" : [ {
    "RefreshProgress" : 7.386281948385884,
    "PrimaryImageItemId" : "PrimaryImageItemId",
    "CollectionType" : "CollectionType",
    "Locations" : [ "Locations", "Locations" ],
    "LibraryOptions" : {
      "LyricsDownloadMaxAgeDays" : 5,
      "SaveLyricsWithMedia" : true,
      "EnableMarkerDetection" : true,
      "ContentType" : "ContentType",
      "SaveSubtitlesWithMedia" : true,
      "ForcedSubtitlesOnly" : true,
      "MetadataCountryCode" : "MetadataCountryCode",
      "MetadataSavers" : [ "MetadataSavers", "MetadataSavers" ],
      "SaveMetadataHidden" : true,
      "SaveLocalMetadata" : true,
      "PreferredImageLanguage" : "PreferredImageLanguage",
      "DownloadImagesInAdvance" : true,
      "ThumbnailImagesIntervalSeconds" : 2,
      "MaxResumePct" : 9,
      "MinResumeDurationSeconds" : 3,
      "EnableAudioResume" : true,
      "MusicFolderStructure" : "MusicFolderStructure",
      "IgnoreHiddenFiles" : true,
      "ShareEmbeddedMusicAlbumImages" : true,
      "TypeOptions" : [ {
        "Type" : "Type",
        "MetadataFetcherOrder" : [ "MetadataFetcherOrder", "MetadataFetcherOrder" ],
        "ImageFetchers" : [ "ImageFetchers", "ImageFetchers" ],
        "ImageOptions" : [ {
          "Limit" : 0,
          "MinWidth" : 6
        }, {
          "Limit" : 0,
          "MinWidth" : 6
        } ],
        "ImageFetcherOrder" : [ "ImageFetcherOrder", "ImageFetcherOrder" ],
        "MetadataFetchers" : [ "MetadataFetchers", "MetadataFetchers" ]
      }, {
        "Type" : "Type",
        "MetadataFetcherOrder" : [ "MetadataFetcherOrder", "MetadataFetcherOrder" ],
        "ImageFetchers" : [ "ImageFetchers", "ImageFetchers" ],
        "ImageOptions" : [ {
          "Limit" : 0,
          "MinWidth" : 6
        }, {
          "Limit" : 0,
          "MinWidth" : 6
        } ],
        "ImageFetcherOrder" : [ "ImageFetcherOrder", "ImageFetcherOrder" ],
        "MetadataFetchers" : [ "MetadataFetchers", "MetadataFetchers" ]
      } ],
      "DisabledLyricsFetchers" : [ "DisabledLyricsFetchers", "DisabledLyricsFetchers" ],
      "LyricsDownloadLanguages" : [ "LyricsDownloadLanguages", "LyricsDownloadLanguages" ],
      "ImportPlaylists" : true,
      "EnableRealtimeMonitor" : true,
      "IntroDetectionFingerprintLength" : 0,
      "EnableAutomaticSeriesGrouping" : true,
      "ExtractChapterImagesDuringLibraryScan" : true,
      "SubtitleDownloadLanguages" : [ "SubtitleDownloadLanguages", "SubtitleDownloadLanguages" ],
      "MinResumePct" : 7,
      "SaveLocalThumbnailSets" : true,
      "SubtitleDownloadMaxAgeDays" : 5,
      "EnableAdultMetadata" : true,
      "SkipSubtitlesIfAudioTrackMatches" : true,
      "RequirePerfectSubtitleMatch" : true,
      "DisabledSubtitleFetchers" : [ "DisabledSubtitleFetchers", "DisabledSubtitleFetchers" ],
      "LocalMetadataReaderOrder" : [ "LocalMetadataReaderOrder", "LocalMetadataReaderOrder" ],
      "LyricsFetcherOrder" : [ "LyricsFetcherOrder", "LyricsFetcherOrder" ],
      "HearingImpairedSubtitlesOnly" : true,
      "CacheImages" : true,
      "IgnoreFileExtensions" : [ "IgnoreFileExtensions", "IgnoreFileExtensions" ],
      "CollapseSingleItemFolders" : true,
      "EnableMarkerDetectionDuringLibraryScan" : true,
      "EnableEmbeddedTitles" : true,
      "PlaceholderMetadataRefreshIntervalDays" : 1,
      "EnableChapterImageExtraction" : true,
      "AutomaticRefreshIntervalDays" : 6,
      "SubtitleFetcherOrder" : [ "SubtitleFetcherOrder", "SubtitleFetcherOrder" ],
      "ImportCollections" : true,
      "AutoGenerateChapters" : true,
      "EnableArchiveMediaFiles" : true,
      "DisabledLocalMetadataReaders" : [ "DisabledLocalMetadataReaders", "DisabledLocalMetadataReaders" ],
      "PreferredMetadataLanguage" : "PreferredMetadataLanguage",
      "EnablePhotos" : true,
      "SkipSubtitlesIfEmbeddedSubtitlesPresent" : true,
      "PathInfos" : [ {
        "Path" : "Path",
        "Username" : "Username",
        "NetworkPath" : "NetworkPath",
        "Password" : "Password"
      }, {
        "Path" : "Path",
        "Username" : "Username",
        "NetworkPath" : "NetworkPath",
        "Password" : "Password"
      } ],
      "SampleIgnoreSize" : 4,
      "MinCollectionItems" : 2
    },
    "Id" : "Id",
    "Guid" : "Guid",
    "ItemId" : "ItemId",
    "RefreshStatus" : "RefreshStatus",
    "Name" : "Name"
  }, {
    "RefreshProgress" : 7.386281948385884,
    "PrimaryImageItemId" : "PrimaryImageItemId",
    "CollectionType" : "CollectionType",
    "Locations" : [ "Locations", "Locations" ],
    "LibraryOptions" : {
      "LyricsDownloadMaxAgeDays" : 5,
      "SaveLyricsWithMedia" : true,
      "EnableMarkerDetection" : true,
      "ContentType" : "ContentType",
      "SaveSubtitlesWithMedia" : true,
      "ForcedSubtitlesOnly" : true,
      "MetadataCountryCode" : "MetadataCountryCode",
      "MetadataSavers" : [ "MetadataSavers", "MetadataSavers" ],
      "SaveMetadataHidden" : true,
      "SaveLocalMetadata" : true,
      "PreferredImageLanguage" : "PreferredImageLanguage",
      "DownloadImagesInAdvance" : true,
      "ThumbnailImagesIntervalSeconds" : 2,
      "MaxResumePct" : 9,
      "MinResumeDurationSeconds" : 3,
      "EnableAudioResume" : true,
      "MusicFolderStructure" : "MusicFolderStructure",
      "IgnoreHiddenFiles" : true,
      "ShareEmbeddedMusicAlbumImages" : true,
      "TypeOptions" : [ {
        "Type" : "Type",
        "MetadataFetcherOrder" : [ "MetadataFetcherOrder", "MetadataFetcherOrder" ],
        "ImageFetchers" : [ "ImageFetchers", "ImageFetchers" ],
        "ImageOptions" : [ {
          "Limit" : 0,
          "MinWidth" : 6
        }, {
          "Limit" : 0,
          "MinWidth" : 6
        } ],
        "ImageFetcherOrder" : [ "ImageFetcherOrder", "ImageFetcherOrder" ],
        "MetadataFetchers" : [ "MetadataFetchers", "MetadataFetchers" ]
      }, {
        "Type" : "Type",
        "MetadataFetcherOrder" : [ "MetadataFetcherOrder", "MetadataFetcherOrder" ],
        "ImageFetchers" : [ "ImageFetchers", "ImageFetchers" ],
        "ImageOptions" : [ {
          "Limit" : 0,
          "MinWidth" : 6
        }, {
          "Limit" : 0,
          "MinWidth" : 6
        } ],
        "ImageFetcherOrder" : [ "ImageFetcherOrder", "ImageFetcherOrder" ],
        "MetadataFetchers" : [ "MetadataFetchers", "MetadataFetchers" ]
      } ],
      "DisabledLyricsFetchers" : [ "DisabledLyricsFetchers", "DisabledLyricsFetchers" ],
      "LyricsDownloadLanguages" : [ "LyricsDownloadLanguages", "LyricsDownloadLanguages" ],
      "ImportPlaylists" : true,
      "EnableRealtimeMonitor" : true,
      "IntroDetectionFingerprintLength" : 0,
      "EnableAutomaticSeriesGrouping" : true,
      "ExtractChapterImagesDuringLibraryScan" : true,
      "SubtitleDownloadLanguages" : [ "SubtitleDownloadLanguages", "SubtitleDownloadLanguages" ],
      "MinResumePct" : 7,
      "SaveLocalThumbnailSets" : true,
      "SubtitleDownloadMaxAgeDays" : 5,
      "EnableAdultMetadata" : true,
      "SkipSubtitlesIfAudioTrackMatches" : true,
      "RequirePerfectSubtitleMatch" : true,
      "DisabledSubtitleFetchers" : [ "DisabledSubtitleFetchers", "DisabledSubtitleFetchers" ],
      "LocalMetadataReaderOrder" : [ "LocalMetadataReaderOrder", "LocalMetadataReaderOrder" ],
      "LyricsFetcherOrder" : [ "LyricsFetcherOrder", "LyricsFetcherOrder" ],
      "HearingImpairedSubtitlesOnly" : true,
      "CacheImages" : true,
      "IgnoreFileExtensions" : [ "IgnoreFileExtensions", "IgnoreFileExtensions" ],
      "CollapseSingleItemFolders" : true,
      "EnableMarkerDetectionDuringLibraryScan" : true,
      "EnableEmbeddedTitles" : true,
      "PlaceholderMetadataRefreshIntervalDays" : 1,
      "EnableChapterImageExtraction" : true,
      "AutomaticRefreshIntervalDays" : 6,
      "SubtitleFetcherOrder" : [ "SubtitleFetcherOrder", "SubtitleFetcherOrder" ],
      "ImportCollections" : true,
      "AutoGenerateChapters" : true,
      "EnableArchiveMediaFiles" : true,
      "DisabledLocalMetadataReaders" : [ "DisabledLocalMetadataReaders", "DisabledLocalMetadataReaders" ],
      "PreferredMetadataLanguage" : "PreferredMetadataLanguage",
      "EnablePhotos" : true,
      "SkipSubtitlesIfEmbeddedSubtitlesPresent" : true,
      "PathInfos" : [ {
        "Path" : "Path",
        "Username" : "Username",
        "NetworkPath" : "NetworkPath",
        "Password" : "Password"
      }, {
        "Path" : "Path",
        "Username" : "Username",
        "NetworkPath" : "NetworkPath",
        "Password" : "Password"
      } ],
      "SampleIgnoreSize" : 4,
      "MinCollectionItems" : 2
    },
    "Id" : "Id",
    "Guid" : "Guid",
    "ItemId" : "ItemId",
    "RefreshStatus" : "RefreshStatus",
    "Name" : "Name"
  } ]
}}]
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)

     - returns: RequestBuilder<QueryResultVirtualFolderInfo> 
     */
    open class func getLibraryVirtualfoldersQueryWithRequestBuilder(startIndex: Int? = nil, limit: Int? = nil) -> RequestBuilder<QueryResultVirtualFolderInfo> {
        let path = "/Library/VirtualFolders/Query"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "StartIndex": startIndex?.encodeToJSON(), 
                        "Limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<QueryResultVirtualFolderInfo>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) AddVirtualFolder 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLibraryVirtualfolders(body: LibraryAddVirtualFolder, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postLibraryVirtualfoldersWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /Library/VirtualFolders

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) AddVirtualFolder 

     - returns: RequestBuilder<Void> 
     */
    open class func postLibraryVirtualfoldersWithRequestBuilder(body: LibraryAddVirtualFolder) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body) RemoveVirtualFolder 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLibraryVirtualfoldersDelete(body: LibraryRemoveVirtualFolder, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postLibraryVirtualfoldersDeleteWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /Library/VirtualFolders/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) RemoveVirtualFolder 

     - returns: RequestBuilder<Void> 
     */
    open class func postLibraryVirtualfoldersDeleteWithRequestBuilder(body: LibraryRemoveVirtualFolder) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders/Delete"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body) UpdateLibraryOptions 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLibraryVirtualfoldersLibraryoptions(body: LibraryUpdateLibraryOptions, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postLibraryVirtualfoldersLibraryoptionsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /Library/VirtualFolders/LibraryOptions

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) UpdateLibraryOptions 

     - returns: RequestBuilder<Void> 
     */
    open class func postLibraryVirtualfoldersLibraryoptionsWithRequestBuilder(body: LibraryUpdateLibraryOptions) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders/LibraryOptions"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body) RenameVirtualFolder 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLibraryVirtualfoldersName(body: LibraryRenameVirtualFolder, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postLibraryVirtualfoldersNameWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /Library/VirtualFolders/Name

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) RenameVirtualFolder 

     - returns: RequestBuilder<Void> 
     */
    open class func postLibraryVirtualfoldersNameWithRequestBuilder(body: LibraryRenameVirtualFolder) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders/Name"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body) AddMediaPath 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLibraryVirtualfoldersPaths(body: LibraryAddMediaPath, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postLibraryVirtualfoldersPathsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /Library/VirtualFolders/Paths

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) AddMediaPath 

     - returns: RequestBuilder<Void> 
     */
    open class func postLibraryVirtualfoldersPathsWithRequestBuilder(body: LibraryAddMediaPath) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders/Paths"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body) RemoveMediaPath 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLibraryVirtualfoldersPathsDelete(body: LibraryRemoveMediaPath, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postLibraryVirtualfoldersPathsDeleteWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /Library/VirtualFolders/Paths/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) RemoveMediaPath 

     - returns: RequestBuilder<Void> 
     */
    open class func postLibraryVirtualfoldersPathsDeleteWithRequestBuilder(body: LibraryRemoveMediaPath) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders/Paths/Delete"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body) UpdateMediaPath 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLibraryVirtualfoldersPathsUpdate(body: LibraryUpdateMediaPath, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postLibraryVirtualfoldersPathsUpdateWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /Library/VirtualFolders/Paths/Update

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) UpdateMediaPath 

     - returns: RequestBuilder<Void> 
     */
    open class func postLibraryVirtualfoldersPathsUpdateWithRequestBuilder(body: LibraryUpdateMediaPath) -> RequestBuilder<Void> {
        let path = "/Library/VirtualFolders/Paths/Update"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
