//
// DeviceServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DeviceServiceAPI {
    /**
     Deletes a device

     - parameter _id: (query) Device Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDevices(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteDevicesWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes a device
     - DELETE /Devices

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (query) Device Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDevicesWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        let path = "/Devices"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Id": _id
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets all devices

     - parameter sortOrder: (query) Sort Order - Ascending,Descending (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDevices(sortOrder: String? = nil, completion: @escaping ((_ data: QueryResultDevicesDeviceInfo?,_ error: Error?) -> Void)) {
        getDevicesWithRequestBuilder(sortOrder: sortOrder).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets all devices
     - GET /Devices

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "TotalRecordCount" : 6,
  "Items" : [ {
    "AppVersion" : "AppVersion",
    "IconUrl" : "IconUrl",
    "InternalId" : 0,
    "LastUserName" : "LastUserName",
    "LastUserId" : "LastUserId",
    "IpAddress" : "IpAddress",
    "Id" : "Id",
    "DateLastActivity" : "2000-01-23T04:56:07.000+00:00",
    "ReportedDeviceId" : "ReportedDeviceId",
    "Name" : "Name",
    "AppName" : "AppName"
  }, {
    "AppVersion" : "AppVersion",
    "IconUrl" : "IconUrl",
    "InternalId" : 0,
    "LastUserName" : "LastUserName",
    "LastUserId" : "LastUserId",
    "IpAddress" : "IpAddress",
    "Id" : "Id",
    "DateLastActivity" : "2000-01-23T04:56:07.000+00:00",
    "ReportedDeviceId" : "ReportedDeviceId",
    "Name" : "Name",
    "AppName" : "AppName"
  } ]
}}]
     - parameter sortOrder: (query) Sort Order - Ascending,Descending (optional)

     - returns: RequestBuilder<QueryResultDevicesDeviceInfo> 
     */
    open class func getDevicesWithRequestBuilder(sortOrder: String? = nil) -> RequestBuilder<QueryResultDevicesDeviceInfo> {
        let path = "/Devices"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "SortOrder": sortOrder
        ])


        let requestBuilder: RequestBuilder<QueryResultDevicesDeviceInfo>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets camera upload history for a device

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDevicesCamerauploads(completion: @escaping ((_ data: DevicesContentUploadHistory?,_ error: Error?) -> Void)) {
        getDevicesCamerauploadsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets camera upload history for a device
     - GET /Devices/CameraUploads

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "FilesUploaded" : [ {
    "Album" : "Album",
    "Id" : "Id",
    "MimeType" : "MimeType",
    "Name" : "Name"
  }, {
    "Album" : "Album",
    "Id" : "Id",
    "MimeType" : "MimeType",
    "Name" : "Name"
  } ],
  "DeviceId" : "DeviceId"
}}]

     - returns: RequestBuilder<DevicesContentUploadHistory> 
     */
    open class func getDevicesCamerauploadsWithRequestBuilder() -> RequestBuilder<DevicesContentUploadHistory> {
        let path = "/Devices/CameraUploads"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DevicesContentUploadHistory>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets info for a device

     - parameter _id: (query) Device Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDevicesInfo(_id: String, completion: @escaping ((_ data: DevicesDeviceInfo?,_ error: Error?) -> Void)) {
        getDevicesInfoWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets info for a device
     - GET /Devices/Info

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "AppVersion" : "AppVersion",
  "IconUrl" : "IconUrl",
  "InternalId" : 0,
  "LastUserName" : "LastUserName",
  "LastUserId" : "LastUserId",
  "IpAddress" : "IpAddress",
  "Id" : "Id",
  "DateLastActivity" : "2000-01-23T04:56:07.000+00:00",
  "ReportedDeviceId" : "ReportedDeviceId",
  "Name" : "Name",
  "AppName" : "AppName"
}}]
     - parameter _id: (query) Device Id 

     - returns: RequestBuilder<DevicesDeviceInfo> 
     */
    open class func getDevicesInfoWithRequestBuilder(_id: String) -> RequestBuilder<DevicesDeviceInfo> {
        let path = "/Devices/Info"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Id": _id
        ])


        let requestBuilder: RequestBuilder<DevicesDeviceInfo>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets options for a device

     - parameter _id: (query) Device Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDevicesOptions(_id: String, completion: @escaping ((_ data: DevicesDeviceOptions?,_ error: Error?) -> Void)) {
        getDevicesOptionsWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets options for a device
     - GET /Devices/Options

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "CustomName" : "CustomName"
}}]
     - parameter _id: (query) Device Id 

     - returns: RequestBuilder<DevicesDeviceOptions> 
     */
    open class func getDevicesOptionsWithRequestBuilder(_id: String) -> RequestBuilder<DevicesDeviceOptions> {
        let path = "/Devices/Options"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Id": _id
        ])


        let requestBuilder: RequestBuilder<DevicesDeviceOptions>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Uploads content

     - parameter body: (body) Binary stream 
     - parameter album: (query) Album 
     - parameter name: (query) Name 
     - parameter _id: (query) Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDevicesCamerauploads(body: Object, album: String, name: String, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postDevicesCamerauploadsWithRequestBuilder(body: body, album: album, name: name, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Uploads content
     - POST /Devices/CameraUploads

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) Binary stream 
     - parameter album: (query) Album 
     - parameter name: (query) Name 
     - parameter _id: (query) Id 

     - returns: RequestBuilder<Void> 
     */
    open class func postDevicesCamerauploadsWithRequestBuilder(body: Object, album: String, name: String, _id: String) -> RequestBuilder<Void> {
        let path = "/Devices/CameraUploads"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Album": album, 
                        "Name": name, 
                        "Id": _id
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Deletes a device

     - parameter _id: (query) Device Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDevicesDelete(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postDevicesDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes a device
     - POST /Devices/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (query) Device Id 

     - returns: RequestBuilder<Void> 
     */
    open class func postDevicesDeleteWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        let path = "/Devices/Delete"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Id": _id
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Updates device options

     - parameter body: (body) DeviceOptions:  
     - parameter _id: (query) Device Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDevicesOptions(body: DevicesDeviceOptions, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postDevicesOptionsWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates device options
     - POST /Devices/Options

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) DeviceOptions:  
     - parameter _id: (query) Device Id 

     - returns: RequestBuilder<Void> 
     */
    open class func postDevicesOptionsWithRequestBuilder(body: DevicesDeviceOptions, _id: String) -> RequestBuilder<Void> {
        let path = "/Devices/Options"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Id": _id
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
