//
// ConnectServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ConnectServiceAPI {
    /**
     Removes a Connect link for a user

     - parameter _id: (path) User Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUsersByIdConnectLink(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteUsersByIdConnectLinkWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Removes a Connect link for a user
     - DELETE /Users/{Id}/Connect/Link

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) User Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUsersByIdConnectLinkWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Users/{Id}/Connect/Link"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets the corresponding local user from a connect user id

     - parameter connectUserId: (query) ConnectUserId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConnectExchange(connectUserId: String, completion: @escaping ((_ data: ConnectConnectAuthenticationExchangeResult?,_ error: Error?) -> Void)) {
        getConnectExchangeWithRequestBuilder(connectUserId: connectUserId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the corresponding local user from a connect user id
     - GET /Connect/Exchange

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "LocalUserId" : "LocalUserId",
  "AccessToken" : "AccessToken"
}}]
     - parameter connectUserId: (query) ConnectUserId 

     - returns: RequestBuilder<ConnectConnectAuthenticationExchangeResult> 
     */
    open class func getConnectExchangeWithRequestBuilder(connectUserId: String) -> RequestBuilder<ConnectConnectAuthenticationExchangeResult> {
        let path = "/Connect/Exchange"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "ConnectUserId": connectUserId
        ])


        let requestBuilder: RequestBuilder<ConnectConnectAuthenticationExchangeResult>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Creates a Connect link for a user

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConnectPending(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getConnectPendingWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Creates a Connect link for a user
     - GET /Connect/Pending

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth

     - returns: RequestBuilder<Void> 
     */
    open class func getConnectPendingWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/Connect/Pending"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Creates a Connect link for a user

     - parameter _id: (path) User Id 
     - parameter connectUsername: (query) Connect username 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersByIdConnectLink(_id: String, connectUsername: String, completion: @escaping ((_ data: ConnectUserLinkResult?,_ error: Error?) -> Void)) {
        postUsersByIdConnectLinkWithRequestBuilder(_id: _id, connectUsername: connectUsername).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a Connect link for a user
     - POST /Users/{Id}/Connect/Link

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "IsNewUserInvitation" : true,
  "GuestDisplayName" : "GuestDisplayName",
  "IsPending" : true
}}]
     - parameter _id: (path) User Id 
     - parameter connectUsername: (query) Connect username 

     - returns: RequestBuilder<ConnectUserLinkResult> 
     */
    open class func postUsersByIdConnectLinkWithRequestBuilder(_id: String, connectUsername: String) -> RequestBuilder<ConnectUserLinkResult> {
        var path = "/Users/{Id}/Connect/Link"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "ConnectUsername": connectUsername
        ])


        let requestBuilder: RequestBuilder<ConnectUserLinkResult>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Removes a Connect link for a user

     - parameter _id: (path) User Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersByIdConnectLinkDelete(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUsersByIdConnectLinkDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Removes a Connect link for a user
     - POST /Users/{Id}/Connect/Link/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) User Id 

     - returns: RequestBuilder<Void> 
     */
    open class func postUsersByIdConnectLinkDeleteWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Users/{Id}/Connect/Link/Delete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
