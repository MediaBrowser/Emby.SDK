//
// DlnaServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DlnaServiceAPI {
    /**
     Deletes a profile

     - parameter _id: (path) Profile Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDlnaProfilesById(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteDlnaProfilesByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes a profile
     - DELETE /Dlna/Profiles/{Id}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Profile Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDlnaProfilesByIdWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Dlna/Profiles/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a list of profiles

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDlnaProfileinfos(completion: @escaping ((_ data: [DlnaProfilesDlnaProfile]?,_ error: Error?) -> Void)) {
        getDlnaProfileinfosWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a list of profiles
     - GET /Dlna/ProfileInfos

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "ManufacturerUrl" : "ManufacturerUrl",
  "EnableSingleAlbumArtLimit" : true,
  "MusicStreamingTranscodingBitrate" : 7,
  "AlbumArtPn" : "AlbumArtPn",
  "TranscodingProfiles" : [ {
    "Context" : "Streaming",
    "BreakOnNonKeyFrames" : true,
    "CopyTimestamps" : true,
    "MinSegments" : 3,
    "EnableMpegtsM2TsMode" : true,
    "MaxAudioChannels" : "MaxAudioChannels",
    "VideoCodec" : "VideoCodec",
    "Container" : "Container",
    "MaxWidth" : 7,
    "EstimateContentLength" : true,
    "AllowInterlacedVideoStreamCopy" : true,
    "SegmentLength" : 2,
    "ManifestSubtitles" : "ManifestSubtitles",
    "TranscodeSeekInfo" : "Auto",
    "MaxHeight" : 1,
    "Protocol" : "Protocol",
    "MaxManifestSubtitles" : 4,
    "AudioCodec" : "AudioCodec",
    "FillEmptySubtitleSegments" : true
  }, {
    "Context" : "Streaming",
    "BreakOnNonKeyFrames" : true,
    "CopyTimestamps" : true,
    "MinSegments" : 3,
    "EnableMpegtsM2TsMode" : true,
    "MaxAudioChannels" : "MaxAudioChannels",
    "VideoCodec" : "VideoCodec",
    "Container" : "Container",
    "MaxWidth" : 7,
    "EstimateContentLength" : true,
    "AllowInterlacedVideoStreamCopy" : true,
    "SegmentLength" : 2,
    "ManifestSubtitles" : "ManifestSubtitles",
    "TranscodeSeekInfo" : "Auto",
    "MaxHeight" : 1,
    "Protocol" : "Protocol",
    "MaxManifestSubtitles" : 4,
    "AudioCodec" : "AudioCodec",
    "FillEmptySubtitleSegments" : true
  } ],
  "SupportsSamsungBookmark" : true,
  "Identification" : {
    "ModelNumber" : "ModelNumber",
    "ManufacturerUrl" : "ManufacturerUrl",
    "DeviceDescription" : "DeviceDescription",
    "ModelUrl" : "ModelUrl",
    "ModelName" : "ModelName",
    "SerialNumber" : "SerialNumber",
    "FriendlyName" : "FriendlyName",
    "Headers" : [ {
      "Value" : "Value",
      "Name" : "Name",
      "Match" : "Equals"
    }, {
      "Value" : "Value",
      "Name" : "Name",
      "Match" : "Equals"
    } ],
    "Manufacturer" : "Manufacturer",
    "ModelDescription" : "ModelDescription"
  },
  "MaxStreamingBitrate" : 2,
  "IgnoreTranscodeByteRangeRequests" : true,
  "Name" : "Name",
  "ResponseProfiles" : [ {
    "Container" : "Container",
    "OrgPn" : "OrgPn",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec",
    "MimeType" : "MimeType",
    "Conditions" : [ null, null ]
  }, {
    "Container" : "Container",
    "OrgPn" : "OrgPn",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec",
    "MimeType" : "MimeType",
    "Conditions" : [ null, null ]
  } ],
  "ModelUrl" : "ModelUrl",
  "Manufacturer" : "Manufacturer",
  "ProtocolInfo" : "ProtocolInfo",
  "RequiresPlainVideoItems" : true,
  "ModelDescription" : "ModelDescription",
  "MaxAlbumArtWidth" : 0,
  "Path" : "Path",
  "ModelNumber" : "ModelNumber",
  "ModelName" : "ModelName",
  "MaxIconHeight" : 5,
  "FriendlyName" : "FriendlyName",
  "RequiresPlainFolders" : true,
  "EnableSingleSubtitleLimit" : true,
  "SubtitleProfiles" : [ {
    "Container" : "Container",
    "Format" : "Format",
    "Language" : "Language",
    "DidlMode" : "DidlMode",
    "Method" : "Encode",
    "Protocol" : "Protocol"
  }, {
    "Container" : "Container",
    "Format" : "Format",
    "Language" : "Language",
    "DidlMode" : "DidlMode",
    "Method" : "Encode",
    "Protocol" : "Protocol"
  } ],
  "MaxAlbumArtHeight" : 6,
  "EnableAlbumArtInDidl" : true,
  "Type" : "System",
  "SerialNumber" : "SerialNumber",
  "SupportedMediaTypes" : "SupportedMediaTypes",
  "CodecProfiles" : [ {
    "Type" : "Video",
    "Codec" : "Codec",
    "Container" : "Container",
    "ApplyConditions" : [ null, null ],
    "Conditions" : [ null, null ]
  }, {
    "Type" : "Video",
    "Codec" : "Codec",
    "Container" : "Container",
    "ApplyConditions" : [ null, null ],
    "Conditions" : [ null, null ]
  } ],
  "UserId" : "UserId",
  "MaxIconWidth" : 1,
  "TimelineOffsetSeconds" : 5,
  "MaxStaticMusicBitrate" : 9,
  "DirectPlayProfiles" : [ {
    "Container" : "Container",
    "Type" : "Audio",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec"
  }, {
    "Container" : "Container",
    "Type" : "Audio",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec"
  } ],
  "ContainerProfiles" : [ {
    "Container" : "Container",
    "Conditions" : [ {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    }, {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    } ]
  }, {
    "Container" : "Container",
    "Conditions" : [ {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    }, {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    } ]
  } ],
  "Id" : "Id",
  "ProtocolInfoDetection" : {
    "EnabledForVideo" : true,
    "EnabledForAudio" : true,
    "EnabledForPhotos" : true
  }
}, {
  "ManufacturerUrl" : "ManufacturerUrl",
  "EnableSingleAlbumArtLimit" : true,
  "MusicStreamingTranscodingBitrate" : 7,
  "AlbumArtPn" : "AlbumArtPn",
  "TranscodingProfiles" : [ {
    "Context" : "Streaming",
    "BreakOnNonKeyFrames" : true,
    "CopyTimestamps" : true,
    "MinSegments" : 3,
    "EnableMpegtsM2TsMode" : true,
    "MaxAudioChannels" : "MaxAudioChannels",
    "VideoCodec" : "VideoCodec",
    "Container" : "Container",
    "MaxWidth" : 7,
    "EstimateContentLength" : true,
    "AllowInterlacedVideoStreamCopy" : true,
    "SegmentLength" : 2,
    "ManifestSubtitles" : "ManifestSubtitles",
    "TranscodeSeekInfo" : "Auto",
    "MaxHeight" : 1,
    "Protocol" : "Protocol",
    "MaxManifestSubtitles" : 4,
    "AudioCodec" : "AudioCodec",
    "FillEmptySubtitleSegments" : true
  }, {
    "Context" : "Streaming",
    "BreakOnNonKeyFrames" : true,
    "CopyTimestamps" : true,
    "MinSegments" : 3,
    "EnableMpegtsM2TsMode" : true,
    "MaxAudioChannels" : "MaxAudioChannels",
    "VideoCodec" : "VideoCodec",
    "Container" : "Container",
    "MaxWidth" : 7,
    "EstimateContentLength" : true,
    "AllowInterlacedVideoStreamCopy" : true,
    "SegmentLength" : 2,
    "ManifestSubtitles" : "ManifestSubtitles",
    "TranscodeSeekInfo" : "Auto",
    "MaxHeight" : 1,
    "Protocol" : "Protocol",
    "MaxManifestSubtitles" : 4,
    "AudioCodec" : "AudioCodec",
    "FillEmptySubtitleSegments" : true
  } ],
  "SupportsSamsungBookmark" : true,
  "Identification" : {
    "ModelNumber" : "ModelNumber",
    "ManufacturerUrl" : "ManufacturerUrl",
    "DeviceDescription" : "DeviceDescription",
    "ModelUrl" : "ModelUrl",
    "ModelName" : "ModelName",
    "SerialNumber" : "SerialNumber",
    "FriendlyName" : "FriendlyName",
    "Headers" : [ {
      "Value" : "Value",
      "Name" : "Name",
      "Match" : "Equals"
    }, {
      "Value" : "Value",
      "Name" : "Name",
      "Match" : "Equals"
    } ],
    "Manufacturer" : "Manufacturer",
    "ModelDescription" : "ModelDescription"
  },
  "MaxStreamingBitrate" : 2,
  "IgnoreTranscodeByteRangeRequests" : true,
  "Name" : "Name",
  "ResponseProfiles" : [ {
    "Container" : "Container",
    "OrgPn" : "OrgPn",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec",
    "MimeType" : "MimeType",
    "Conditions" : [ null, null ]
  }, {
    "Container" : "Container",
    "OrgPn" : "OrgPn",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec",
    "MimeType" : "MimeType",
    "Conditions" : [ null, null ]
  } ],
  "ModelUrl" : "ModelUrl",
  "Manufacturer" : "Manufacturer",
  "ProtocolInfo" : "ProtocolInfo",
  "RequiresPlainVideoItems" : true,
  "ModelDescription" : "ModelDescription",
  "MaxAlbumArtWidth" : 0,
  "Path" : "Path",
  "ModelNumber" : "ModelNumber",
  "ModelName" : "ModelName",
  "MaxIconHeight" : 5,
  "FriendlyName" : "FriendlyName",
  "RequiresPlainFolders" : true,
  "EnableSingleSubtitleLimit" : true,
  "SubtitleProfiles" : [ {
    "Container" : "Container",
    "Format" : "Format",
    "Language" : "Language",
    "DidlMode" : "DidlMode",
    "Method" : "Encode",
    "Protocol" : "Protocol"
  }, {
    "Container" : "Container",
    "Format" : "Format",
    "Language" : "Language",
    "DidlMode" : "DidlMode",
    "Method" : "Encode",
    "Protocol" : "Protocol"
  } ],
  "MaxAlbumArtHeight" : 6,
  "EnableAlbumArtInDidl" : true,
  "Type" : "System",
  "SerialNumber" : "SerialNumber",
  "SupportedMediaTypes" : "SupportedMediaTypes",
  "CodecProfiles" : [ {
    "Type" : "Video",
    "Codec" : "Codec",
    "Container" : "Container",
    "ApplyConditions" : [ null, null ],
    "Conditions" : [ null, null ]
  }, {
    "Type" : "Video",
    "Codec" : "Codec",
    "Container" : "Container",
    "ApplyConditions" : [ null, null ],
    "Conditions" : [ null, null ]
  } ],
  "UserId" : "UserId",
  "MaxIconWidth" : 1,
  "TimelineOffsetSeconds" : 5,
  "MaxStaticMusicBitrate" : 9,
  "DirectPlayProfiles" : [ {
    "Container" : "Container",
    "Type" : "Audio",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec"
  }, {
    "Container" : "Container",
    "Type" : "Audio",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec"
  } ],
  "ContainerProfiles" : [ {
    "Container" : "Container",
    "Conditions" : [ {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    }, {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    } ]
  }, {
    "Container" : "Container",
    "Conditions" : [ {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    }, {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    } ]
  } ],
  "Id" : "Id",
  "ProtocolInfoDetection" : {
    "EnabledForVideo" : true,
    "EnabledForAudio" : true,
    "EnabledForPhotos" : true
  }
} ]}]

     - returns: RequestBuilder<[DlnaProfilesDlnaProfile]> 
     */
    open class func getDlnaProfileinfosWithRequestBuilder() -> RequestBuilder<[DlnaProfilesDlnaProfile]> {
        let path = "/Dlna/ProfileInfos"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[DlnaProfilesDlnaProfile]>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a single profile

     - parameter _id: (path) Profile Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDlnaProfilesById(_id: String, completion: @escaping ((_ data: DlnaProfilesDlnaProfile?,_ error: Error?) -> Void)) {
        getDlnaProfilesByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a single profile
     - GET /Dlna/Profiles/{Id}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "ManufacturerUrl" : "ManufacturerUrl",
  "EnableSingleAlbumArtLimit" : true,
  "MusicStreamingTranscodingBitrate" : 7,
  "AlbumArtPn" : "AlbumArtPn",
  "TranscodingProfiles" : [ {
    "Context" : "Streaming",
    "BreakOnNonKeyFrames" : true,
    "CopyTimestamps" : true,
    "MinSegments" : 3,
    "EnableMpegtsM2TsMode" : true,
    "MaxAudioChannels" : "MaxAudioChannels",
    "VideoCodec" : "VideoCodec",
    "Container" : "Container",
    "MaxWidth" : 7,
    "EstimateContentLength" : true,
    "AllowInterlacedVideoStreamCopy" : true,
    "SegmentLength" : 2,
    "ManifestSubtitles" : "ManifestSubtitles",
    "TranscodeSeekInfo" : "Auto",
    "MaxHeight" : 1,
    "Protocol" : "Protocol",
    "MaxManifestSubtitles" : 4,
    "AudioCodec" : "AudioCodec",
    "FillEmptySubtitleSegments" : true
  }, {
    "Context" : "Streaming",
    "BreakOnNonKeyFrames" : true,
    "CopyTimestamps" : true,
    "MinSegments" : 3,
    "EnableMpegtsM2TsMode" : true,
    "MaxAudioChannels" : "MaxAudioChannels",
    "VideoCodec" : "VideoCodec",
    "Container" : "Container",
    "MaxWidth" : 7,
    "EstimateContentLength" : true,
    "AllowInterlacedVideoStreamCopy" : true,
    "SegmentLength" : 2,
    "ManifestSubtitles" : "ManifestSubtitles",
    "TranscodeSeekInfo" : "Auto",
    "MaxHeight" : 1,
    "Protocol" : "Protocol",
    "MaxManifestSubtitles" : 4,
    "AudioCodec" : "AudioCodec",
    "FillEmptySubtitleSegments" : true
  } ],
  "SupportsSamsungBookmark" : true,
  "Identification" : {
    "ModelNumber" : "ModelNumber",
    "ManufacturerUrl" : "ManufacturerUrl",
    "DeviceDescription" : "DeviceDescription",
    "ModelUrl" : "ModelUrl",
    "ModelName" : "ModelName",
    "SerialNumber" : "SerialNumber",
    "FriendlyName" : "FriendlyName",
    "Headers" : [ {
      "Value" : "Value",
      "Name" : "Name",
      "Match" : "Equals"
    }, {
      "Value" : "Value",
      "Name" : "Name",
      "Match" : "Equals"
    } ],
    "Manufacturer" : "Manufacturer",
    "ModelDescription" : "ModelDescription"
  },
  "MaxStreamingBitrate" : 2,
  "IgnoreTranscodeByteRangeRequests" : true,
  "Name" : "Name",
  "ResponseProfiles" : [ {
    "Container" : "Container",
    "OrgPn" : "OrgPn",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec",
    "MimeType" : "MimeType",
    "Conditions" : [ null, null ]
  }, {
    "Container" : "Container",
    "OrgPn" : "OrgPn",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec",
    "MimeType" : "MimeType",
    "Conditions" : [ null, null ]
  } ],
  "ModelUrl" : "ModelUrl",
  "Manufacturer" : "Manufacturer",
  "ProtocolInfo" : "ProtocolInfo",
  "RequiresPlainVideoItems" : true,
  "ModelDescription" : "ModelDescription",
  "MaxAlbumArtWidth" : 0,
  "Path" : "Path",
  "ModelNumber" : "ModelNumber",
  "ModelName" : "ModelName",
  "MaxIconHeight" : 5,
  "FriendlyName" : "FriendlyName",
  "RequiresPlainFolders" : true,
  "EnableSingleSubtitleLimit" : true,
  "SubtitleProfiles" : [ {
    "Container" : "Container",
    "Format" : "Format",
    "Language" : "Language",
    "DidlMode" : "DidlMode",
    "Method" : "Encode",
    "Protocol" : "Protocol"
  }, {
    "Container" : "Container",
    "Format" : "Format",
    "Language" : "Language",
    "DidlMode" : "DidlMode",
    "Method" : "Encode",
    "Protocol" : "Protocol"
  } ],
  "MaxAlbumArtHeight" : 6,
  "EnableAlbumArtInDidl" : true,
  "Type" : "System",
  "SerialNumber" : "SerialNumber",
  "SupportedMediaTypes" : "SupportedMediaTypes",
  "CodecProfiles" : [ {
    "Type" : "Video",
    "Codec" : "Codec",
    "Container" : "Container",
    "ApplyConditions" : [ null, null ],
    "Conditions" : [ null, null ]
  }, {
    "Type" : "Video",
    "Codec" : "Codec",
    "Container" : "Container",
    "ApplyConditions" : [ null, null ],
    "Conditions" : [ null, null ]
  } ],
  "UserId" : "UserId",
  "MaxIconWidth" : 1,
  "TimelineOffsetSeconds" : 5,
  "MaxStaticMusicBitrate" : 9,
  "DirectPlayProfiles" : [ {
    "Container" : "Container",
    "Type" : "Audio",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec"
  }, {
    "Container" : "Container",
    "Type" : "Audio",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec"
  } ],
  "ContainerProfiles" : [ {
    "Container" : "Container",
    "Conditions" : [ {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    }, {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    } ]
  }, {
    "Container" : "Container",
    "Conditions" : [ {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    }, {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    } ]
  } ],
  "Id" : "Id",
  "ProtocolInfoDetection" : {
    "EnabledForVideo" : true,
    "EnabledForAudio" : true,
    "EnabledForPhotos" : true
  }
}}]
     - parameter _id: (path) Profile Id 

     - returns: RequestBuilder<DlnaProfilesDlnaProfile> 
     */
    open class func getDlnaProfilesByIdWithRequestBuilder(_id: String) -> RequestBuilder<DlnaProfilesDlnaProfile> {
        var path = "/Dlna/Profiles/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DlnaProfilesDlnaProfile>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets the default profile

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDlnaProfilesDefault(completion: @escaping ((_ data: DlnaProfilesDlnaProfile?,_ error: Error?) -> Void)) {
        getDlnaProfilesDefaultWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the default profile
     - GET /Dlna/Profiles/Default

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "ManufacturerUrl" : "ManufacturerUrl",
  "EnableSingleAlbumArtLimit" : true,
  "MusicStreamingTranscodingBitrate" : 7,
  "AlbumArtPn" : "AlbumArtPn",
  "TranscodingProfiles" : [ {
    "Context" : "Streaming",
    "BreakOnNonKeyFrames" : true,
    "CopyTimestamps" : true,
    "MinSegments" : 3,
    "EnableMpegtsM2TsMode" : true,
    "MaxAudioChannels" : "MaxAudioChannels",
    "VideoCodec" : "VideoCodec",
    "Container" : "Container",
    "MaxWidth" : 7,
    "EstimateContentLength" : true,
    "AllowInterlacedVideoStreamCopy" : true,
    "SegmentLength" : 2,
    "ManifestSubtitles" : "ManifestSubtitles",
    "TranscodeSeekInfo" : "Auto",
    "MaxHeight" : 1,
    "Protocol" : "Protocol",
    "MaxManifestSubtitles" : 4,
    "AudioCodec" : "AudioCodec",
    "FillEmptySubtitleSegments" : true
  }, {
    "Context" : "Streaming",
    "BreakOnNonKeyFrames" : true,
    "CopyTimestamps" : true,
    "MinSegments" : 3,
    "EnableMpegtsM2TsMode" : true,
    "MaxAudioChannels" : "MaxAudioChannels",
    "VideoCodec" : "VideoCodec",
    "Container" : "Container",
    "MaxWidth" : 7,
    "EstimateContentLength" : true,
    "AllowInterlacedVideoStreamCopy" : true,
    "SegmentLength" : 2,
    "ManifestSubtitles" : "ManifestSubtitles",
    "TranscodeSeekInfo" : "Auto",
    "MaxHeight" : 1,
    "Protocol" : "Protocol",
    "MaxManifestSubtitles" : 4,
    "AudioCodec" : "AudioCodec",
    "FillEmptySubtitleSegments" : true
  } ],
  "SupportsSamsungBookmark" : true,
  "Identification" : {
    "ModelNumber" : "ModelNumber",
    "ManufacturerUrl" : "ManufacturerUrl",
    "DeviceDescription" : "DeviceDescription",
    "ModelUrl" : "ModelUrl",
    "ModelName" : "ModelName",
    "SerialNumber" : "SerialNumber",
    "FriendlyName" : "FriendlyName",
    "Headers" : [ {
      "Value" : "Value",
      "Name" : "Name",
      "Match" : "Equals"
    }, {
      "Value" : "Value",
      "Name" : "Name",
      "Match" : "Equals"
    } ],
    "Manufacturer" : "Manufacturer",
    "ModelDescription" : "ModelDescription"
  },
  "MaxStreamingBitrate" : 2,
  "IgnoreTranscodeByteRangeRequests" : true,
  "Name" : "Name",
  "ResponseProfiles" : [ {
    "Container" : "Container",
    "OrgPn" : "OrgPn",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec",
    "MimeType" : "MimeType",
    "Conditions" : [ null, null ]
  }, {
    "Container" : "Container",
    "OrgPn" : "OrgPn",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec",
    "MimeType" : "MimeType",
    "Conditions" : [ null, null ]
  } ],
  "ModelUrl" : "ModelUrl",
  "Manufacturer" : "Manufacturer",
  "ProtocolInfo" : "ProtocolInfo",
  "RequiresPlainVideoItems" : true,
  "ModelDescription" : "ModelDescription",
  "MaxAlbumArtWidth" : 0,
  "Path" : "Path",
  "ModelNumber" : "ModelNumber",
  "ModelName" : "ModelName",
  "MaxIconHeight" : 5,
  "FriendlyName" : "FriendlyName",
  "RequiresPlainFolders" : true,
  "EnableSingleSubtitleLimit" : true,
  "SubtitleProfiles" : [ {
    "Container" : "Container",
    "Format" : "Format",
    "Language" : "Language",
    "DidlMode" : "DidlMode",
    "Method" : "Encode",
    "Protocol" : "Protocol"
  }, {
    "Container" : "Container",
    "Format" : "Format",
    "Language" : "Language",
    "DidlMode" : "DidlMode",
    "Method" : "Encode",
    "Protocol" : "Protocol"
  } ],
  "MaxAlbumArtHeight" : 6,
  "EnableAlbumArtInDidl" : true,
  "Type" : "System",
  "SerialNumber" : "SerialNumber",
  "SupportedMediaTypes" : "SupportedMediaTypes",
  "CodecProfiles" : [ {
    "Type" : "Video",
    "Codec" : "Codec",
    "Container" : "Container",
    "ApplyConditions" : [ null, null ],
    "Conditions" : [ null, null ]
  }, {
    "Type" : "Video",
    "Codec" : "Codec",
    "Container" : "Container",
    "ApplyConditions" : [ null, null ],
    "Conditions" : [ null, null ]
  } ],
  "UserId" : "UserId",
  "MaxIconWidth" : 1,
  "TimelineOffsetSeconds" : 5,
  "MaxStaticMusicBitrate" : 9,
  "DirectPlayProfiles" : [ {
    "Container" : "Container",
    "Type" : "Audio",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec"
  }, {
    "Container" : "Container",
    "Type" : "Audio",
    "VideoCodec" : "VideoCodec",
    "AudioCodec" : "AudioCodec"
  } ],
  "ContainerProfiles" : [ {
    "Container" : "Container",
    "Conditions" : [ {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    }, {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    } ]
  }, {
    "Container" : "Container",
    "Conditions" : [ {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    }, {
      "Condition" : "Equals",
      "IsRequired" : true,
      "Value" : "Value",
      "Property" : "AudioChannels"
    } ]
  } ],
  "Id" : "Id",
  "ProtocolInfoDetection" : {
    "EnabledForVideo" : true,
    "EnabledForAudio" : true,
    "EnabledForPhotos" : true
  }
}}]

     - returns: RequestBuilder<DlnaProfilesDlnaProfile> 
     */
    open class func getDlnaProfilesDefaultWithRequestBuilder() -> RequestBuilder<DlnaProfilesDlnaProfile> {
        let path = "/Dlna/Profiles/Default"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DlnaProfilesDlnaProfile>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Creates a profile

     - parameter body: (body) DlnaProfile:  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDlnaProfiles(body: DlnaProfilesDlnaProfile, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postDlnaProfilesWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Creates a profile
     - POST /Dlna/Profiles

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) DlnaProfile:  

     - returns: RequestBuilder<Void> 
     */
    open class func postDlnaProfilesWithRequestBuilder(body: DlnaProfilesDlnaProfile) -> RequestBuilder<Void> {
        let path = "/Dlna/Profiles"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Updates a profile

     - parameter body: (body) DlnaProfile:  
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDlnaProfilesById(body: DlnaProfilesDlnaProfile, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postDlnaProfilesByIdWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates a profile
     - POST /Dlna/Profiles/{Id}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) DlnaProfile:  
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func postDlnaProfilesByIdWithRequestBuilder(body: DlnaProfilesDlnaProfile, _id: String) -> RequestBuilder<Void> {
        var path = "/Dlna/Profiles/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
