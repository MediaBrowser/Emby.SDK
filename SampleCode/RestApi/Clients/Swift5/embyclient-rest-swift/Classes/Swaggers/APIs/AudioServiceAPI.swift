//
// AudioServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AudioServiceAPI {
    /**
     Gets an audio stream

     - parameter streamFileName: (path)  
     - parameter _id: (path) Item Id 
     - parameter container: (query) Container 
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100 (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter maxWidth: (query) Optional. The maximum horizontal resolution of the encoded video. (optional)
     - parameter maxHeight: (query) Optional. The maximum vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxVideoBitDepth: (query) Optional. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAudioByIdByStreamfilename(streamFileName: String, _id: String, container: String, deviceProfileId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, audioSampleRate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, _static: Bool? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxVideoBitDepth: Int? = nil, videoCodec: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAudioByIdByStreamfilenameWithRequestBuilder(streamFileName: streamFileName, _id: _id, container: container, deviceProfileId: deviceProfileId, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, audioSampleRate: audioSampleRate, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, _static: _static, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, maxWidth: maxWidth, maxHeight: maxHeight, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxVideoBitDepth: maxVideoBitDepth, videoCodec: videoCodec, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets an audio stream
     - GET /Audio/{Id}/{StreamFileName}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter streamFileName: (path)  
     - parameter _id: (path) Item Id 
     - parameter container: (query) Container 
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100 (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter maxWidth: (query) Optional. The maximum horizontal resolution of the encoded video. (optional)
     - parameter maxHeight: (query) Optional. The maximum vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxVideoBitDepth: (query) Optional. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getAudioByIdByStreamfilenameWithRequestBuilder(streamFileName: String, _id: String, container: String, deviceProfileId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, audioSampleRate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, _static: Bool? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxVideoBitDepth: Int? = nil, videoCodec: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Audio/{Id}/{StreamFileName}"
        let streamFileNamePreEscape = "\(streamFileName)"
        let streamFileNamePostEscape = streamFileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{StreamFileName}", with: streamFileNamePostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "DeviceProfileId": deviceProfileId, 
                        "DeviceId": deviceId, 
                        "Container": container, 
                        "AudioCodec": audioCodec, 
                        "EnableAutoStreamCopy": enableAutoStreamCopy, 
                        "AudioSampleRate": audioSampleRate?.encodeToJSON(), 
                        "AudioBitRate": audioBitRate?.encodeToJSON(), 
                        "AudioChannels": audioChannels?.encodeToJSON(), 
                        "MaxAudioChannels": maxAudioChannels?.encodeToJSON(), 
                        "Static": _static, 
                        "CopyTimestamps": copyTimestamps, 
                        "StartTimeTicks": startTimeTicks?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "VideoBitRate": videoBitRate?.encodeToJSON(), 
                        "SubtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(), 
                        "SubtitleMethod": subtitleMethod, 
                        "MaxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(), 
                        "VideoCodec": videoCodec, 
                        "AudioStreamIndex": audioStreamIndex?.encodeToJSON(), 
                        "VideoStreamIndex": videoStreamIndex?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets an audio stream

     - parameter _id: (path) Item Id 
     - parameter container: (query) Container 
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100 (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter maxWidth: (query) Optional. The maximum horizontal resolution of the encoded video. (optional)
     - parameter maxHeight: (query) Optional. The maximum vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxVideoBitDepth: (query) Optional. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAudioByIdStream(_id: String, container: String, deviceProfileId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, audioSampleRate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, _static: Bool? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxVideoBitDepth: Int? = nil, videoCodec: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAudioByIdStreamWithRequestBuilder(_id: _id, container: container, deviceProfileId: deviceProfileId, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, audioSampleRate: audioSampleRate, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, _static: _static, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, maxWidth: maxWidth, maxHeight: maxHeight, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxVideoBitDepth: maxVideoBitDepth, videoCodec: videoCodec, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets an audio stream
     - GET /Audio/{Id}/stream

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter container: (query) Container 
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100 (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter maxWidth: (query) Optional. The maximum horizontal resolution of the encoded video. (optional)
     - parameter maxHeight: (query) Optional. The maximum vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxVideoBitDepth: (query) Optional. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getAudioByIdStreamWithRequestBuilder(_id: String, container: String, deviceProfileId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, audioSampleRate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, _static: Bool? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxVideoBitDepth: Int? = nil, videoCodec: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Audio/{Id}/stream"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "DeviceProfileId": deviceProfileId, 
                        "DeviceId": deviceId, 
                        "Container": container, 
                        "AudioCodec": audioCodec, 
                        "EnableAutoStreamCopy": enableAutoStreamCopy, 
                        "AudioSampleRate": audioSampleRate?.encodeToJSON(), 
                        "AudioBitRate": audioBitRate?.encodeToJSON(), 
                        "AudioChannels": audioChannels?.encodeToJSON(), 
                        "MaxAudioChannels": maxAudioChannels?.encodeToJSON(), 
                        "Static": _static, 
                        "CopyTimestamps": copyTimestamps, 
                        "StartTimeTicks": startTimeTicks?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "VideoBitRate": videoBitRate?.encodeToJSON(), 
                        "SubtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(), 
                        "SubtitleMethod": subtitleMethod, 
                        "MaxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(), 
                        "VideoCodec": videoCodec, 
                        "AudioStreamIndex": audioStreamIndex?.encodeToJSON(), 
                        "VideoStreamIndex": videoStreamIndex?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets an audio stream

     - parameter _id: (path) Item Id 
     - parameter container: (path) Container 
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100 (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter maxWidth: (query) Optional. The maximum horizontal resolution of the encoded video. (optional)
     - parameter maxHeight: (query) Optional. The maximum vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxVideoBitDepth: (query) Optional. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAudioByIdStreamByContainer(_id: String, container: String, deviceProfileId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, audioSampleRate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, _static: Bool? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxVideoBitDepth: Int? = nil, videoCodec: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAudioByIdStreamByContainerWithRequestBuilder(_id: _id, container: container, deviceProfileId: deviceProfileId, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, audioSampleRate: audioSampleRate, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, _static: _static, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, maxWidth: maxWidth, maxHeight: maxHeight, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxVideoBitDepth: maxVideoBitDepth, videoCodec: videoCodec, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets an audio stream
     - GET /Audio/{Id}/stream.{Container}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter container: (path) Container 
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100 (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter maxWidth: (query) Optional. The maximum horizontal resolution of the encoded video. (optional)
     - parameter maxHeight: (query) Optional. The maximum vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxVideoBitDepth: (query) Optional. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getAudioByIdStreamByContainerWithRequestBuilder(_id: String, container: String, deviceProfileId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, audioSampleRate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, _static: Bool? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxVideoBitDepth: Int? = nil, videoCodec: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Audio/{Id}/stream.{Container}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let containerPreEscape = "\(container)"
        let containerPostEscape = containerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Container}", with: containerPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "DeviceProfileId": deviceProfileId, 
                        "DeviceId": deviceId, 
                        "AudioCodec": audioCodec, 
                        "EnableAutoStreamCopy": enableAutoStreamCopy, 
                        "AudioSampleRate": audioSampleRate?.encodeToJSON(), 
                        "AudioBitRate": audioBitRate?.encodeToJSON(), 
                        "AudioChannels": audioChannels?.encodeToJSON(), 
                        "MaxAudioChannels": maxAudioChannels?.encodeToJSON(), 
                        "Static": _static, 
                        "CopyTimestamps": copyTimestamps, 
                        "StartTimeTicks": startTimeTicks?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "VideoBitRate": videoBitRate?.encodeToJSON(), 
                        "SubtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(), 
                        "SubtitleMethod": subtitleMethod, 
                        "MaxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(), 
                        "VideoCodec": videoCodec, 
                        "AudioStreamIndex": audioStreamIndex?.encodeToJSON(), 
                        "VideoStreamIndex": videoStreamIndex?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets an audio stream

     - parameter streamFileName: (path)  
     - parameter _id: (path) Item Id 
     - parameter container: (query) Container 
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100 (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter maxWidth: (query) Optional. The maximum horizontal resolution of the encoded video. (optional)
     - parameter maxHeight: (query) Optional. The maximum vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxVideoBitDepth: (query) Optional. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headAudioByIdByStreamfilename(streamFileName: String, _id: String, container: String, deviceProfileId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, audioSampleRate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, _static: Bool? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxVideoBitDepth: Int? = nil, videoCodec: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headAudioByIdByStreamfilenameWithRequestBuilder(streamFileName: streamFileName, _id: _id, container: container, deviceProfileId: deviceProfileId, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, audioSampleRate: audioSampleRate, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, _static: _static, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, maxWidth: maxWidth, maxHeight: maxHeight, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxVideoBitDepth: maxVideoBitDepth, videoCodec: videoCodec, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets an audio stream
     - HEAD /Audio/{Id}/{StreamFileName}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter streamFileName: (path)  
     - parameter _id: (path) Item Id 
     - parameter container: (query) Container 
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100 (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter maxWidth: (query) Optional. The maximum horizontal resolution of the encoded video. (optional)
     - parameter maxHeight: (query) Optional. The maximum vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxVideoBitDepth: (query) Optional. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headAudioByIdByStreamfilenameWithRequestBuilder(streamFileName: String, _id: String, container: String, deviceProfileId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, audioSampleRate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, _static: Bool? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxVideoBitDepth: Int? = nil, videoCodec: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Audio/{Id}/{StreamFileName}"
        let streamFileNamePreEscape = "\(streamFileName)"
        let streamFileNamePostEscape = streamFileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{StreamFileName}", with: streamFileNamePostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "DeviceProfileId": deviceProfileId, 
                        "DeviceId": deviceId, 
                        "Container": container, 
                        "AudioCodec": audioCodec, 
                        "EnableAutoStreamCopy": enableAutoStreamCopy, 
                        "AudioSampleRate": audioSampleRate?.encodeToJSON(), 
                        "AudioBitRate": audioBitRate?.encodeToJSON(), 
                        "AudioChannels": audioChannels?.encodeToJSON(), 
                        "MaxAudioChannels": maxAudioChannels?.encodeToJSON(), 
                        "Static": _static, 
                        "CopyTimestamps": copyTimestamps, 
                        "StartTimeTicks": startTimeTicks?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "VideoBitRate": videoBitRate?.encodeToJSON(), 
                        "SubtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(), 
                        "SubtitleMethod": subtitleMethod, 
                        "MaxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(), 
                        "VideoCodec": videoCodec, 
                        "AudioStreamIndex": audioStreamIndex?.encodeToJSON(), 
                        "VideoStreamIndex": videoStreamIndex?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets an audio stream

     - parameter _id: (path) Item Id 
     - parameter container: (query) Container 
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100 (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter maxWidth: (query) Optional. The maximum horizontal resolution of the encoded video. (optional)
     - parameter maxHeight: (query) Optional. The maximum vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxVideoBitDepth: (query) Optional. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headAudioByIdStream(_id: String, container: String, deviceProfileId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, audioSampleRate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, _static: Bool? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxVideoBitDepth: Int? = nil, videoCodec: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headAudioByIdStreamWithRequestBuilder(_id: _id, container: container, deviceProfileId: deviceProfileId, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, audioSampleRate: audioSampleRate, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, _static: _static, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, maxWidth: maxWidth, maxHeight: maxHeight, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxVideoBitDepth: maxVideoBitDepth, videoCodec: videoCodec, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets an audio stream
     - HEAD /Audio/{Id}/stream

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter container: (query) Container 
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100 (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter maxWidth: (query) Optional. The maximum horizontal resolution of the encoded video. (optional)
     - parameter maxHeight: (query) Optional. The maximum vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxVideoBitDepth: (query) Optional. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headAudioByIdStreamWithRequestBuilder(_id: String, container: String, deviceProfileId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, audioSampleRate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, _static: Bool? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxVideoBitDepth: Int? = nil, videoCodec: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Audio/{Id}/stream"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "DeviceProfileId": deviceProfileId, 
                        "DeviceId": deviceId, 
                        "Container": container, 
                        "AudioCodec": audioCodec, 
                        "EnableAutoStreamCopy": enableAutoStreamCopy, 
                        "AudioSampleRate": audioSampleRate?.encodeToJSON(), 
                        "AudioBitRate": audioBitRate?.encodeToJSON(), 
                        "AudioChannels": audioChannels?.encodeToJSON(), 
                        "MaxAudioChannels": maxAudioChannels?.encodeToJSON(), 
                        "Static": _static, 
                        "CopyTimestamps": copyTimestamps, 
                        "StartTimeTicks": startTimeTicks?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "VideoBitRate": videoBitRate?.encodeToJSON(), 
                        "SubtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(), 
                        "SubtitleMethod": subtitleMethod, 
                        "MaxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(), 
                        "VideoCodec": videoCodec, 
                        "AudioStreamIndex": audioStreamIndex?.encodeToJSON(), 
                        "VideoStreamIndex": videoStreamIndex?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets an audio stream

     - parameter _id: (path) Item Id 
     - parameter container: (path) Container 
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100 (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter maxWidth: (query) Optional. The maximum horizontal resolution of the encoded video. (optional)
     - parameter maxHeight: (query) Optional. The maximum vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxVideoBitDepth: (query) Optional. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headAudioByIdStreamByContainer(_id: String, container: String, deviceProfileId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, audioSampleRate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, _static: Bool? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxVideoBitDepth: Int? = nil, videoCodec: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headAudioByIdStreamByContainerWithRequestBuilder(_id: _id, container: container, deviceProfileId: deviceProfileId, deviceId: deviceId, audioCodec: audioCodec, enableAutoStreamCopy: enableAutoStreamCopy, audioSampleRate: audioSampleRate, audioBitRate: audioBitRate, audioChannels: audioChannels, maxAudioChannels: maxAudioChannels, _static: _static, copyTimestamps: copyTimestamps, startTimeTicks: startTimeTicks, width: width, height: height, maxWidth: maxWidth, maxHeight: maxHeight, videoBitRate: videoBitRate, subtitleStreamIndex: subtitleStreamIndex, subtitleMethod: subtitleMethod, maxVideoBitDepth: maxVideoBitDepth, videoCodec: videoCodec, audioStreamIndex: audioStreamIndex, videoStreamIndex: videoStreamIndex).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets an audio stream
     - HEAD /Audio/{Id}/stream.{Container}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter container: (path) Container 
     - parameter deviceProfileId: (query) Optional. The dlna device profile id to utilize. (optional)
     - parameter deviceId: (query) The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     - parameter audioCodec: (query) Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)
     - parameter enableAutoStreamCopy: (query) Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     - parameter audioSampleRate: (query) Optional. Specify a specific audio sample rate, e.g. 44100 (optional)
     - parameter audioBitRate: (query) Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     - parameter audioChannels: (query) Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)
     - parameter maxAudioChannels: (query) Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)
     - parameter _static: (query) Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)
     - parameter copyTimestamps: (query) Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     - parameter startTimeTicks: (query) Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)
     - parameter width: (query) Optional. The fixed horizontal resolution of the encoded video. (optional)
     - parameter height: (query) Optional. The fixed vertical resolution of the encoded video. (optional)
     - parameter maxWidth: (query) Optional. The maximum horizontal resolution of the encoded video. (optional)
     - parameter maxHeight: (query) Optional. The maximum vertical resolution of the encoded video. (optional)
     - parameter videoBitRate: (query) Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     - parameter subtitleStreamIndex: (query) Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     - parameter subtitleMethod: (query) Optional. Specify the subtitle delivery method. (optional)
     - parameter maxVideoBitDepth: (query) Optional. (optional)
     - parameter videoCodec: (query) Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)
     - parameter audioStreamIndex: (query) Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     - parameter videoStreamIndex: (query) Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headAudioByIdStreamByContainerWithRequestBuilder(_id: String, container: String, deviceProfileId: String? = nil, deviceId: String? = nil, audioCodec: String? = nil, enableAutoStreamCopy: Bool? = nil, audioSampleRate: Int? = nil, audioBitRate: Int? = nil, audioChannels: Int? = nil, maxAudioChannels: Int? = nil, _static: Bool? = nil, copyTimestamps: Bool? = nil, startTimeTicks: Int64? = nil, width: Int? = nil, height: Int? = nil, maxWidth: Int? = nil, maxHeight: Int? = nil, videoBitRate: Int? = nil, subtitleStreamIndex: Int? = nil, subtitleMethod: SubtitleDeliveryMethod? = nil, maxVideoBitDepth: Int? = nil, videoCodec: String? = nil, audioStreamIndex: Int? = nil, videoStreamIndex: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Audio/{Id}/stream.{Container}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let containerPreEscape = "\(container)"
        let containerPostEscape = containerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Container}", with: containerPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "DeviceProfileId": deviceProfileId, 
                        "DeviceId": deviceId, 
                        "AudioCodec": audioCodec, 
                        "EnableAutoStreamCopy": enableAutoStreamCopy, 
                        "AudioSampleRate": audioSampleRate?.encodeToJSON(), 
                        "AudioBitRate": audioBitRate?.encodeToJSON(), 
                        "AudioChannels": audioChannels?.encodeToJSON(), 
                        "MaxAudioChannels": maxAudioChannels?.encodeToJSON(), 
                        "Static": _static, 
                        "CopyTimestamps": copyTimestamps, 
                        "StartTimeTicks": startTimeTicks?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "VideoBitRate": videoBitRate?.encodeToJSON(), 
                        "SubtitleStreamIndex": subtitleStreamIndex?.encodeToJSON(), 
                        "SubtitleMethod": subtitleMethod, 
                        "MaxVideoBitDepth": maxVideoBitDepth?.encodeToJSON(), 
                        "VideoCodec": videoCodec, 
                        "AudioStreamIndex": audioStreamIndex?.encodeToJSON(), 
                        "VideoStreamIndex": videoStreamIndex?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
