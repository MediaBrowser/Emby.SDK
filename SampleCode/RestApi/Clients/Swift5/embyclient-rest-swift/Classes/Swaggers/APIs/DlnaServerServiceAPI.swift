//
// DlnaServerServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DlnaServerServiceAPI {
    /**
     Gets dlna connection manager xml

     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDlnaByUuidConnectionmanagerConnectionmanager(uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getDlnaByUuidConnectionmanagerConnectionmanagerWithRequestBuilder(uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets dlna connection manager xml
     - GET /Dlna/{UuId}/connectionmanager/connectionmanager

     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidConnectionmanagerConnectionmanagerWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/connectionmanager/connectionmanager"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets dlna connection manager xml

     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDlnaByUuidConnectionmanagerConnectionmanagerXml(uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getDlnaByUuidConnectionmanagerConnectionmanagerXmlWithRequestBuilder(uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets dlna connection manager xml
     - GET /Dlna/{UuId}/connectionmanager/connectionmanager.xml

     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidConnectionmanagerConnectionmanagerXmlWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/connectionmanager/connectionmanager.xml"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets dlna content directory xml

     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDlnaByUuidContentdirectoryContentdirectory(uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getDlnaByUuidContentdirectoryContentdirectoryWithRequestBuilder(uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets dlna content directory xml
     - GET /Dlna/{UuId}/contentdirectory/contentdirectory

     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidContentdirectoryContentdirectoryWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/contentdirectory/contentdirectory"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets dlna content directory xml

     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDlnaByUuidContentdirectoryContentdirectoryXml(uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getDlnaByUuidContentdirectoryContentdirectoryXmlWithRequestBuilder(uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets dlna content directory xml
     - GET /Dlna/{UuId}/contentdirectory/contentdirectory.xml

     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidContentdirectoryContentdirectoryXmlWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/contentdirectory/contentdirectory.xml"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets dlna server info

     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDlnaByUuidDescription(uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getDlnaByUuidDescriptionWithRequestBuilder(uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets dlna server info
     - GET /Dlna/{UuId}/description

     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidDescriptionWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/description"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets dlna server info

     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDlnaByUuidDescriptionXml(uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getDlnaByUuidDescriptionXmlWithRequestBuilder(uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets dlna server info
     - GET /Dlna/{UuId}/description.xml

     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidDescriptionXmlWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/description.xml"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a server icon

     - parameter uuId: (path) Server UuId 
     - parameter filename: (path) The icon filename 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDlnaByUuidIconsByFilename(uuId: String, filename: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getDlnaByUuidIconsByFilenameWithRequestBuilder(uuId: uuId, filename: filename).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets a server icon
     - GET /Dlna/{UuId}/icons/{Filename}

     - parameter uuId: (path) Server UuId 
     - parameter filename: (path) The icon filename 

     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidIconsByFilenameWithRequestBuilder(uuId: String, filename: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/icons/{Filename}"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let filenamePreEscape = "\(filename)"
        let filenamePostEscape = filenamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Filename}", with: filenamePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a server icon

     - parameter filename: (path) The icon filename 
     - parameter uuId: (query) Server UuId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDlnaIconsByFilename(filename: String, uuId: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getDlnaIconsByFilenameWithRequestBuilder(filename: filename, uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets a server icon
     - GET /Dlna/icons/{Filename}

     - parameter filename: (path) The icon filename 
     - parameter uuId: (query) Server UuId (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaIconsByFilenameWithRequestBuilder(filename: String, uuId: String? = nil) -> RequestBuilder<Void> {
        var path = "/Dlna/icons/{Filename}"
        let filenamePreEscape = "\(filename)"
        let filenamePostEscape = filenamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Filename}", with: filenamePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "UuId": uuId
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets dlna connection manager xml

     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headDlnaByUuidConnectionmanagerConnectionmanager(uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headDlnaByUuidConnectionmanagerConnectionmanagerWithRequestBuilder(uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets dlna connection manager xml
     - HEAD /Dlna/{UuId}/connectionmanager/connectionmanager

     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func headDlnaByUuidConnectionmanagerConnectionmanagerWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/connectionmanager/connectionmanager"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets dlna connection manager xml

     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headDlnaByUuidConnectionmanagerConnectionmanagerXml(uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headDlnaByUuidConnectionmanagerConnectionmanagerXmlWithRequestBuilder(uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets dlna connection manager xml
     - HEAD /Dlna/{UuId}/connectionmanager/connectionmanager.xml

     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func headDlnaByUuidConnectionmanagerConnectionmanagerXmlWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/connectionmanager/connectionmanager.xml"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets dlna content directory xml

     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headDlnaByUuidContentdirectoryContentdirectory(uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headDlnaByUuidContentdirectoryContentdirectoryWithRequestBuilder(uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets dlna content directory xml
     - HEAD /Dlna/{UuId}/contentdirectory/contentdirectory

     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func headDlnaByUuidContentdirectoryContentdirectoryWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/contentdirectory/contentdirectory"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets dlna content directory xml

     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headDlnaByUuidContentdirectoryContentdirectoryXml(uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headDlnaByUuidContentdirectoryContentdirectoryXmlWithRequestBuilder(uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets dlna content directory xml
     - HEAD /Dlna/{UuId}/contentdirectory/contentdirectory.xml

     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func headDlnaByUuidContentdirectoryContentdirectoryXmlWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/contentdirectory/contentdirectory.xml"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets dlna server info

     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headDlnaByUuidDescription(uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headDlnaByUuidDescriptionWithRequestBuilder(uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets dlna server info
     - HEAD /Dlna/{UuId}/description

     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func headDlnaByUuidDescriptionWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/description"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets dlna server info

     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headDlnaByUuidDescriptionXml(uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headDlnaByUuidDescriptionXmlWithRequestBuilder(uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets dlna server info
     - HEAD /Dlna/{UuId}/description.xml

     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func headDlnaByUuidDescriptionXmlWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/description.xml"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Processes a control request

     - parameter body: (body) Binary stream 
     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDlnaByUuidConnectionmanagerControl(body: Object, uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postDlnaByUuidConnectionmanagerControlWithRequestBuilder(body: body, uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Processes a control request
     - POST /Dlna/{UuId}/connectionmanager/control

     - parameter body: (body) Binary stream 
     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func postDlnaByUuidConnectionmanagerControlWithRequestBuilder(body: Object, uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/connectionmanager/control"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Processes a control request

     - parameter body: (body) Binary stream 
     - parameter uuId: (path) Server UuId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDlnaByUuidContentdirectoryControl(body: Object, uuId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postDlnaByUuidContentdirectoryControlWithRequestBuilder(body: body, uuId: uuId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Processes a control request
     - POST /Dlna/{UuId}/contentdirectory/control

     - parameter body: (body) Binary stream 
     - parameter uuId: (path) Server UuId 

     - returns: RequestBuilder<Void> 
     */
    open class func postDlnaByUuidContentdirectoryControlWithRequestBuilder(body: Object, uuId: String) -> RequestBuilder<Void> {
        var path = "/Dlna/{UuId}/contentdirectory/control"
        let uuIdPreEscape = "\(uuId)"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
