//
// EncodingInfoServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class EncodingInfoServiceAPI {
    /**
     Gets default codec configurations

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEncodingCodecconfigurationDefaults(completion: @escaping ((_ data: [CodecConfiguration]?,_ error: Error?) -> Void)) {
        getEncodingCodecconfigurationDefaultsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets default codec configurations
     - GET /Encoding/CodecConfiguration/Defaults

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "IsEnabled" : true,
  "Priority" : 0,
  "CodecId" : "CodecId"
}, {
  "IsEnabled" : true,
  "Priority" : 0,
  "CodecId" : "CodecId"
} ]}]

     - returns: RequestBuilder<[CodecConfiguration]> 
     */
    open class func getEncodingCodecconfigurationDefaultsWithRequestBuilder() -> RequestBuilder<[CodecConfiguration]> {
        let path = "/Encoding/CodecConfiguration/Defaults"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[CodecConfiguration]>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets details about available video encoders and decoders

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEncodingCodecinformationVideo(completion: @escaping ((_ data: [VideoCodecBase]?,_ error: Error?) -> Void)) {
        getEncodingCodecinformationVideoWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets details about available video encoders and decoders
     - GET /Encoding/CodecInformation/Video

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "CodecKind" : "Audio",
  "MinHeight" : 2,
  "FrameworkCodec" : "FrameworkCodec",
  "Description" : "Description",
  "MaxBitRate" : {
    "bps" : 2,
    "kbps" : 4.145608029883936,
    "Mbps" : 7.386281948385884
  },
  "Direction" : "Encoder",
  "Name" : "Name",
  "SecondaryFrameworkCodec" : "SecondaryFrameworkCodec",
  "CodecDeviceInfo" : {
    "VendorName" : "VendorName",
    "DeviceId" : 1,
    "Desription" : "Desription",
    "VendorId" : 6,
    "Driver" : "Driver",
    "Adapter" : 0,
    "HardwareContextFramework" : "Unknown",
    "Name" : "Name",
    "DeviceIdentifier" : "DeviceIdentifier",
    "DriverVersion" : {
      "Major" : 0,
      "Revision" : 5,
      "Build" : 1,
      "Minor" : 6,
      "MinorRevision" : 2,
      "MajorRevision" : 5
    },
    "DrmNode" : "DrmNode",
    "Capabilities" : {
      "SupportsHwUpload" : true,
      "SupportsNativeToneMapping" : true,
      "SupportsHwDownload" : true,
      "Supports10BitProcessing" : true,
      "SupportsStandaloneDeviceInit" : true
    },
    "DevPath" : "DevPath",
    "DeviceName" : "DeviceName"
  },
  "MaxWidth" : 5,
  "ProfileAndLevelInformation" : [ {
    "Level" : {
      "ResolutionRatesDisplay" : "ResolutionRatesDisplay",
      "Description" : "Description",
      "MaxBitRateDisplay" : "MaxBitRateDisplay",
      "Ordinal" : 1,
      "ResolutionRates" : [ {
        "FrameRate" : 7.457744773683766,
        "Height" : 6,
        "Width" : 1,
        "Resolution" : {
          "Height" : 4,
          "Width" : 1
        }
      }, {
        "FrameRate" : 7.457744773683766,
        "Height" : 6,
        "Width" : 1,
        "Resolution" : {
          "Height" : 4,
          "Width" : 1
        }
      } ],
      "ShortName" : "ShortName",
      "Id" : "Id",
      "ResolutionRateStrings" : [ "ResolutionRateStrings", "ResolutionRateStrings" ]
    },
    "Profile" : {
      "Description" : "Description",
      "Details" : "Details",
      "ShortName" : "ShortName",
      "Id" : "Id",
      "BitDepths" : [ 1, 1 ]
    }
  }, {
    "Level" : {
      "ResolutionRatesDisplay" : "ResolutionRatesDisplay",
      "Description" : "Description",
      "MaxBitRateDisplay" : "MaxBitRateDisplay",
      "Ordinal" : 1,
      "ResolutionRates" : [ {
        "FrameRate" : 7.457744773683766,
        "Height" : 6,
        "Width" : 1,
        "Resolution" : {
          "Height" : 4,
          "Width" : 1
        }
      }, {
        "FrameRate" : 7.457744773683766,
        "Height" : 6,
        "Width" : 1,
        "Resolution" : {
          "Height" : 4,
          "Width" : 1
        }
      } ],
      "ShortName" : "ShortName",
      "Id" : "Id",
      "ResolutionRateStrings" : [ "ResolutionRateStrings", "ResolutionRateStrings" ]
    },
    "Profile" : {
      "Description" : "Description",
      "Details" : "Details",
      "ShortName" : "ShortName",
      "Id" : "Id",
      "BitDepths" : [ 1, 1 ]
    }
  } ],
  "DefaultPriority" : 9,
  "WidthAlignment" : 9,
  "VideoMediaType" : "Unknown",
  "MediaTypeName" : "MediaTypeName",
  "SupportedColorFormatStrings" : [ "SupportedColorFormatStrings", "SupportedColorFormatStrings" ],
  "MinWidth" : 5,
  "IsHardwareCodec" : true,
  "HeightAlignment" : 3,
  "MaxInstanceCount" : 5,
  "SupportedColorFormats" : [ "Unknown", "Unknown" ],
  "MaxHeight" : 7,
  "Id" : "Id",
  "IsEnabledByDefault" : true
}, {
  "CodecKind" : "Audio",
  "MinHeight" : 2,
  "FrameworkCodec" : "FrameworkCodec",
  "Description" : "Description",
  "MaxBitRate" : {
    "bps" : 2,
    "kbps" : 4.145608029883936,
    "Mbps" : 7.386281948385884
  },
  "Direction" : "Encoder",
  "Name" : "Name",
  "SecondaryFrameworkCodec" : "SecondaryFrameworkCodec",
  "CodecDeviceInfo" : {
    "VendorName" : "VendorName",
    "DeviceId" : 1,
    "Desription" : "Desription",
    "VendorId" : 6,
    "Driver" : "Driver",
    "Adapter" : 0,
    "HardwareContextFramework" : "Unknown",
    "Name" : "Name",
    "DeviceIdentifier" : "DeviceIdentifier",
    "DriverVersion" : {
      "Major" : 0,
      "Revision" : 5,
      "Build" : 1,
      "Minor" : 6,
      "MinorRevision" : 2,
      "MajorRevision" : 5
    },
    "DrmNode" : "DrmNode",
    "Capabilities" : {
      "SupportsHwUpload" : true,
      "SupportsNativeToneMapping" : true,
      "SupportsHwDownload" : true,
      "Supports10BitProcessing" : true,
      "SupportsStandaloneDeviceInit" : true
    },
    "DevPath" : "DevPath",
    "DeviceName" : "DeviceName"
  },
  "MaxWidth" : 5,
  "ProfileAndLevelInformation" : [ {
    "Level" : {
      "ResolutionRatesDisplay" : "ResolutionRatesDisplay",
      "Description" : "Description",
      "MaxBitRateDisplay" : "MaxBitRateDisplay",
      "Ordinal" : 1,
      "ResolutionRates" : [ {
        "FrameRate" : 7.457744773683766,
        "Height" : 6,
        "Width" : 1,
        "Resolution" : {
          "Height" : 4,
          "Width" : 1
        }
      }, {
        "FrameRate" : 7.457744773683766,
        "Height" : 6,
        "Width" : 1,
        "Resolution" : {
          "Height" : 4,
          "Width" : 1
        }
      } ],
      "ShortName" : "ShortName",
      "Id" : "Id",
      "ResolutionRateStrings" : [ "ResolutionRateStrings", "ResolutionRateStrings" ]
    },
    "Profile" : {
      "Description" : "Description",
      "Details" : "Details",
      "ShortName" : "ShortName",
      "Id" : "Id",
      "BitDepths" : [ 1, 1 ]
    }
  }, {
    "Level" : {
      "ResolutionRatesDisplay" : "ResolutionRatesDisplay",
      "Description" : "Description",
      "MaxBitRateDisplay" : "MaxBitRateDisplay",
      "Ordinal" : 1,
      "ResolutionRates" : [ {
        "FrameRate" : 7.457744773683766,
        "Height" : 6,
        "Width" : 1,
        "Resolution" : {
          "Height" : 4,
          "Width" : 1
        }
      }, {
        "FrameRate" : 7.457744773683766,
        "Height" : 6,
        "Width" : 1,
        "Resolution" : {
          "Height" : 4,
          "Width" : 1
        }
      } ],
      "ShortName" : "ShortName",
      "Id" : "Id",
      "ResolutionRateStrings" : [ "ResolutionRateStrings", "ResolutionRateStrings" ]
    },
    "Profile" : {
      "Description" : "Description",
      "Details" : "Details",
      "ShortName" : "ShortName",
      "Id" : "Id",
      "BitDepths" : [ 1, 1 ]
    }
  } ],
  "DefaultPriority" : 9,
  "WidthAlignment" : 9,
  "VideoMediaType" : "Unknown",
  "MediaTypeName" : "MediaTypeName",
  "SupportedColorFormatStrings" : [ "SupportedColorFormatStrings", "SupportedColorFormatStrings" ],
  "MinWidth" : 5,
  "IsHardwareCodec" : true,
  "HeightAlignment" : 3,
  "MaxInstanceCount" : 5,
  "SupportedColorFormats" : [ "Unknown", "Unknown" ],
  "MaxHeight" : 7,
  "Id" : "Id",
  "IsEnabledByDefault" : true
} ]}]

     - returns: RequestBuilder<[VideoCodecBase]> 
     */
    open class func getEncodingCodecinformationVideoWithRequestBuilder() -> RequestBuilder<[VideoCodecBase]> {
        let path = "/Encoding/CodecInformation/Video"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[VideoCodecBase]>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets available tone mapping options

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEncodingTonemapoptions(completion: @escaping ((_ data: ConfigurationToneMappingToneMapOptionsVisibility?,_ error: Error?) -> Void)) {
        getEncodingTonemapoptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets available tone mapping options
     - GET /Encoding/ToneMapOptions

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "OperatingSystem" : "Windows",
  "IsSoftwareToneMappingAvailable" : true,
  "ShowQuickSyncOptions" : true,
  "ShowAdvanced" : true,
  "IsVaapiNativeAvailable" : true,
  "IsAnyHardwareToneMappingAvailable" : true,
  "ShowVaapiOptions" : true,
  "ShowNvidiaOptions" : true,
  "IsOpenClAvailable" : true,
  "IsQuickSyncNativeAvailable" : true,
  "IsOpenClSuperTAvailable" : true
}}]

     - returns: RequestBuilder<ConfigurationToneMappingToneMapOptionsVisibility> 
     */
    open class func getEncodingTonemapoptionsWithRequestBuilder() -> RequestBuilder<ConfigurationToneMappingToneMapOptionsVisibility> {
        let path = "/Encoding/ToneMapOptions"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ConfigurationToneMappingToneMapOptionsVisibility>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
