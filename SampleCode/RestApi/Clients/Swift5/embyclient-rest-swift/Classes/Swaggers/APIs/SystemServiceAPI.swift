//
// SystemServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SystemServiceAPI {
    /**
     Gets information about the request endpoint

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSystemEndpoint(completion: @escaping ((_ data: NetEndPointInfo?,_ error: Error?) -> Void)) {
        getSystemEndpointWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets information about the request endpoint
     - GET /System/Endpoint

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "IsLocal" : true,
  "IsInNetwork" : true
}}]

     - returns: RequestBuilder<NetEndPointInfo> 
     */
    open class func getSystemEndpointWithRequestBuilder() -> RequestBuilder<NetEndPointInfo> {
        let path = "/System/Endpoint"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<NetEndPointInfo>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets information about the server

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSystemInfo(completion: @escaping ((_ data: SystemInfo?,_ error: Error?) -> Void)) {
        getSystemInfoWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets information about the server
     - GET /System/Info

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "OperatingSystem" : "OperatingSystem",
  "HasImageEnhancers" : true,
  "PackageName" : "PackageName",
  "LocalAddresses" : [ "LocalAddresses", "LocalAddresses" ],
  "CanSelfUpdate" : true,
  "TranscodingTempPath" : "TranscodingTempPath",
  "CanSelfRestart" : true,
  "HardwareAccelerationRequiresPremiere" : true,
  "Version" : "Version",
  "CachePath" : "CachePath",
  "HasPendingRestart" : true,
  "HttpServerPortNumber" : 1,
  "RemoteAddresses" : [ "RemoteAddresses", "RemoteAddresses" ],
  "ProgramDataPath" : "ProgramDataPath",
  "SupportsLibraryMonitor" : true,
  "LocalAddress" : "LocalAddress",
  "WanAddress" : "WanAddress",
  "CanLaunchWebBrowser" : true,
  "SupportsAutoRunAtStartup" : true,
  "IsShuttingDown" : true,
  "HttpsPortNumber" : 5,
  "SupportsHttps" : true,
  "ItemsByNamePath" : "ItemsByNamePath",
  "SupportsWakeServer" : true,
  "WebSocketPortNumber" : 0,
  "CompletedInstallations" : [ {
    "AssemblyGuid" : "AssemblyGuid",
    "Version" : "Version",
    "PercentComplete" : 6.027456183070403,
    "Id" : "Id",
    "Name" : "Name"
  }, {
    "AssemblyGuid" : "AssemblyGuid",
    "Version" : "Version",
    "PercentComplete" : 6.027456183070403,
    "Id" : "Id",
    "Name" : "Name"
  } ],
  "WakeOnLanInfo" : [ {
    "BroadcastAddress" : "BroadcastAddress",
    "Port" : 0,
    "MacAddress" : "MacAddress"
  }, {
    "BroadcastAddress" : "BroadcastAddress",
    "Port" : 0,
    "MacAddress" : "MacAddress"
  } ],
  "OperatingSystemDisplayName" : "OperatingSystemDisplayName",
  "InternalMetadataPath" : "InternalMetadataPath",
  "ServerName" : "ServerName",
  "SupportsLocalPortConfiguration" : true,
  "Id" : "Id",
  "HasUpdateAvailable" : true,
  "LogPath" : "LogPath",
  "SystemUpdateLevel" : "Release"
}}]

     - returns: RequestBuilder<SystemInfo> 
     */
    open class func getSystemInfoWithRequestBuilder() -> RequestBuilder<SystemInfo> {
        let path = "/System/Info"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SystemInfo>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets public information about the server

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSystemInfoPublic(completion: @escaping ((_ data: PublicSystemInfo?,_ error: Error?) -> Void)) {
        getSystemInfoPublicWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets public information about the server
     - GET /System/Info/Public

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "LocalAddress" : "LocalAddress",
  "WanAddress" : "WanAddress",
  "Version" : "Version",
  "LocalAddresses" : [ "LocalAddresses", "LocalAddresses" ],
  "ServerName" : "ServerName",
  "RemoteAddresses" : [ "RemoteAddresses", "RemoteAddresses" ],
  "Id" : "Id"
}}]

     - returns: RequestBuilder<PublicSystemInfo> 
     */
    open class func getSystemInfoPublicWithRequestBuilder() -> RequestBuilder<PublicSystemInfo> {
        let path = "/System/Info/Public"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PublicSystemInfo>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a log file

     - parameter name: (path) The log file name. 
     - parameter sanitize: (query) Return sanitized log (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSystemLogsByName(name: String, sanitize: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getSystemLogsByNameWithRequestBuilder(name: name, sanitize: sanitize).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets a log file
     - GET /System/Logs/{Name}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) The log file name. 
     - parameter sanitize: (query) Return sanitized log (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getSystemLogsByNameWithRequestBuilder(name: String, sanitize: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/System/Logs/{Name}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Sanitize": sanitize
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a log file

     - parameter name: (path) The log file name. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSystemLogsByNameLines(name: String, completion: @escaping ((_ data: QueryResultString?,_ error: Error?) -> Void)) {
        getSystemLogsByNameLinesWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a log file
     - GET /System/Logs/{Name}/Lines

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "TotalRecordCount" : 0,
  "Items" : [ "Items", "Items" ]
}}]
     - parameter name: (path) The log file name. 

     - returns: RequestBuilder<QueryResultString> 
     */
    open class func getSystemLogsByNameLinesWithRequestBuilder(name: String) -> RequestBuilder<QueryResultString> {
        var path = "/System/Logs/{Name}/Lines"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<QueryResultString>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a list of available server log files

     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSystemLogsQuery(startIndex: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: QueryResultLogFile?,_ error: Error?) -> Void)) {
        getSystemLogsQueryWithRequestBuilder(startIndex: startIndex, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a list of available server log files
     - GET /System/Logs/Query

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "TotalRecordCount" : 6,
  "Items" : [ {
    "Size" : 0,
    "DateCreated" : "2000-01-23T04:56:07.000+00:00",
    "DateModified" : "2000-01-23T04:56:07.000+00:00",
    "Name" : "Name"
  }, {
    "Size" : 0,
    "DateCreated" : "2000-01-23T04:56:07.000+00:00",
    "DateModified" : "2000-01-23T04:56:07.000+00:00",
    "Name" : "Name"
  } ]
}}]
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)

     - returns: RequestBuilder<QueryResultLogFile> 
     */
    open class func getSystemLogsQueryWithRequestBuilder(startIndex: Int? = nil, limit: Int? = nil) -> RequestBuilder<QueryResultLogFile> {
        let path = "/System/Logs/Query"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "StartIndex": startIndex?.encodeToJSON(), 
                        "Limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<QueryResultLogFile>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSystemPing(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getSystemPingWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /System/Ping

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth

     - returns: RequestBuilder<Void> 
     */
    open class func getSystemPingWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/System/Ping"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets release notes

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSystemReleasenotes(completion: @escaping ((_ data: PackageVersionInfo?,_ error: Error?) -> Void)) {
        getSystemReleasenotesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets release notes
     - GET /System/ReleaseNotes

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "sourceUrl" : "sourceUrl",
  "versionStr" : "versionStr",
  "runtimes" : "runtimes",
  "requiredVersionStr" : "requiredVersionStr",
  "infoUrl" : "infoUrl",
  "targetFilename" : "targetFilename",
  "name" : "name",
  "checksum" : "checksum",
  "guid" : "guid",
  "description" : "description",
  "classification" : "Release",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}}]

     - returns: RequestBuilder<PackageVersionInfo> 
     */
    open class func getSystemReleasenotesWithRequestBuilder() -> RequestBuilder<PackageVersionInfo> {
        let path = "/System/ReleaseNotes"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PackageVersionInfo>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets release notes

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSystemReleasenotesVersions(completion: @escaping ((_ data: [PackageVersionInfo]?,_ error: Error?) -> Void)) {
        getSystemReleasenotesVersionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets release notes
     - GET /System/ReleaseNotes/Versions

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "sourceUrl" : "sourceUrl",
  "versionStr" : "versionStr",
  "runtimes" : "runtimes",
  "requiredVersionStr" : "requiredVersionStr",
  "infoUrl" : "infoUrl",
  "targetFilename" : "targetFilename",
  "name" : "name",
  "checksum" : "checksum",
  "guid" : "guid",
  "description" : "description",
  "classification" : "Release",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "sourceUrl" : "sourceUrl",
  "versionStr" : "versionStr",
  "runtimes" : "runtimes",
  "requiredVersionStr" : "requiredVersionStr",
  "infoUrl" : "infoUrl",
  "targetFilename" : "targetFilename",
  "name" : "name",
  "checksum" : "checksum",
  "guid" : "guid",
  "description" : "description",
  "classification" : "Release",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]

     - returns: RequestBuilder<[PackageVersionInfo]> 
     */
    open class func getSystemReleasenotesVersionsWithRequestBuilder() -> RequestBuilder<[PackageVersionInfo]> {
        let path = "/System/ReleaseNotes/Versions"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[PackageVersionInfo]>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets wake on lan information

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSystemWakeonlaninfo(completion: @escaping ((_ data: [WakeOnLanInfo]?,_ error: Error?) -> Void)) {
        getSystemWakeonlaninfoWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets wake on lan information
     - GET /System/WakeOnLanInfo

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "BroadcastAddress" : "BroadcastAddress",
  "Port" : 0,
  "MacAddress" : "MacAddress"
}, {
  "BroadcastAddress" : "BroadcastAddress",
  "Port" : 0,
  "MacAddress" : "MacAddress"
} ]}]

     - returns: RequestBuilder<[WakeOnLanInfo]> 
     */
    open class func getSystemWakeonlaninfoWithRequestBuilder() -> RequestBuilder<[WakeOnLanInfo]> {
        let path = "/System/WakeOnLanInfo"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[WakeOnLanInfo]>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSystemPing(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSystemPingWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /System/Ping

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth

     - returns: RequestBuilder<Void> 
     */
    open class func postSystemPingWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/System/Ping"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Restarts the application, if needed

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSystemRestart(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSystemRestartWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Restarts the application, if needed
     - POST /System/Restart

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth

     - returns: RequestBuilder<Void> 
     */
    open class func postSystemRestartWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/System/Restart"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Shuts down the application

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSystemShutdown(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSystemShutdownWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Shuts down the application
     - POST /System/Shutdown

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth

     - returns: RequestBuilder<Void> 
     */
    open class func postSystemShutdownWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/System/Shutdown"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
