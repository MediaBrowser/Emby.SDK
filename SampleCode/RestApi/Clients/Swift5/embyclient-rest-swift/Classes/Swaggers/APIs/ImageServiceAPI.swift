//
// ImageServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ImageServiceAPI {
    /**

     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteItemsByIdImagesByType(_id: String, type: ImageType, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteItemsByIdImagesByTypeWithRequestBuilder(_id: _id, type: type, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /Items/{Id}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteItemsByIdImagesByTypeWithRequestBuilder(_id: String, type: ImageType, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteItemsByIdImagesByTypeByIndex(_id: String, type: ImageType, index: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteItemsByIdImagesByTypeByIndexWithRequestBuilder(_id: _id, type: type, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /Items/{Id}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteItemsByIdImagesByTypeByIndexWithRequestBuilder(_id: String, type: ImageType, index: Int) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}/{Index}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUsersByIdImagesByType(_id: String, type: ImageType, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteUsersByIdImagesByTypeWithRequestBuilder(_id: _id, type: type, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /Users/{Id}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUsersByIdImagesByTypeWithRequestBuilder(_id: String, type: ImageType, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Users/{Id}/Images/{Type}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUsersByIdImagesByTypeByIndex(_id: String, type: ImageType, index: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteUsersByIdImagesByTypeByIndexWithRequestBuilder(_id: _id, type: type, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /Users/{Id}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUsersByIdImagesByTypeByIndexWithRequestBuilder(_id: String, type: ImageType, index: Int) -> RequestBuilder<Void> {
        var path = "/Users/{Id}/Images/{Type}/{Index}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArtistsByNameImagesByType(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getArtistsByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Artists/{Name}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getArtistsByNameImagesByTypeWithRequestBuilder(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Artists/{Name}/Images/{Type}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArtistsByNameImagesByTypeByIndex(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getArtistsByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Artists/{Name}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getArtistsByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Artists/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamegenresByNameImagesByType(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getGamegenresByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /GameGenres/{Name}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getGamegenresByNameImagesByTypeWithRequestBuilder(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/GameGenres/{Name}/Images/{Type}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamegenresByNameImagesByTypeByIndex(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getGamegenresByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /GameGenres/{Name}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getGamegenresByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/GameGenres/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGenresByNameImagesByType(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getGenresByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Genres/{Name}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getGenresByNameImagesByTypeWithRequestBuilder(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Genres/{Name}/Images/{Type}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGenresByNameImagesByTypeByIndex(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getGenresByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Genres/{Name}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getGenresByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Genres/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets information about an item's images

     - parameter _id: (path) Item Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemsByIdImages(_id: String, completion: @escaping ((_ data: [ImageInfo]?,_ error: Error?) -> Void)) {
        getItemsByIdImagesWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets information about an item's images
     - GET /Items/{Id}/Images

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "Path" : "Path",
  "Size" : 5,
  "Filename" : "Filename",
  "Height" : 6,
  "ImageIndex" : 0,
  "Width" : 1,
  "ImageType" : "Primary"
}, {
  "Path" : "Path",
  "Size" : 5,
  "Filename" : "Filename",
  "Height" : 6,
  "ImageIndex" : 0,
  "Width" : 1,
  "ImageType" : "Primary"
} ]}]
     - parameter _id: (path) Item Id 

     - returns: RequestBuilder<[ImageInfo]> 
     */
    open class func getItemsByIdImagesWithRequestBuilder(_id: String) -> RequestBuilder<[ImageInfo]> {
        var path = "/Items/{Id}/Images"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ImageInfo]>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemsByIdImagesByType(_id: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getItemsByIdImagesByTypeWithRequestBuilder(_id: _id, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Items/{Id}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getItemsByIdImagesByTypeWithRequestBuilder(_id: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemsByIdImagesByTypeByIndex(_id: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getItemsByIdImagesByTypeByIndexWithRequestBuilder(_id: _id, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Items/{Id}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getItemsByIdImagesByTypeByIndexWithRequestBuilder(_id: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}/{Index}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter percentPlayed: (path)  
     - parameter unPlayedCount: (path)  
     - parameter _id: (path) Item Id 
     - parameter maxWidth: (path) The maximum image width to return. 
     - parameter maxHeight: (path) The maximum image height to return. 
     - parameter tag: (path) Optional. Supply the cache tag from the item object to receive strong caching headers. 
     - parameter format: (path) Determines the output foramt of the image - original,gif,jpg,png 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount(percentPlayed: Int, unPlayedCount: Int, _id: String, maxWidth: Int, maxHeight: Int, tag: String, format: String, type: ImageType, index: Int, width: Int? = nil, height: Int? = nil, quality: Int? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithRequestBuilder(percentPlayed: percentPlayed, unPlayedCount: unPlayedCount, _id: _id, maxWidth: maxWidth, maxHeight: maxHeight, tag: tag, format: format, type: type, index: index, width: width, height: height, quality: quality, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter percentPlayed: (path)  
     - parameter unPlayedCount: (path)  
     - parameter _id: (path) Item Id 
     - parameter maxWidth: (path) The maximum image width to return. 
     - parameter maxHeight: (path) The maximum image height to return. 
     - parameter tag: (path) Optional. Supply the cache tag from the item object to receive strong caching headers. 
     - parameter format: (path) Determines the output foramt of the image - original,gif,jpg,png 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithRequestBuilder(percentPlayed: Int, unPlayedCount: Int, _id: String, maxWidth: Int, maxHeight: Int, tag: String, format: String, type: ImageType, index: Int, width: Int? = nil, height: Int? = nil, quality: Int? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}"
        let percentPlayedPreEscape = "\(percentPlayed)"
        let percentPlayedPostEscape = percentPlayedPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{PercentPlayed}", with: percentPlayedPostEscape, options: .literal, range: nil)
        let unPlayedCountPreEscape = "\(unPlayedCount)"
        let unPlayedCountPostEscape = unPlayedCountPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UnPlayedCount}", with: unPlayedCountPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let maxWidthPreEscape = "\(maxWidth)"
        let maxWidthPostEscape = maxWidthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{MaxWidth}", with: maxWidthPostEscape, options: .literal, range: nil)
        let maxHeightPreEscape = "\(maxHeight)"
        let maxHeightPostEscape = maxHeightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{MaxHeight}", with: maxHeightPostEscape, options: .literal, range: nil)
        let tagPreEscape = "\(tag)"
        let tagPostEscape = tagPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Tag}", with: tagPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(format)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Format}", with: formatPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMusicgenresByNameImagesByType(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getMusicgenresByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /MusicGenres/{Name}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getMusicgenresByNameImagesByTypeWithRequestBuilder(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/MusicGenres/{Name}/Images/{Type}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMusicgenresByNameImagesByTypeByIndex(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getMusicgenresByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /MusicGenres/{Name}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getMusicgenresByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/MusicGenres/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPersonsByNameImagesByType(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getPersonsByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Persons/{Name}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getPersonsByNameImagesByTypeWithRequestBuilder(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Persons/{Name}/Images/{Type}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPersonsByNameImagesByTypeByIndex(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getPersonsByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Persons/{Name}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getPersonsByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Persons/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStudiosByNameImagesByType(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getStudiosByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Studios/{Name}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getStudiosByNameImagesByTypeWithRequestBuilder(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Studios/{Name}/Images/{Type}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStudiosByNameImagesByTypeByIndex(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getStudiosByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Studios/{Name}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getStudiosByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Studios/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersByIdImagesByType(_id: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getUsersByIdImagesByTypeWithRequestBuilder(_id: _id, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Users/{Id}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Authentication
    url: https://dev.emby.media/doc/restapi/User-Authentication.html
}
     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getUsersByIdImagesByTypeWithRequestBuilder(_id: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Users/{Id}/Images/{Type}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersByIdImagesByTypeByIndex(_id: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getUsersByIdImagesByTypeByIndexWithRequestBuilder(_id: _id, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Users/{Id}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getUsersByIdImagesByTypeByIndexWithRequestBuilder(_id: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Users/{Id}/Images/{Type}/{Index}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headArtistsByNameImagesByType(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headArtistsByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /Artists/{Name}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headArtistsByNameImagesByTypeWithRequestBuilder(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Artists/{Name}/Images/{Type}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headArtistsByNameImagesByTypeByIndex(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headArtistsByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /Artists/{Name}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headArtistsByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Artists/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headGamegenresByNameImagesByType(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headGamegenresByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /GameGenres/{Name}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headGamegenresByNameImagesByTypeWithRequestBuilder(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/GameGenres/{Name}/Images/{Type}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headGamegenresByNameImagesByTypeByIndex(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headGamegenresByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /GameGenres/{Name}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headGamegenresByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/GameGenres/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headGenresByNameImagesByType(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headGenresByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /Genres/{Name}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headGenresByNameImagesByTypeWithRequestBuilder(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Genres/{Name}/Images/{Type}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headGenresByNameImagesByTypeByIndex(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headGenresByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /Genres/{Name}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headGenresByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Genres/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headItemsByIdImagesByType(_id: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headItemsByIdImagesByTypeWithRequestBuilder(_id: _id, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /Items/{Id}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headItemsByIdImagesByTypeWithRequestBuilder(_id: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headItemsByIdImagesByTypeByIndex(_id: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headItemsByIdImagesByTypeByIndexWithRequestBuilder(_id: _id, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /Items/{Id}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headItemsByIdImagesByTypeByIndexWithRequestBuilder(_id: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}/{Index}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter percentPlayed: (path)  
     - parameter unPlayedCount: (path)  
     - parameter _id: (path) Item Id 
     - parameter maxWidth: (path) The maximum image width to return. 
     - parameter maxHeight: (path) The maximum image height to return. 
     - parameter tag: (path) Optional. Supply the cache tag from the item object to receive strong caching headers. 
     - parameter format: (path) Determines the output foramt of the image - original,gif,jpg,png 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount(percentPlayed: Int, unPlayedCount: Int, _id: String, maxWidth: Int, maxHeight: Int, tag: String, format: String, type: ImageType, index: Int, width: Int? = nil, height: Int? = nil, quality: Int? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithRequestBuilder(percentPlayed: percentPlayed, unPlayedCount: unPlayedCount, _id: _id, maxWidth: maxWidth, maxHeight: maxHeight, tag: tag, format: format, type: type, index: index, width: width, height: height, quality: quality, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter percentPlayed: (path)  
     - parameter unPlayedCount: (path)  
     - parameter _id: (path) Item Id 
     - parameter maxWidth: (path) The maximum image width to return. 
     - parameter maxHeight: (path) The maximum image height to return. 
     - parameter tag: (path) Optional. Supply the cache tag from the item object to receive strong caching headers. 
     - parameter format: (path) Determines the output foramt of the image - original,gif,jpg,png 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithRequestBuilder(percentPlayed: Int, unPlayedCount: Int, _id: String, maxWidth: Int, maxHeight: Int, tag: String, format: String, type: ImageType, index: Int, width: Int? = nil, height: Int? = nil, quality: Int? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}"
        let percentPlayedPreEscape = "\(percentPlayed)"
        let percentPlayedPostEscape = percentPlayedPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{PercentPlayed}", with: percentPlayedPostEscape, options: .literal, range: nil)
        let unPlayedCountPreEscape = "\(unPlayedCount)"
        let unPlayedCountPostEscape = unPlayedCountPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UnPlayedCount}", with: unPlayedCountPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let maxWidthPreEscape = "\(maxWidth)"
        let maxWidthPostEscape = maxWidthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{MaxWidth}", with: maxWidthPostEscape, options: .literal, range: nil)
        let maxHeightPreEscape = "\(maxHeight)"
        let maxHeightPostEscape = maxHeightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{MaxHeight}", with: maxHeightPostEscape, options: .literal, range: nil)
        let tagPreEscape = "\(tag)"
        let tagPostEscape = tagPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Tag}", with: tagPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(format)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Format}", with: formatPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headMusicgenresByNameImagesByType(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headMusicgenresByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /MusicGenres/{Name}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headMusicgenresByNameImagesByTypeWithRequestBuilder(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/MusicGenres/{Name}/Images/{Type}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headMusicgenresByNameImagesByTypeByIndex(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headMusicgenresByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /MusicGenres/{Name}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headMusicgenresByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/MusicGenres/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headPersonsByNameImagesByType(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headPersonsByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /Persons/{Name}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headPersonsByNameImagesByTypeWithRequestBuilder(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Persons/{Name}/Images/{Type}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headPersonsByNameImagesByTypeByIndex(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headPersonsByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /Persons/{Name}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headPersonsByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Persons/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headStudiosByNameImagesByType(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headStudiosByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /Studios/{Name}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headStudiosByNameImagesByTypeWithRequestBuilder(name: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Studios/{Name}/Images/{Type}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headStudiosByNameImagesByTypeByIndex(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headStudiosByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /Studios/{Name}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headStudiosByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Studios/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headUsersByIdImagesByType(_id: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headUsersByIdImagesByTypeWithRequestBuilder(_id: _id, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /Users/{Id}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headUsersByIdImagesByTypeWithRequestBuilder(_id: String, type: ImageType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Users/{Id}/Images/{Type}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation, 
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headUsersByIdImagesByTypeByIndex(_id: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        headUsersByIdImagesByTypeByIndexWithRequestBuilder(_id: _id, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, autoOrient: autoOrient, keepAnimation: keepAnimation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - HEAD /Users/{Id}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter autoOrient: (query) Set to true to force normalization of orientation in the event the renderer does not support it. (optional)
     - parameter keepAnimation: (query) Set to true to retain image animation (when supported). (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func headUsersByIdImagesByTypeByIndexWithRequestBuilder(_id: String, type: ImageType, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, autoOrient: Bool? = nil, keepAnimation: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Users/{Id}/Images/{Type}/{Index}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MaxWidth": maxWidth?.encodeToJSON(), 
                        "MaxHeight": maxHeight?.encodeToJSON(), 
                        "Width": width?.encodeToJSON(), 
                        "Height": height?.encodeToJSON(), 
                        "Quality": quality?.encodeToJSON(), 
                        "Tag": tag, 
                        "CropWhitespace": cropWhitespace, 
                        "EnableImageEnhancers": enableImageEnhancers, 
                        "Format": format, 
                        "BackgroundColor": backgroundColor, 
                        "ForegroundLayer": foregroundLayer, 
                        "AutoOrient": autoOrient, 
                        "KeepAnimation": keepAnimation
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Uploads an image for an item, must be base64 encoded.

     - parameter body: (body) Binary stream 
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postItemsByIdImagesByType(body: Object, _id: String, type: ImageType, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postItemsByIdImagesByTypeWithRequestBuilder(body: body, _id: _id, type: type, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Uploads an image for an item, must be base64 encoded.
     - POST /Items/{Id}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) Binary stream 
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postItemsByIdImagesByTypeWithRequestBuilder(body: Object, _id: String, type: ImageType, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Uploads an image for an item, must be base64 encoded.

     - parameter body: (body) Binary stream 
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postItemsByIdImagesByTypeByIndex(body: Object, _id: String, type: ImageType, index: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postItemsByIdImagesByTypeByIndexWithRequestBuilder(body: body, _id: _id, type: type, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Uploads an image for an item, must be base64 encoded.
     - POST /Items/{Id}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) Binary stream 
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 

     - returns: RequestBuilder<Void> 
     */
    open class func postItemsByIdImagesByTypeByIndexWithRequestBuilder(body: Object, _id: String, type: ImageType, index: Int) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}/{Index}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postItemsByIdImagesByTypeByIndexDelete(_id: String, type: ImageType, index: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postItemsByIdImagesByTypeByIndexDeleteWithRequestBuilder(_id: _id, type: type, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /Items/{Id}/Images/{Type}/{Index}/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 

     - returns: RequestBuilder<Void> 
     */
    open class func postItemsByIdImagesByTypeByIndexDeleteWithRequestBuilder(_id: String, type: ImageType, index: Int) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}/{Index}/Delete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Updates the index for an item image

     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter newIndex: (query) The new image index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postItemsByIdImagesByTypeByIndexIndex(_id: String, type: ImageType, index: Int, newIndex: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postItemsByIdImagesByTypeByIndexIndexWithRequestBuilder(_id: _id, type: type, index: index, newIndex: newIndex).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates the index for an item image
     - POST /Items/{Id}/Images/{Type}/{Index}/Index

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter newIndex: (query) The new image index 

     - returns: RequestBuilder<Void> 
     */
    open class func postItemsByIdImagesByTypeByIndexIndexWithRequestBuilder(_id: String, type: ImageType, index: Int, newIndex: Int) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}/{Index}/Index"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "NewIndex": newIndex.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Updates the index for an item image

     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter url: (query) The url for the new image 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postItemsByIdImagesByTypeByIndexUrl(_id: String, type: ImageType, index: Int, url: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postItemsByIdImagesByTypeByIndexUrlWithRequestBuilder(_id: _id, type: type, index: index, url: url).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates the index for an item image
     - POST /Items/{Id}/Images/{Type}/{Index}/Url

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter url: (query) The url for the new image 

     - returns: RequestBuilder<Void> 
     */
    open class func postItemsByIdImagesByTypeByIndexUrlWithRequestBuilder(_id: String, type: ImageType, index: Int, url: String) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}/{Index}/Url"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Url": url
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postItemsByIdImagesByTypeDelete(_id: String, type: ImageType, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postItemsByIdImagesByTypeDeleteWithRequestBuilder(_id: _id, type: type, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /Items/{Id}/Images/{Type}/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postItemsByIdImagesByTypeDeleteWithRequestBuilder(_id: String, type: ImageType, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Images/{Type}/Delete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Uploads an image for an item, must be base64 encoded.

     - parameter body: (body) Binary stream 
     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersByIdImagesByType(body: Object, _id: String, type: ImageType, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUsersByIdImagesByTypeWithRequestBuilder(body: body, _id: _id, type: type, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Uploads an image for an item, must be base64 encoded.
     - POST /Users/{Id}/Images/{Type}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) Binary stream 
     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postUsersByIdImagesByTypeWithRequestBuilder(body: Object, _id: String, type: ImageType, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Users/{Id}/Images/{Type}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Uploads an image for an item, must be base64 encoded.

     - parameter body: (body) Binary stream 
     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersByIdImagesByTypeByIndex(body: Object, _id: String, type: ImageType, index: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUsersByIdImagesByTypeByIndexWithRequestBuilder(body: body, _id: _id, type: type, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Uploads an image for an item, must be base64 encoded.
     - POST /Users/{Id}/Images/{Type}/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) Binary stream 
     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 

     - returns: RequestBuilder<Void> 
     */
    open class func postUsersByIdImagesByTypeByIndexWithRequestBuilder(body: Object, _id: String, type: ImageType, index: Int) -> RequestBuilder<Void> {
        var path = "/Users/{Id}/Images/{Type}/{Index}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersByIdImagesByTypeByIndexDelete(_id: String, type: ImageType, index: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUsersByIdImagesByTypeByIndexDeleteWithRequestBuilder(_id: _id, type: type, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /Users/{Id}/Images/{Type}/{Index}/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 

     - returns: RequestBuilder<Void> 
     */
    open class func postUsersByIdImagesByTypeByIndexDeleteWithRequestBuilder(_id: String, type: ImageType, index: Int) -> RequestBuilder<Void> {
        var path = "/Users/{Id}/Images/{Type}/{Index}/Delete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersByIdImagesByTypeDelete(_id: String, type: ImageType, index: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postUsersByIdImagesByTypeDeleteWithRequestBuilder(_id: _id, type: type, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /Users/{Id}/Images/{Type}/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postUsersByIdImagesByTypeDeleteWithRequestBuilder(_id: String, type: ImageType, index: Int? = nil) -> RequestBuilder<Void> {
        var path = "/Users/{Id}/Images/{Type}/Delete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Index": index?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
