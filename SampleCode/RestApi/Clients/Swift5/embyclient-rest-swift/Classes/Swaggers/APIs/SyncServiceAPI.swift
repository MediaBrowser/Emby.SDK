//
// SyncServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SyncServiceAPI {
    /**
     Cancels items from a sync target

     - parameter targetId: (path) TargetId 
     - parameter itemIds: (query) ItemIds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSyncByTargetidItems(targetId: String, itemIds: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteSyncByTargetidItemsWithRequestBuilder(targetId: targetId, itemIds: itemIds).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Cancels items from a sync target
     - DELETE /Sync/{TargetId}/Items

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter targetId: (path) TargetId 
     - parameter itemIds: (query) ItemIds (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSyncByTargetidItemsWithRequestBuilder(targetId: String, itemIds: String? = nil) -> RequestBuilder<Void> {
        var path = "/Sync/{TargetId}/Items"
        let targetIdPreEscape = "\(targetId)"
        let targetIdPostEscape = targetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{TargetId}", with: targetIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "ItemIds": itemIds
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Cancels a sync job item

     - parameter _id: (path) Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSyncJobitemsById(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteSyncJobitemsByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Cancels a sync job item
     - DELETE /Sync/JobItems/{Id}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSyncJobitemsByIdWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Sync/JobItems/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Cancels a sync job.

     - parameter _id: (path) Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSyncJobsById(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteSyncJobsByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Cancels a sync job.
     - DELETE /Sync/Jobs/{Id}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSyncJobsByIdWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Sync/Jobs/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets ready to download sync items.

     - parameter targetId: (query) TargetId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSyncItemsReady(targetId: String, completion: @escaping ((_ data: [SyncedItem]?,_ error: Error?) -> Void)) {
        getSyncItemsReadyWithRequestBuilder(targetId: targetId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets ready to download sync items.
     - GET /Sync/Items/Ready

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "Item" : {
    "SeasonName" : "SeasonName",
    "PremiereDate" : "2000-01-23T04:56:07.000+00:00",
    "Size" : 2,
    "CriticRating" : 6.4384236,
    "GameSystemId" : 3,
    "Studios" : [ {
      "Id" : 3,
      "Name" : "Name"
    }, {
      "Id" : 3,
      "Name" : "Name"
    } ],
    "CameraMake" : "CameraMake",
    "Aperture" : 1.041444916118296,
    "ChannelPrimaryImageTag" : "ChannelPrimaryImageTag",
    "ExtraType" : "ExtraType",
    "ParentBackdropItemId" : "ParentBackdropItemId",
    "Etag" : "Etag",
    "ParentLogoImageTag" : "ParentLogoImageTag",
    "ExposureTime" : 6.628464275087742,
    "MediaType" : "MediaType",
    "ManagementId" : "ManagementId",
    "Tags" : [ "Tags", "Tags" ],
    "Status" : "Status",
    "IndexNumberEnd" : 6,
    "ArtistItems" : [ {
      "Id" : "Id",
      "Name" : "Name"
    }, {
      "Id" : "Id",
      "Name" : "Name"
    } ],
    "MediaSources" : [ {
      "EncoderPath" : "EncoderPath",
      "RequiredHttpHeaders" : {
        "key" : "RequiredHttpHeaders"
      },
      "RunTimeTicks" : 5,
      "HasMixedProtocols" : true,
      "MediaStreams" : [ {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      }, {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      } ],
      "Size" : 1,
      "BufferMs" : 7,
      "ContainerStartTimeTicks" : 5,
      "SortName" : "SortName",
      "Timestamp" : "None",
      "ItemId" : "ItemId",
      "Name" : "Name",
      "RequiresOpening" : true,
      "DirectStreamUrl" : "DirectStreamUrl",
      "SupportsDirectStream" : true,
      "RequiresClosing" : true,
      "Container" : "Container",
      "ServerId" : "ServerId",
      "LiveStreamId" : "LiveStreamId",
      "RequiresLooping" : true,
      "Protocol" : "File",
      "AddApiKeyToDirectStreamUrl" : true,
      "DefaultSubtitleStreamIndex" : 9,
      "TrancodeLiveStartIndex" : 2,
      "IsInfiniteStream" : true,
      "Path" : "Path",
      "IsRemote" : true,
      "SupportsDirectPlay" : true,
      "TranscodingSubProtocol" : "TranscodingSubProtocol",
      "Formats" : [ "Formats", "Formats" ],
      "AnalyzeDurationMs" : 6,
      "WallClockStart" : "2000-01-23T04:56:07.000+00:00",
      "Bitrate" : 9,
      "OpenToken" : "OpenToken",
      "SupportsProbing" : true,
      "Type" : "Default",
      "ReadAtNativeFramerate" : true,
      "TranscodingContainer" : "TranscodingContainer",
      "ProbePath" : "ProbePath",
      "TranscodingUrl" : "TranscodingUrl",
      "Id" : "Id",
      "SupportsTranscoding" : true,
      "DefaultAudioStreamIndex" : 8
    }, {
      "EncoderPath" : "EncoderPath",
      "RequiredHttpHeaders" : {
        "key" : "RequiredHttpHeaders"
      },
      "RunTimeTicks" : 5,
      "HasMixedProtocols" : true,
      "MediaStreams" : [ {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      }, {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      } ],
      "Size" : 1,
      "BufferMs" : 7,
      "ContainerStartTimeTicks" : 5,
      "SortName" : "SortName",
      "Timestamp" : "None",
      "ItemId" : "ItemId",
      "Name" : "Name",
      "RequiresOpening" : true,
      "DirectStreamUrl" : "DirectStreamUrl",
      "SupportsDirectStream" : true,
      "RequiresClosing" : true,
      "Container" : "Container",
      "ServerId" : "ServerId",
      "LiveStreamId" : "LiveStreamId",
      "RequiresLooping" : true,
      "Protocol" : "File",
      "AddApiKeyToDirectStreamUrl" : true,
      "DefaultSubtitleStreamIndex" : 9,
      "TrancodeLiveStartIndex" : 2,
      "IsInfiniteStream" : true,
      "Path" : "Path",
      "IsRemote" : true,
      "SupportsDirectPlay" : true,
      "TranscodingSubProtocol" : "TranscodingSubProtocol",
      "Formats" : [ "Formats", "Formats" ],
      "AnalyzeDurationMs" : 6,
      "WallClockStart" : "2000-01-23T04:56:07.000+00:00",
      "Bitrate" : 9,
      "OpenToken" : "OpenToken",
      "SupportsProbing" : true,
      "Type" : "Default",
      "ReadAtNativeFramerate" : true,
      "TranscodingContainer" : "TranscodingContainer",
      "ProbePath" : "ProbePath",
      "TranscodingUrl" : "TranscodingUrl",
      "Id" : "Id",
      "SupportsTranscoding" : true,
      "DefaultAudioStreamIndex" : 8
    } ],
    "GenreItems" : [ null, null ],
    "OfficialRating" : "OfficialRating",
    "Longitude" : 9.132027271330688,
    "Composers" : [ null, null ],
    "LockData" : true,
    "FocalLength" : 4.258773108174356,
    "IsNews" : true,
    "ShutterSpeed" : 4.678947989005849,
    "Id" : "Id",
    "SortIndexNumber" : 0,
    "IsFolder" : true,
    "CanMakePublic" : true,
    "SeriesTimerId" : "SeriesTimerId",
    "SeriesId" : "SeriesId",
    "ListingsPath" : "ListingsPath",
    "MediaStreams" : [ null, null ],
    "FileName" : "FileName",
    "PrimaryImageTag" : "PrimaryImageTag",
    "Prefix" : "Prefix",
    "CanDownload" : true,
    "IsMovie" : true,
    "SeriesCount" : 5,
    "PrimaryImageItemId" : "PrimaryImageItemId",
    "ListingsChannelId" : "ListingsChannelId",
    "SeriesStudio" : "SeriesStudio",
    "IsLive" : true,
    "Width" : 4,
    "ExternalUrls" : [ {
      "Url" : "Url",
      "Name" : "Name"
    }, {
      "Url" : "Url",
      "Name" : "Name"
    } ],
    "RecursiveItemCount" : 8,
    "Path" : "Path",
    "ParentId" : "ParentId",
    "TimerType" : "Program",
    "GameSystem" : "GameSystem",
    "MusicVideoCount" : 8,
    "IsSeries" : true,
    "ProductionLocations" : [ "ProductionLocations", "ProductionLocations" ],
    "Subviews" : [ "Subviews", "Subviews" ],
    "Bitrate" : 6,
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "SeriesPrimaryImageTag" : "SeriesPrimaryImageTag",
    "ParentThumbItemId" : "ParentThumbItemId",
    "PreferredMetadataLanguage" : "PreferredMetadataLanguage",
    "CanLeaveContent" : true,
    "Type" : "Type",
    "BackdropImageTags" : [ "BackdropImageTags", "BackdropImageTags" ],
    "ParentBackdropImageTags" : [ "ParentBackdropImageTags", "ParentBackdropImageTags" ],
    "ChildCount" : 7,
    "TagItems" : [ null, null ],
    "Artists" : [ "Artists", "Artists" ],
    "ListingsChannelName" : "ListingsChannelName",
    "RunTimeTicks" : 1,
    "AlbumPrimaryImageTag" : "AlbumPrimaryImageTag",
    "Video3DFormat" : "HalfSideBySide",
    "CanDelete" : true,
    "PlaylistItemId" : "PlaylistItemId",
    "SortParentIndexNumber" : 6,
    "DisplayPreferencesId" : "DisplayPreferencesId",
    "Album" : "Album",
    "Latitude" : 7.260521264802104,
    "Guid" : "Guid",
    "SortName" : "SortName",
    "Name" : "Name",
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "Container" : "Container",
    "ProductionYear" : 6,
    "SeriesName" : "SeriesName",
    "AsSeries" : true,
    "AlbumId" : "AlbumId",
    "SupportsSync" : true,
    "LocalTrailerCount" : 7,
    "IndexNumber" : 5,
    "CompletionPercentage" : 0.5199002018724985,
    "Genres" : [ "Genres", "Genres" ],
    "SeasonId" : "SeasonId",
    "LockedFields" : [ "Cast", "Cast" ],
    "Disabled" : true,
    "ProviderIds" : {
      "key" : "ProviderIds"
    },
    "RemoteTrailers" : [ {
      "Url" : "Url",
      "Name" : "Name"
    }, {
      "Url" : "Url",
      "Name" : "Name"
    } ],
    "PresentationUniqueKey" : "PresentationUniqueKey",
    "CustomRating" : "CustomRating",
    "ListingsChannelNumber" : "ListingsChannelNumber",
    "SyncStatus" : "Queued",
    "CanManageAccess" : true,
    "AirDays" : [ "Sunday", "Sunday" ],
    "ParentLogoItemId" : "ParentLogoItemId",
    "PartCount" : 7,
    "ListingsProviderId" : "ListingsProviderId",
    "CanEditItems" : true,
    "ChannelName" : "ChannelName",
    "EpisodeTitle" : "EpisodeTitle",
    "IsoSpeedRating" : 9,
    "CommunityRating" : 6.965118,
    "Software" : "Software",
    "Chapters" : [ {
      "StartPositionTicks" : 5,
      "ImageTag" : "ImageTag",
      "MarkerType" : "Chapter",
      "ChapterIndex" : 3,
      "Name" : "Name"
    }, {
      "StartPositionTicks" : 5,
      "ImageTag" : "ImageTag",
      "MarkerType" : "Chapter",
      "ChapterIndex" : 3,
      "Name" : "Name"
    } ],
    "SongCount" : 6,
    "Taglines" : [ "Taglines", "Taglines" ],
    "PreferredMetadataCountryCode" : "PreferredMetadataCountryCode",
    "CameraModel" : "CameraModel",
    "ChannelNumber" : "ChannelNumber",
    "UserData" : {
      "UnplayedItemCount" : 6,
      "Played" : true,
      "ServerId" : "ServerId",
      "PlayedPercentage" : 7.058770351582356,
      "Rating" : 0.8851374739011653,
      "PlayCount" : 4,
      "PlaybackPositionTicks" : 0,
      "LastPlayedDate" : "2000-01-23T04:56:07.000+00:00",
      "IsFavorite" : true,
      "ItemId" : "ItemId",
      "Key" : "Key"
    },
    "TimerId" : "TimerId",
    "DateCreated" : "2000-01-23T04:56:07.000+00:00",
    "ParentThumbImageTag" : "ParentThumbImageTag",
    "IsSports" : true,
    "ChannelId" : "ChannelId",
    "ParentIndexNumber" : 3,
    "IsNew" : true,
    "AffiliateCallSign" : "AffiliateCallSign",
    "ListingsId" : "ListingsId",
    "AlbumArtists" : [ null, null ],
    "ServerId" : "ServerId",
    "Number" : "Number",
    "AlbumCount" : 4,
    "IsRepeat" : true,
    "CollectionType" : "CollectionType",
    "PrimaryImageAspectRatio" : 3.0576100241049344,
    "Height" : 0,
    "IsKids" : true,
    "DisplayOrder" : "DisplayOrder",
    "MovieCount" : 7,
    "People" : [ {
      "Role" : "Role",
      "Type" : "Actor",
      "PrimaryImageTag" : "PrimaryImageTag",
      "Id" : "Id",
      "Name" : "Name"
    }, {
      "Role" : "Role",
      "Type" : "Actor",
      "PrimaryImageTag" : "PrimaryImageTag",
      "Id" : "Id",
      "Name" : "Name"
    } ],
    "Overview" : "Overview",
    "SpecialFeatureCount" : 3,
    "ImageOrientation" : "TopLeft",
    "AlbumArtist" : "AlbumArtist",
    "ImageTags" : {
      "key" : "ImageTags"
    },
    "OriginalTitle" : "OriginalTitle",
    "ForcedSortName" : "ForcedSortName",
    "SupportsResume" : true,
    "LocationType" : "FileSystem",
    "IsPremiere" : true,
    "Altitude" : 0.8774076871421566
  },
  "ServerId" : "ServerId",
  "SyncJobName" : "SyncJobName",
  "OriginalFileName" : "OriginalFileName",
  "AdditionalFiles" : [ {
    "Path" : "Path",
    "Type" : "Media",
    "Index" : 2,
    "Name" : "Name",
    "ImageType" : "Primary"
  }, {
    "Path" : "Path",
    "Type" : "Media",
    "Index" : 2,
    "Name" : "Name",
    "ImageType" : "Primary"
  } ],
  "SyncJobDateCreated" : "2000-01-23T04:56:07.000+00:00",
  "UserId" : "UserId",
  "SyncJobId" : 0,
  "SyncJobItemId" : 6
}, {
  "Item" : {
    "SeasonName" : "SeasonName",
    "PremiereDate" : "2000-01-23T04:56:07.000+00:00",
    "Size" : 2,
    "CriticRating" : 6.4384236,
    "GameSystemId" : 3,
    "Studios" : [ {
      "Id" : 3,
      "Name" : "Name"
    }, {
      "Id" : 3,
      "Name" : "Name"
    } ],
    "CameraMake" : "CameraMake",
    "Aperture" : 1.041444916118296,
    "ChannelPrimaryImageTag" : "ChannelPrimaryImageTag",
    "ExtraType" : "ExtraType",
    "ParentBackdropItemId" : "ParentBackdropItemId",
    "Etag" : "Etag",
    "ParentLogoImageTag" : "ParentLogoImageTag",
    "ExposureTime" : 6.628464275087742,
    "MediaType" : "MediaType",
    "ManagementId" : "ManagementId",
    "Tags" : [ "Tags", "Tags" ],
    "Status" : "Status",
    "IndexNumberEnd" : 6,
    "ArtistItems" : [ {
      "Id" : "Id",
      "Name" : "Name"
    }, {
      "Id" : "Id",
      "Name" : "Name"
    } ],
    "MediaSources" : [ {
      "EncoderPath" : "EncoderPath",
      "RequiredHttpHeaders" : {
        "key" : "RequiredHttpHeaders"
      },
      "RunTimeTicks" : 5,
      "HasMixedProtocols" : true,
      "MediaStreams" : [ {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      }, {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      } ],
      "Size" : 1,
      "BufferMs" : 7,
      "ContainerStartTimeTicks" : 5,
      "SortName" : "SortName",
      "Timestamp" : "None",
      "ItemId" : "ItemId",
      "Name" : "Name",
      "RequiresOpening" : true,
      "DirectStreamUrl" : "DirectStreamUrl",
      "SupportsDirectStream" : true,
      "RequiresClosing" : true,
      "Container" : "Container",
      "ServerId" : "ServerId",
      "LiveStreamId" : "LiveStreamId",
      "RequiresLooping" : true,
      "Protocol" : "File",
      "AddApiKeyToDirectStreamUrl" : true,
      "DefaultSubtitleStreamIndex" : 9,
      "TrancodeLiveStartIndex" : 2,
      "IsInfiniteStream" : true,
      "Path" : "Path",
      "IsRemote" : true,
      "SupportsDirectPlay" : true,
      "TranscodingSubProtocol" : "TranscodingSubProtocol",
      "Formats" : [ "Formats", "Formats" ],
      "AnalyzeDurationMs" : 6,
      "WallClockStart" : "2000-01-23T04:56:07.000+00:00",
      "Bitrate" : 9,
      "OpenToken" : "OpenToken",
      "SupportsProbing" : true,
      "Type" : "Default",
      "ReadAtNativeFramerate" : true,
      "TranscodingContainer" : "TranscodingContainer",
      "ProbePath" : "ProbePath",
      "TranscodingUrl" : "TranscodingUrl",
      "Id" : "Id",
      "SupportsTranscoding" : true,
      "DefaultAudioStreamIndex" : 8
    }, {
      "EncoderPath" : "EncoderPath",
      "RequiredHttpHeaders" : {
        "key" : "RequiredHttpHeaders"
      },
      "RunTimeTicks" : 5,
      "HasMixedProtocols" : true,
      "MediaStreams" : [ {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      }, {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      } ],
      "Size" : 1,
      "BufferMs" : 7,
      "ContainerStartTimeTicks" : 5,
      "SortName" : "SortName",
      "Timestamp" : "None",
      "ItemId" : "ItemId",
      "Name" : "Name",
      "RequiresOpening" : true,
      "DirectStreamUrl" : "DirectStreamUrl",
      "SupportsDirectStream" : true,
      "RequiresClosing" : true,
      "Container" : "Container",
      "ServerId" : "ServerId",
      "LiveStreamId" : "LiveStreamId",
      "RequiresLooping" : true,
      "Protocol" : "File",
      "AddApiKeyToDirectStreamUrl" : true,
      "DefaultSubtitleStreamIndex" : 9,
      "TrancodeLiveStartIndex" : 2,
      "IsInfiniteStream" : true,
      "Path" : "Path",
      "IsRemote" : true,
      "SupportsDirectPlay" : true,
      "TranscodingSubProtocol" : "TranscodingSubProtocol",
      "Formats" : [ "Formats", "Formats" ],
      "AnalyzeDurationMs" : 6,
      "WallClockStart" : "2000-01-23T04:56:07.000+00:00",
      "Bitrate" : 9,
      "OpenToken" : "OpenToken",
      "SupportsProbing" : true,
      "Type" : "Default",
      "ReadAtNativeFramerate" : true,
      "TranscodingContainer" : "TranscodingContainer",
      "ProbePath" : "ProbePath",
      "TranscodingUrl" : "TranscodingUrl",
      "Id" : "Id",
      "SupportsTranscoding" : true,
      "DefaultAudioStreamIndex" : 8
    } ],
    "GenreItems" : [ null, null ],
    "OfficialRating" : "OfficialRating",
    "Longitude" : 9.132027271330688,
    "Composers" : [ null, null ],
    "LockData" : true,
    "FocalLength" : 4.258773108174356,
    "IsNews" : true,
    "ShutterSpeed" : 4.678947989005849,
    "Id" : "Id",
    "SortIndexNumber" : 0,
    "IsFolder" : true,
    "CanMakePublic" : true,
    "SeriesTimerId" : "SeriesTimerId",
    "SeriesId" : "SeriesId",
    "ListingsPath" : "ListingsPath",
    "MediaStreams" : [ null, null ],
    "FileName" : "FileName",
    "PrimaryImageTag" : "PrimaryImageTag",
    "Prefix" : "Prefix",
    "CanDownload" : true,
    "IsMovie" : true,
    "SeriesCount" : 5,
    "PrimaryImageItemId" : "PrimaryImageItemId",
    "ListingsChannelId" : "ListingsChannelId",
    "SeriesStudio" : "SeriesStudio",
    "IsLive" : true,
    "Width" : 4,
    "ExternalUrls" : [ {
      "Url" : "Url",
      "Name" : "Name"
    }, {
      "Url" : "Url",
      "Name" : "Name"
    } ],
    "RecursiveItemCount" : 8,
    "Path" : "Path",
    "ParentId" : "ParentId",
    "TimerType" : "Program",
    "GameSystem" : "GameSystem",
    "MusicVideoCount" : 8,
    "IsSeries" : true,
    "ProductionLocations" : [ "ProductionLocations", "ProductionLocations" ],
    "Subviews" : [ "Subviews", "Subviews" ],
    "Bitrate" : 6,
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "SeriesPrimaryImageTag" : "SeriesPrimaryImageTag",
    "ParentThumbItemId" : "ParentThumbItemId",
    "PreferredMetadataLanguage" : "PreferredMetadataLanguage",
    "CanLeaveContent" : true,
    "Type" : "Type",
    "BackdropImageTags" : [ "BackdropImageTags", "BackdropImageTags" ],
    "ParentBackdropImageTags" : [ "ParentBackdropImageTags", "ParentBackdropImageTags" ],
    "ChildCount" : 7,
    "TagItems" : [ null, null ],
    "Artists" : [ "Artists", "Artists" ],
    "ListingsChannelName" : "ListingsChannelName",
    "RunTimeTicks" : 1,
    "AlbumPrimaryImageTag" : "AlbumPrimaryImageTag",
    "Video3DFormat" : "HalfSideBySide",
    "CanDelete" : true,
    "PlaylistItemId" : "PlaylistItemId",
    "SortParentIndexNumber" : 6,
    "DisplayPreferencesId" : "DisplayPreferencesId",
    "Album" : "Album",
    "Latitude" : 7.260521264802104,
    "Guid" : "Guid",
    "SortName" : "SortName",
    "Name" : "Name",
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "Container" : "Container",
    "ProductionYear" : 6,
    "SeriesName" : "SeriesName",
    "AsSeries" : true,
    "AlbumId" : "AlbumId",
    "SupportsSync" : true,
    "LocalTrailerCount" : 7,
    "IndexNumber" : 5,
    "CompletionPercentage" : 0.5199002018724985,
    "Genres" : [ "Genres", "Genres" ],
    "SeasonId" : "SeasonId",
    "LockedFields" : [ "Cast", "Cast" ],
    "Disabled" : true,
    "ProviderIds" : {
      "key" : "ProviderIds"
    },
    "RemoteTrailers" : [ {
      "Url" : "Url",
      "Name" : "Name"
    }, {
      "Url" : "Url",
      "Name" : "Name"
    } ],
    "PresentationUniqueKey" : "PresentationUniqueKey",
    "CustomRating" : "CustomRating",
    "ListingsChannelNumber" : "ListingsChannelNumber",
    "SyncStatus" : "Queued",
    "CanManageAccess" : true,
    "AirDays" : [ "Sunday", "Sunday" ],
    "ParentLogoItemId" : "ParentLogoItemId",
    "PartCount" : 7,
    "ListingsProviderId" : "ListingsProviderId",
    "CanEditItems" : true,
    "ChannelName" : "ChannelName",
    "EpisodeTitle" : "EpisodeTitle",
    "IsoSpeedRating" : 9,
    "CommunityRating" : 6.965118,
    "Software" : "Software",
    "Chapters" : [ {
      "StartPositionTicks" : 5,
      "ImageTag" : "ImageTag",
      "MarkerType" : "Chapter",
      "ChapterIndex" : 3,
      "Name" : "Name"
    }, {
      "StartPositionTicks" : 5,
      "ImageTag" : "ImageTag",
      "MarkerType" : "Chapter",
      "ChapterIndex" : 3,
      "Name" : "Name"
    } ],
    "SongCount" : 6,
    "Taglines" : [ "Taglines", "Taglines" ],
    "PreferredMetadataCountryCode" : "PreferredMetadataCountryCode",
    "CameraModel" : "CameraModel",
    "ChannelNumber" : "ChannelNumber",
    "UserData" : {
      "UnplayedItemCount" : 6,
      "Played" : true,
      "ServerId" : "ServerId",
      "PlayedPercentage" : 7.058770351582356,
      "Rating" : 0.8851374739011653,
      "PlayCount" : 4,
      "PlaybackPositionTicks" : 0,
      "LastPlayedDate" : "2000-01-23T04:56:07.000+00:00",
      "IsFavorite" : true,
      "ItemId" : "ItemId",
      "Key" : "Key"
    },
    "TimerId" : "TimerId",
    "DateCreated" : "2000-01-23T04:56:07.000+00:00",
    "ParentThumbImageTag" : "ParentThumbImageTag",
    "IsSports" : true,
    "ChannelId" : "ChannelId",
    "ParentIndexNumber" : 3,
    "IsNew" : true,
    "AffiliateCallSign" : "AffiliateCallSign",
    "ListingsId" : "ListingsId",
    "AlbumArtists" : [ null, null ],
    "ServerId" : "ServerId",
    "Number" : "Number",
    "AlbumCount" : 4,
    "IsRepeat" : true,
    "CollectionType" : "CollectionType",
    "PrimaryImageAspectRatio" : 3.0576100241049344,
    "Height" : 0,
    "IsKids" : true,
    "DisplayOrder" : "DisplayOrder",
    "MovieCount" : 7,
    "People" : [ {
      "Role" : "Role",
      "Type" : "Actor",
      "PrimaryImageTag" : "PrimaryImageTag",
      "Id" : "Id",
      "Name" : "Name"
    }, {
      "Role" : "Role",
      "Type" : "Actor",
      "PrimaryImageTag" : "PrimaryImageTag",
      "Id" : "Id",
      "Name" : "Name"
    } ],
    "Overview" : "Overview",
    "SpecialFeatureCount" : 3,
    "ImageOrientation" : "TopLeft",
    "AlbumArtist" : "AlbumArtist",
    "ImageTags" : {
      "key" : "ImageTags"
    },
    "OriginalTitle" : "OriginalTitle",
    "ForcedSortName" : "ForcedSortName",
    "SupportsResume" : true,
    "LocationType" : "FileSystem",
    "IsPremiere" : true,
    "Altitude" : 0.8774076871421566
  },
  "ServerId" : "ServerId",
  "SyncJobName" : "SyncJobName",
  "OriginalFileName" : "OriginalFileName",
  "AdditionalFiles" : [ {
    "Path" : "Path",
    "Type" : "Media",
    "Index" : 2,
    "Name" : "Name",
    "ImageType" : "Primary"
  }, {
    "Path" : "Path",
    "Type" : "Media",
    "Index" : 2,
    "Name" : "Name",
    "ImageType" : "Primary"
  } ],
  "SyncJobDateCreated" : "2000-01-23T04:56:07.000+00:00",
  "UserId" : "UserId",
  "SyncJobId" : 0,
  "SyncJobItemId" : 6
} ]}]
     - parameter targetId: (query) TargetId 

     - returns: RequestBuilder<[SyncedItem]> 
     */
    open class func getSyncItemsReadyWithRequestBuilder(targetId: String) -> RequestBuilder<[SyncedItem]> {
        let path = "/Sync/Items/Ready"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "TargetId": targetId
        ])


        let requestBuilder: RequestBuilder<[SyncedItem]>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets sync job items.

     - parameter targetId: (query) TargetId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSyncJobitems(targetId: String, completion: @escaping ((_ data: QueryResultSyncJobItem?,_ error: Error?) -> Void)) {
        getSyncJobitemsWithRequestBuilder(targetId: targetId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets sync job items.
     - GET /Sync/JobItems

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "TotalRecordCount" : 0,
  "Items" : [ {
    "Status" : "Queued",
    "Progress" : 5.637376656633329,
    "OutputPath" : "OutputPath",
    "MediaSourceId" : "MediaSourceId",
    "DateCreated" : "2000-01-23T04:56:07.000+00:00",
    "PrimaryImageTag" : "PrimaryImageTag",
    "ItemId" : 1,
    "TemporaryPath" : "TemporaryPath",
    "TargetId" : "TargetId",
    "InternalTargetId" : 5,
    "MediaSource" : {
      "EncoderPath" : "EncoderPath",
      "RequiredHttpHeaders" : {
        "key" : "RequiredHttpHeaders"
      },
      "RunTimeTicks" : 5,
      "HasMixedProtocols" : true,
      "MediaStreams" : [ {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      }, {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      } ],
      "Size" : 1,
      "BufferMs" : 7,
      "ContainerStartTimeTicks" : 5,
      "SortName" : "SortName",
      "Timestamp" : "None",
      "ItemId" : "ItemId",
      "Name" : "Name",
      "RequiresOpening" : true,
      "DirectStreamUrl" : "DirectStreamUrl",
      "SupportsDirectStream" : true,
      "RequiresClosing" : true,
      "Container" : "Container",
      "ServerId" : "ServerId",
      "LiveStreamId" : "LiveStreamId",
      "RequiresLooping" : true,
      "Protocol" : "File",
      "AddApiKeyToDirectStreamUrl" : true,
      "DefaultSubtitleStreamIndex" : 9,
      "TrancodeLiveStartIndex" : 2,
      "IsInfiniteStream" : true,
      "Path" : "Path",
      "IsRemote" : true,
      "SupportsDirectPlay" : true,
      "TranscodingSubProtocol" : "TranscodingSubProtocol",
      "Formats" : [ "Formats", "Formats" ],
      "AnalyzeDurationMs" : 6,
      "WallClockStart" : "2000-01-23T04:56:07.000+00:00",
      "Bitrate" : 9,
      "OpenToken" : "OpenToken",
      "SupportsProbing" : true,
      "Type" : "Default",
      "ReadAtNativeFramerate" : true,
      "TranscodingContainer" : "TranscodingContainer",
      "ProbePath" : "ProbePath",
      "TranscodingUrl" : "TranscodingUrl",
      "Id" : "Id",
      "SupportsTranscoding" : true,
      "DefaultAudioStreamIndex" : 8
    },
    "AdditionalFiles" : [ {
      "Path" : "Path",
      "Type" : "Media",
      "Index" : 2,
      "Name" : "Name",
      "ImageType" : "Primary"
    }, {
      "Path" : "Path",
      "Type" : "Media",
      "Index" : 2,
      "Name" : "Name",
      "ImageType" : "Primary"
    } ],
    "PrimaryImageItemId" : "PrimaryImageItemId",
    "ItemName" : "ItemName",
    "Id" : 0,
    "JobId" : 6
  }, {
    "Status" : "Queued",
    "Progress" : 5.637376656633329,
    "OutputPath" : "OutputPath",
    "MediaSourceId" : "MediaSourceId",
    "DateCreated" : "2000-01-23T04:56:07.000+00:00",
    "PrimaryImageTag" : "PrimaryImageTag",
    "ItemId" : 1,
    "TemporaryPath" : "TemporaryPath",
    "TargetId" : "TargetId",
    "InternalTargetId" : 5,
    "MediaSource" : {
      "EncoderPath" : "EncoderPath",
      "RequiredHttpHeaders" : {
        "key" : "RequiredHttpHeaders"
      },
      "RunTimeTicks" : 5,
      "HasMixedProtocols" : true,
      "MediaStreams" : [ {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      }, {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      } ],
      "Size" : 1,
      "BufferMs" : 7,
      "ContainerStartTimeTicks" : 5,
      "SortName" : "SortName",
      "Timestamp" : "None",
      "ItemId" : "ItemId",
      "Name" : "Name",
      "RequiresOpening" : true,
      "DirectStreamUrl" : "DirectStreamUrl",
      "SupportsDirectStream" : true,
      "RequiresClosing" : true,
      "Container" : "Container",
      "ServerId" : "ServerId",
      "LiveStreamId" : "LiveStreamId",
      "RequiresLooping" : true,
      "Protocol" : "File",
      "AddApiKeyToDirectStreamUrl" : true,
      "DefaultSubtitleStreamIndex" : 9,
      "TrancodeLiveStartIndex" : 2,
      "IsInfiniteStream" : true,
      "Path" : "Path",
      "IsRemote" : true,
      "SupportsDirectPlay" : true,
      "TranscodingSubProtocol" : "TranscodingSubProtocol",
      "Formats" : [ "Formats", "Formats" ],
      "AnalyzeDurationMs" : 6,
      "WallClockStart" : "2000-01-23T04:56:07.000+00:00",
      "Bitrate" : 9,
      "OpenToken" : "OpenToken",
      "SupportsProbing" : true,
      "Type" : "Default",
      "ReadAtNativeFramerate" : true,
      "TranscodingContainer" : "TranscodingContainer",
      "ProbePath" : "ProbePath",
      "TranscodingUrl" : "TranscodingUrl",
      "Id" : "Id",
      "SupportsTranscoding" : true,
      "DefaultAudioStreamIndex" : 8
    },
    "AdditionalFiles" : [ {
      "Path" : "Path",
      "Type" : "Media",
      "Index" : 2,
      "Name" : "Name",
      "ImageType" : "Primary"
    }, {
      "Path" : "Path",
      "Type" : "Media",
      "Index" : 2,
      "Name" : "Name",
      "ImageType" : "Primary"
    } ],
    "PrimaryImageItemId" : "PrimaryImageItemId",
    "ItemName" : "ItemName",
    "Id" : 0,
    "JobId" : 6
  } ]
}}]
     - parameter targetId: (query) TargetId 

     - returns: RequestBuilder<QueryResultSyncJobItem> 
     */
    open class func getSyncJobitemsWithRequestBuilder(targetId: String) -> RequestBuilder<QueryResultSyncJobItem> {
        let path = "/Sync/JobItems"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "TargetId": targetId
        ])


        let requestBuilder: RequestBuilder<QueryResultSyncJobItem>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a sync job item file

     - parameter _id: (path) Id 
     - parameter name: (query) Name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSyncJobitemsByIdAdditionalfiles(_id: String, name: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getSyncJobitemsByIdAdditionalfilesWithRequestBuilder(_id: _id, name: name).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets a sync job item file
     - GET /Sync/JobItems/{Id}/AdditionalFiles

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Id 
     - parameter name: (query) Name 

     - returns: RequestBuilder<Void> 
     */
    open class func getSyncJobitemsByIdAdditionalfilesWithRequestBuilder(_id: String, name: String) -> RequestBuilder<Void> {
        var path = "/Sync/JobItems/{Id}/AdditionalFiles"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Name": name
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a sync job item file

     - parameter _id: (path) Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSyncJobitemsByIdFile(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getSyncJobitemsByIdFileWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets a sync job item file
     - GET /Sync/JobItems/{Id}/File

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Id 

     - returns: RequestBuilder<Void> 
     */
    open class func getSyncJobitemsByIdFileWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Sync/JobItems/{Id}/File"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets sync jobs.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSyncJobs(completion: @escaping ((_ data: QueryResultSyncJob?,_ error: Error?) -> Void)) {
        getSyncJobsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets sync jobs.
     - GET /Sync/Jobs

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "TotalRecordCount" : 4,
  "Items" : [ {
    "Category" : "Latest",
    "ItemLimit" : 7,
    "DateCreated" : "2000-01-23T04:56:07.000+00:00",
    "PrimaryImageTag" : "PrimaryImageTag",
    "RequestedItemIds" : [ 9, 9 ],
    "TargetName" : "TargetName",
    "SyncNewContent" : true,
    "ParentName" : "ParentName",
    "ItemId" : 3,
    "Profile" : "Profile",
    "Name" : "Name",
    "DateLastModified" : "2000-01-23T04:56:07.000+00:00",
    "Container" : "Container",
    "Quality" : "Quality",
    "PrimaryImageItemId" : "PrimaryImageItemId",
    "ItemCount" : 2,
    "AudioCodec" : "AudioCodec",
    "ParentId" : 5,
    "Status" : "Queued",
    "Progress" : 5.637376656633329,
    "Bitrate" : 1,
    "VideoCodec" : "VideoCodec",
    "TargetId" : "TargetId",
    "InternalTargetId" : 6,
    "UserId" : 2,
    "UnwatchedOnly" : true,
    "Id" : 0
  }, {
    "Category" : "Latest",
    "ItemLimit" : 7,
    "DateCreated" : "2000-01-23T04:56:07.000+00:00",
    "PrimaryImageTag" : "PrimaryImageTag",
    "RequestedItemIds" : [ 9, 9 ],
    "TargetName" : "TargetName",
    "SyncNewContent" : true,
    "ParentName" : "ParentName",
    "ItemId" : 3,
    "Profile" : "Profile",
    "Name" : "Name",
    "DateLastModified" : "2000-01-23T04:56:07.000+00:00",
    "Container" : "Container",
    "Quality" : "Quality",
    "PrimaryImageItemId" : "PrimaryImageItemId",
    "ItemCount" : 2,
    "AudioCodec" : "AudioCodec",
    "ParentId" : 5,
    "Status" : "Queued",
    "Progress" : 5.637376656633329,
    "Bitrate" : 1,
    "VideoCodec" : "VideoCodec",
    "TargetId" : "TargetId",
    "InternalTargetId" : 6,
    "UserId" : 2,
    "UnwatchedOnly" : true,
    "Id" : 0
  } ]
}}]

     - returns: RequestBuilder<QueryResultSyncJob> 
     */
    open class func getSyncJobsWithRequestBuilder() -> RequestBuilder<QueryResultSyncJob> {
        let path = "/Sync/Jobs"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<QueryResultSyncJob>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a sync job.

     - parameter _id: (path) Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSyncJobsById(_id: String, completion: @escaping ((_ data: SyncJob?,_ error: Error?) -> Void)) {
        getSyncJobsByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a sync job.
     - GET /Sync/Jobs/{Id}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "Category" : "Latest",
  "ItemLimit" : 7,
  "DateCreated" : "2000-01-23T04:56:07.000+00:00",
  "PrimaryImageTag" : "PrimaryImageTag",
  "RequestedItemIds" : [ 9, 9 ],
  "TargetName" : "TargetName",
  "SyncNewContent" : true,
  "ParentName" : "ParentName",
  "ItemId" : 3,
  "Profile" : "Profile",
  "Name" : "Name",
  "DateLastModified" : "2000-01-23T04:56:07.000+00:00",
  "Container" : "Container",
  "Quality" : "Quality",
  "PrimaryImageItemId" : "PrimaryImageItemId",
  "ItemCount" : 2,
  "AudioCodec" : "AudioCodec",
  "ParentId" : 5,
  "Status" : "Queued",
  "Progress" : 5.637376656633329,
  "Bitrate" : 1,
  "VideoCodec" : "VideoCodec",
  "TargetId" : "TargetId",
  "InternalTargetId" : 6,
  "UserId" : 2,
  "UnwatchedOnly" : true,
  "Id" : 0
}}]
     - parameter _id: (path) Id 

     - returns: RequestBuilder<SyncJob> 
     */
    open class func getSyncJobsByIdWithRequestBuilder(_id: String) -> RequestBuilder<SyncJob> {
        var path = "/Sync/Jobs/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SyncJob>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a list of available sync targets.

     - parameter userId: (query) UserId 
     - parameter itemIds: (query) ItemIds (optional)
     - parameter parentId: (query) ParentId (optional)
     - parameter targetId: (query) TargetId (optional)
     - parameter category: (query) Category (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSyncOptions(userId: String, itemIds: String? = nil, parentId: String? = nil, targetId: String? = nil, category: SyncCategory? = nil, completion: @escaping ((_ data: SyncDialogOptions?,_ error: Error?) -> Void)) {
        getSyncOptionsWithRequestBuilder(userId: userId, itemIds: itemIds, parentId: parentId, targetId: targetId, category: category).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a list of available sync targets.
     - GET /Sync/Options

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "Options" : [ "Name", "Name" ],
  "ProfileOptions" : [ {
    "IsDefault" : true,
    "Description" : "Description",
    "EnableQualityOptions" : true,
    "Id" : "Id",
    "Name" : "Name"
  }, {
    "IsDefault" : true,
    "Description" : "Description",
    "EnableQualityOptions" : true,
    "Id" : "Id",
    "Name" : "Name"
  } ],
  "QualityOptions" : [ {
    "IsDefault" : true,
    "Description" : "Description",
    "Id" : "Id",
    "IsOriginalQuality" : true,
    "Name" : "Name"
  }, {
    "IsDefault" : true,
    "Description" : "Description",
    "Id" : "Id",
    "IsOriginalQuality" : true,
    "Name" : "Name"
  } ],
  "Targets" : [ {
    "Id" : "Id",
    "Name" : "Name"
  }, {
    "Id" : "Id",
    "Name" : "Name"
  } ]
}}]
     - parameter userId: (query) UserId 
     - parameter itemIds: (query) ItemIds (optional)
     - parameter parentId: (query) ParentId (optional)
     - parameter targetId: (query) TargetId (optional)
     - parameter category: (query) Category (optional)

     - returns: RequestBuilder<SyncDialogOptions> 
     */
    open class func getSyncOptionsWithRequestBuilder(userId: String, itemIds: String? = nil, parentId: String? = nil, targetId: String? = nil, category: SyncCategory? = nil) -> RequestBuilder<SyncDialogOptions> {
        let path = "/Sync/Options"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "UserId": userId, 
                        "ItemIds": itemIds, 
                        "ParentId": parentId, 
                        "TargetId": targetId, 
                        "Category": category
        ])


        let requestBuilder: RequestBuilder<SyncDialogOptions>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a list of available sync targets.

     - parameter userId: (query) UserId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSyncTargets(userId: String, completion: @escaping ((_ data: [SyncTarget]?,_ error: Error?) -> Void)) {
        getSyncTargetsWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a list of available sync targets.
     - GET /Sync/Targets

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "Id" : "Id",
  "Name" : "Name"
}, {
  "Id" : "Id",
  "Name" : "Name"
} ]}]
     - parameter userId: (query) UserId 

     - returns: RequestBuilder<[SyncTarget]> 
     */
    open class func getSyncTargetsWithRequestBuilder(userId: String) -> RequestBuilder<[SyncTarget]> {
        let path = "/Sync/Targets"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "UserId": userId
        ])


        let requestBuilder: RequestBuilder<[SyncTarget]>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets sync status for an item.

     - parameter body: (body) SyncedItemProgress:  
     - parameter itemId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSyncByItemidStatus(body: SyncedItemProgress, itemId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSyncByItemidStatusWithRequestBuilder(body: body, itemId: itemId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets sync status for an item.
     - POST /Sync/{ItemId}/Status

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) SyncedItemProgress:  
     - parameter itemId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func postSyncByItemidStatusWithRequestBuilder(body: SyncedItemProgress, itemId: String) -> RequestBuilder<Void> {
        var path = "/Sync/{ItemId}/Status"
        let itemIdPreEscape = "\(itemId)"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ItemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Cancels items from a sync target

     - parameter targetId: (path) TargetId 
     - parameter itemIds: (query) ItemIds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSyncByTargetidItemsDelete(targetId: String, itemIds: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSyncByTargetidItemsDeleteWithRequestBuilder(targetId: targetId, itemIds: itemIds).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Cancels items from a sync target
     - POST /Sync/{TargetId}/Items/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter targetId: (path) TargetId 
     - parameter itemIds: (query) ItemIds (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postSyncByTargetidItemsDeleteWithRequestBuilder(targetId: String, itemIds: String? = nil) -> RequestBuilder<Void> {
        var path = "/Sync/{TargetId}/Items/Delete"
        let targetIdPreEscape = "\(targetId)"
        let targetIdPostEscape = targetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{TargetId}", with: targetIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "ItemIds": itemIds
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Syncs data between device and server

     - parameter body: (body) SyncDataRequest:  
     - parameter targetId: (query) TargetId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSyncData(body: SyncDataRequest, targetId: String, completion: @escaping ((_ data: SyncDataResponse?,_ error: Error?) -> Void)) {
        postSyncDataWithRequestBuilder(body: body, targetId: targetId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Syncs data between device and server
     - POST /Sync/Data

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "ItemIdsToRemove" : [ "ItemIdsToRemove", "ItemIdsToRemove" ]
}}]
     - parameter body: (body) SyncDataRequest:  
     - parameter targetId: (query) TargetId 

     - returns: RequestBuilder<SyncDataResponse> 
     */
    open class func postSyncDataWithRequestBuilder(body: SyncDataRequest, targetId: String) -> RequestBuilder<SyncDataResponse> {
        let path = "/Sync/Data"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "TargetId": targetId
        ])


        let requestBuilder: RequestBuilder<SyncDataResponse>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Cancels items from a sync target

     - parameter itemIds: (query) ItemIds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSyncItemsCancel(itemIds: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSyncItemsCancelWithRequestBuilder(itemIds: itemIds).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Cancels items from a sync target
     - POST /Sync/Items/Cancel

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter itemIds: (query) ItemIds (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postSyncItemsCancelWithRequestBuilder(itemIds: String? = nil) -> RequestBuilder<Void> {
        let path = "/Sync/Items/Cancel"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "ItemIds": itemIds
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Cancels a sync job item

     - parameter _id: (path) Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSyncJobitemsByIdDelete(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSyncJobitemsByIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Cancels a sync job item
     - POST /Sync/JobItems/{Id}/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Id 

     - returns: RequestBuilder<Void> 
     */
    open class func postSyncJobitemsByIdDeleteWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Sync/JobItems/{Id}/Delete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Enables a cancelled or queued sync job item

     - parameter _id: (path) Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSyncJobitemsByIdEnable(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSyncJobitemsByIdEnableWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Enables a cancelled or queued sync job item
     - POST /Sync/JobItems/{Id}/Enable

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Id 

     - returns: RequestBuilder<Void> 
     */
    open class func postSyncJobitemsByIdEnableWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Sync/JobItems/{Id}/Enable"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Marks a job item for removal

     - parameter _id: (path) Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSyncJobitemsByIdMarkforremoval(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSyncJobitemsByIdMarkforremovalWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Marks a job item for removal
     - POST /Sync/JobItems/{Id}/MarkForRemoval

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Id 

     - returns: RequestBuilder<Void> 
     */
    open class func postSyncJobitemsByIdMarkforremovalWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Sync/JobItems/{Id}/MarkForRemoval"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Reports that a sync job item has successfully been transferred.

     - parameter _id: (path) Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSyncJobitemsByIdTransferred(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSyncJobitemsByIdTransferredWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Reports that a sync job item has successfully been transferred.
     - POST /Sync/JobItems/{Id}/Transferred

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Id 

     - returns: RequestBuilder<Void> 
     */
    open class func postSyncJobitemsByIdTransferredWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Sync/JobItems/{Id}/Transferred"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Unmarks a job item for removal

     - parameter _id: (path) Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSyncJobitemsByIdUnmarkforremoval(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSyncJobitemsByIdUnmarkforremovalWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Unmarks a job item for removal
     - POST /Sync/JobItems/{Id}/UnmarkForRemoval

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Id 

     - returns: RequestBuilder<Void> 
     */
    open class func postSyncJobitemsByIdUnmarkforremovalWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Sync/JobItems/{Id}/UnmarkForRemoval"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets sync jobs.

     - parameter body: (body) SyncJobRequest:  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSyncJobs(body: SyncJobRequest, completion: @escaping ((_ data: SyncJobCreationResult?,_ error: Error?) -> Void)) {
        postSyncJobsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets sync jobs.
     - POST /Sync/Jobs

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "JobItems" : [ {
    "Status" : "Queued",
    "Progress" : 5.637376656633329,
    "OutputPath" : "OutputPath",
    "MediaSourceId" : "MediaSourceId",
    "DateCreated" : "2000-01-23T04:56:07.000+00:00",
    "PrimaryImageTag" : "PrimaryImageTag",
    "ItemId" : 1,
    "TemporaryPath" : "TemporaryPath",
    "TargetId" : "TargetId",
    "InternalTargetId" : 5,
    "MediaSource" : {
      "EncoderPath" : "EncoderPath",
      "RequiredHttpHeaders" : {
        "key" : "RequiredHttpHeaders"
      },
      "RunTimeTicks" : 5,
      "HasMixedProtocols" : true,
      "MediaStreams" : [ {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      }, {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      } ],
      "Size" : 1,
      "BufferMs" : 7,
      "ContainerStartTimeTicks" : 5,
      "SortName" : "SortName",
      "Timestamp" : "None",
      "ItemId" : "ItemId",
      "Name" : "Name",
      "RequiresOpening" : true,
      "DirectStreamUrl" : "DirectStreamUrl",
      "SupportsDirectStream" : true,
      "RequiresClosing" : true,
      "Container" : "Container",
      "ServerId" : "ServerId",
      "LiveStreamId" : "LiveStreamId",
      "RequiresLooping" : true,
      "Protocol" : "File",
      "AddApiKeyToDirectStreamUrl" : true,
      "DefaultSubtitleStreamIndex" : 9,
      "TrancodeLiveStartIndex" : 2,
      "IsInfiniteStream" : true,
      "Path" : "Path",
      "IsRemote" : true,
      "SupportsDirectPlay" : true,
      "TranscodingSubProtocol" : "TranscodingSubProtocol",
      "Formats" : [ "Formats", "Formats" ],
      "AnalyzeDurationMs" : 6,
      "WallClockStart" : "2000-01-23T04:56:07.000+00:00",
      "Bitrate" : 9,
      "OpenToken" : "OpenToken",
      "SupportsProbing" : true,
      "Type" : "Default",
      "ReadAtNativeFramerate" : true,
      "TranscodingContainer" : "TranscodingContainer",
      "ProbePath" : "ProbePath",
      "TranscodingUrl" : "TranscodingUrl",
      "Id" : "Id",
      "SupportsTranscoding" : true,
      "DefaultAudioStreamIndex" : 8
    },
    "AdditionalFiles" : [ {
      "Path" : "Path",
      "Type" : "Media",
      "Index" : 2,
      "Name" : "Name",
      "ImageType" : "Primary"
    }, {
      "Path" : "Path",
      "Type" : "Media",
      "Index" : 2,
      "Name" : "Name",
      "ImageType" : "Primary"
    } ],
    "PrimaryImageItemId" : "PrimaryImageItemId",
    "ItemName" : "ItemName",
    "Id" : 0,
    "JobId" : 6
  }, {
    "Status" : "Queued",
    "Progress" : 5.637376656633329,
    "OutputPath" : "OutputPath",
    "MediaSourceId" : "MediaSourceId",
    "DateCreated" : "2000-01-23T04:56:07.000+00:00",
    "PrimaryImageTag" : "PrimaryImageTag",
    "ItemId" : 1,
    "TemporaryPath" : "TemporaryPath",
    "TargetId" : "TargetId",
    "InternalTargetId" : 5,
    "MediaSource" : {
      "EncoderPath" : "EncoderPath",
      "RequiredHttpHeaders" : {
        "key" : "RequiredHttpHeaders"
      },
      "RunTimeTicks" : 5,
      "HasMixedProtocols" : true,
      "MediaStreams" : [ {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      }, {
        "VideoRange" : "VideoRange",
        "ColorSpace" : "ColorSpace",
        "Index" : 4,
        "BitDepth" : 2,
        "ItemId" : "ItemId",
        "SupportsExternalStream" : true,
        "Codec" : "Codec",
        "SampleRate" : 1,
        "IsAnamorphic" : true,
        "PixelFormat" : "PixelFormat",
        "AttachmentSize" : 9,
        "SubtitleLocationType" : "InternalStream",
        "RefFrames" : 4,
        "IsAVC" : true,
        "ColorTransfer" : "ColorTransfer",
        "ExtendedVideoSubTypeDescription" : "ExtendedVideoSubTypeDescription",
        "IsExternalUrl" : true,
        "DisplayTitle" : "DisplayTitle",
        "IsForced" : true,
        "ChannelLayout" : "ChannelLayout",
        "DisplayLanguage" : "DisplayLanguage",
        "AverageFrameRate" : 7.4577446,
        "StreamStartTimeTicks" : 9,
        "IsExternal" : true,
        "Level" : 5.025004791520295,
        "ExtendedVideoSubType" : "None",
        "Channels" : 1,
        "Profile" : "Profile",
        "MimeType" : "MimeType",
        "DeliveryUrl" : "DeliveryUrl",
        "ColorPrimaries" : "ColorPrimaries",
        "ServerId" : "ServerId",
        "Language" : "Language",
        "IsTextSubtitleStream" : true,
        "NalLengthSize" : "NalLengthSize",
        "Height" : 1,
        "Width" : 6,
        "TimeBase" : "TimeBase",
        "CodecTag" : "CodecTag",
        "IsDefault" : true,
        "Path" : "Path",
        "Comment" : "Comment",
        "DeliveryMethod" : "Encode",
        "Title" : "Title",
        "ExtendedVideoType" : "None",
        "Rotation" : 7,
        "RealFrameRate" : 1.1730742,
        "IsHearingImpaired" : true,
        "AspectRatio" : "AspectRatio",
        "Type" : "Unknown",
        "IsInterlaced" : true,
        "Extradata" : "Extradata",
        "BitRate" : 3
      } ],
      "Size" : 1,
      "BufferMs" : 7,
      "ContainerStartTimeTicks" : 5,
      "SortName" : "SortName",
      "Timestamp" : "None",
      "ItemId" : "ItemId",
      "Name" : "Name",
      "RequiresOpening" : true,
      "DirectStreamUrl" : "DirectStreamUrl",
      "SupportsDirectStream" : true,
      "RequiresClosing" : true,
      "Container" : "Container",
      "ServerId" : "ServerId",
      "LiveStreamId" : "LiveStreamId",
      "RequiresLooping" : true,
      "Protocol" : "File",
      "AddApiKeyToDirectStreamUrl" : true,
      "DefaultSubtitleStreamIndex" : 9,
      "TrancodeLiveStartIndex" : 2,
      "IsInfiniteStream" : true,
      "Path" : "Path",
      "IsRemote" : true,
      "SupportsDirectPlay" : true,
      "TranscodingSubProtocol" : "TranscodingSubProtocol",
      "Formats" : [ "Formats", "Formats" ],
      "AnalyzeDurationMs" : 6,
      "WallClockStart" : "2000-01-23T04:56:07.000+00:00",
      "Bitrate" : 9,
      "OpenToken" : "OpenToken",
      "SupportsProbing" : true,
      "Type" : "Default",
      "ReadAtNativeFramerate" : true,
      "TranscodingContainer" : "TranscodingContainer",
      "ProbePath" : "ProbePath",
      "TranscodingUrl" : "TranscodingUrl",
      "Id" : "Id",
      "SupportsTranscoding" : true,
      "DefaultAudioStreamIndex" : 8
    },
    "AdditionalFiles" : [ {
      "Path" : "Path",
      "Type" : "Media",
      "Index" : 2,
      "Name" : "Name",
      "ImageType" : "Primary"
    }, {
      "Path" : "Path",
      "Type" : "Media",
      "Index" : 2,
      "Name" : "Name",
      "ImageType" : "Primary"
    } ],
    "PrimaryImageItemId" : "PrimaryImageItemId",
    "ItemName" : "ItemName",
    "Id" : 0,
    "JobId" : 6
  } ],
  "Job" : {
    "Category" : "Latest",
    "ItemLimit" : 7,
    "DateCreated" : "2000-01-23T04:56:07.000+00:00",
    "PrimaryImageTag" : "PrimaryImageTag",
    "RequestedItemIds" : [ 9, 9 ],
    "TargetName" : "TargetName",
    "SyncNewContent" : true,
    "ParentName" : "ParentName",
    "ItemId" : 3,
    "Profile" : "Profile",
    "Name" : "Name",
    "DateLastModified" : "2000-01-23T04:56:07.000+00:00",
    "Container" : "Container",
    "Quality" : "Quality",
    "PrimaryImageItemId" : "PrimaryImageItemId",
    "ItemCount" : 2,
    "AudioCodec" : "AudioCodec",
    "ParentId" : 5,
    "Status" : "Queued",
    "Progress" : 5.637376656633329,
    "Bitrate" : 1,
    "VideoCodec" : "VideoCodec",
    "TargetId" : "TargetId",
    "InternalTargetId" : 6,
    "UserId" : 2,
    "UnwatchedOnly" : true,
    "Id" : 0
  }
}}]
     - parameter body: (body) SyncJobRequest:  

     - returns: RequestBuilder<SyncJobCreationResult> 
     */
    open class func postSyncJobsWithRequestBuilder(body: SyncJobRequest) -> RequestBuilder<SyncJobCreationResult> {
        let path = "/Sync/Jobs"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SyncJobCreationResult>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Updates a sync job.

     - parameter body: (body) SyncJob:  
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSyncJobsById(body: SyncJob, _id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSyncJobsByIdWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates a sync job.
     - POST /Sync/Jobs/{Id}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) SyncJob:  
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func postSyncJobsByIdWithRequestBuilder(body: SyncJob, _id: Int64) -> RequestBuilder<Void> {
        var path = "/Sync/Jobs/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Cancels a sync job.

     - parameter _id: (path) Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSyncJobsByIdDelete(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSyncJobsByIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Cancels a sync job.
     - POST /Sync/Jobs/{Id}/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Id 

     - returns: RequestBuilder<Void> 
     */
    open class func postSyncJobsByIdDeleteWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Sync/Jobs/{Id}/Delete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Reports an action that occurred while offline.

     - parameter body: (body) List&#x60;1:  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSyncOfflineactions(body: [UserAction], completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postSyncOfflineactionsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Reports an action that occurred while offline.
     - POST /Sync/OfflineActions

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) List&#x60;1:  

     - returns: RequestBuilder<Void> 
     */
    open class func postSyncOfflineactionsWithRequestBuilder(body: [UserAction]) -> RequestBuilder<Void> {
        let path = "/Sync/OfflineActions"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
