//
// DashboardServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DashboardServiceAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebConfigurationpage(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getWebConfigurationpageWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /web/ConfigurationPage


     - returns: RequestBuilder<Void> 
     */
    open class func getWebConfigurationpageWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/web/ConfigurationPage"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebConfigurationpages(completion: @escaping ((_ data: [EmbyWebApiConfigurationPageInfo]?,_ error: Error?) -> Void)) {
        getWebConfigurationpagesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /web/ConfigurationPages

     - examples: [{contentType=application/json, example=[ {
  "MenuIcon" : "MenuIcon",
  "EnableInMainMenu" : true,
  "ConfigurationPageType" : "PluginConfiguration",
  "DisplayName" : "DisplayName",
  "MenuSection" : "MenuSection",
  "PluginId" : "PluginId",
  "Translations" : [ "Translations", "Translations" ],
  "Name" : "Name",
  "Plugin" : {
    "Description" : "Description",
    "Version" : {
      "Major" : 0,
      "Revision" : 5,
      "Build" : 1,
      "Minor" : 6,
      "MinorRevision" : 2,
      "MajorRevision" : 5
    },
    "AssemblyFilePath" : "AssemblyFilePath",
    "DataFolderPath" : "DataFolderPath",
    "Id" : "Id",
    "Name" : "Name"
  }
}, {
  "MenuIcon" : "MenuIcon",
  "EnableInMainMenu" : true,
  "ConfigurationPageType" : "PluginConfiguration",
  "DisplayName" : "DisplayName",
  "MenuSection" : "MenuSection",
  "PluginId" : "PluginId",
  "Translations" : [ "Translations", "Translations" ],
  "Name" : "Name",
  "Plugin" : {
    "Description" : "Description",
    "Version" : {
      "Major" : 0,
      "Revision" : 5,
      "Build" : 1,
      "Minor" : 6,
      "MinorRevision" : 2,
      "MajorRevision" : 5
    },
    "AssemblyFilePath" : "AssemblyFilePath",
    "DataFolderPath" : "DataFolderPath",
    "Id" : "Id",
    "Name" : "Name"
  }
} ]}]

     - returns: RequestBuilder<[EmbyWebApiConfigurationPageInfo]> 
     */
    open class func getWebConfigurationpagesWithRequestBuilder() -> RequestBuilder<[EmbyWebApiConfigurationPageInfo]> {
        let path = "/web/ConfigurationPages"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[EmbyWebApiConfigurationPageInfo]>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebStrings(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getWebStringsWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /web/strings


     - returns: RequestBuilder<Void> 
     */
    open class func getWebStringsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/web/strings"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
