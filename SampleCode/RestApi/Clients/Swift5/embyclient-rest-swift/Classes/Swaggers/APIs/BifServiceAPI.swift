//
// BifServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class BifServiceAPI {
    /**

     - parameter width: (query)  
     - parameter _id: (path) Item Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemsByIdThumbnailset(width: Int, _id: String, completion: @escaping ((_ data: RokuMetadataApiThumbnailSetInfo?,_ error: Error?) -> Void)) {
        getItemsByIdThumbnailsetWithRequestBuilder(width: width, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /Items/{Id}/ThumbnailSet

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "AspectRatio" : 0.8008281904610115,
  "Thumbnails" : [ {
    "ImageTag" : "ImageTag",
    "PositionTicks" : 6
  }, {
    "ImageTag" : "ImageTag",
    "PositionTicks" : 6
  } ]
}}]
     - parameter width: (query)  
     - parameter _id: (path) Item Id 

     - returns: RequestBuilder<RokuMetadataApiThumbnailSetInfo> 
     */
    open class func getItemsByIdThumbnailsetWithRequestBuilder(width: Int, _id: String) -> RequestBuilder<RokuMetadataApiThumbnailSetInfo> {
        var path = "/Items/{Id}/ThumbnailSet"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Width": width.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<RokuMetadataApiThumbnailSetInfo>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter width: (query)  
     - parameter _id: (path) Item Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVideosByIdIndexBif(width: Int, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getVideosByIdIndexBifWithRequestBuilder(width: width, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Videos/{Id}/index.bif

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter width: (query)  
     - parameter _id: (path) Item Id 

     - returns: RequestBuilder<Void> 
     */
    open class func getVideosByIdIndexBifWithRequestBuilder(width: Int, _id: String) -> RequestBuilder<Void> {
        var path = "/Videos/{Id}/index.bif"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Width": width.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
