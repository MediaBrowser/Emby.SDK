//
// SubtitleServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SubtitleServiceAPI {
    /**
     Deletes an external subtitle file

     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (query) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteItemsByIdSubtitlesByIndex(_id: String, mediaSourceId: String, index: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteItemsByIdSubtitlesByIndexWithRequestBuilder(_id: _id, mediaSourceId: mediaSourceId, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes an external subtitle file
     - DELETE /Items/{Id}/Subtitles/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (query) MediaSourceId 
     - parameter index: (path) The subtitle stream index 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteItemsByIdSubtitlesByIndexWithRequestBuilder(_id: String, mediaSourceId: String, index: Int) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Subtitles/{Index}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MediaSourceId": mediaSourceId
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Deletes an external subtitle file

     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (query) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteVideosByIdSubtitlesByIndex(_id: String, mediaSourceId: String, index: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteVideosByIdSubtitlesByIndexWithRequestBuilder(_id: _id, mediaSourceId: mediaSourceId, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes an external subtitle file
     - DELETE /Videos/{Id}/Subtitles/{Index}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (query) MediaSourceId 
     - parameter index: (path) The subtitle stream index 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteVideosByIdSubtitlesByIndexWithRequestBuilder(_id: String, mediaSourceId: String, index: Int) -> RequestBuilder<Void> {
        var path = "/Videos/{Id}/Subtitles/{Index}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MediaSourceId": mediaSourceId
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets subtitles in a specified format.

     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (path) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter format: (path) Format 
     - parameter startPositionTicks: (path) StartPositionTicks 
     - parameter endPositionTicks: (query) EndPositionTicks (optional)
     - parameter copyTimestamps: (query) CopyTimestamps (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat(_id: String, mediaSourceId: String, index: Int, format: String, startPositionTicks: Int64, endPositionTicks: Int64? = nil, copyTimestamps: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatWithRequestBuilder(_id: _id, mediaSourceId: mediaSourceId, index: index, format: format, startPositionTicks: startPositionTicks, endPositionTicks: endPositionTicks, copyTimestamps: copyTimestamps).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets subtitles in a specified format.
     - GET /Items/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (path) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter format: (path) Format 
     - parameter startPositionTicks: (path) StartPositionTicks 
     - parameter endPositionTicks: (query) EndPositionTicks (optional)
     - parameter copyTimestamps: (query) CopyTimestamps (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatWithRequestBuilder(_id: String, mediaSourceId: String, index: Int, format: String, startPositionTicks: Int64, endPositionTicks: Int64? = nil, copyTimestamps: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let mediaSourceIdPreEscape = "\(mediaSourceId)"
        let mediaSourceIdPostEscape = mediaSourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{MediaSourceId}", with: mediaSourceIdPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(format)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Format}", with: formatPostEscape, options: .literal, range: nil)
        let startPositionTicksPreEscape = "\(startPositionTicks)"
        let startPositionTicksPostEscape = startPositionTicksPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{StartPositionTicks}", with: startPositionTicksPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "EndPositionTicks": endPositionTicks?.encodeToJSON(), 
                        "CopyTimestamps": copyTimestamps
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets subtitles in a specified format.

     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (path) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter format: (path) Format 
     - parameter startPositionTicks: (query) StartPositionTicks (optional)
     - parameter endPositionTicks: (query) EndPositionTicks (optional)
     - parameter copyTimestamps: (query) CopyTimestamps (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemsByIdByMediasourceidSubtitlesByIndexStreamByFormat(_id: String, mediaSourceId: String, index: Int, format: String, startPositionTicks: Int64? = nil, endPositionTicks: Int64? = nil, copyTimestamps: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatWithRequestBuilder(_id: _id, mediaSourceId: mediaSourceId, index: index, format: format, startPositionTicks: startPositionTicks, endPositionTicks: endPositionTicks, copyTimestamps: copyTimestamps).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets subtitles in a specified format.
     - GET /Items/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (path) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter format: (path) Format 
     - parameter startPositionTicks: (query) StartPositionTicks (optional)
     - parameter endPositionTicks: (query) EndPositionTicks (optional)
     - parameter copyTimestamps: (query) CopyTimestamps (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatWithRequestBuilder(_id: String, mediaSourceId: String, index: Int, format: String, startPositionTicks: Int64? = nil, endPositionTicks: Int64? = nil, copyTimestamps: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let mediaSourceIdPreEscape = "\(mediaSourceId)"
        let mediaSourceIdPostEscape = mediaSourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{MediaSourceId}", with: mediaSourceIdPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(format)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Format}", with: formatPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "StartPositionTicks": startPositionTicks?.encodeToJSON(), 
                        "EndPositionTicks": endPositionTicks?.encodeToJSON(), 
                        "CopyTimestamps": copyTimestamps
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (query) MediaSourceId 
     - parameter language: (path) Language 
     - parameter isPerfectMatch: (query) IsPerfectMatch (optional)
     - parameter isForced: (query) IsForced (optional)
     - parameter isHearingImpaired: (query) IsHearingImpaired (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemsByIdRemotesearchSubtitlesByLanguage(_id: String, mediaSourceId: String, language: String, isPerfectMatch: Bool? = nil, isForced: Bool? = nil, isHearingImpaired: Bool? = nil, completion: @escaping ((_ data: [RemoteSubtitleInfo]?,_ error: Error?) -> Void)) {
        getItemsByIdRemotesearchSubtitlesByLanguageWithRequestBuilder(_id: _id, mediaSourceId: mediaSourceId, language: language, isPerfectMatch: isPerfectMatch, isForced: isForced, isHearingImpaired: isHearingImpaired).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /Items/{Id}/RemoteSearch/Subtitles/{Language}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "Comment" : "Comment",
  "ThreeLetterISOLanguageName" : "ThreeLetterISOLanguageName",
  "IsForced" : true,
  "DateCreated" : "2000-01-23T04:56:07.000+00:00",
  "Name" : "Name",
  "IsHearingImpaired" : true,
  "ProviderName" : "ProviderName",
  "Format" : "Format",
  "Language" : "Language",
  "IsHashMatch" : true,
  "Author" : "Author",
  "CommunityRating" : 0.8008282,
  "Id" : "Id",
  "DownloadCount" : 6
}, {
  "Comment" : "Comment",
  "ThreeLetterISOLanguageName" : "ThreeLetterISOLanguageName",
  "IsForced" : true,
  "DateCreated" : "2000-01-23T04:56:07.000+00:00",
  "Name" : "Name",
  "IsHearingImpaired" : true,
  "ProviderName" : "ProviderName",
  "Format" : "Format",
  "Language" : "Language",
  "IsHashMatch" : true,
  "Author" : "Author",
  "CommunityRating" : 0.8008282,
  "Id" : "Id",
  "DownloadCount" : 6
} ]}]
     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (query) MediaSourceId 
     - parameter language: (path) Language 
     - parameter isPerfectMatch: (query) IsPerfectMatch (optional)
     - parameter isForced: (query) IsForced (optional)
     - parameter isHearingImpaired: (query) IsHearingImpaired (optional)

     - returns: RequestBuilder<[RemoteSubtitleInfo]> 
     */
    open class func getItemsByIdRemotesearchSubtitlesByLanguageWithRequestBuilder(_id: String, mediaSourceId: String, language: String, isPerfectMatch: Bool? = nil, isForced: Bool? = nil, isHearingImpaired: Bool? = nil) -> RequestBuilder<[RemoteSubtitleInfo]> {
        var path = "/Items/{Id}/RemoteSearch/Subtitles/{Language}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let languagePreEscape = "\(language)"
        let languagePostEscape = languagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Language}", with: languagePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MediaSourceId": mediaSourceId, 
                        "IsPerfectMatch": isPerfectMatch, 
                        "IsForced": isForced, 
                        "IsHearingImpaired": isHearingImpaired
        ])


        let requestBuilder: RequestBuilder<[RemoteSubtitleInfo]>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) Item Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProvidersSubtitlesSubtitlesById(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getProvidersSubtitlesSubtitlesByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Providers/Subtitles/Subtitles/{Id}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 

     - returns: RequestBuilder<Void> 
     */
    open class func getProvidersSubtitlesSubtitlesByIdWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Providers/Subtitles/Subtitles/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets subtitles in a specified format.

     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (path) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter format: (path) Format 
     - parameter startPositionTicks: (path) StartPositionTicks 
     - parameter endPositionTicks: (query) EndPositionTicks (optional)
     - parameter copyTimestamps: (query) CopyTimestamps (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat(_id: String, mediaSourceId: String, index: Int, format: String, startPositionTicks: Int64, endPositionTicks: Int64? = nil, copyTimestamps: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatWithRequestBuilder(_id: _id, mediaSourceId: mediaSourceId, index: index, format: format, startPositionTicks: startPositionTicks, endPositionTicks: endPositionTicks, copyTimestamps: copyTimestamps).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets subtitles in a specified format.
     - GET /Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (path) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter format: (path) Format 
     - parameter startPositionTicks: (path) StartPositionTicks 
     - parameter endPositionTicks: (query) EndPositionTicks (optional)
     - parameter copyTimestamps: (query) CopyTimestamps (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatWithRequestBuilder(_id: String, mediaSourceId: String, index: Int, format: String, startPositionTicks: Int64, endPositionTicks: Int64? = nil, copyTimestamps: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let mediaSourceIdPreEscape = "\(mediaSourceId)"
        let mediaSourceIdPostEscape = mediaSourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{MediaSourceId}", with: mediaSourceIdPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(format)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Format}", with: formatPostEscape, options: .literal, range: nil)
        let startPositionTicksPreEscape = "\(startPositionTicks)"
        let startPositionTicksPostEscape = startPositionTicksPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{StartPositionTicks}", with: startPositionTicksPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "EndPositionTicks": endPositionTicks?.encodeToJSON(), 
                        "CopyTimestamps": copyTimestamps
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets subtitles in a specified format.

     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (path) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter format: (path) Format 
     - parameter startPositionTicks: (query) StartPositionTicks (optional)
     - parameter endPositionTicks: (query) EndPositionTicks (optional)
     - parameter copyTimestamps: (query) CopyTimestamps (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVideosByIdByMediasourceidSubtitlesByIndexStreamByFormat(_id: String, mediaSourceId: String, index: Int, format: String, startPositionTicks: Int64? = nil, endPositionTicks: Int64? = nil, copyTimestamps: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatWithRequestBuilder(_id: _id, mediaSourceId: mediaSourceId, index: index, format: format, startPositionTicks: startPositionTicks, endPositionTicks: endPositionTicks, copyTimestamps: copyTimestamps).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets subtitles in a specified format.
     - GET /Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (path) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter format: (path) Format 
     - parameter startPositionTicks: (query) StartPositionTicks (optional)
     - parameter endPositionTicks: (query) EndPositionTicks (optional)
     - parameter copyTimestamps: (query) CopyTimestamps (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatWithRequestBuilder(_id: String, mediaSourceId: String, index: Int, format: String, startPositionTicks: Int64? = nil, endPositionTicks: Int64? = nil, copyTimestamps: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let mediaSourceIdPreEscape = "\(mediaSourceId)"
        let mediaSourceIdPostEscape = mediaSourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{MediaSourceId}", with: mediaSourceIdPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(format)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Format}", with: formatPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "StartPositionTicks": startPositionTicks?.encodeToJSON(), 
                        "EndPositionTicks": endPositionTicks?.encodeToJSON(), 
                        "CopyTimestamps": copyTimestamps
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (query) MediaSourceId 
     - parameter subtitleId: (path) SubtitleId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postItemsByIdRemotesearchSubtitlesBySubtitleid(_id: String, mediaSourceId: String, subtitleId: String, completion: @escaping ((_ data: SubtitlesSubtitleDownloadResult?,_ error: Error?) -> Void)) {
        postItemsByIdRemotesearchSubtitlesBySubtitleidWithRequestBuilder(_id: _id, mediaSourceId: mediaSourceId, subtitleId: subtitleId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /Items/{Id}/RemoteSearch/Subtitles/{SubtitleId}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "NewIndex" : 0
}}]
     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (query) MediaSourceId 
     - parameter subtitleId: (path) SubtitleId 

     - returns: RequestBuilder<SubtitlesSubtitleDownloadResult> 
     */
    open class func postItemsByIdRemotesearchSubtitlesBySubtitleidWithRequestBuilder(_id: String, mediaSourceId: String, subtitleId: String) -> RequestBuilder<SubtitlesSubtitleDownloadResult> {
        var path = "/Items/{Id}/RemoteSearch/Subtitles/{SubtitleId}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let subtitleIdPreEscape = "\(subtitleId)"
        let subtitleIdPostEscape = subtitleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{SubtitleId}", with: subtitleIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MediaSourceId": mediaSourceId
        ])


        let requestBuilder: RequestBuilder<SubtitlesSubtitleDownloadResult>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Deletes an external subtitle file

     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (query) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postItemsByIdSubtitlesByIndexDelete(_id: String, mediaSourceId: String, index: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postItemsByIdSubtitlesByIndexDeleteWithRequestBuilder(_id: _id, mediaSourceId: mediaSourceId, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes an external subtitle file
     - POST /Items/{Id}/Subtitles/{Index}/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (query) MediaSourceId 
     - parameter index: (path) The subtitle stream index 

     - returns: RequestBuilder<Void> 
     */
    open class func postItemsByIdSubtitlesByIndexDeleteWithRequestBuilder(_id: String, mediaSourceId: String, index: Int) -> RequestBuilder<Void> {
        var path = "/Items/{Id}/Subtitles/{Index}/Delete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MediaSourceId": mediaSourceId
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Deletes an external subtitle file

     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (query) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postVideosByIdSubtitlesByIndexDelete(_id: String, mediaSourceId: String, index: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postVideosByIdSubtitlesByIndexDeleteWithRequestBuilder(_id: _id, mediaSourceId: mediaSourceId, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes an external subtitle file
     - POST /Videos/{Id}/Subtitles/{Index}/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Item Id 
     - parameter mediaSourceId: (query) MediaSourceId 
     - parameter index: (path) The subtitle stream index 

     - returns: RequestBuilder<Void> 
     */
    open class func postVideosByIdSubtitlesByIndexDeleteWithRequestBuilder(_id: String, mediaSourceId: String, index: Int) -> RequestBuilder<Void> {
        var path = "/Videos/{Id}/Subtitles/{Index}/Delete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "MediaSourceId": mediaSourceId
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
