//
// BrandingServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class BrandingServiceAPI {
    /**
     Gets branding configuration

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBrandingConfiguration(completion: @escaping ((_ data: BrandingBrandingOptions?,_ error: Error?) -> Void)) {
        getBrandingConfigurationWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets branding configuration
     - GET /Branding/Configuration

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "CustomCss" : "CustomCss",
  "LoginDisclaimer" : "LoginDisclaimer"
}}]

     - returns: RequestBuilder<BrandingBrandingOptions> 
     */
    open class func getBrandingConfigurationWithRequestBuilder() -> RequestBuilder<BrandingBrandingOptions> {
        let path = "/Branding/Configuration"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BrandingBrandingOptions>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets custom css

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBrandingCss(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getBrandingCssWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets custom css
     - GET /Branding/Css

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth

     - returns: RequestBuilder<Void> 
     */
    open class func getBrandingCssWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/Branding/Css"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets custom css

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBrandingCssCss(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getBrandingCssCssWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Gets custom css
     - GET /Branding/Css.css

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth

     - returns: RequestBuilder<Void> 
     */
    open class func getBrandingCssCssWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/Branding/Css.css"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
