//
// PackageServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PackageServiceAPI {
    /**
     Cancels a package installation

     - parameter _id: (path) Installation Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePackagesInstallingById(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deletePackagesInstallingByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Cancels a package installation
     - DELETE /Packages/Installing/{Id}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Installation Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deletePackagesInstallingByIdWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Packages/Installing/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets available packages

     - parameter packageType: (query) Optional package type filter (System/UserInstalled) (optional)
     - parameter targetSystems: (query) Optional. Filter by target system type. Allows multiple, comma delimited. (optional)
     - parameter isPremium: (query) Optional. Filter by premium status (optional)
     - parameter isAdult: (query) Optional. Filter by package that contain adult content. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPackages(packageType: String? = nil, targetSystems: String? = nil, isPremium: Bool? = nil, isAdult: Bool? = nil, completion: @escaping ((_ data: [PackageInfo]?,_ error: Error?) -> Void)) {
        getPackagesWithRequestBuilder(packageType: packageType, targetSystems: targetSystems, isPremium: isPremium, isAdult: isAdult).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets available packages
     - GET /Packages

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "owner" : "owner",
  "overview" : "overview",
  "tileColor" : "tileColor",
  "shortDescription" : "shortDescription",
  "type" : "type",
  "richDescUrl" : "richDescUrl",
  "targetSystem" : "Server",
  "expDate" : "2000-01-23T04:56:07.000+00:00",
  "installs" : 6,
  "enableInAppStore" : true,
  "thumbImage" : "thumbImage",
  "versions" : [ {
    "sourceUrl" : "sourceUrl",
    "versionStr" : "versionStr",
    "runtimes" : "runtimes",
    "requiredVersionStr" : "requiredVersionStr",
    "infoUrl" : "infoUrl",
    "targetFilename" : "targetFilename",
    "name" : "name",
    "checksum" : "checksum",
    "guid" : "guid",
    "description" : "description",
    "classification" : "Release",
    "timestamp" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "sourceUrl" : "sourceUrl",
    "versionStr" : "versionStr",
    "runtimes" : "runtimes",
    "requiredVersionStr" : "requiredVersionStr",
    "infoUrl" : "infoUrl",
    "targetFilename" : "targetFilename",
    "name" : "name",
    "checksum" : "checksum",
    "guid" : "guid",
    "description" : "description",
    "classification" : "Release",
    "timestamp" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "price" : 0.8008282,
  "targetFilename" : "targetFilename",
  "name" : "name",
  "guid" : "guid",
  "isRegistered" : true,
  "id" : "id",
  "isPremium" : true,
  "adult" : true,
  "category" : "category",
  "previewImage" : "previewImage",
  "featureId" : "featureId"
}, {
  "owner" : "owner",
  "overview" : "overview",
  "tileColor" : "tileColor",
  "shortDescription" : "shortDescription",
  "type" : "type",
  "richDescUrl" : "richDescUrl",
  "targetSystem" : "Server",
  "expDate" : "2000-01-23T04:56:07.000+00:00",
  "installs" : 6,
  "enableInAppStore" : true,
  "thumbImage" : "thumbImage",
  "versions" : [ {
    "sourceUrl" : "sourceUrl",
    "versionStr" : "versionStr",
    "runtimes" : "runtimes",
    "requiredVersionStr" : "requiredVersionStr",
    "infoUrl" : "infoUrl",
    "targetFilename" : "targetFilename",
    "name" : "name",
    "checksum" : "checksum",
    "guid" : "guid",
    "description" : "description",
    "classification" : "Release",
    "timestamp" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "sourceUrl" : "sourceUrl",
    "versionStr" : "versionStr",
    "runtimes" : "runtimes",
    "requiredVersionStr" : "requiredVersionStr",
    "infoUrl" : "infoUrl",
    "targetFilename" : "targetFilename",
    "name" : "name",
    "checksum" : "checksum",
    "guid" : "guid",
    "description" : "description",
    "classification" : "Release",
    "timestamp" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "price" : 0.8008282,
  "targetFilename" : "targetFilename",
  "name" : "name",
  "guid" : "guid",
  "isRegistered" : true,
  "id" : "id",
  "isPremium" : true,
  "adult" : true,
  "category" : "category",
  "previewImage" : "previewImage",
  "featureId" : "featureId"
} ]}]
     - parameter packageType: (query) Optional package type filter (System/UserInstalled) (optional)
     - parameter targetSystems: (query) Optional. Filter by target system type. Allows multiple, comma delimited. (optional)
     - parameter isPremium: (query) Optional. Filter by premium status (optional)
     - parameter isAdult: (query) Optional. Filter by package that contain adult content. (optional)

     - returns: RequestBuilder<[PackageInfo]> 
     */
    open class func getPackagesWithRequestBuilder(packageType: String? = nil, targetSystems: String? = nil, isPremium: Bool? = nil, isAdult: Bool? = nil) -> RequestBuilder<[PackageInfo]> {
        let path = "/Packages"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "PackageType": packageType, 
                        "TargetSystems": targetSystems, 
                        "IsPremium": isPremium, 
                        "IsAdult": isAdult
        ])


        let requestBuilder: RequestBuilder<[PackageInfo]>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a package, by name or assembly guid

     - parameter name: (path) The name of the package 
     - parameter assemblyGuid: (query) The guid of the associated assembly (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPackagesByName(name: String, assemblyGuid: String? = nil, completion: @escaping ((_ data: PackageInfo?,_ error: Error?) -> Void)) {
        getPackagesByNameWithRequestBuilder(name: name, assemblyGuid: assemblyGuid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a package, by name or assembly guid
     - GET /Packages/{Name}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "owner" : "owner",
  "overview" : "overview",
  "tileColor" : "tileColor",
  "shortDescription" : "shortDescription",
  "type" : "type",
  "richDescUrl" : "richDescUrl",
  "targetSystem" : "Server",
  "expDate" : "2000-01-23T04:56:07.000+00:00",
  "installs" : 6,
  "enableInAppStore" : true,
  "thumbImage" : "thumbImage",
  "versions" : [ {
    "sourceUrl" : "sourceUrl",
    "versionStr" : "versionStr",
    "runtimes" : "runtimes",
    "requiredVersionStr" : "requiredVersionStr",
    "infoUrl" : "infoUrl",
    "targetFilename" : "targetFilename",
    "name" : "name",
    "checksum" : "checksum",
    "guid" : "guid",
    "description" : "description",
    "classification" : "Release",
    "timestamp" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "sourceUrl" : "sourceUrl",
    "versionStr" : "versionStr",
    "runtimes" : "runtimes",
    "requiredVersionStr" : "requiredVersionStr",
    "infoUrl" : "infoUrl",
    "targetFilename" : "targetFilename",
    "name" : "name",
    "checksum" : "checksum",
    "guid" : "guid",
    "description" : "description",
    "classification" : "Release",
    "timestamp" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "price" : 0.8008282,
  "targetFilename" : "targetFilename",
  "name" : "name",
  "guid" : "guid",
  "isRegistered" : true,
  "id" : "id",
  "isPremium" : true,
  "adult" : true,
  "category" : "category",
  "previewImage" : "previewImage",
  "featureId" : "featureId"
}}]
     - parameter name: (path) The name of the package 
     - parameter assemblyGuid: (query) The guid of the associated assembly (optional)

     - returns: RequestBuilder<PackageInfo> 
     */
    open class func getPackagesByNameWithRequestBuilder(name: String, assemblyGuid: String? = nil) -> RequestBuilder<PackageInfo> {
        var path = "/Packages/{Name}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "AssemblyGuid": assemblyGuid
        ])


        let requestBuilder: RequestBuilder<PackageInfo>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets available package updates for currently installed packages

     - parameter packageType: (query) Package type filter (System/UserInstalled) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPackagesUpdates(packageType: String, completion: @escaping ((_ data: [PackageVersionInfo]?,_ error: Error?) -> Void)) {
        getPackagesUpdatesWithRequestBuilder(packageType: packageType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets available package updates for currently installed packages
     - GET /Packages/Updates

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "sourceUrl" : "sourceUrl",
  "versionStr" : "versionStr",
  "runtimes" : "runtimes",
  "requiredVersionStr" : "requiredVersionStr",
  "infoUrl" : "infoUrl",
  "targetFilename" : "targetFilename",
  "name" : "name",
  "checksum" : "checksum",
  "guid" : "guid",
  "description" : "description",
  "classification" : "Release",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, {
  "sourceUrl" : "sourceUrl",
  "versionStr" : "versionStr",
  "runtimes" : "runtimes",
  "requiredVersionStr" : "requiredVersionStr",
  "infoUrl" : "infoUrl",
  "targetFilename" : "targetFilename",
  "name" : "name",
  "checksum" : "checksum",
  "guid" : "guid",
  "description" : "description",
  "classification" : "Release",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter packageType: (query) Package type filter (System/UserInstalled) 

     - returns: RequestBuilder<[PackageVersionInfo]> 
     */
    open class func getPackagesUpdatesWithRequestBuilder(packageType: String) -> RequestBuilder<[PackageVersionInfo]> {
        let path = "/Packages/Updates"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "PackageType": packageType
        ])


        let requestBuilder: RequestBuilder<[PackageVersionInfo]>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Installs a package

     - parameter name: (path) Package name 
     - parameter assemblyGuid: (query) Guid of the associated assembly (optional)
     - parameter version: (query) Optional version. Defaults to latest version. (optional)
     - parameter updateClass: (query) Optional update class (Dev, Beta, Release). Defaults to Release. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPackagesInstalledByName(name: String, assemblyGuid: String? = nil, version: String? = nil, updateClass: PackageVersionClass? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postPackagesInstalledByNameWithRequestBuilder(name: name, assemblyGuid: assemblyGuid, version: version, updateClass: updateClass).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Installs a package
     - POST /Packages/Installed/{Name}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter name: (path) Package name 
     - parameter assemblyGuid: (query) Guid of the associated assembly (optional)
     - parameter version: (query) Optional version. Defaults to latest version. (optional)
     - parameter updateClass: (query) Optional update class (Dev, Beta, Release). Defaults to Release. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postPackagesInstalledByNameWithRequestBuilder(name: String, assemblyGuid: String? = nil, version: String? = nil, updateClass: PackageVersionClass? = nil) -> RequestBuilder<Void> {
        var path = "/Packages/Installed/{Name}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "AssemblyGuid": assemblyGuid, 
                        "Version": version, 
                        "UpdateClass": updateClass
        ])


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Cancels a package installation

     - parameter _id: (path) Installation Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPackagesInstallingByIdDelete(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postPackagesInstallingByIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Cancels a package installation
     - POST /Packages/Installing/{Id}/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path) Installation Id 

     - returns: RequestBuilder<Void> 
     */
    open class func postPackagesInstallingByIdDeleteWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Packages/Installing/{Id}/Delete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
