//
// VideoHlsServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class VideoHlsServiceAPI {
    /**

     - parameter segmentContainer: (path)  
     - parameter segmentId: (path)  
     - parameter _id: (path)  
     - parameter playlistId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAudioByIdHlsByPlaylistidBySegmentidBySegmentcontainer(segmentContainer: String, segmentId: String, _id: String, playlistId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAudioByIdHlsByPlaylistidBySegmentidBySegmentcontainerWithRequestBuilder(segmentContainer: segmentContainer, segmentId: segmentId, _id: _id, playlistId: playlistId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Audio/{Id}/hls/{PlaylistId}/{SegmentId}.{SegmentContainer}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter segmentContainer: (path)  
     - parameter segmentId: (path)  
     - parameter _id: (path)  
     - parameter playlistId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func getAudioByIdHlsByPlaylistidBySegmentidBySegmentcontainerWithRequestBuilder(segmentContainer: String, segmentId: String, _id: String, playlistId: String) -> RequestBuilder<Void> {
        var path = "/Audio/{Id}/hls/{PlaylistId}/{SegmentId}.{SegmentContainer}"
        let segmentContainerPreEscape = "\(segmentContainer)"
        let segmentContainerPostEscape = segmentContainerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{SegmentContainer}", with: segmentContainerPostEscape, options: .literal, range: nil)
        let segmentIdPreEscape = "\(segmentId)"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{SegmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let playlistIdPreEscape = "\(playlistId)"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{PlaylistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter segmentContainer: (path)  
     - parameter segmentId: (path)  
     - parameter _id: (path)  
     - parameter playlistId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVideosByIdHlsByPlaylistidBySegmentidBySegmentcontainer(segmentContainer: String, segmentId: String, _id: String, playlistId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getVideosByIdHlsByPlaylistidBySegmentidBySegmentcontainerWithRequestBuilder(segmentContainer: segmentContainer, segmentId: segmentId, _id: _id, playlistId: playlistId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /Videos/{Id}/hls/{PlaylistId}/{SegmentId}.{SegmentContainer}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter segmentContainer: (path)  
     - parameter segmentId: (path)  
     - parameter _id: (path)  
     - parameter playlistId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func getVideosByIdHlsByPlaylistidBySegmentidBySegmentcontainerWithRequestBuilder(segmentContainer: String, segmentId: String, _id: String, playlistId: String) -> RequestBuilder<Void> {
        var path = "/Videos/{Id}/hls/{PlaylistId}/{SegmentId}.{SegmentContainer}"
        let segmentContainerPreEscape = "\(segmentContainer)"
        let segmentContainerPostEscape = segmentContainerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{SegmentContainer}", with: segmentContainerPostEscape, options: .literal, range: nil)
        let segmentIdPreEscape = "\(segmentId)"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{SegmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let playlistIdPreEscape = "\(playlistId)"
        let playlistIdPostEscape = playlistIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{PlaylistId}", with: playlistIdPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
