//
// ScheduledTaskServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ScheduledTaskServiceAPI {
    /**
     Stops a scheduled task

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteScheduledtasksRunningById(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteScheduledtasksRunningByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Stops a scheduled task
     - DELETE /ScheduledTasks/Running/{Id}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteScheduledtasksRunningByIdWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/ScheduledTasks/Running/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets scheduled tasks

     - parameter isHidden: (query) Optional filter tasks that are hidden, or not. (optional)
     - parameter isEnabled: (query) Optional filter tasks that are enabled, or not. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScheduledtasks(isHidden: Bool? = nil, isEnabled: Bool? = nil, completion: @escaping ((_ data: [TaskInfo]?,_ error: Error?) -> Void)) {
        getScheduledtasksWithRequestBuilder(isHidden: isHidden, isEnabled: isEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets scheduled tasks
     - GET /ScheduledTasks

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example=[ {
  "IsHidden" : true,
  "Description" : "Description",
  "Category" : "Category",
  "State" : "Idle",
  "CurrentProgressPercentage" : 0.8008281904610115,
  "Triggers" : [ {
    "SystemEvent" : "WakeFromSleep",
    "DayOfWeek" : "Sunday",
    "Type" : "Type",
    "IntervalTicks" : 1,
    "TimeOfDayTicks" : 6,
    "MaxRuntimeTicks" : 5
  }, {
    "SystemEvent" : "WakeFromSleep",
    "DayOfWeek" : "Sunday",
    "Type" : "Type",
    "IntervalTicks" : 1,
    "TimeOfDayTicks" : 6,
    "MaxRuntimeTicks" : 5
  } ],
  "Id" : "Id",
  "LastExecutionResult" : {
    "Status" : "Completed",
    "StartTimeUtc" : "2000-01-23T04:56:07.000+00:00",
    "LongErrorMessage" : "LongErrorMessage",
    "Id" : "Id",
    "EndTimeUtc" : "2000-01-23T04:56:07.000+00:00",
    "ErrorMessage" : "ErrorMessage",
    "Key" : "Key",
    "Name" : "Name"
  },
  "Key" : "Key",
  "Name" : "Name"
}, {
  "IsHidden" : true,
  "Description" : "Description",
  "Category" : "Category",
  "State" : "Idle",
  "CurrentProgressPercentage" : 0.8008281904610115,
  "Triggers" : [ {
    "SystemEvent" : "WakeFromSleep",
    "DayOfWeek" : "Sunday",
    "Type" : "Type",
    "IntervalTicks" : 1,
    "TimeOfDayTicks" : 6,
    "MaxRuntimeTicks" : 5
  }, {
    "SystemEvent" : "WakeFromSleep",
    "DayOfWeek" : "Sunday",
    "Type" : "Type",
    "IntervalTicks" : 1,
    "TimeOfDayTicks" : 6,
    "MaxRuntimeTicks" : 5
  } ],
  "Id" : "Id",
  "LastExecutionResult" : {
    "Status" : "Completed",
    "StartTimeUtc" : "2000-01-23T04:56:07.000+00:00",
    "LongErrorMessage" : "LongErrorMessage",
    "Id" : "Id",
    "EndTimeUtc" : "2000-01-23T04:56:07.000+00:00",
    "ErrorMessage" : "ErrorMessage",
    "Key" : "Key",
    "Name" : "Name"
  },
  "Key" : "Key",
  "Name" : "Name"
} ]}]
     - parameter isHidden: (query) Optional filter tasks that are hidden, or not. (optional)
     - parameter isEnabled: (query) Optional filter tasks that are enabled, or not. (optional)

     - returns: RequestBuilder<[TaskInfo]> 
     */
    open class func getScheduledtasksWithRequestBuilder(isHidden: Bool? = nil, isEnabled: Bool? = nil) -> RequestBuilder<[TaskInfo]> {
        let path = "/ScheduledTasks"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "IsHidden": isHidden, 
                        "IsEnabled": isEnabled
        ])


        let requestBuilder: RequestBuilder<[TaskInfo]>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets a scheduled task, by Id

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScheduledtasksById(_id: String, completion: @escaping ((_ data: TaskInfo?,_ error: Error?) -> Void)) {
        getScheduledtasksByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a scheduled task, by Id
     - GET /ScheduledTasks/{Id}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "IsHidden" : true,
  "Description" : "Description",
  "Category" : "Category",
  "State" : "Idle",
  "CurrentProgressPercentage" : 0.8008281904610115,
  "Triggers" : [ {
    "SystemEvent" : "WakeFromSleep",
    "DayOfWeek" : "Sunday",
    "Type" : "Type",
    "IntervalTicks" : 1,
    "TimeOfDayTicks" : 6,
    "MaxRuntimeTicks" : 5
  }, {
    "SystemEvent" : "WakeFromSleep",
    "DayOfWeek" : "Sunday",
    "Type" : "Type",
    "IntervalTicks" : 1,
    "TimeOfDayTicks" : 6,
    "MaxRuntimeTicks" : 5
  } ],
  "Id" : "Id",
  "LastExecutionResult" : {
    "Status" : "Completed",
    "StartTimeUtc" : "2000-01-23T04:56:07.000+00:00",
    "LongErrorMessage" : "LongErrorMessage",
    "Id" : "Id",
    "EndTimeUtc" : "2000-01-23T04:56:07.000+00:00",
    "ErrorMessage" : "ErrorMessage",
    "Key" : "Key",
    "Name" : "Name"
  },
  "Key" : "Key",
  "Name" : "Name"
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<TaskInfo> 
     */
    open class func getScheduledtasksByIdWithRequestBuilder(_id: String) -> RequestBuilder<TaskInfo> {
        var path = "/ScheduledTasks/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TaskInfo>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Updates the triggers for a scheduled task

     - parameter body: (body) List&#x60;1:  
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postScheduledtasksByIdTriggers(body: [TaskTriggerInfo], _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postScheduledtasksByIdTriggersWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates the triggers for a scheduled task
     - POST /ScheduledTasks/{Id}/Triggers

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter body: (body) List&#x60;1:  
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func postScheduledtasksByIdTriggersWithRequestBuilder(body: [TaskTriggerInfo], _id: String) -> RequestBuilder<Void> {
        var path = "/ScheduledTasks/{Id}/Triggers"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Starts a scheduled task

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postScheduledtasksRunningById(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postScheduledtasksRunningByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Starts a scheduled task
     - POST /ScheduledTasks/Running/{Id}

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func postScheduledtasksRunningByIdWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/ScheduledTasks/Running/{Id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Stops a scheduled task

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postScheduledtasksRunningByIdDelete(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postScheduledtasksRunningByIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Stops a scheduled task
     - POST /ScheduledTasks/Running/{Id}/Delete

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func postScheduledtasksRunningByIdDeleteWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/ScheduledTasks/Running/{Id}/Delete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{Id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
