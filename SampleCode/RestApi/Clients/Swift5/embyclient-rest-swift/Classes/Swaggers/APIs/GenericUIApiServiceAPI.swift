//
// GenericUIApiServiceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class GenericUIApiServiceAPI {
    /**
     Gets UI view data

     - parameter pageId: (query) Id of the page controller 
     - parameter clientLocale: (query) Locale identifier of the client 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUIView(pageId: String, clientLocale: String, completion: @escaping ((_ data: UIViewInfo?,_ error: Error?) -> Void)) {
        getUIViewWithRequestBuilder(pageId: pageId, clientLocale: clientLocale).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets UI view data
     - GET /UI/View

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "PageId" : "PageId",
  "RedirectViewUrl" : "RedirectViewUrl",
  "ShowDialogFullScreen" : true,
  "PluginId" : "PluginId",
  "Caption" : "Caption",
  "EditObjectContainer" : {
    "TypeName" : "TypeName",
    "DefaultObject" : { },
    "Object" : { }
  },
  "TabPageInfos" : [ {
    "PageId" : "PageId",
    "DisplayName" : "DisplayName",
    "Href" : "Href",
    "Index" : 0,
    "NavKey" : "NavKey",
    "PluginId" : "PluginId"
  }, {
    "PageId" : "PageId",
    "DisplayName" : "DisplayName",
    "Href" : "Href",
    "Index" : 0,
    "NavKey" : "NavKey",
    "PluginId" : "PluginId"
  } ],
  "SubCaption" : "SubCaption",
  "ViewId" : "ViewId",
  "IsInSequence" : true,
  "Commands" : [ {
    "SetFocus" : true,
    "CommandType" : "Custom",
    "IsEnabled" : true,
    "ConfirmationPrompt" : "ConfirmationPrompt",
    "CommandId" : "CommandId",
    "IsVisible" : true,
    "Caption" : "Caption"
  }, {
    "SetFocus" : true,
    "CommandType" : "Custom",
    "IsEnabled" : true,
    "ConfirmationPrompt" : "ConfirmationPrompt",
    "CommandId" : "CommandId",
    "IsVisible" : true,
    "Caption" : "Caption"
  } ],
  "IsPageChangeInfo" : true,
  "ViewType" : "RegularPage"
}}]
     - parameter pageId: (query) Id of the page controller 
     - parameter clientLocale: (query) Locale identifier of the client 

     - returns: RequestBuilder<UIViewInfo> 
     */
    open class func getUIViewWithRequestBuilder(pageId: String, clientLocale: String) -> RequestBuilder<UIViewInfo> {
        let path = "/UI/View"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "PageId": pageId, 
                        "ClientLocale": clientLocale
        ])


        let requestBuilder: RequestBuilder<UIViewInfo>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Execute a command in the context of tv setup

     - parameter body: (body) RunUICommand 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUICommand(body: RunUICommand, completion: @escaping ((_ data: UIViewInfo?,_ error: Error?) -> Void)) {
        postUICommandWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Execute a command in the context of tv setup
     - POST /UI/Command

     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - :
       - type: http
       - name: embyauth
     - examples: [{contentType=application/json, example={
  "PageId" : "PageId",
  "RedirectViewUrl" : "RedirectViewUrl",
  "ShowDialogFullScreen" : true,
  "PluginId" : "PluginId",
  "Caption" : "Caption",
  "EditObjectContainer" : {
    "TypeName" : "TypeName",
    "DefaultObject" : { },
    "Object" : { }
  },
  "TabPageInfos" : [ {
    "PageId" : "PageId",
    "DisplayName" : "DisplayName",
    "Href" : "Href",
    "Index" : 0,
    "NavKey" : "NavKey",
    "PluginId" : "PluginId"
  }, {
    "PageId" : "PageId",
    "DisplayName" : "DisplayName",
    "Href" : "Href",
    "Index" : 0,
    "NavKey" : "NavKey",
    "PluginId" : "PluginId"
  } ],
  "SubCaption" : "SubCaption",
  "ViewId" : "ViewId",
  "IsInSequence" : true,
  "Commands" : [ {
    "SetFocus" : true,
    "CommandType" : "Custom",
    "IsEnabled" : true,
    "ConfirmationPrompt" : "ConfirmationPrompt",
    "CommandId" : "CommandId",
    "IsVisible" : true,
    "Caption" : "Caption"
  }, {
    "SetFocus" : true,
    "CommandType" : "Custom",
    "IsEnabled" : true,
    "ConfirmationPrompt" : "ConfirmationPrompt",
    "CommandId" : "CommandId",
    "IsVisible" : true,
    "Caption" : "Caption"
  } ],
  "IsPageChangeInfo" : true,
  "ViewType" : "RegularPage"
}}]
     - parameter body: (body) RunUICommand 

     - returns: RequestBuilder<UIViewInfo> 
     */
    open class func postUICommandWithRequestBuilder(body: RunUICommand) -> RequestBuilder<UIViewInfo> {
        let path = "/UI/Command"
        let URLString = embyclient-rest-swiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UIViewInfo>.Type = embyclient-rest-swiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
