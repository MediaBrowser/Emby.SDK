//
// ServerConfiguration.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Represents the server configuration.   */

public struct ServerConfiguration: Codable {

    /** A value indicating whether \\[enable u pn p\\]. */
    public var enableUPnP: Bool?
    /** The public mapped port. */
    public var publicPort: Int?
    /** The public HTTPS port. */
    public var publicHttpsPort: Int?
    /** The HTTP server port number. */
    public var httpServerPortNumber: Int?
    /** The HTTPS server port number. */
    public var httpsPortNumber: Int?
    /** A value indicating whether \\[use HTTPS\\]. */
    public var enableHttps: Bool?
    /** The value pointing to the file system where the ssl certiifcate is located.. */
    public var certificatePath: String?
    public var certificatePassword: String?
    /** A value indicating whether this instance is port authorized. */
    public var isPortAuthorized: Bool?
    public var autoRunWebApp: Bool?
    public var enableRemoteAccess: Bool?
    public var logAllQueryTimes: Bool?
    /** A value indicating whether \\[enable case sensitive item ids\\]. */
    public var enableCaseSensitiveItemIds: Bool?
    /** The metadata path. */
    public var metadataPath: String?
    public var metadataNetworkPath: String?
    /** The preferred metadata language. */
    public var preferredMetadataLanguage: String?
    /** The metadata country code. */
    public var metadataCountryCode: String?
    /** Words to be removed from strings to create a sort name */
    public var sortRemoveWords: [String]?
    /** The delay in seconds that we will wait after a file system change to try and discover what has been added/removed Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several different directories and files. */
    public var libraryMonitorDelay: Int?
    /** A value indicating whether \\[enable dashboard response caching\\]. Allows potential contributors without visual studio to modify production dashboard code and test changes. */
    public var enableDashboardResponseCaching: Bool?
    /** Allows the dashboard to be served from a custom path. */
    public var dashboardSourcePath: String?
    public var imageSavingConvention: ImageSavingConvention?
    public var enableAutomaticRestart: Bool?
    public var serverName: String?
    public var preferredDetectedRemoteAddressFamily: NetSocketsAddressFamily?
    public var wanDdns: String?
    public var uICulture: String?
    public var remoteClientBitrateLimit: Int?
    public var localNetworkSubnets: [String]?
    public var localNetworkAddresses: [String]?
    public var enableExternalContentInSuggestions: Bool?
    public var requireHttps: Bool?
    public var isBehindProxy: Bool?
    public var remoteIPFilter: [String]?
    public var isRemoteIPFilterBlacklist: Bool?
    public var imageExtractionTimeoutMs: Int?
    public var pathSubstitutions: [PathSubstitution]?
    public var uninstalledPlugins: [String]?
    public var collapseVideoFolders: Bool?
    public var enableOriginalTrackTitles: Bool?
    public var vacuumDatabaseOnStartup: Bool?
    public var simultaneousStreamLimit: Int?
    public var databaseCacheSizeMB: Int?
    public var enableSqLiteMmio: Bool?
    public var playlistsUpgradedToM3U: Bool?
    public var imageExtractorUpgraded1: Bool?
    public var enablePeopleLetterSubFolders: Bool?
    public var optimizeDatabaseOnShutdown: Bool?
    public var databaseAnalysisLimit: Int?
    public var disableAsyncIO: Bool?
    public var migratedToUserItemShares6: Bool?
    public var migratedLibraryOptionsToDb: Bool?
    public var allowLegacyLocalNetworkPassword: Bool?
    public var enableSavedMetadataForPeople: Bool?
    public var tvChannelsRefreshed: Bool?
    public var proxyHeaderMode: ProxyHeaderMode?
    /** A value indicating whether \\[enable debug level logging\\]. */
    public var enableDebugLevelLogging: Bool?
    public var revertDebugLogging: String?
    /** Enable automatically and silently updating of the application */
    public var enableAutoUpdate: Bool?
    /** The number of days we should retain log files */
    public var logFileRetentionDays: Int?
    /** A value indicating whether \\[run at startup\\]. */
    public var runAtStartup: Bool?
    /** A value indicating whether this instance is first run. */
    public var isStartupWizardCompleted: Bool?
    /** The cache path. */
    public var cachePath: String?

    public init(enableUPnP: Bool? = nil, publicPort: Int? = nil, publicHttpsPort: Int? = nil, httpServerPortNumber: Int? = nil, httpsPortNumber: Int? = nil, enableHttps: Bool? = nil, certificatePath: String? = nil, certificatePassword: String? = nil, isPortAuthorized: Bool? = nil, autoRunWebApp: Bool? = nil, enableRemoteAccess: Bool? = nil, logAllQueryTimes: Bool? = nil, enableCaseSensitiveItemIds: Bool? = nil, metadataPath: String? = nil, metadataNetworkPath: String? = nil, preferredMetadataLanguage: String? = nil, metadataCountryCode: String? = nil, sortRemoveWords: [String]? = nil, libraryMonitorDelay: Int? = nil, enableDashboardResponseCaching: Bool? = nil, dashboardSourcePath: String? = nil, imageSavingConvention: ImageSavingConvention? = nil, enableAutomaticRestart: Bool? = nil, serverName: String? = nil, preferredDetectedRemoteAddressFamily: NetSocketsAddressFamily? = nil, wanDdns: String? = nil, uICulture: String? = nil, remoteClientBitrateLimit: Int? = nil, localNetworkSubnets: [String]? = nil, localNetworkAddresses: [String]? = nil, enableExternalContentInSuggestions: Bool? = nil, requireHttps: Bool? = nil, isBehindProxy: Bool? = nil, remoteIPFilter: [String]? = nil, isRemoteIPFilterBlacklist: Bool? = nil, imageExtractionTimeoutMs: Int? = nil, pathSubstitutions: [PathSubstitution]? = nil, uninstalledPlugins: [String]? = nil, collapseVideoFolders: Bool? = nil, enableOriginalTrackTitles: Bool? = nil, vacuumDatabaseOnStartup: Bool? = nil, simultaneousStreamLimit: Int? = nil, databaseCacheSizeMB: Int? = nil, enableSqLiteMmio: Bool? = nil, playlistsUpgradedToM3U: Bool? = nil, imageExtractorUpgraded1: Bool? = nil, enablePeopleLetterSubFolders: Bool? = nil, optimizeDatabaseOnShutdown: Bool? = nil, databaseAnalysisLimit: Int? = nil, disableAsyncIO: Bool? = nil, migratedToUserItemShares6: Bool? = nil, migratedLibraryOptionsToDb: Bool? = nil, allowLegacyLocalNetworkPassword: Bool? = nil, enableSavedMetadataForPeople: Bool? = nil, tvChannelsRefreshed: Bool? = nil, proxyHeaderMode: ProxyHeaderMode? = nil, enableDebugLevelLogging: Bool? = nil, revertDebugLogging: String? = nil, enableAutoUpdate: Bool? = nil, logFileRetentionDays: Int? = nil, runAtStartup: Bool? = nil, isStartupWizardCompleted: Bool? = nil, cachePath: String? = nil) {
        self.enableUPnP = enableUPnP
        self.publicPort = publicPort
        self.publicHttpsPort = publicHttpsPort
        self.httpServerPortNumber = httpServerPortNumber
        self.httpsPortNumber = httpsPortNumber
        self.enableHttps = enableHttps
        self.certificatePath = certificatePath
        self.certificatePassword = certificatePassword
        self.isPortAuthorized = isPortAuthorized
        self.autoRunWebApp = autoRunWebApp
        self.enableRemoteAccess = enableRemoteAccess
        self.logAllQueryTimes = logAllQueryTimes
        self.enableCaseSensitiveItemIds = enableCaseSensitiveItemIds
        self.metadataPath = metadataPath
        self.metadataNetworkPath = metadataNetworkPath
        self.preferredMetadataLanguage = preferredMetadataLanguage
        self.metadataCountryCode = metadataCountryCode
        self.sortRemoveWords = sortRemoveWords
        self.libraryMonitorDelay = libraryMonitorDelay
        self.enableDashboardResponseCaching = enableDashboardResponseCaching
        self.dashboardSourcePath = dashboardSourcePath
        self.imageSavingConvention = imageSavingConvention
        self.enableAutomaticRestart = enableAutomaticRestart
        self.serverName = serverName
        self.preferredDetectedRemoteAddressFamily = preferredDetectedRemoteAddressFamily
        self.wanDdns = wanDdns
        self.uICulture = uICulture
        self.remoteClientBitrateLimit = remoteClientBitrateLimit
        self.localNetworkSubnets = localNetworkSubnets
        self.localNetworkAddresses = localNetworkAddresses
        self.enableExternalContentInSuggestions = enableExternalContentInSuggestions
        self.requireHttps = requireHttps
        self.isBehindProxy = isBehindProxy
        self.remoteIPFilter = remoteIPFilter
        self.isRemoteIPFilterBlacklist = isRemoteIPFilterBlacklist
        self.imageExtractionTimeoutMs = imageExtractionTimeoutMs
        self.pathSubstitutions = pathSubstitutions
        self.uninstalledPlugins = uninstalledPlugins
        self.collapseVideoFolders = collapseVideoFolders
        self.enableOriginalTrackTitles = enableOriginalTrackTitles
        self.vacuumDatabaseOnStartup = vacuumDatabaseOnStartup
        self.simultaneousStreamLimit = simultaneousStreamLimit
        self.databaseCacheSizeMB = databaseCacheSizeMB
        self.enableSqLiteMmio = enableSqLiteMmio
        self.playlistsUpgradedToM3U = playlistsUpgradedToM3U
        self.imageExtractorUpgraded1 = imageExtractorUpgraded1
        self.enablePeopleLetterSubFolders = enablePeopleLetterSubFolders
        self.optimizeDatabaseOnShutdown = optimizeDatabaseOnShutdown
        self.databaseAnalysisLimit = databaseAnalysisLimit
        self.disableAsyncIO = disableAsyncIO
        self.migratedToUserItemShares6 = migratedToUserItemShares6
        self.migratedLibraryOptionsToDb = migratedLibraryOptionsToDb
        self.allowLegacyLocalNetworkPassword = allowLegacyLocalNetworkPassword
        self.enableSavedMetadataForPeople = enableSavedMetadataForPeople
        self.tvChannelsRefreshed = tvChannelsRefreshed
        self.proxyHeaderMode = proxyHeaderMode
        self.enableDebugLevelLogging = enableDebugLevelLogging
        self.revertDebugLogging = revertDebugLogging
        self.enableAutoUpdate = enableAutoUpdate
        self.logFileRetentionDays = logFileRetentionDays
        self.runAtStartup = runAtStartup
        self.isStartupWizardCompleted = isStartupWizardCompleted
        self.cachePath = cachePath
    }

    public enum CodingKeys: String, CodingKey { 
        case enableUPnP = "EnableUPnP"
        case publicPort = "PublicPort"
        case publicHttpsPort = "PublicHttpsPort"
        case httpServerPortNumber = "HttpServerPortNumber"
        case httpsPortNumber = "HttpsPortNumber"
        case enableHttps = "EnableHttps"
        case certificatePath = "CertificatePath"
        case certificatePassword = "CertificatePassword"
        case isPortAuthorized = "IsPortAuthorized"
        case autoRunWebApp = "AutoRunWebApp"
        case enableRemoteAccess = "EnableRemoteAccess"
        case logAllQueryTimes = "LogAllQueryTimes"
        case enableCaseSensitiveItemIds = "EnableCaseSensitiveItemIds"
        case metadataPath = "MetadataPath"
        case metadataNetworkPath = "MetadataNetworkPath"
        case preferredMetadataLanguage = "PreferredMetadataLanguage"
        case metadataCountryCode = "MetadataCountryCode"
        case sortRemoveWords = "SortRemoveWords"
        case libraryMonitorDelay = "LibraryMonitorDelay"
        case enableDashboardResponseCaching = "EnableDashboardResponseCaching"
        case dashboardSourcePath = "DashboardSourcePath"
        case imageSavingConvention = "ImageSavingConvention"
        case enableAutomaticRestart = "EnableAutomaticRestart"
        case serverName = "ServerName"
        case preferredDetectedRemoteAddressFamily = "PreferredDetectedRemoteAddressFamily"
        case wanDdns = "WanDdns"
        case uICulture = "UICulture"
        case remoteClientBitrateLimit = "RemoteClientBitrateLimit"
        case localNetworkSubnets = "LocalNetworkSubnets"
        case localNetworkAddresses = "LocalNetworkAddresses"
        case enableExternalContentInSuggestions = "EnableExternalContentInSuggestions"
        case requireHttps = "RequireHttps"
        case isBehindProxy = "IsBehindProxy"
        case remoteIPFilter = "RemoteIPFilter"
        case isRemoteIPFilterBlacklist = "IsRemoteIPFilterBlacklist"
        case imageExtractionTimeoutMs = "ImageExtractionTimeoutMs"
        case pathSubstitutions = "PathSubstitutions"
        case uninstalledPlugins = "UninstalledPlugins"
        case collapseVideoFolders = "CollapseVideoFolders"
        case enableOriginalTrackTitles = "EnableOriginalTrackTitles"
        case vacuumDatabaseOnStartup = "VacuumDatabaseOnStartup"
        case simultaneousStreamLimit = "SimultaneousStreamLimit"
        case databaseCacheSizeMB = "DatabaseCacheSizeMB"
        case enableSqLiteMmio = "EnableSqLiteMmio"
        case playlistsUpgradedToM3U = "PlaylistsUpgradedToM3U"
        case imageExtractorUpgraded1 = "ImageExtractorUpgraded1"
        case enablePeopleLetterSubFolders = "EnablePeopleLetterSubFolders"
        case optimizeDatabaseOnShutdown = "OptimizeDatabaseOnShutdown"
        case databaseAnalysisLimit = "DatabaseAnalysisLimit"
        case disableAsyncIO = "DisableAsyncIO"
        case migratedToUserItemShares6 = "MigratedToUserItemShares6"
        case migratedLibraryOptionsToDb = "MigratedLibraryOptionsToDb"
        case allowLegacyLocalNetworkPassword = "AllowLegacyLocalNetworkPassword"
        case enableSavedMetadataForPeople = "EnableSavedMetadataForPeople"
        case tvChannelsRefreshed = "TvChannelsRefreshed"
        case proxyHeaderMode = "ProxyHeaderMode"
        case enableDebugLevelLogging = "EnableDebugLevelLogging"
        case revertDebugLogging = "RevertDebugLogging"
        case enableAutoUpdate = "EnableAutoUpdate"
        case logFileRetentionDays = "LogFileRetentionDays"
        case runAtStartup = "RunAtStartup"
        case isStartupWizardCompleted = "IsStartupWizardCompleted"
        case cachePath = "CachePath"
    }

}
