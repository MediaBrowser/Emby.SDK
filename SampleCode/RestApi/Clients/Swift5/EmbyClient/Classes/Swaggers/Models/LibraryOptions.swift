//
// LibraryOptions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct LibraryOptions: Codable {

    public var enableArchiveMediaFiles: Bool?
    public var enablePhotos: Bool?
    public var enableRealtimeMonitor: Bool?
    public var enableMarkerDetection: Bool?
    public var enableMarkerDetectionDuringLibraryScan: Bool?
    public var introDetectionFingerprintLength: Int?
    public var enableChapterImageExtraction: Bool?
    public var extractChapterImagesDuringLibraryScan: Bool?
    public var downloadImagesInAdvance: Bool?
    public var cacheImages: Bool?
    public var pathInfos: [MediaPathInfo]?
    public var ignoreHiddenFiles: Bool?
    public var ignoreFileExtensions: [String]?
    public var saveLocalMetadata: Bool?
    public var saveMetadataHidden: Bool?
    public var saveLocalThumbnailSets: Bool?
    public var importPlaylists: Bool?
    public var enableAutomaticSeriesGrouping: Bool?
    public var shareEmbeddedMusicAlbumImages: Bool?
    public var enableEmbeddedTitles: Bool?
    public var enableAudioResume: Bool?
    public var autoGenerateChapters: Bool?
    public var automaticRefreshIntervalDays: Int?
    public var placeholderMetadataRefreshIntervalDays: Int?
    /** The preferred metadata language. */
    public var preferredMetadataLanguage: String?
    public var preferredImageLanguage: String?
    public var contentType: String?
    /** The metadata country code. */
    public var metadataCountryCode: String?
    public var metadataSavers: [String]?
    public var disabledLocalMetadataReaders: [String]?
    public var localMetadataReaderOrder: [String]?
    public var disabledLyricsFetchers: [String]?
    public var saveLyricsWithMedia: Bool?
    public var lyricsDownloadMaxAgeDays: Int?
    public var lyricsFetcherOrder: [String]?
    public var lyricsDownloadLanguages: [String]?
    public var disabledSubtitleFetchers: [String]?
    public var subtitleFetcherOrder: [String]?
    public var skipSubtitlesIfEmbeddedSubtitlesPresent: Bool?
    public var skipSubtitlesIfAudioTrackMatches: Bool?
    public var subtitleDownloadLanguages: [String]?
    public var subtitleDownloadMaxAgeDays: Int?
    public var requirePerfectSubtitleMatch: Bool?
    public var saveSubtitlesWithMedia: Bool?
    public var forcedSubtitlesOnly: Bool?
    public var hearingImpairedSubtitlesOnly: Bool?
    public var typeOptions: [TypeOptions]?
    public var collapseSingleItemFolders: Bool?
    public var enableAdultMetadata: Bool?
    public var importCollections: Bool?
    public var minCollectionItems: Int?
    public var musicFolderStructure: String?
    /** The minimum percentage of an item that must be played in order for playstate to be updated. */
    public var minResumePct: Int?
    /** The maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched. */
    public var maxResumePct: Int?
    /** The minimum duration that an item must have in order to be eligible for playstate updates.. */
    public var minResumeDurationSeconds: Int?
    public var thumbnailImagesIntervalSeconds: Int?
    public var sampleIgnoreSize: Int?

    public init(enableArchiveMediaFiles: Bool? = nil, enablePhotos: Bool? = nil, enableRealtimeMonitor: Bool? = nil, enableMarkerDetection: Bool? = nil, enableMarkerDetectionDuringLibraryScan: Bool? = nil, introDetectionFingerprintLength: Int? = nil, enableChapterImageExtraction: Bool? = nil, extractChapterImagesDuringLibraryScan: Bool? = nil, downloadImagesInAdvance: Bool? = nil, cacheImages: Bool? = nil, pathInfos: [MediaPathInfo]? = nil, ignoreHiddenFiles: Bool? = nil, ignoreFileExtensions: [String]? = nil, saveLocalMetadata: Bool? = nil, saveMetadataHidden: Bool? = nil, saveLocalThumbnailSets: Bool? = nil, importPlaylists: Bool? = nil, enableAutomaticSeriesGrouping: Bool? = nil, shareEmbeddedMusicAlbumImages: Bool? = nil, enableEmbeddedTitles: Bool? = nil, enableAudioResume: Bool? = nil, autoGenerateChapters: Bool? = nil, automaticRefreshIntervalDays: Int? = nil, placeholderMetadataRefreshIntervalDays: Int? = nil, preferredMetadataLanguage: String? = nil, preferredImageLanguage: String? = nil, contentType: String? = nil, metadataCountryCode: String? = nil, metadataSavers: [String]? = nil, disabledLocalMetadataReaders: [String]? = nil, localMetadataReaderOrder: [String]? = nil, disabledLyricsFetchers: [String]? = nil, saveLyricsWithMedia: Bool? = nil, lyricsDownloadMaxAgeDays: Int? = nil, lyricsFetcherOrder: [String]? = nil, lyricsDownloadLanguages: [String]? = nil, disabledSubtitleFetchers: [String]? = nil, subtitleFetcherOrder: [String]? = nil, skipSubtitlesIfEmbeddedSubtitlesPresent: Bool? = nil, skipSubtitlesIfAudioTrackMatches: Bool? = nil, subtitleDownloadLanguages: [String]? = nil, subtitleDownloadMaxAgeDays: Int? = nil, requirePerfectSubtitleMatch: Bool? = nil, saveSubtitlesWithMedia: Bool? = nil, forcedSubtitlesOnly: Bool? = nil, hearingImpairedSubtitlesOnly: Bool? = nil, typeOptions: [TypeOptions]? = nil, collapseSingleItemFolders: Bool? = nil, enableAdultMetadata: Bool? = nil, importCollections: Bool? = nil, minCollectionItems: Int? = nil, musicFolderStructure: String? = nil, minResumePct: Int? = nil, maxResumePct: Int? = nil, minResumeDurationSeconds: Int? = nil, thumbnailImagesIntervalSeconds: Int? = nil, sampleIgnoreSize: Int? = nil) {
        self.enableArchiveMediaFiles = enableArchiveMediaFiles
        self.enablePhotos = enablePhotos
        self.enableRealtimeMonitor = enableRealtimeMonitor
        self.enableMarkerDetection = enableMarkerDetection
        self.enableMarkerDetectionDuringLibraryScan = enableMarkerDetectionDuringLibraryScan
        self.introDetectionFingerprintLength = introDetectionFingerprintLength
        self.enableChapterImageExtraction = enableChapterImageExtraction
        self.extractChapterImagesDuringLibraryScan = extractChapterImagesDuringLibraryScan
        self.downloadImagesInAdvance = downloadImagesInAdvance
        self.cacheImages = cacheImages
        self.pathInfos = pathInfos
        self.ignoreHiddenFiles = ignoreHiddenFiles
        self.ignoreFileExtensions = ignoreFileExtensions
        self.saveLocalMetadata = saveLocalMetadata
        self.saveMetadataHidden = saveMetadataHidden
        self.saveLocalThumbnailSets = saveLocalThumbnailSets
        self.importPlaylists = importPlaylists
        self.enableAutomaticSeriesGrouping = enableAutomaticSeriesGrouping
        self.shareEmbeddedMusicAlbumImages = shareEmbeddedMusicAlbumImages
        self.enableEmbeddedTitles = enableEmbeddedTitles
        self.enableAudioResume = enableAudioResume
        self.autoGenerateChapters = autoGenerateChapters
        self.automaticRefreshIntervalDays = automaticRefreshIntervalDays
        self.placeholderMetadataRefreshIntervalDays = placeholderMetadataRefreshIntervalDays
        self.preferredMetadataLanguage = preferredMetadataLanguage
        self.preferredImageLanguage = preferredImageLanguage
        self.contentType = contentType
        self.metadataCountryCode = metadataCountryCode
        self.metadataSavers = metadataSavers
        self.disabledLocalMetadataReaders = disabledLocalMetadataReaders
        self.localMetadataReaderOrder = localMetadataReaderOrder
        self.disabledLyricsFetchers = disabledLyricsFetchers
        self.saveLyricsWithMedia = saveLyricsWithMedia
        self.lyricsDownloadMaxAgeDays = lyricsDownloadMaxAgeDays
        self.lyricsFetcherOrder = lyricsFetcherOrder
        self.lyricsDownloadLanguages = lyricsDownloadLanguages
        self.disabledSubtitleFetchers = disabledSubtitleFetchers
        self.subtitleFetcherOrder = subtitleFetcherOrder
        self.skipSubtitlesIfEmbeddedSubtitlesPresent = skipSubtitlesIfEmbeddedSubtitlesPresent
        self.skipSubtitlesIfAudioTrackMatches = skipSubtitlesIfAudioTrackMatches
        self.subtitleDownloadLanguages = subtitleDownloadLanguages
        self.subtitleDownloadMaxAgeDays = subtitleDownloadMaxAgeDays
        self.requirePerfectSubtitleMatch = requirePerfectSubtitleMatch
        self.saveSubtitlesWithMedia = saveSubtitlesWithMedia
        self.forcedSubtitlesOnly = forcedSubtitlesOnly
        self.hearingImpairedSubtitlesOnly = hearingImpairedSubtitlesOnly
        self.typeOptions = typeOptions
        self.collapseSingleItemFolders = collapseSingleItemFolders
        self.enableAdultMetadata = enableAdultMetadata
        self.importCollections = importCollections
        self.minCollectionItems = minCollectionItems
        self.musicFolderStructure = musicFolderStructure
        self.minResumePct = minResumePct
        self.maxResumePct = maxResumePct
        self.minResumeDurationSeconds = minResumeDurationSeconds
        self.thumbnailImagesIntervalSeconds = thumbnailImagesIntervalSeconds
        self.sampleIgnoreSize = sampleIgnoreSize
    }

    public enum CodingKeys: String, CodingKey { 
        case enableArchiveMediaFiles = "EnableArchiveMediaFiles"
        case enablePhotos = "EnablePhotos"
        case enableRealtimeMonitor = "EnableRealtimeMonitor"
        case enableMarkerDetection = "EnableMarkerDetection"
        case enableMarkerDetectionDuringLibraryScan = "EnableMarkerDetectionDuringLibraryScan"
        case introDetectionFingerprintLength = "IntroDetectionFingerprintLength"
        case enableChapterImageExtraction = "EnableChapterImageExtraction"
        case extractChapterImagesDuringLibraryScan = "ExtractChapterImagesDuringLibraryScan"
        case downloadImagesInAdvance = "DownloadImagesInAdvance"
        case cacheImages = "CacheImages"
        case pathInfos = "PathInfos"
        case ignoreHiddenFiles = "IgnoreHiddenFiles"
        case ignoreFileExtensions = "IgnoreFileExtensions"
        case saveLocalMetadata = "SaveLocalMetadata"
        case saveMetadataHidden = "SaveMetadataHidden"
        case saveLocalThumbnailSets = "SaveLocalThumbnailSets"
        case importPlaylists = "ImportPlaylists"
        case enableAutomaticSeriesGrouping = "EnableAutomaticSeriesGrouping"
        case shareEmbeddedMusicAlbumImages = "ShareEmbeddedMusicAlbumImages"
        case enableEmbeddedTitles = "EnableEmbeddedTitles"
        case enableAudioResume = "EnableAudioResume"
        case autoGenerateChapters = "AutoGenerateChapters"
        case automaticRefreshIntervalDays = "AutomaticRefreshIntervalDays"
        case placeholderMetadataRefreshIntervalDays = "PlaceholderMetadataRefreshIntervalDays"
        case preferredMetadataLanguage = "PreferredMetadataLanguage"
        case preferredImageLanguage = "PreferredImageLanguage"
        case contentType = "ContentType"
        case metadataCountryCode = "MetadataCountryCode"
        case metadataSavers = "MetadataSavers"
        case disabledLocalMetadataReaders = "DisabledLocalMetadataReaders"
        case localMetadataReaderOrder = "LocalMetadataReaderOrder"
        case disabledLyricsFetchers = "DisabledLyricsFetchers"
        case saveLyricsWithMedia = "SaveLyricsWithMedia"
        case lyricsDownloadMaxAgeDays = "LyricsDownloadMaxAgeDays"
        case lyricsFetcherOrder = "LyricsFetcherOrder"
        case lyricsDownloadLanguages = "LyricsDownloadLanguages"
        case disabledSubtitleFetchers = "DisabledSubtitleFetchers"
        case subtitleFetcherOrder = "SubtitleFetcherOrder"
        case skipSubtitlesIfEmbeddedSubtitlesPresent = "SkipSubtitlesIfEmbeddedSubtitlesPresent"
        case skipSubtitlesIfAudioTrackMatches = "SkipSubtitlesIfAudioTrackMatches"
        case subtitleDownloadLanguages = "SubtitleDownloadLanguages"
        case subtitleDownloadMaxAgeDays = "SubtitleDownloadMaxAgeDays"
        case requirePerfectSubtitleMatch = "RequirePerfectSubtitleMatch"
        case saveSubtitlesWithMedia = "SaveSubtitlesWithMedia"
        case forcedSubtitlesOnly = "ForcedSubtitlesOnly"
        case hearingImpairedSubtitlesOnly = "HearingImpairedSubtitlesOnly"
        case typeOptions = "TypeOptions"
        case collapseSingleItemFolders = "CollapseSingleItemFolders"
        case enableAdultMetadata = "EnableAdultMetadata"
        case importCollections = "ImportCollections"
        case minCollectionItems = "MinCollectionItems"
        case musicFolderStructure = "MusicFolderStructure"
        case minResumePct = "MinResumePct"
        case maxResumePct = "MaxResumePct"
        case minResumeDurationSeconds = "MinResumeDurationSeconds"
        case thumbnailImagesIntervalSeconds = "ThumbnailImagesIntervalSeconds"
        case sampleIgnoreSize = "SampleIgnoreSize"
    }

}
