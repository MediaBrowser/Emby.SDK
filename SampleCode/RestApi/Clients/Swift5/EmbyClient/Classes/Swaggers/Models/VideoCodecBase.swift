//
// VideoCodecBase.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct VideoCodecBase: Codable {

    public var codecDeviceInfo: CommonInterfacesICodecDeviceInfo?
    public var codecKind: CodecKinds?
    public var mediaTypeName: String?
    public var videoMediaType: VideoMediaTypes?
    public var minWidth: Int?
    public var maxWidth: Int?
    public var minHeight: Int?
    public var maxHeight: Int?
    public var widthAlignment: Int?
    public var heightAlignment: Int?
    public var maxBitRate: BitRate?
    public var supportedColorFormats: [ColorFormats]?
    public var supportedColorFormatStrings: [String]?
    public var profileAndLevelInformation: [ProfileLevelInformation]?
    public var _id: String?
    public var direction: CodecDirections?
    public var name: String?
    public var _description: String?
    public var frameworkCodec: String?
    public var isHardwareCodec: Bool?
    public var secondaryFramework: SecondaryFrameworks?
    public var secondaryFrameworkCodec: String?
    public var maxInstanceCount: Int?
    public var isEnabledByDefault: Bool?
    public var defaultPriority: Int?

    public init(codecDeviceInfo: CommonInterfacesICodecDeviceInfo? = nil, codecKind: CodecKinds? = nil, mediaTypeName: String? = nil, videoMediaType: VideoMediaTypes? = nil, minWidth: Int? = nil, maxWidth: Int? = nil, minHeight: Int? = nil, maxHeight: Int? = nil, widthAlignment: Int? = nil, heightAlignment: Int? = nil, maxBitRate: BitRate? = nil, supportedColorFormats: [ColorFormats]? = nil, supportedColorFormatStrings: [String]? = nil, profileAndLevelInformation: [ProfileLevelInformation]? = nil, _id: String? = nil, direction: CodecDirections? = nil, name: String? = nil, _description: String? = nil, frameworkCodec: String? = nil, isHardwareCodec: Bool? = nil, secondaryFramework: SecondaryFrameworks? = nil, secondaryFrameworkCodec: String? = nil, maxInstanceCount: Int? = nil, isEnabledByDefault: Bool? = nil, defaultPriority: Int? = nil) {
        self.codecDeviceInfo = codecDeviceInfo
        self.codecKind = codecKind
        self.mediaTypeName = mediaTypeName
        self.videoMediaType = videoMediaType
        self.minWidth = minWidth
        self.maxWidth = maxWidth
        self.minHeight = minHeight
        self.maxHeight = maxHeight
        self.widthAlignment = widthAlignment
        self.heightAlignment = heightAlignment
        self.maxBitRate = maxBitRate
        self.supportedColorFormats = supportedColorFormats
        self.supportedColorFormatStrings = supportedColorFormatStrings
        self.profileAndLevelInformation = profileAndLevelInformation
        self._id = _id
        self.direction = direction
        self.name = name
        self._description = _description
        self.frameworkCodec = frameworkCodec
        self.isHardwareCodec = isHardwareCodec
        self.secondaryFramework = secondaryFramework
        self.secondaryFrameworkCodec = secondaryFrameworkCodec
        self.maxInstanceCount = maxInstanceCount
        self.isEnabledByDefault = isEnabledByDefault
        self.defaultPriority = defaultPriority
    }

    public enum CodingKeys: String, CodingKey { 
        case codecDeviceInfo = "CodecDeviceInfo"
        case codecKind = "CodecKind"
        case mediaTypeName = "MediaTypeName"
        case videoMediaType = "VideoMediaType"
        case minWidth = "MinWidth"
        case maxWidth = "MaxWidth"
        case minHeight = "MinHeight"
        case maxHeight = "MaxHeight"
        case widthAlignment = "WidthAlignment"
        case heightAlignment = "HeightAlignment"
        case maxBitRate = "MaxBitRate"
        case supportedColorFormats = "SupportedColorFormats"
        case supportedColorFormatStrings = "SupportedColorFormatStrings"
        case profileAndLevelInformation = "ProfileAndLevelInformation"
        case _id = "Id"
        case direction = "Direction"
        case name = "Name"
        case _description = "Description"
        case frameworkCodec = "FrameworkCodec"
        case isHardwareCodec = "IsHardwareCodec"
        case secondaryFramework = "SecondaryFramework"
        case secondaryFrameworkCodec = "SecondaryFrameworkCodec"
        case maxInstanceCount = "MaxInstanceCount"
        case isEnabledByDefault = "IsEnabledByDefault"
        case defaultPriority = "DefaultPriority"
    }

}
