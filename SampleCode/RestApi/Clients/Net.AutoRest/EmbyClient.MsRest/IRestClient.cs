// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Explore the Emby Server API
    /// </summary>
    public partial interface IRestClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Gets all artists from a given item, folder, or the entire library
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetArtistsWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultUserLibraryTagItem>> GetAudiocodecsWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultUserLibraryTagItem>> GetAudiolayoutsWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available channels
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetChannelsWithHttpMessagesAsync(string userId = default(string), int? startIndex = default(int?), string fields = default(string), int? limit = default(int?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new collection
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='isLocked'>
        /// Whether or not to lock the new collection.
        /// </param>
        /// <param name='name'>
        /// The name of the new collection.
        /// </param>
        /// <param name='parentId'>
        /// Optional - create the collection within a specific folder
        /// </param>
        /// <param name='ids'>
        /// Item Ids to add to the collection
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CollectionsCollectionCreationResult>> PostCollectionsWithHttpMessagesAsync(bool? isLocked = default(bool?), string name = default(string), string parentId = default(string), string ids = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultUserLibraryTagItem>> GetContainersWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all devices
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultDevicesDeviceInfo>> GetDevicesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Device Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteDevicesWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of installed features
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<EmbyFeaturesFeatureInfo>>> GetFeaturesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all Game genres from a given item, folder, or the entire
        /// library
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetGamegenresWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all genres from a given item, folder, or the entire library
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetGenresWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetItemsWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='ids'>
        /// Ids
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteItemsWithHttpMessagesAsync(string ids, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultUserLibraryTagItem>> GetItemtypesWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all music genres from a given item, folder, or the entire
        /// library
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetMusicgenresWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultUserLibraryOfficialRatingItem>> GetOfficialratingsWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the OpenAPI 3 specifications
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetOpenapiWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets OpenAPI 3 specifications
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetOpenapiJsonWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available packages
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='packageType'>
        /// Optional package type filter (System/UserInstalled)
        /// </param>
        /// <param name='targetSystems'>
        /// Optional. Filter by target system type. Allows multiple, comma
        /// delimited.
        /// </param>
        /// <param name='isPremium'>
        /// Optional. Filter by premium status
        /// </param>
        /// <param name='isAdult'>
        /// Optional. Filter by package that contain adult content.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UpdatesPackageInfo>>> GetPackagesWithHttpMessagesAsync(string packageType = default(string), string targetSystems = default(string), bool? isPremium = default(bool?), bool? isAdult = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all persons from a given item, folder, or the entire library
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetPersonsWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new playlist
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='name'>
        /// The name of the new playlist.
        /// </param>
        /// <param name='ids'>
        /// Item Ids to add to the playlist
        /// </param>
        /// <param name='mediaType'>
        /// The playlist media type
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PlaylistsPlaylistCreationResult>> PostPlaylistsWithHttpMessagesAsync(string name = default(string), string ids = default(string), string mediaType = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of currently installed plugins
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<PluginsPluginInfo>>> GetPluginsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets scheduled tasks
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='isHidden'>
        /// Optional filter tasks that are hidden, or not.
        /// </param>
        /// <param name='isEnabled'>
        /// Optional filter tasks that are enabled, or not.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TasksTaskInfo>>> GetScheduledtasksWithHttpMessagesAsync(bool? isHidden = default(bool?), bool? isEnabled = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of sessions
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='controllableByUserId'>
        /// Optional. Filter by sessions that a given user is allowed to remote
        /// control.
        /// </param>
        /// <param name='deviceId'>
        /// Optional. Filter by device id.
        /// </param>
        /// <param name='id'>
        /// Optional. Filter by session id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<SessionSessionInfo>>> GetSessionsWithHttpMessagesAsync(string controllableByUserId = default(string), string deviceId = default(string), string id = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultUserLibraryTagItem>> GetStreamlanguagesWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all studios from a given item, folder, or the entire library
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetStudiosWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultUserLibraryTagItem>> GetSubtitlecodecsWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the swagger specifications
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetSwaggerWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the swagger specifications
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetSwaggerJsonWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultUserLibraryTagItem>> GetTagsWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Finds movies and trailers similar to a given trailer.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetTrailersWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultUserLibraryTagItem>> GetVideocodecsWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultUserLibraryTagItem>> GetYearsWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='percentPlayed'>
        /// </param>
        /// <param name='unPlayedCount'>
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithHttpMessagesAsync(int percentPlayed, int unPlayedCount, string id, int maxWidth, int maxHeight, string tag, string format, string type, int index, int? width = default(int?), int? height = default(int?), int? quality = default(int?), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='percentPlayed'>
        /// </param>
        /// <param name='unPlayedCount'>
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithHttpMessagesAsync(int percentPlayed, int unPlayedCount, string id, int maxWidth, int maxHeight, string tag, string format, string type, int index, int? width = default(int?), int? height = default(int?), int? quality = default(int?), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an artist, by name
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='name'>
        /// The artist name
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseItemDto>> GetArtistsByNameWithHttpMessagesAsync(string name, string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all album artists from a given item, folder, or the entire
        /// library
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetArtistsAlbumartistsWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<NameValuePair>>> GetArtistsPrefixesWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given artist
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetArtistsInstantmixWithHttpMessagesAsync(string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of next up episodes
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='albumId'>
        /// Optional. Filter by series id
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetAudiobooksNextupWithHttpMessagesAsync(string userId, int? startIndex = default(int?), int? limit = default(int?), string fields = default(string), string albumId = default(string), string parentId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<NameIdPair>>> GetAuthProvidersWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='app'>
        /// App
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostAuthKeysWithHttpMessagesAsync(string app, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetAuthKeysWithHttpMessagesAsync(int? startIndex = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets branding configuration
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BrandingBrandingOptions>> GetBrandingConfigurationWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets custom css
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetBrandingCssWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets custom css
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetBrandingCssCssWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a Connect link for a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetConnectPendingWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the corresponding local user from a connect user id
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='connectUserId'>
        /// ConnectUserId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ConnectConnectAuthenticationExchangeResult>> GetConnectExchangeWithHttpMessagesAsync(string connectUserId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates device options
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// DeviceOptions:
        /// </param>
        /// <param name='id'>
        /// Device Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostDevicesOptionsWithHttpMessagesAsync(DevicesDeviceOptions body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets options for a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Device Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DevicesDeviceOptions>> GetDevicesOptionsWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets info for a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Device Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DevicesDeviceInfo>> GetDevicesInfoWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets camera upload history for a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DevicesContentUploadHistory>> GetDevicesCamerauploadsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads content
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='album'>
        /// Album
        /// </param>
        /// <param name='name'>
        /// Name
        /// </param>
        /// <param name='id'>
        /// Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostDevicesCamerauploadsWithHttpMessagesAsync(string body, string album, string name, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Device Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostDevicesDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a user's display preferences for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='client'>
        /// Client
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DisplayPreferences>> GetDisplaypreferencesByIdWithHttpMessagesAsync(string id, string userId, string client, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user's display preferences for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// DisplayPreferences:
        /// </param>
        /// <param name='displayPreferencesId'>
        /// DisplayPreferences Id
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostDisplaypreferencesByDisplaypreferencesidWithHttpMessagesAsync(DisplayPreferences body, string displayPreferencesId, string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of profiles
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<EmbyDlnaProfilesDlnaProfile>>> GetDlnaProfileinfosWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a profile
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// DlnaProfile:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostDlnaProfilesWithHttpMessagesAsync(EmbyDlnaProfilesDlnaProfile body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available tone mapping options
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MediaEncodingConfigurationToneMappingToneMapOptionsVisibility>> GetEncodingTonemapoptionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the tone mapping options
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmbyWebGenericEditEditObjectContainer>> GetEncodingFulltonemapoptionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the tone mapping options
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostEncodingFulltonemapoptionsWithHttpMessagesAsync(string body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the tone mapping options
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmbyWebGenericEditEditObjectContainer>> GetEncodingPublictonemapoptionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the tone mapping options
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostEncodingPublictonemapoptionsWithHttpMessagesAsync(string body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the subtitle options
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmbyWebGenericEditEditObjectContainer>> GetEncodingSubtitleoptionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the subtitle options
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostEncodingSubtitleoptionsWithHttpMessagesAsync(string body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the ffmpeg options
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmbyWebGenericEditEditObjectContainer>> GetEncodingFfmpegoptionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the ffmpeg options
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostEncodingFfmpegoptionsWithHttpMessagesAsync(string body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the parameters for a specified codec.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='codecId'>
        /// Codec Id
        /// </param>
        /// <param name='parameterContext'>
        /// Parameter Context. Possible values include: 'Playback',
        /// 'Conversion'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmbyWebGenericEditEditObjectContainer>> GetEncodingCodecparametersWithHttpMessagesAsync(string codecId, string parameterContext, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the parameters for a specified codec.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='codecId'>
        /// Codec Id
        /// </param>
        /// <param name='parameterContext'>
        /// Parameter Context. Possible values include: 'Playback',
        /// 'Conversion'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostEncodingCodecparametersWithHttpMessagesAsync(string body, string codecId, string parameterContext, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the contents of a given directory in the file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// ValidatePath
        /// </param>
        /// <param name='path'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostEnvironmentValidatepathWithHttpMessagesAsync(ValidatePath body, string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the parent path of a given path
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DefaultDirectoryBrowserInfo>> GetEnvironmentDefaultdirectorybrowserWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the contents of a given directory in the file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='path'>
        /// </param>
        /// <param name='includeFiles'>
        /// An optional filter to include or exclude files from the results.
        /// true/false
        /// </param>
        /// <param name='includeDirectories'>
        /// An optional filter to include or exclude folders from the results.
        /// true/false
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<IOFileSystemEntryInfo>>> GetEnvironmentDirectorycontentsWithHttpMessagesAsync(string path, bool? includeFiles = default(bool?), bool? includeDirectories = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets shares from a network device
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='path'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<IOFileSystemEntryInfo>>> GetEnvironmentNetworksharesWithHttpMessagesAsync(string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available drives from the server's file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<IOFileSystemEntryInfo>>> GetEnvironmentDrivesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of devices on the network
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<IOFileSystemEntryInfo>>> GetEnvironmentNetworkdevicesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the parent path of a given path
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='path'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetEnvironmentParentpathWithHttpMessagesAsync(string path, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a Game genre, by name
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='name'>
        /// The genre name
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseItemDto>> GetGamegenresByNameWithHttpMessagesAsync(string name, string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a genre, by name
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='name'>
        /// The genre name
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseItemDto>> GetGenresByNameWithHttpMessagesAsync(string name, string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a remote image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='imageUrl'>
        /// The image url
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetImagesRemoteWithHttpMessagesAsync(string imageUrl, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// BaseItemDto:
        /// </param>
        /// <param name='itemId'>
        /// The id of the item
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByItemidWithHttpMessagesAsync(BaseItemDto body, string itemId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<NameValuePair>>> GetItemsPrefixesWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='userId'>
        /// Optional. Get counts from a specific user's library.
        /// </param>
        /// <param name='isFavorite'>
        /// Optional. Get counts of favorite items
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ItemCounts>> GetItemsCountsWithHttpMessagesAsync(string userId = default(string), bool? isFavorite = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets info to debug intros
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<PersistenceIntroDebugInfo>>> GetItemsIntrosWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='ids'>
        /// Ids
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsDeleteWithHttpMessagesAsync(string ids, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteItemsByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LibraryLibraryOptionsResult>> GetLibrariesAvailableoptionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<LibraryMediaFolder>>> GetLibrarySelectablemediafoldersWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all user media folders.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='isHidden'>
        /// Optional. Filter by folders that are marked hidden, or not.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetLibraryMediafoldersWithHttpMessagesAsync(bool? isHidden = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of physical paths from virtual folders
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> GetLibraryPhysicalpathsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Starts a library scan
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLibraryRefreshWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='body'>
        /// AddVirtualFolder
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLibraryVirtualfoldersWithHttpMessagesAsync(LibraryAddVirtualFolder body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteLibraryVirtualfoldersWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Opens a media source
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// LiveStreamRequest:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MediaInfoLiveStreamResponse>> PostLivestreamsOpenWithHttpMessagesAsync(MediaInfoLiveStreamRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Closes a media source
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='liveStreamId'>
        /// LiveStreamId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivestreamsCloseWithHttpMessagesAsync(string liveStreamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Closes a media source
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='liveStreamId'>
        /// LiveStreamId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivestreamsMediainfoWithHttpMessagesAsync(string liveStreamId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live tv channel tags
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetLivetvChanneltagsWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the top level live tv folder
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseItemDto>> GetLivetvFolderWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='providerId'>
        /// Provider id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetLivetvChannelmappingsWithHttpMessagesAsync(string providerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='providerId'>
        /// Provider id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadLivetvChannelmappingsWithHttpMessagesAsync(string providerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='body'>
        /// SetChannelMapping
        /// </param>
        /// <param name='providerId'>
        /// Provider id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivetvChannelmappingsWithHttpMessagesAsync(LiveTVApiSetChannelMapping body, string providerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='body'>
        /// SetChannelMapping
        /// </param>
        /// <param name='providerId'>
        /// Provider id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PutLivetvChannelmappingsWithHttpMessagesAsync(LiveTVApiSetChannelMapping body, string providerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='providerId'>
        /// Provider id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteLivetvChannelmappingsWithHttpMessagesAsync(string providerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='providerId'>
        /// Provider id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetLivetvChannelmappingoptionsWithHttpMessagesAsync(string providerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='providerId'>
        /// Provider id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadLivetvChannelmappingoptionsWithHttpMessagesAsync(string providerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='providerId'>
        /// Provider id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivetvChannelmappingoptionsWithHttpMessagesAsync(string providerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='providerId'>
        /// Provider id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PutLivetvChannelmappingoptionsWithHttpMessagesAsync(string providerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='providerId'>
        /// Provider id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteLivetvChannelmappingoptionsWithHttpMessagesAsync(string providerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a listing provider
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// ListingsProviderInfo:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LiveTvListingsProviderInfo>> PostLivetvListingprovidersWithHttpMessagesAsync(LiveTvListingsProviderInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a listing provider
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Provider id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteLivetvListingprovidersWithHttpMessagesAsync(string id = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets current listing providers
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='channelId'>
        /// Channel id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<LiveTvListingsProviderInfo>>> GetLivetvListingprovidersWithHttpMessagesAsync(string channelId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets tuner hosts
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<LiveTvTunerHostInfo>>> GetLivetvTunerhostsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a tuner host
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// TunerHostInfo:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LiveTvTunerHostInfo>> PostLivetvTunerhostsWithHttpMessagesAsync(LiveTvTunerHostInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a tuner host
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Tuner host id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteLivetvTunerhostsWithHttpMessagesAsync(string id = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available live tv services.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LiveTvLiveTvInfo>> GetLivetvInfoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the epg.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='type'>
        /// Optional filter by channel type. Possible values include: 'TV',
        /// 'Radio'
        /// </param>
        /// <param name='userId'>
        /// Optional filter by user and attach user data.
        /// </param>
        /// <param name='genreIds'>
        /// The genres to return guide information for.
        /// </param>
        /// <param name='minStartDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxStartDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='minEndDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxEndDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='isFavorite'>
        /// Filter by channels that are favorites, or not.
        /// </param>
        /// <param name='isLiked'>
        /// Filter by channels that are liked, or not.
        /// </param>
        /// <param name='isDisliked'>
        /// Filter by channels that are disliked, or not.
        /// </param>
        /// <param name='enableFavoriteSorting'>
        /// Incorporate favorite and like status into channel sorting.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='addCurrentProgram'>
        /// Optional. Adds current program info to each channel
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='channelIds'>
        /// The channels to return guide information for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultLiveTVApiEpgRow>> GetLivetvEPGWithHttpMessagesAsync(string type = default(string), string userId = default(string), string genreIds = default(string), string minStartDate = default(string), string maxStartDate = default(string), string minEndDate = default(string), string maxEndDate = default(string), int? startIndex = default(int?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? limit = default(int?), bool? isFavorite = default(bool?), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableFavoriteSorting = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string fields = default(string), bool? addCurrentProgram = default(bool?), bool? enableUserData = default(bool?), string channelIds = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available live tv channels.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='type'>
        /// Optional filter by channel type. Possible values include: 'TV',
        /// 'Radio'
        /// </param>
        /// <param name='isLiked'>
        /// Filter by channels that are liked, or not.
        /// </param>
        /// <param name='isDisliked'>
        /// Filter by channels that are disliked, or not.
        /// </param>
        /// <param name='enableFavoriteSorting'>
        /// Incorporate favorite and like status into channel sorting.
        /// </param>
        /// <param name='addCurrentProgram'>
        /// Optional. Adds current program info to each channel
        /// </param>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetLivetvChannelsWithHttpMessagesAsync(string type = default(string), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableFavoriteSorting = default(bool?), bool? addCurrentProgram = default(bool?), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available live tv epgs..
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='channelIds'>
        /// The channels to return guide information for.
        /// </param>
        /// <param name='minStartDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxStartDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='minEndDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxEndDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetLivetvProgramsWithHttpMessagesAsync(string channelIds = default(string), string minStartDate = default(string), string maxStartDate = default(string), string minEndDate = default(string), string maxEndDate = default(string), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available live tv epgs..
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// BaseItemsRequest:
        /// </param>
        /// <param name='channelIds'>
        /// The channels to return guide information for.
        /// </param>
        /// <param name='minStartDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxStartDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='minEndDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxEndDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivetvProgramsWithHttpMessagesAsync(ApiBaseItemsRequest body, string channelIds = default(string), string minStartDate = default(string), string maxStartDate = default(string), string minEndDate = default(string), string maxEndDate = default(string), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live tv recordings
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='channelId'>
        /// Optional filter by channel id.
        /// </param>
        /// <param name='status'>
        /// Optional filter by recording status. Possible values include:
        /// 'New', 'InProgress', 'Completed', 'Cancelled', 'ConflictedOk',
        /// 'ConflictedNotOk', 'Error'
        /// </param>
        /// <param name='isInProgress'>
        /// Optional filter by recordings that are in progress, or not.
        /// </param>
        /// <param name='seriesTimerId'>
        /// Optional filter by recordings belonging to a series timer
        /// </param>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetLivetvRecordingsWithHttpMessagesAsync(string channelId = default(string), string status = default(string), bool? isInProgress = default(bool?), string seriesTimerId = default(string), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live tv timers
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='channelId'>
        /// Optional filter by channel id.
        /// </param>
        /// <param name='seriesTimerId'>
        /// Optional filter by timers belonging to a series timer
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultLiveTvTimerInfoDto>> GetLivetvTimersWithHttpMessagesAsync(string channelId = default(string), string seriesTimerId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a live tv timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// TimerInfoDto:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivetvTimersWithHttpMessagesAsync(LiveTvTimerInfoDto body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live tv series timers
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='sortBy'>
        /// Optional. Sort by SortName or Priority
        /// </param>
        /// <param name='sortOrder'>
        /// Optional. Sort in Ascending or Descending order. Possible values
        /// include: 'Ascending', 'Descending'
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultLiveTvSeriesTimerInfoDto>> GetLivetvSeriestimersWithHttpMessagesAsync(string sortBy = default(string), string sortOrder = default(string), int? startIndex = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a live tv series timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// SeriesTimerInfo:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivetvSeriestimersWithHttpMessagesAsync(LiveTvSeriesTimerInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets guide info
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LiveTvGuideInfo>> GetLivetvGuideinfoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets known parental ratings
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ParentalRating>>> GetLocalizationParentalratingsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets localization options
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GlobalizationLocalizatonOption>>> GetLocalizationOptionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets known countries
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GlobalizationCountryInfo>>> GetLocalizationCountriesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets known cultures
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GlobalizationCultureDto>>> GetLocalizationCulturesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets movie recommendations
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='categoryLimit'>
        /// The max number of categories to return
        /// </param>
        /// <param name='itemLimit'>
        /// The max number of items to return per category
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RecommendationDto>>> GetMoviesRecommendationsWithHttpMessagesAsync(int? categoryLimit = default(int?), int? itemLimit = default(int?), string userId = default(string), string parentId = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a music genre, by name
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='name'>
        /// The genre name
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseItemDto>> GetMusicgenresByNameWithHttpMessagesAsync(string name, string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a music genre
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetMusicgenresInstantmixWithHttpMessagesAsync(string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets notification types
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<EmbyNotificationsNotificationCategoryInfo>>> GetNotificationsTypesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a notification to all admin users
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='name'>
        /// The notification's name
        /// </param>
        /// <param name='description'>
        /// The notification's description
        /// </param>
        /// <param name='imageUrl'>
        /// The notification's image url
        /// </param>
        /// <param name='url'>
        /// The notification's info url
        /// </param>
        /// <param name='level'>
        /// The notification level
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostNotificationsAdminWithHttpMessagesAsync(string name, string description, string imageUrl = default(string), string url = default(string), string level = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available package updates for currently installed packages
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='packageType'>
        /// Package type filter (System/UserInstalled)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UpdatesPackageVersionInfo>>> GetPackagesUpdatesWithHttpMessagesAsync(string packageType, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a package, by name or assembly guid
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='name'>
        /// The name of the package
        /// </param>
        /// <param name='assemblyGuid'>
        /// The guid of the associated assembly
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpdatesPackageInfo>> GetPackagesByNameWithHttpMessagesAsync(string name, string assemblyGuid = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a person, by name
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='name'>
        /// The person name
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseItemDto>> GetPersonsByNameWithHttpMessagesAsync(string name, string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='size'>
        /// Size
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetPlaybackBitratetestWithHttpMessagesAsync(long size, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uninstalls a plugin
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Plugin Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeletePluginsByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a scheduled task, by Id
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TasksTaskInfo>> GetScheduledtasksByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a the current play queue from a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Optional. Filter by session id.
        /// </param>
        /// <param name='deviceId'>
        /// Optional. Filter by device id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetSessionsPlayqueueWithHttpMessagesAsync(string id = default(string), string deviceId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that a session has ended
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsLogoutWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates capabilities for a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Session Id
        /// </param>
        /// <param name='playableMediaTypes'>
        /// A list of playable media types, comma delimited. Audio, Video,
        /// Book, Game, Photo.
        /// </param>
        /// <param name='supportedCommands'>
        /// A list of supported remote control commands, comma delimited
        /// </param>
        /// <param name='supportsMediaControl'>
        /// Determines whether media can be played remotely.
        /// </param>
        /// <param name='supportsSync'>
        /// Determines whether sync is supported.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsCapabilitiesWithHttpMessagesAsync(string id, string playableMediaTypes = default(string), string supportedCommands = default(string), bool? supportsMediaControl = default(bool?), bool? supportsSync = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports playback has started within a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// PlaybackStartInfo:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsPlayingWithHttpMessagesAsync(PlaybackStartInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of upcoming episodes
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetShowsUpcomingWithHttpMessagesAsync(string userId, int? startIndex = default(int?), int? limit = default(int?), string fields = default(string), string parentId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of next up episodes
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='seriesId'>
        /// Optional. Filter by series id
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetShowsNextupWithHttpMessagesAsync(string userId, int? startIndex = default(int?), int? limit = default(int?), string fields = default(string), string seriesId = default(string), string parentId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a studio, by name
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='name'>
        /// The studio name
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseItemDto>> GetStudiosByNameWithHttpMessagesAsync(string name, string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of available sync targets.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// UserId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<SyncSyncTarget>>> GetSyncTargetsWithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets sync jobs.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultSyncSyncJob>> GetSyncJobsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets sync jobs.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// SyncJobRequest:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SyncModelSyncJobCreationResult>> PostSyncJobsWithHttpMessagesAsync(SyncModelSyncJobRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets sync job items.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultSyncModelSyncJobItem>> GetSyncJobitemsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of available sync targets.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// UserId
        /// </param>
        /// <param name='itemIds'>
        /// ItemIds
        /// </param>
        /// <param name='parentId'>
        /// ParentId
        /// </param>
        /// <param name='targetId'>
        /// TargetId
        /// </param>
        /// <param name='category'>
        /// Category. Possible values include: 'Latest', 'NextUp', 'Resume'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SyncModelSyncDialogOptions>> GetSyncOptionsWithHttpMessagesAsync(string userId, string itemIds = default(string), string parentId = default(string), string targetId = default(string), string category = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports an action that occurred while offline.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// List`1:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSyncOfflineactionsWithHttpMessagesAsync(IList<UsersUserAction> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Syncs data between device and server
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// SyncDataRequest:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SyncModelSyncDataResponse>> PostSyncDataWithHttpMessagesAsync(SyncModelSyncDataRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets application configuration
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ConfigurationServerConfiguration>> GetSystemConfigurationWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates application configuration
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// ServerConfiguration:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSystemConfigurationWithHttpMessagesAsync(ConfigurationServerConfiguration body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets release notes
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpdatesPackageVersionInfo>> GetSystemReleasenotesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSystemPingWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetSystemPingWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets wake on lan information
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<WakeOnLanInfo>>> GetSystemWakeonlaninfoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets information about the server
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SystemInfo>> GetSystemInfoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Restarts the application, if needed
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSystemRestartWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shuts down the application
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSystemShutdownWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets information about the request endpoint
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<NetEndPointInfo>> GetSystemEndpointWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets UI view data
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='pageId'>
        /// Id of the page controller
        /// </param>
        /// <param name='clientLocale'>
        /// Locale identifier of the client
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmbyWebGenericUIModelUIViewInfo>> GetUIViewWithHttpMessagesAsync(string pageId, string clientLocale, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Execute a command in the context of tv setup
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// RunUICommand
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmbyWebGenericUIModelUIViewInfo>> PostUICommandWithHttpMessagesAsync(EmbyWebGenericUIApiEndpointsRunUICommand body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of publicly visible users for display on a login
        /// screen.
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserDto>>> GetUsersPublicWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='isHidden'>
        /// Optional filter by IsHidden=true or false
        /// </param>
        /// <param name='isDisabled'>
        /// Optional filter by IsDisabled=true or false
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultUserDto>> GetUsersQueryWithHttpMessagesAsync(bool? isHidden = default(bool?), bool? isDisabled = default(bool?), int? startIndex = default(int?), int? limit = default(int?), string nameStartsWithOrGreater = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='isHidden'>
        /// Optional filter by IsHidden=true or false
        /// </param>
        /// <param name='isDisabled'>
        /// Optional filter by IsDisabled=true or false
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<NameIdPair>>> GetUsersPrefixesWithHttpMessagesAsync(bool? isHidden = default(bool?), bool? isDisabled = default(bool?), int? startIndex = default(int?), int? limit = default(int?), string nameStartsWithOrGreater = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a user by Id
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserDto>> GetUsersByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteUsersByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// UserDto:
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByIdWithHttpMessagesAsync(UserDto body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Authenticates a user
        /// </summary>
        /// <remarks>
        /// Authenticate a user by nane and password. A 200 status code
        /// indicates success, while anything in the 400 or 500 range indicates
        /// failure
        /// ---
        /// No authentication required
        /// </remarks>
        /// <param name='body'>
        /// AuthenticateUserByName
        /// </param>
        /// <param name='xEmbyAuthorization'>
        /// The authorization header can be either named 'Authorization' or
        /// 'X-Emby-Authorization'.
        /// It must be of the following schema:
        /// Emby UserId="(guid)", Client="(string)", Device="(string)",
        /// DeviceId="(string)", Version="string", Token="(string)"
        /// Please consult the documentation for further details.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AuthenticationAuthenticationResult>> PostUsersAuthenticatebynameWithHttpMessagesAsync(AuthenticateUserByName body, string xEmbyAuthorization, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// CreateUserByName
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserDto>> PostUsersNewWithHttpMessagesAsync(CreateUserByName body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Initiates the forgot password process for a local user
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='body'>
        /// ForgotPassword
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UsersForgotPasswordResult>> PostUsersForgotpasswordWithHttpMessagesAsync(ForgotPassword body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Merges videos into a single record
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='ids'>
        /// Item id list. This allows multiple, comma delimited.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostVideosMergeversionsWithHttpMessagesAsync(string ids = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='playSessionId'>
        /// The play session id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteVideosActiveencodingsWithHttpMessagesAsync(string deviceId, string playSessionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetWebConfigurationpageWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<EmbyWebApiConfigurationPageInfo>>> GetWebConfigurationpagesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetWebStringsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given album
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetAlbumsByIdInstantmixWithHttpMessagesAsync(string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Finds albums similar to a given album.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetAlbumsByIdSimilarWithHttpMessagesAsync(string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Finds albums similar to a given album.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetArtistsByIdSimilarWithHttpMessagesAsync(string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetAudioByIdUniversalByContainerWithHttpMessagesAsync(string id, string container, string deviceId = default(string), long? startTimeTicks = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadAudioByIdUniversalByContainerWithHttpMessagesAsync(string id, string container, string deviceId = default(string), long? startTimeTicks = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetAudioByIdUniversalWithHttpMessagesAsync(string id, string deviceId = default(string), long? startTimeTicks = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadAudioByIdUniversalWithHttpMessagesAsync(string id, string deviceId = default(string), long? startTimeTicks = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetAudioByIdStreamByContainerWithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadAudioByIdStreamByContainerWithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetAudioByIdStreamWithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadAudioByIdStreamWithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream using HTTP live streaming.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetAudioByIdMasterM3u8WithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream using HTTP live streaming.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadAudioByIdMasterM3u8WithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an audio stream using HTTP live streaming.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetAudioByIdMainM3u8WithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='key'>
        /// Auth Key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteAuthKeysByKeyWithHttpMessagesAsync(string key, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds items to a collection
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='ids'>
        /// Item id, comma delimited
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostCollectionsByIdItemsWithHttpMessagesAsync(string ids, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes items from a collection
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='ids'>
        /// Item id, comma delimited
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteCollectionsByIdItemsWithHttpMessagesAsync(string ids, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets dlna server info
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='uuId'>
        /// Server UuId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDlnaByUuidDescriptionXmlWithHttpMessagesAsync(string uuId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets dlna server info
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='uuId'>
        /// Server UuId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDlnaByUuidDescriptionWithHttpMessagesAsync(string uuId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a server icon
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='filename'>
        /// The icon filename
        /// </param>
        /// <param name='uuId'>
        /// Server UuId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDlnaIconsByFilenameWithHttpMessagesAsync(string filename, string uuId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single profile
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Profile Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmbyDlnaProfilesDlnaProfile>> GetDlnaProfilesByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a profile
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Profile Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteDlnaProfilesByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a profile
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// DlnaProfile:
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostDlnaProfilesByIdWithHttpMessagesAsync(EmbyDlnaProfilesDlnaProfile body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the default profile
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmbyDlnaProfilesDlnaProfile>> GetDlnaProfilesDefaultWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets details about available video encoders and decoders
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<MediaEncodingCodecsVideoCodecsVideoCodecBase>>> GetEncodingCodecinformationVideoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets default codec configurations
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ConfigurationCodecConfiguration>>> GetEncodingCodecconfigurationDefaultsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Finds games similar to a given game.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetGamesByIdSimilarWithHttpMessagesAsync(string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets external id infos for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ExternalIdInfo>>> GetItemsByIdExternalidinfosWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='body'>
        /// RemoteSearchQuery`1:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RemoteSearchResult>>> PostItemsRemotesearchTrailerWithHttpMessagesAsync(ProvidersRemoteSearchQueryProvidersTrailerInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='body'>
        /// RemoteSearchQuery`1:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RemoteSearchResult>>> PostItemsRemotesearchBookWithHttpMessagesAsync(ProvidersRemoteSearchQueryProvidersBookInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='body'>
        /// RemoteSearchQuery`1:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RemoteSearchResult>>> PostItemsRemotesearchMovieWithHttpMessagesAsync(ProvidersRemoteSearchQueryProvidersMovieInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='body'>
        /// RemoteSearchQuery`1:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RemoteSearchResult>>> PostItemsRemotesearchSeriesWithHttpMessagesAsync(ProvidersRemoteSearchQueryProvidersSeriesInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='body'>
        /// RemoteSearchQuery`1:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RemoteSearchResult>>> PostItemsRemotesearchGameWithHttpMessagesAsync(ProvidersRemoteSearchQueryProvidersGameInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='body'>
        /// RemoteSearchQuery`1:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RemoteSearchResult>>> PostItemsRemotesearchBoxsetWithHttpMessagesAsync(ProvidersRemoteSearchQueryProvidersItemLookupInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='body'>
        /// RemoteSearchQuery`1:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RemoteSearchResult>>> PostItemsRemotesearchMusicvideoWithHttpMessagesAsync(ProvidersRemoteSearchQueryProvidersMusicVideoInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='body'>
        /// RemoteSearchQuery`1:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RemoteSearchResult>>> PostItemsRemotesearchPersonWithHttpMessagesAsync(ProvidersRemoteSearchQueryProvidersPersonLookupInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='body'>
        /// RemoteSearchQuery`1:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RemoteSearchResult>>> PostItemsRemotesearchMusicalbumWithHttpMessagesAsync(ProvidersRemoteSearchQueryProvidersAlbumInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='body'>
        /// RemoteSearchQuery`1:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RemoteSearchResult>>> PostItemsRemotesearchMusicartistWithHttpMessagesAsync(ProvidersRemoteSearchQueryProvidersArtistInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a remote image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='imageUrl'>
        /// The image url
        /// </param>
        /// <param name='providerName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetItemsRemotesearchImageWithHttpMessagesAsync(string imageUrl, string providerName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Resets metadata for one or more items
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='itemIds'>
        /// The item ids
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsMetadataResetWithHttpMessagesAsync(string itemIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Refreshes metadata for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='recursive'>
        /// Indicates if the refresh should occur recursively.
        /// </param>
        /// <param name='metadataRefreshMode'>
        /// Specifies the metadata refresh mode. Possible values include:
        /// 'ValidationOnly', 'Default', 'FullRefresh'
        /// </param>
        /// <param name='imageRefreshMode'>
        /// Specifies the image refresh mode. Possible values include:
        /// 'ValidationOnly', 'Default', 'FullRefresh'
        /// </param>
        /// <param name='replaceAllMetadata'>
        /// Determines if metadata should be replaced. Only applicable if mode
        /// is FullRefresh
        /// </param>
        /// <param name='replaceAllImages'>
        /// Determines if images should be replaced. Only applicable if mode is
        /// FullRefresh
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByIdRefreshWithHttpMessagesAsync(string id, bool? recursive = default(bool?), string metadataRefreshMode = default(string), string imageRefreshMode = default(string), bool? replaceAllMetadata = default(bool?), bool? replaceAllImages = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets metadata editor info for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='itemId'>
        /// The id of the item
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MetadataEditorInfo>> GetItemsByItemidMetadataeditorWithHttpMessagesAsync(string itemId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Makes an item public to all users
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByIdMakepublicWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Makes an item private
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByIdMakeprivateWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetItemsByIdInstantmixWithHttpMessagesAsync(string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets delete info for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LibraryDeleteInfo>> GetItemsByIdDeleteinfoWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets similar items
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetItemsByIdSimilarWithHttpMessagesAsync(string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Downloads item media
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetItemsByIdDownloadWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the original file of an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetItemsByIdFileWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all parents of an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BaseItemDto>>> GetItemsByIdAncestorsWithHttpMessagesAsync(string id, string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets critic reviews for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetItemsByIdCriticreviewsWithHttpMessagesAsync(string id, int? startIndex = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an item from the library and file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets theme videos and songs for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='inheritFromParent'>
        /// Determines whether or not parent items should be searched for theme
        /// media.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AllThemeMediaResult>> GetItemsByIdThememediaWithHttpMessagesAsync(string id, string userId = default(string), bool? inheritFromParent = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets theme songs for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='inheritFromParent'>
        /// Determines whether or not parent items should be searched for theme
        /// media.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ThemeMediaResult>> GetItemsByIdThemesongsWithHttpMessagesAsync(string id, string userId = default(string), bool? inheritFromParent = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets theme videos for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='inheritFromParent'>
        /// Determines whether or not parent items should be searched for theme
        /// media.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ThemeMediaResult>> GetItemsByIdThemevideosWithHttpMessagesAsync(string id, string userId = default(string), bool? inheritFromParent = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets information about an item's images
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ImageInfo>>> GetItemsByIdImagesWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available remote images for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// The image type. Possible values include: 'Primary', 'Art',
        /// 'Backdrop', 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot',
        /// 'Menu', 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight',
        /// 'LogoLightColor'
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='providerName'>
        /// Optional. The image provider to use
        /// </param>
        /// <param name='includeAllLanguages'>
        /// Optional.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RemoteImageResult>> GetItemsByIdRemoteimagesWithHttpMessagesAsync(string id, string type = default(string), int? startIndex = default(int?), int? limit = default(int?), string providerName = default(string), bool? includeAllLanguages = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='width'>
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RokuMetadataApiThumbnailSetInfo>> GetItemsByIdThumbnailsetWithHttpMessagesAsync(int width, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live playback media info for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MediaInfoPlaybackInfoResponse>> GetItemsByIdPlaybackinfoWithHttpMessagesAsync(string id, string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live playback media info for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// PlaybackInfoRequest:
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MediaInfoPlaybackInfoResponse>> PostItemsByIdPlaybackinfoWithHttpMessagesAsync(MediaInfoPlaybackInfoRequest body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLibrarySeriesAddedWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLibrarySeriesUpdatedWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that new movies have been added by an external source
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// PostUpdatedMedia
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLibraryMediaUpdatedWithHttpMessagesAsync(LibraryPostUpdatedMedia body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLibraryMoviesAddedWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deprecated. Use /Library/Media/Updated
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLibraryMoviesUpdatedWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultVirtualFolderInfo>> GetLibraryVirtualfoldersQueryWithHttpMessagesAsync(int? startIndex = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='body'>
        /// UpdateLibraryOptions
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLibraryVirtualfoldersLibraryoptionsWithHttpMessagesAsync(LibraryUpdateLibraryOptions body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='body'>
        /// RenameVirtualFolder
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLibraryVirtualfoldersNameWithHttpMessagesAsync(LibraryRenameVirtualFolder body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='body'>
        /// RemoveVirtualFolder
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLibraryVirtualfoldersDeleteWithHttpMessagesAsync(LibraryRemoveVirtualFolder body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='body'>
        /// AddMediaPath
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLibraryVirtualfoldersPathsWithHttpMessagesAsync(LibraryAddMediaPath body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteLibraryVirtualfoldersPathsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a live tv program
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseItemDto>> GetLivetvProgramsByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<NameIdPair>>> GetLivetvTunerhostsTypesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the channel management list
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Name, StartDate
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultEmbyLiveTVChannelManagementInfo>> GetLivetvManageChannelsWithHttpMessagesAsync(int? startIndex = default(int?), int? limit = default(int?), string sortBy = default(string), string sortOrder = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live tv channel tag prefixes
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<LiveTVApiTagItem>>> GetLivetvChanneltagsPrefixesWithHttpMessagesAsync(string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets recording folders
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// Optional filter by user and attach user data.
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BaseItemDto>>> GetLivetvRecordingsFoldersWithHttpMessagesAsync(string userId = default(string), string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<LiveTvTunerHostInfo>>> GetLivetvTunersDiscvoverWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LiveTvListingsProviderInfo>> GetLivetvListingprovidersDefaultWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a listing provider
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Provider id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivetvListingprovidersDeleteWithHttpMessagesAsync(string id = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a tuner host
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Tuner host id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivetvTunerhostsDeleteWithHttpMessagesAsync(string id = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available lineups
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Provider id
        /// </param>
        /// <param name='type'>
        /// Provider Type
        /// </param>
        /// <param name='location'>
        /// Location
        /// </param>
        /// <param name='country'>
        /// Country
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<NameIdPair>>> GetLivetvListingprovidersLineupsWithHttpMessagesAsync(string id = default(string), string type = default(string), string location = default(string), string country = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a live tv channel
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Channel Id
        /// </param>
        /// <param name='userId'>
        /// Optional attach user data.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseItemDto>> GetLivetvChannelsByIdWithHttpMessagesAsync(string id, string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available live tv epgs..
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// Optional filter by user id.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='isAiring'>
        /// Optional. Filter by programs that are currently airing, or not.
        /// </param>
        /// <param name='hasAired'>
        /// Optional. Filter by programs that have completed airing, or not.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='genreIds'>
        /// The genres to return guide information for.
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetLivetvProgramsRecommendedWithHttpMessagesAsync(string userId = default(string), int? limit = default(int?), bool? isAiring = default(bool?), bool? hasAired = default(bool?), bool? isSeries = default(bool?), bool? isMovie = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string genreIds = default(string), string fields = default(string), bool? enableUserData = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live tv recordings
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetLivetvRecordingsSeriesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a live tv recording
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Recording Id
        /// </param>
        /// <param name='userId'>
        /// Optional attach user data.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseItemDto>> GetLivetvRecordingsByIdWithHttpMessagesAsync(string id, string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a live tv recording
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Recording Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteLivetvRecordingsByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a live tv timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Timer Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LiveTvTimerInfoDto>> GetLivetvTimersByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels a live tv timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Timer Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteLivetvTimersByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a live tv timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// TimerInfoDto:
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivetvTimersByIdWithHttpMessagesAsync(LiveTvTimerInfoDto body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a live tv series timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Timer Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LiveTvTimerInfoDto>> GetLivetvSeriestimersByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels a live tv series timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Timer Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteLivetvSeriestimersByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a live tv series timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// SeriesTimerInfo:
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivetvSeriestimersByIdWithHttpMessagesAsync(LiveTvSeriesTimerInfo body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets default values for a new timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='programId'>
        /// Optional, to attach default values based on a program.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LiveTvSeriesTimerInfoDto>> GetLivetvTimersDefaultsWithHttpMessagesAsync(string programId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets live tv recording groups
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetLivetvRecordingsGroupsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets listing provider
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<LiveTVApiListingProviderTypeInfo>>> GetLivetvListingprovidersAvailableWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Finds movies and trailers similar to a given movie.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetMoviesByIdSimilarWithHttpMessagesAsync(string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a music genre
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='name'>
        /// The genre name
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetMusicgenresByNameInstantmixWithHttpMessagesAsync(string name, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a test notification
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// UserNotificationInfo:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostNotificationsServicesTestWithHttpMessagesAsync(EmbyNotificationsUserNotificationInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets default notification info
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EmbyNotificationsUserNotificationInfo>> GetNotificationsServicesDefaultsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Installs a package
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='name'>
        /// Package name
        /// </param>
        /// <param name='assemblyGuid'>
        /// Guid of the associated assembly
        /// </param>
        /// <param name='version'>
        /// Optional version. Defaults to latest version.
        /// </param>
        /// <param name='updateClass'>
        /// Optional update class (Dev, Beta, Release). Defaults to Release.
        /// Possible values include: 'Release', 'Beta', 'Dev'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostPackagesInstalledByNameWithHttpMessagesAsync(string name, string assemblyGuid = default(string), string version = default(string), string updateClass = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels a package installation
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Installation Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeletePackagesInstallingByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets add to playlist info
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='ids'>
        /// Item id, comma delimited
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetPlaylistsByIdAddtoplaylistinfoWithHttpMessagesAsync(string ids, string id, string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds items to a playlist
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='ids'>
        /// Item id, comma delimited
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PlaylistsAddToPlaylistResult>> PostPlaylistsByIdItemsWithHttpMessagesAsync(string ids, string id, string userId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes items from a playlist
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='entryIds'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeletePlaylistsByIdItemsWithHttpMessagesAsync(string id, string entryIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the original items of a playlist
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetPlaylistsByIdItemsWithHttpMessagesAsync(string id, string userId = default(string), int? startIndex = default(int?), int? limit = default(int?), string fields = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given playlist
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetPlaylistsByIdInstantmixWithHttpMessagesAsync(string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a plugin thumb image
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='id'>
        /// Plugin Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetPluginsByIdThumbWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a plugin's configuration
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Plugin Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetPluginsByIdConfigurationWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a plugin's configuration
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='id'>
        /// Plugin Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostPluginsByIdConfigurationWithHttpMessagesAsync(string body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uninstalls a plugin
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Plugin Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostPluginsByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Starts a scheduled task
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostScheduledtasksRunningByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stops a scheduled task
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteScheduledtasksRunningByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the triggers for a scheduled task
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// List`1:
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostScheduledtasksByIdTriggersWithHttpMessagesAsync(IList<TasksTaskTriggerInfo> body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Instructs a session to browse to an item or view
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Session Id
        /// </param>
        /// <param name='itemType'>
        /// The type of item to browse to.
        /// </param>
        /// <param name='itemId'>
        /// The Id of the item.
        /// </param>
        /// <param name='itemName'>
        /// The name of the item.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsByIdViewingWithHttpMessagesAsync(string id, string itemType, string itemId, string itemName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Issues a command to a client to display a message to the user
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Session Id
        /// </param>
        /// <param name='text'>
        /// The message text.
        /// </param>
        /// <param name='header'>
        /// The message header.
        /// </param>
        /// <param name='timeoutMs'>
        /// The message timeout. If omitted the user will have to confirm
        /// viewing the message.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsByIdMessageWithHttpMessagesAsync(string id, string text, string header, long? timeoutMs = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Instructs a session to play an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// PlayRequest:
        /// </param>
        /// <param name='id'>
        /// Session Id
        /// </param>
        /// <param name='itemIds'>
        /// The ids of the items to play, comma delimited
        /// </param>
        /// <param name='playCommand'>
        /// The type of play command to issue (PlayNow, PlayNext, PlayLast).
        /// Clients who have not yet implemented play next and play last may
        /// play now. Possible values include: 'PlayNow', 'PlayNext',
        /// 'PlayLast', 'PlayInstantMix', 'PlayShuffle'
        /// </param>
        /// <param name='startPositionTicks'>
        /// The starting position of the first item.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsByIdPlayingWithHttpMessagesAsync(PlayRequest body, string id, IList<long?> itemIds, string playCommand, long? startPositionTicks = default(long?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Issues a system command to a client
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// GeneralCommand:
        /// </param>
        /// <param name='id'>
        /// Session Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsByIdCommandWithHttpMessagesAsync(GeneralCommand body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates capabilities for a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// ClientCapabilities:
        /// </param>
        /// <param name='id'>
        /// Session Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsCapabilitiesFullWithHttpMessagesAsync(ClientCapabilities body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports playback progress within a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// PlaybackProgressInfo:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsPlayingProgressWithHttpMessagesAsync(PlaybackProgressInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Pings a playback session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='playSessionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsPlayingPingWithHttpMessagesAsync(string playSessionId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports playback has stopped within a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// PlaybackStopInfo:
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsPlayingStoppedWithHttpMessagesAsync(PlaybackStopInfo body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets seasons for a tv series
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// The series id
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='isSpecialSeason'>
        /// Optional. Filter by special season.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetShowsByIdSeasonsWithHttpMessagesAsync(string userId, string id, string fields = default(string), bool? isSpecialSeason = default(bool?), bool? isMissing = default(bool?), string adjacentTo = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets episodes for a tv season
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// The series id
        /// </param>
        /// <param name='season'>
        /// Optional filter by season number.
        /// </param>
        /// <param name='seasonId'>
        /// Optional. Filter by season id
        /// </param>
        /// <param name='startItemId'>
        /// Optional. Skip through the list until a given item is found.
        /// </param>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetShowsByIdEpisodesWithHttpMessagesAsync(string id, int? season = default(int?), string seasonId = default(string), string startItemId = default(string), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Finds tv shows similar to a given one.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetShowsByIdSimilarWithHttpMessagesAsync(string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an instant playlist based on a given song
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetSongsByIdInstantmixWithHttpMessagesAsync(string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets sync status for an item.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// SyncedItemProgress:
        /// </param>
        /// <param name='itemId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSyncByItemidStatusWithHttpMessagesAsync(SyncModelSyncedItemProgress body, string itemId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a sync job.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SyncSyncJob>> GetSyncJobsByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels a sync job.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteSyncJobsByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a sync job.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// SyncJob:
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSyncJobsByIdWithHttpMessagesAsync(SyncSyncJob body, long id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels items from a sync target
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='itemIds'>
        /// ItemIds
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSyncItemsCancelWithHttpMessagesAsync(string itemIds = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels items from a sync target
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='targetId'>
        /// TargetId
        /// </param>
        /// <param name='itemIds'>
        /// ItemIds
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteSyncByTargetidItemsWithHttpMessagesAsync(string targetId, string itemIds = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets ready to download sync items.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='targetId'>
        /// TargetId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<SyncModelSyncedItem>>> GetSyncItemsReadyWithHttpMessagesAsync(string targetId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels a sync job item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteSyncJobitemsByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a named configuration
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='key'>
        /// Key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetSystemConfigurationByKeyWithHttpMessagesAsync(string key, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates named configuration
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='key'>
        /// Key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSystemConfigurationByKeyWithHttpMessagesAsync(string body, string key, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets release notes
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UpdatesPackageVersionInfo>>> GetSystemReleasenotesVersionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of available server log files
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultLogFile>> GetSystemLogsQueryWithHttpMessagesAsync(int? startIndex = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a log file
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='name'>
        /// The log file name.
        /// </param>
        /// <param name='sanitize'>
        /// Return sanitized log
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetSystemLogsByNameWithHttpMessagesAsync(string name, bool? sanitize = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets public information about the server
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PublicSystemInfo>> GetSystemInfoPublicWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets activity log entries
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='minDate'>
        /// Optional. The minimum date. Format = ISO
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultActivityLogEntry>> GetSystemActivitylogEntriesWithHttpMessagesAsync(int? startIndex = default(int?), int? limit = default(int?), string minDate = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Finds movies and trailers similar to a given trailer.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetTrailersByIdSimilarWithHttpMessagesAsync(string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='userId'>
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetUsersByUseridSuggestionsWithHttpMessagesAsync(string userId, string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Authenticates a user
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='body'>
        /// AuthenticateUser
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AuthenticationAuthenticationResult>> PostUsersByIdAuthenticateWithHttpMessagesAsync(AuthenticateUser body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user's password
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// UpdateUserPassword
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByIdPasswordWithHttpMessagesAsync(UpdateUserPassword body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user's easy password
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// UpdateUserEasyPassword
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByIdEasypasswordWithHttpMessagesAsync(UpdateUserEasyPassword body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Redeems a forgot password pin
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='body'>
        /// ForgotPasswordPin
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UsersPinRedeemResult>> PostUsersForgotpasswordPinWithHttpMessagesAsync(ForgotPasswordPin body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user configuration
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// UserConfiguration:
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByIdConfigurationWithHttpMessagesAsync(ConfigurationUserConfiguration body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user policy
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// UserPolicy:
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByIdPolicyWithHttpMessagesAsync(UsersUserPolicy body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetUsersByUseridItemsWithHttpMessagesAsync(string userId, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='includeExternalContent'>
        /// Whether or not to include external views such as channels or live
        /// tv
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetUsersByUseridViewsWithHttpMessagesAsync(string userId, bool includeExternalContent, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes alternate video sources.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteVideosByIdAlternatesourcesWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets additional parts for a video.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='userId'>
        /// Optional. Filter by user id, and attach user data
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetVideosByIdAdditionalpartsWithHttpMessagesAsync(string id, string userId = default(string), string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='width'>
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVideosByIdIndexBifWithHttpMessagesAsync(int width, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a video stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVideosByIdStreamByContainerWithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a video stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadVideosByIdStreamByContainerWithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a video stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVideosByIdStreamWithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a video stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadVideosByIdStreamWithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a video stream using HTTP live streaming.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVideosByIdMasterM3u8WithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a video stream using HTTP live streaming.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadVideosByIdMasterM3u8WithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a video stream using HTTP live streaming.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVideosByIdMainM3u8WithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an HLS subtitle playlist.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='subtitleSegmentLength'>
        /// The subtitle segment length
        /// </param>
        /// <param name='manifestSubtitles'>
        /// The subtitle segment format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVideosByIdSubtitlesM3u8WithHttpMessagesAsync(string id, int subtitleSegmentLength, string manifestSubtitles, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an HLS subtitle playlist.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='subtitleSegmentLength'>
        /// The subtitle segment length
        /// </param>
        /// <param name='manifestSubtitles'>
        /// The subtitle segment format
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVideosByIdLiveSubtitlesM3u8WithHttpMessagesAsync(string id, int subtitleSegmentLength, string manifestSubtitles, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='playSessionId'>
        /// The play session id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostVideosActiveencodingsDeleteWithHttpMessagesAsync(string deviceId, string playSessionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='container'>
        /// Container
        /// </param>
        /// <param name='deviceProfileId'>
        /// Optional. The dlna device profile id to utilize.
        /// </param>
        /// <param name='deviceId'>
        /// The device id of the client requesting. Used to stop encoding
        /// processes when needed.
        /// </param>
        /// <param name='audioCodec'>
        /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// aac, mp3, vorbis, wma.
        /// </param>
        /// <param name='enableAutoStreamCopy'>
        /// Whether or not to allow automatic stream copy if requested values
        /// match the original source. Defaults to true.
        /// </param>
        /// <param name='audioSampleRate'>
        /// Optional. Specify a specific audio sample rate, e.g. 44100
        /// </param>
        /// <param name='audioBitRate'>
        /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='audioChannels'>
        /// Optional. Specify a specific number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='maxAudioChannels'>
        /// Optional. Specify a maximum number of audio channels to encode to,
        /// e.g. 2
        /// </param>
        /// <param name='staticParameter'>
        /// Optional. If true, the original file will be streamed statically
        /// without any encoding. Use either no url extension or the original
        /// file extension. true/false
        /// </param>
        /// <param name='profile'>
        /// Optional. Specify a specific h264 profile, e.g. main, baseline,
        /// high.
        /// </param>
        /// <param name='level'>
        /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
        /// </param>
        /// <param name='framerate'>
        /// Optional. A specific video framerate to encode to, e.g. 23.976.
        /// Generally this should be omitted unless the device has specific
        /// requirements.
        /// </param>
        /// <param name='maxFramerate'>
        /// Optional. A specific maximum video framerate to encode to, e.g.
        /// 23.976. Generally this should be omitted unless the device has
        /// specific requirements.
        /// </param>
        /// <param name='copyTimestamps'>
        /// Whether or not to copy timestamps when transcoding with an offset.
        /// Defaults to false.
        /// </param>
        /// <param name='startTimeTicks'>
        /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='width'>
        /// Optional. The fixed horizontal resolution of the encoded video.
        /// </param>
        /// <param name='height'>
        /// Optional. The fixed vertical resolution of the encoded video.
        /// </param>
        /// <param name='maxWidth'>
        /// Optional. The maximum horizontal resolution of the encoded video.
        /// </param>
        /// <param name='maxHeight'>
        /// Optional. The maximum vertical resolution of the encoded video.
        /// </param>
        /// <param name='videoBitRate'>
        /// Optional. Specify a video bitrate to encode to, e.g. 500000. If
        /// omitted this will be left to encoder defaults.
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// Optional. The index of the subtitle stream to use. If omitted no
        /// subtitles will be used.
        /// </param>
        /// <param name='subtitleMethod'>
        /// Optional. Specify the subtitle delivery method. Possible values
        /// include: 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
        /// </param>
        /// <param name='maxRefFrames'>
        /// Optional.
        /// </param>
        /// <param name='maxVideoBitDepth'>
        /// Optional.
        /// </param>
        /// <param name='videoCodec'>
        /// Optional. Specify a video codec to encode to, e.g. h264. If omitted
        /// the server will auto-select using the url's extension. Options:
        /// h264, mpeg4, theora, vpx, wmv.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// Optional. The index of the audio stream to use. If omitted the
        /// first audio stream will be used.
        /// </param>
        /// <param name='videoStreamIndex'>
        /// Optional. The index of the video stream to use. If omitted the
        /// first video stream will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVideosByIdLiveM3u8WithHttpMessagesAsync(string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetArtistsByNameImagesByTypeWithHttpMessagesAsync(string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadArtistsByNameImagesByTypeWithHttpMessagesAsync(string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='key'>
        /// Auth Key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostAuthKeysByKeyDeleteWithHttpMessagesAsync(string key, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes items from a collection
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='ids'>
        /// Item id, comma delimited
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostCollectionsByIdItemsDeleteWithHttpMessagesAsync(string ids, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets dlna content directory xml
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='uuId'>
        /// Server UuId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDlnaByUuidContentdirectoryContentdirectoryXmlWithHttpMessagesAsync(string uuId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets dlna content directory xml
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='uuId'>
        /// Server UuId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDlnaByUuidContentdirectoryContentdirectoryWithHttpMessagesAsync(string uuId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets dlna connection manager xml
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='uuId'>
        /// Server UuId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDlnaByUuidConnectionmanagerConnectionmanagerXmlWithHttpMessagesAsync(string uuId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets dlna connection manager xml
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='uuId'>
        /// Server UuId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDlnaByUuidConnectionmanagerConnectionmanagerWithHttpMessagesAsync(string uuId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Processes a control request
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='uuId'>
        /// Server UuId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostDlnaByUuidContentdirectoryControlWithHttpMessagesAsync(string body, string uuId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Processes a control request
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='uuId'>
        /// Server UuId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostDlnaByUuidConnectionmanagerControlWithHttpMessagesAsync(string body, string uuId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a server icon
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='uuId'>
        /// Server UuId
        /// </param>
        /// <param name='filename'>
        /// The icon filename
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetDlnaByUuidIconsByFilenameWithHttpMessagesAsync(string uuId, string filename, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetGamegenresByNameImagesByTypeWithHttpMessagesAsync(string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadGamegenresByNameImagesByTypeWithHttpMessagesAsync(string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetGenresByNameImagesByTypeWithHttpMessagesAsync(string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadGenresByNameImagesByTypeWithHttpMessagesAsync(string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Applies search criteria to an item and refreshes metadata
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// RemoteSearchResult:
        /// </param>
        /// <param name='id'>
        /// The item id
        /// </param>
        /// <param name='replaceAllImages'>
        /// Whether or not to replace all images
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsRemotesearchApplyByIdWithHttpMessagesAsync(RemoteSearchResult body, string id, bool? replaceAllImages = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds new tags to an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// AddTags
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByIdTagsAddWithHttpMessagesAsync(UserLibraryAddTags body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an external subtitle file
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// MediaSourceId
        /// </param>
        /// <param name='index'>
        /// The subtitle stream index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteItemsByIdSubtitlesByIndexWithHttpMessagesAsync(string id, string mediaSourceId, int index, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetItemsByIdImagesByTypeWithHttpMessagesAsync(string id, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadItemsByIdImagesByTypeWithHttpMessagesAsync(string id, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByIdImagesByTypeWithHttpMessagesAsync(string body, string id, string type, int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteItemsByIdImagesByTypeWithHttpMessagesAsync(string id, string type, int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available remote image providers for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ImageProviderInfo>>> GetItemsByIdRemoteimagesProvidersWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Downloads a remote image for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// The image type. Possible values include: 'Primary', 'Art',
        /// 'Backdrop', 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot',
        /// 'Menu', 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight',
        /// 'LogoLightColor'
        /// </param>
        /// <param name='providerName'>
        /// The image provider
        /// </param>
        /// <param name='imageUrl'>
        /// The image url
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByIdRemoteimagesDownloadWithHttpMessagesAsync(string id, string type, string providerName = default(string), string imageUrl = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='body'>
        /// UpdateMediaPath
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLibraryVirtualfoldersPathsUpdateWithHttpMessagesAsync(LibraryUpdateMediaPath body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='body'>
        /// RemoveMediaPath
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLibraryVirtualfoldersPathsDeleteWithHttpMessagesAsync(LibraryRemoveMediaPath body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a live tv channel
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetLivetvLiverecordingsByIdStreamWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a live tv channel
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='container'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetLivetvLivestreamfilesByIdStreamByContainerWithHttpMessagesAsync(string id, string container, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets available lineups
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetLivetvListingprovidersSchedulesdirectCountriesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets tuner hosts
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='type'>
        /// Type
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LiveTvTunerHostInfo>> GetLivetvTunerhostsDefaultByTypeWithHttpMessagesAsync(string type, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a live tv recording
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Recording Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivetvRecordingsByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels a live tv timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Timer Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivetvTimersByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels a live tv series timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Timer Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivetvSeriestimersByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Resets a tv tuner
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Tuner Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostLivetvTunersByIdResetWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetMusicgenresByNameImagesByTypeWithHttpMessagesAsync(string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadMusicgenresByNameImagesByTypeWithHttpMessagesAsync(string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels a package installation
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Installation Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostPackagesInstallingByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetPersonsByNameImagesByTypeWithHttpMessagesAsync(string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadPersonsByNameImagesByTypeWithHttpMessagesAsync(string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes items from a playlist
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='entryIds'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostPlaylistsByIdItemsDeleteWithHttpMessagesAsync(string id, string entryIds, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetProvidersSubtitlesSubtitlesByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stops a scheduled task
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostScheduledtasksRunningByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Issues a playstate command to a client
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// PlaystateRequest:
        /// </param>
        /// <param name='id'>
        /// Session Id
        /// </param>
        /// <param name='command'>
        /// Possible values include: 'Stop', 'Pause', 'Unpause', 'NextTrack',
        /// 'PreviousTrack', 'Seek', 'Rewind', 'FastForward', 'PlayPause',
        /// 'SeekRelative'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsByIdPlayingByCommandWithHttpMessagesAsync(PlaystateRequest body, string id, string command, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Issues a system command to a client
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Session Id
        /// </param>
        /// <param name='command'>
        /// The command to send.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsByIdSystemByCommandWithHttpMessagesAsync(string id, string command, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Issues a system command to a client
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Session Id
        /// </param>
        /// <param name='command'>
        /// The command to send.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsByIdCommandByCommandWithHttpMessagesAsync(string id, string command, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds an additional user to a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Session Id
        /// </param>
        /// <param name='userId'>
        /// UserId Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsByIdUsersByUseridWithHttpMessagesAsync(string id, string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes an additional user from a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Session Id
        /// </param>
        /// <param name='userId'>
        /// UserId Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteSessionsByIdUsersByUseridWithHttpMessagesAsync(string id, string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetStudiosByNameImagesByTypeWithHttpMessagesAsync(string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadStudiosByNameImagesByTypeWithHttpMessagesAsync(string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels a sync job.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSyncJobsByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels items from a sync target
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='targetId'>
        /// TargetId
        /// </param>
        /// <param name='itemIds'>
        /// ItemIds
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSyncByTargetidItemsDeleteWithHttpMessagesAsync(string targetId, string itemIds = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that a sync job item has successfully been transferred.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSyncJobitemsByIdTransferredWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a sync job item file
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetSyncJobitemsByIdFileWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a sync job item file
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Id
        /// </param>
        /// <param name='name'>
        /// Name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetSyncJobitemsByIdAdditionalfilesWithHttpMessagesAsync(string id, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Enables a cancelled or queued sync job item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSyncJobitemsByIdEnableWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels a sync job item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSyncJobitemsByIdDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Marks a job item for removal
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSyncJobitemsByIdMarkforremovalWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unmarks a job item for removal
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSyncJobitemsByIdUnmarkforremovalWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a log file
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='name'>
        /// The log file name.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultString>> GetSystemLogsByNameLinesWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clears audio or subtitle track selections for a user
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='trackType'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteUsersByIdTrackselectionsByTracktypeWithHttpMessagesAsync(string id, string trackType, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a typed user setting
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='key'>
        /// Key
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetUsersByUseridTypedsettingsByKeyWithHttpMessagesAsync(string key, string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a typed user setting
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='key'>
        /// Key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByUseridTypedsettingsByKeyWithHttpMessagesAsync(string body, string userId, string key, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets items based on a query.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='artistType'>
        /// Artist or AlbumArtist
        /// </param>
        /// <param name='maxOfficialRating'>
        /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='hasThemeSong'>
        /// Optional filter by items with theme songs.
        /// </param>
        /// <param name='hasThemeVideo'>
        /// Optional filter by items with theme videos.
        /// </param>
        /// <param name='hasSubtitles'>
        /// Optional filter by items with subtitles.
        /// </param>
        /// <param name='hasSpecialFeature'>
        /// Optional filter by items with special features.
        /// </param>
        /// <param name='hasTrailer'>
        /// Optional filter by items with trailers.
        /// </param>
        /// <param name='adjacentTo'>
        /// Optional. Return items that are siblings of a supplied item.
        /// </param>
        /// <param name='minIndexNumber'>
        /// Optional filter by minimum index number.
        /// </param>
        /// <param name='minPlayers'>
        /// Optional filter by minimum number of game players.
        /// </param>
        /// <param name='maxPlayers'>
        /// Optional filter by maximum number of game players.
        /// </param>
        /// <param name='parentIndexNumber'>
        /// Optional filter by parent index number.
        /// </param>
        /// <param name='hasParentalRating'>
        /// Optional filter by items that have or do not have a parental rating
        /// </param>
        /// <param name='isHD'>
        /// Optional filter by items that are HD or not.
        /// </param>
        /// <param name='locationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='excludeLocationTypes'>
        /// Optional. If specified, results will be filtered based on
        /// LocationType. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='isMissing'>
        /// Optional filter by items that are missing episodes or not.
        /// </param>
        /// <param name='isUnaired'>
        /// Optional filter by items that are unaired episodes or not.
        /// </param>
        /// <param name='minCommunityRating'>
        /// Optional filter by minimum community rating.
        /// </param>
        /// <param name='minCriticRating'>
        /// Optional filter by minimum critic rating.
        /// </param>
        /// <param name='airedDuringSeason'>
        /// Gets all episodes that aired during a season, including specials.
        /// </param>
        /// <param name='minPremiereDate'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSaved'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='minDateLastSavedForUser'>
        /// Optional. The minimum premiere date. Format = ISO
        /// </param>
        /// <param name='maxPremiereDate'>
        /// Optional. The maximum premiere date. Format = ISO
        /// </param>
        /// <param name='hasOverview'>
        /// Optional filter by items that have an overview or not.
        /// </param>
        /// <param name='hasImdbId'>
        /// Optional filter by items that have an imdb id or not.
        /// </param>
        /// <param name='hasTmdbId'>
        /// Optional filter by items that have a tmdb id or not.
        /// </param>
        /// <param name='hasTvdbId'>
        /// Optional filter by items that have a tvdb id or not.
        /// </param>
        /// <param name='excludeItemIds'>
        /// Optional. If specified, results will be filtered by exxcluding item
        /// ids. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='startIndex'>
        /// Optional. The record index to start at. All items with a lower
        /// index will be dropped from the results.
        /// </param>
        /// <param name='limit'>
        /// Optional. The maximum number of records to return
        /// </param>
        /// <param name='recursive'>
        /// When searching within folders, this determines whether or not the
        /// search will be recursive. true/false
        /// </param>
        /// <param name='searchTerm'>
        /// Enter a search term to perform a search request
        /// </param>
        /// <param name='sortOrder'>
        /// Sort Order - Ascending,Descending
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
        /// </param>
        /// <param name='excludeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='anyProviderIdEquals'>
        /// Optional. If specified, result will be filtered to contain only
        /// items which match at least one of the specified IDs. Each provider
        /// ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows
        /// multiple, comma delimeted value pairs.
        /// </param>
        /// <param name='filters'>
        /// Optional. Specify additional filters to apply. This allows
        /// multiple, comma delimeted. Options: IsFolder, IsNotFolder,
        /// IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
        /// </param>
        /// <param name='isFavorite'>
        /// Optional filter by items that are marked as favorite, or not.
        /// </param>
        /// <param name='isMovie'>
        /// Optional filter for movies.
        /// </param>
        /// <param name='isSeries'>
        /// Optional filter for series.
        /// </param>
        /// <param name='isFolder'>
        /// Optional filter for folders.
        /// </param>
        /// <param name='isNews'>
        /// Optional filter for news.
        /// </param>
        /// <param name='isKids'>
        /// Optional filter for kids.
        /// </param>
        /// <param name='isSports'>
        /// Optional filter for sports.
        /// </param>
        /// <param name='projectToMedia'>
        /// ProjectToMedia
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='imageTypes'>
        /// Optional. If specified, results will be filtered based on those
        /// containing image types. This allows multiple, comma delimited.
        /// </param>
        /// <param name='sortBy'>
        /// Optional. Specify one or more sort orders, comma delimeted.
        /// Options: Album, AlbumArtist, Artist, Budget, CommunityRating,
        /// CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate,
        /// ProductionYear, SortName, Random, Revenue, Runtime
        /// </param>
        /// <param name='isPlayed'>
        /// Optional filter by items that are played, or not.
        /// </param>
        /// <param name='genres'>
        /// Optional. If specified, results will be filtered based on genre.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='officialRatings'>
        /// Optional. If specified, results will be filtered based on
        /// OfficialRating. This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='tags'>
        /// Optional. If specified, results will be filtered based on tag. This
        /// allows multiple, pipe delimeted.
        /// </param>
        /// <param name='years'>
        /// Optional. If specified, results will be filtered based on
        /// production year. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='person'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personIds'>
        /// Optional. If specified, results will be filtered to include only
        /// those containing the specified person.
        /// </param>
        /// <param name='personTypes'>
        /// Optional. If specified, along with Person, results will be filtered
        /// to include only those containing the specified person and
        /// PersonType. Allows multiple, comma-delimited
        /// </param>
        /// <param name='studios'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='studioIds'>
        /// Optional. If specified, results will be filtered based on studio.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artists'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='artistIds'>
        /// Optional. If specified, results will be filtered based on artist.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='albums'>
        /// Optional. If specified, results will be filtered based on album.
        /// This allows multiple, pipe delimeted.
        /// </param>
        /// <param name='ids'>
        /// Optional. If specific items are needed, specify a list of item id's
        /// to retrieve. This allows multiple, comma delimited.
        /// </param>
        /// <param name='videoTypes'>
        /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
        /// multiple, comma delimeted.
        /// </param>
        /// <param name='containers'>
        /// Optional filter by Container. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioCodecs'>
        /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='audioLayouts'>
        /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='videoCodecs'>
        /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='subtitleCodecs'>
        /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='path'>
        /// Optional filter by Path.
        /// </param>
        /// <param name='minOfficialRating'>
        /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
        /// </param>
        /// <param name='isLocked'>
        /// Optional filter by items that are locked.
        /// </param>
        /// <param name='isPlaceHolder'>
        /// Optional filter by items that are placeholders
        /// </param>
        /// <param name='hasOfficialRating'>
        /// Optional filter by items that have official ratings
        /// </param>
        /// <param name='groupItemsIntoCollections'>
        /// Whether or not to hide items behind their boxsets.
        /// </param>
        /// <param name='is3D'>
        /// Optional filter by items that are 3D, or not.
        /// </param>
        /// <param name='seriesStatus'>
        /// Optional filter by Series Status. Allows multiple, comma delimeted.
        /// </param>
        /// <param name='nameStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='artistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='albumArtistStartsWithOrGreater'>
        /// Optional filter by items whose name is sorted equally or greater
        /// than a given input string.
        /// </param>
        /// <param name='nameStartsWith'>
        /// Optional filter by items whose name is sorted equally than a given
        /// input string.
        /// </param>
        /// <param name='nameLessThan'>
        /// Optional filter by items whose name is equally or lesser than a
        /// given input string.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetUsersByUseridItemsResumeWithHttpMessagesAsync(string userId, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets latest media
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='limit'>
        /// Limit
        /// </param>
        /// <param name='parentId'>
        /// Specify this to localize the search to a specific item or folder.
        /// Omit to use the root
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Chapters,
        /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams,
        /// Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, SortName, Studios, Taglines
        /// </param>
        /// <param name='includeItemTypes'>
        /// Optional. If specified, results will be filtered based on item
        /// type. This allows multiple, comma delimeted.
        /// </param>
        /// <param name='mediaTypes'>
        /// Optional filter by MediaType. Allows multiple, comma delimited.
        /// </param>
        /// <param name='isFolder'>
        /// Filter by items that are folders, or not.
        /// </param>
        /// <param name='isPlayed'>
        /// Filter by items that are played, or not.
        /// </param>
        /// <param name='groupItems'>
        /// Whether or not to group items into a parent container.
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BaseItemDto>>> GetUsersByUseridItemsLatestWithHttpMessagesAsync(string userId, int? limit = default(int?), string parentId = default(string), string fields = default(string), string includeItemTypes = default(string), string mediaTypes = default(string), bool? isFolder = default(bool?), bool? isPlayed = default(bool?), bool? groupItems = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an item from a user's library
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseItemDto>> GetUsersByUseridItemsByIdWithHttpMessagesAsync(string userId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the root folder from a user's library
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseItemDto>> GetUsersByUseridItemsRootWithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Marks an item as a favorite
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserItemDataDto>> PostUsersByUseridFavoriteitemsByIdWithHttpMessagesAsync(string userId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unmarks an item as a favorite
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserItemDataDto>> DeleteUsersByUseridFavoriteitemsByIdWithHttpMessagesAsync(string userId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetUsersByIdImagesByTypeWithHttpMessagesAsync(string id, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadUsersByIdImagesByTypeWithHttpMessagesAsync(string id, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByIdImagesByTypeWithHttpMessagesAsync(string body, string id, string type, int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteUsersByIdImagesByTypeWithHttpMessagesAsync(string id, string type, int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Marks an item as played
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='datePlayed'>
        /// The date the item was played (if any). Format = yyyyMMddHHmmss
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserItemDataDto>> PostUsersByUseridPlayeditemsByIdWithHttpMessagesAsync(string userId, string id, string datePlayed = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Marks an item as unplayed
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserItemDataDto>> DeleteUsersByUseridPlayeditemsByIdWithHttpMessagesAsync(string userId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that a user has begun playing an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// The id of the MediaSource
        /// </param>
        /// <param name='canSeek'>
        /// Indicates if the client can seek
        /// </param>
        /// <param name='audioStreamIndex'>
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// </param>
        /// <param name='playMethod'>
        /// Possible values include: 'Transcode', 'DirectStream', 'DirectPlay'
        /// </param>
        /// <param name='liveStreamId'>
        /// </param>
        /// <param name='playSessionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByUseridPlayingitemsByIdWithHttpMessagesAsync(string userId, string id, string mediaSourceId, bool? canSeek = default(bool?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), string playMethod = default(string), string liveStreamId = default(string), string playSessionId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that a user has stopped playing an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// The id of the MediaSource
        /// </param>
        /// <param name='nextMediaType'>
        /// The next media type that will play
        /// </param>
        /// <param name='positionTicks'>
        /// Optional. The position, in ticks, where playback stopped. 1ms =
        /// 10000 ticks.
        /// </param>
        /// <param name='liveStreamId'>
        /// </param>
        /// <param name='playSessionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteUsersByUseridPlayingitemsByIdWithHttpMessagesAsync(string userId, string id, string mediaSourceId, string nextMediaType, long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a Connect link for a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='connectUsername'>
        /// Connect username
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ConnectUserLinkResult>> PostUsersByIdConnectLinkWithHttpMessagesAsync(string id, string connectUsername, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes a Connect link for a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteUsersByIdConnectLinkWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes alternate video sources.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostVideosByIdAlternatesourcesDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an external subtitle file
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// MediaSourceId
        /// </param>
        /// <param name='index'>
        /// The subtitle stream index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteVideosByIdSubtitlesByIndexWithHttpMessagesAsync(string id, string mediaSourceId, int index, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetArtistsByNameImagesByTypeByIndexWithHttpMessagesAsync(string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadArtistsByNameImagesByTypeByIndexWithHttpMessagesAsync(string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='segmentContainer'>
        /// </param>
        /// <param name='segmentId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='playlistId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerWithHttpMessagesAsync(string segmentContainer, string segmentId, string id, string playlistId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='segmentContainer'>
        /// </param>
        /// <param name='segmentId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='playlistId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerWithHttpMessagesAsync(string segmentContainer, string segmentId, string id, string playlistId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetGamegenresByNameImagesByTypeByIndexWithHttpMessagesAsync(string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadGamegenresByNameImagesByTypeByIndexWithHttpMessagesAsync(string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetGenresByNameImagesByTypeByIndexWithHttpMessagesAsync(string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadGenresByNameImagesByTypeByIndexWithHttpMessagesAsync(string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// MediaSourceId
        /// </param>
        /// <param name='language'>
        /// Language
        /// </param>
        /// <param name='isPerfectMatch'>
        /// IsPerfectMatch
        /// </param>
        /// <param name='isForced'>
        /// IsForced
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RemoteSubtitleInfo>>> GetItemsByIdRemotesearchSubtitlesByLanguageWithHttpMessagesAsync(string id, string mediaSourceId, string language, bool? isPerfectMatch = default(bool?), bool? isForced = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an external subtitle file
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// MediaSourceId
        /// </param>
        /// <param name='index'>
        /// The subtitle stream index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByIdSubtitlesByIndexDeleteWithHttpMessagesAsync(string id, string mediaSourceId, int index, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// MediaSourceId
        /// </param>
        /// <param name='subtitleId'>
        /// SubtitleId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SubtitlesSubtitleDownloadResult>> PostItemsByIdRemotesearchSubtitlesBySubtitleidWithHttpMessagesAsync(string id, string mediaSourceId, string subtitleId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetItemsByIdImagesByTypeByIndexWithHttpMessagesAsync(string id, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadItemsByIdImagesByTypeByIndexWithHttpMessagesAsync(string id, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByIdImagesByTypeByIndexWithHttpMessagesAsync(string body, string id, string type, int index, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteItemsByIdImagesByTypeByIndexWithHttpMessagesAsync(string id, string type, int index, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByIdImagesByTypeDeleteWithHttpMessagesAsync(string id, string type, int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets a channel disabled or not
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// SetChannelDisabled
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultEmbyLiveTVChannelManagementInfo>> PostLivetvManageChannelsByIdDisabledWithHttpMessagesAsync(LiveTVApiSetChannelDisabled body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets a channel sort index
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='body'>
        /// SetChannelSortIndex
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultEmbyLiveTVChannelManagementInfo>> PostLivetvManageChannelsByIdSortindexWithHttpMessagesAsync(LiveTVApiSetChannelSortIndex body, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetMusicgenresByNameImagesByTypeByIndexWithHttpMessagesAsync(string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadMusicgenresByNameImagesByTypeByIndexWithHttpMessagesAsync(string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetPersonsByNameImagesByTypeByIndexWithHttpMessagesAsync(string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadPersonsByNameImagesByTypeByIndexWithHttpMessagesAsync(string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes an additional user from a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Session Id
        /// </param>
        /// <param name='userId'>
        /// UserId Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostSessionsByIdUsersByUseridDeleteWithHttpMessagesAsync(string id, string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetStudiosByNameImagesByTypeByIndexWithHttpMessagesAsync(string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='name'>
        /// Item name
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadStudiosByNameImagesByTypeByIndexWithHttpMessagesAsync(string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clears audio or subtitle track selections for a user
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='trackType'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByIdTrackselectionsByTracktypeDeleteWithHttpMessagesAsync(string id, string trackType, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets special features for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Movie Id
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BaseItemDto>>> GetUsersByUseridItemsByIdSpecialfeaturesWithHttpMessagesAsync(string userId, string id, string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets local trailers for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BaseItemDto>>> GetUsersByUseridItemsByIdLocaltrailersWithHttpMessagesAsync(string userId, string id, string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets intros to play before the main media item plays
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='fields'>
        /// Optional. Specify additional fields of information to return in the
        /// output. This allows multiple, comma delimeted. Options: Budget,
        /// Chapters, DateCreated, Genres, HomePageUrl, IndexOptions,
        /// MediaStreams, Overview, ParentId, Path, People, ProviderIds,
        /// PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines,
        /// TrailerUrls
        /// </param>
        /// <param name='enableImages'>
        /// Optional, include image information in output
        /// </param>
        /// <param name='imageTypeLimit'>
        /// Optional, the max number of images to return, per image type
        /// </param>
        /// <param name='enableImageTypes'>
        /// Optional. The image types to include in the output.
        /// </param>
        /// <param name='enableUserData'>
        /// Optional, include user data
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueryResultBaseItemDto>> GetUsersByUseridItemsByIdIntrosWithHttpMessagesAsync(string userId, string id, string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unmarks an item as a favorite
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserItemDataDto>> PostUsersByUseridFavoriteitemsByIdDeleteWithHttpMessagesAsync(string userId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a user's saved personal rating for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserItemDataDto>> DeleteUsersByUseridItemsByIdRatingWithHttpMessagesAsync(string userId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user's rating for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='likes'>
        /// Whether the user likes the item or not. true/false
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserItemDataDto>> PostUsersByUseridItemsByIdRatingWithHttpMessagesAsync(string userId, string id, bool likes, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a user's hide from resume for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='hide'>
        /// Whether the item should be hidden from reusme or not. true/false
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserItemDataDto>> PostUsersByUseridItemsByIdHidefromresumeWithHttpMessagesAsync(string userId, string id, bool hide, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetUsersByIdImagesByTypeByIndexWithHttpMessagesAsync(string id, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='maxWidth'>
        /// The maximum image width to return.
        /// </param>
        /// <param name='maxHeight'>
        /// The maximum image height to return.
        /// </param>
        /// <param name='width'>
        /// The fixed image width to return.
        /// </param>
        /// <param name='height'>
        /// The fixed image height to return.
        /// </param>
        /// <param name='quality'>
        /// Optional quality setting, from 0-100. Defaults to 90 and should
        /// suffice in most cases.
        /// </param>
        /// <param name='tag'>
        /// Optional. Supply the cache tag from the item object to receive
        /// strong caching headers.
        /// </param>
        /// <param name='cropWhitespace'>
        /// Specify if whitespace should be cropped out of the image.
        /// True/False. If unspecified, whitespace will be cropped from logos
        /// and clear art.
        /// </param>
        /// <param name='enableImageEnhancers'>
        /// Enable or disable image enhancers such as cover art.
        /// </param>
        /// <param name='format'>
        /// Determines the output foramt of the image - original,gif,jpg,png
        /// </param>
        /// <param name='backgroundColor'>
        /// Optional. Apply a background color for transparent images.
        /// </param>
        /// <param name='foregroundLayer'>
        /// Optional. Apply a foreground layer on top of the image.
        /// </param>
        /// <param name='autoOrient'>
        /// Set to true to force normalization of orientation in the event the
        /// renderer does not support it.
        /// </param>
        /// <param name='keepAnimation'>
        /// Set to true to retain image animation (when supported).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadUsersByIdImagesByTypeByIndexWithHttpMessagesAsync(string id, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// Binary stream
        /// </param>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByIdImagesByTypeByIndexWithHttpMessagesAsync(string body, string id, string type, int index, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteUsersByIdImagesByTypeByIndexWithHttpMessagesAsync(string id, string type, int index, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByIdImagesByTypeDeleteWithHttpMessagesAsync(string id, string type, int? index = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates userdata for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// UserItemDataDto:
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='itemId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByUseridItemsByItemidUserdataWithHttpMessagesAsync(UserItemDataDto body, string userId, string itemId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports a user's playback progress
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='body'>
        /// OnPlaybackProgress
        /// </param>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// The id of the MediaSource
        /// </param>
        /// <param name='positionTicks'>
        /// Optional. The current position, in ticks. 1ms = 10000 ticks.
        /// </param>
        /// <param name='isPaused'>
        /// Indicates if the player is paused.
        /// </param>
        /// <param name='isMuted'>
        /// Indicates if the player is muted.
        /// </param>
        /// <param name='audioStreamIndex'>
        /// </param>
        /// <param name='subtitleStreamIndex'>
        /// </param>
        /// <param name='volumeLevel'>
        /// Scale of 0-100
        /// </param>
        /// <param name='playMethod'>
        /// Possible values include: 'Transcode', 'DirectStream', 'DirectPlay'
        /// </param>
        /// <param name='liveStreamId'>
        /// </param>
        /// <param name='playSessionId'>
        /// </param>
        /// <param name='repeatMode'>
        /// Possible values include: 'RepeatNone', 'RepeatAll', 'RepeatOne'
        /// </param>
        /// <param name='subtitleOffset'>
        /// </param>
        /// <param name='playbackRate'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByUseridPlayingitemsByIdProgressWithHttpMessagesAsync(MediaEncodingApiOnPlaybackProgress body, string userId, string id, string mediaSourceId, long? positionTicks = default(long?), bool? isPaused = default(bool?), bool? isMuted = default(bool?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? volumeLevel = default(int?), string playMethod = default(string), string liveStreamId = default(string), string playSessionId = default(string), string repeatMode = default(string), int? subtitleOffset = default(int?), double? playbackRate = default(double?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reports that a user has stopped playing an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// The id of the MediaSource
        /// </param>
        /// <param name='nextMediaType'>
        /// The next media type that will play
        /// </param>
        /// <param name='positionTicks'>
        /// Optional. The position, in ticks, where playback stopped. 1ms =
        /// 10000 ticks.
        /// </param>
        /// <param name='liveStreamId'>
        /// </param>
        /// <param name='playSessionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByUseridPlayingitemsByIdDeleteWithHttpMessagesAsync(string userId, string id, string mediaSourceId, string nextMediaType, long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Marks an item as unplayed
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserItemDataDto>> PostUsersByUseridPlayeditemsByIdDeleteWithHttpMessagesAsync(string userId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes a Connect link for a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByIdConnectLinkDeleteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an external subtitle file
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// MediaSourceId
        /// </param>
        /// <param name='index'>
        /// The subtitle stream index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostVideosByIdSubtitlesByIndexDeleteWithHttpMessagesAsync(string id, string mediaSourceId, int index, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='segmentContainer'>
        /// </param>
        /// <param name='segmentId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='playlistId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerWithHttpMessagesAsync(string segmentContainer, string segmentId, string id, string playlistId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='segmentContainer'>
        /// </param>
        /// <param name='segmentId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='playlistId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerWithHttpMessagesAsync(string segmentContainer, string segmentId, string id, string playlistId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// No authentication required
        /// </summary>
        /// <param name='segmentContainer'>
        /// </param>
        /// <param name='segmentId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='playlistId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVideosByIdHlsByPlaylistidBySegmentidBySegmentcontainerWithHttpMessagesAsync(string segmentContainer, string segmentId, string id, string playlistId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// MediaSourceId
        /// </param>
        /// <param name='index'>
        /// The subtitle stream index
        /// </param>
        /// <param name='format'>
        /// Format
        /// </param>
        /// <param name='startPositionTicks'>
        /// StartPositionTicks
        /// </param>
        /// <param name='endPositionTicks'>
        /// EndPositionTicks
        /// </param>
        /// <param name='copyTimestamps'>
        /// CopyTimestamps
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatWithHttpMessagesAsync(string id, string mediaSourceId, int index, string format, long? startPositionTicks = default(long?), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as administrator
        /// </summary>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByIdImagesByTypeByIndexDeleteWithHttpMessagesAsync(string id, string type, int index, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the index for an item image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='newIndex'>
        /// The new image index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByIdImagesByTypeByIndexIndexWithHttpMessagesAsync(string id, string type, int index, int newIndex, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the index for an item image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='url'>
        /// The url for the new image
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostItemsByIdImagesByTypeByIndexUrlWithHttpMessagesAsync(string id, string type, int index, string url, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Moves a playlist item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='itemId'>
        /// ItemId
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='newIndex'>
        /// NewIndex
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostPlaylistsByIdItemsByItemidMoveByNewindexWithHttpMessagesAsync(long itemId, string id, int newIndex, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a user's saved personal rating for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name='userId'>
        /// User Id
        /// </param>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserItemDataDto>> PostUsersByUseridItemsByIdRatingDeleteWithHttpMessagesAsync(string userId, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requires authentication as user
        /// </summary>
        /// <param name='id'>
        /// User Id
        /// </param>
        /// <param name='type'>
        /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
        /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu',
        /// 'Chapter', 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
        /// </param>
        /// <param name='index'>
        /// Image Index
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> PostUsersByIdImagesByTypeByIndexDeleteWithHttpMessagesAsync(string id, string type, int index, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// MediaSourceId
        /// </param>
        /// <param name='index'>
        /// The subtitle stream index
        /// </param>
        /// <param name='format'>
        /// Format
        /// </param>
        /// <param name='startPositionTicks'>
        /// StartPositionTicks
        /// </param>
        /// <param name='endPositionTicks'>
        /// EndPositionTicks
        /// </param>
        /// <param name='copyTimestamps'>
        /// CopyTimestamps
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatWithHttpMessagesAsync(string id, string mediaSourceId, int index, string format, long? startPositionTicks = default(long?), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// MediaSourceId
        /// </param>
        /// <param name='index'>
        /// The subtitle stream index
        /// </param>
        /// <param name='format'>
        /// Format
        /// </param>
        /// <param name='startPositionTicks'>
        /// StartPositionTicks
        /// </param>
        /// <param name='endPositionTicks'>
        /// EndPositionTicks
        /// </param>
        /// <param name='copyTimestamps'>
        /// CopyTimestamps
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatWithHttpMessagesAsync(string id, string mediaSourceId, int index, string format, long startPositionTicks, long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name='id'>
        /// Item Id
        /// </param>
        /// <param name='mediaSourceId'>
        /// MediaSourceId
        /// </param>
        /// <param name='index'>
        /// The subtitle stream index
        /// </param>
        /// <param name='format'>
        /// Format
        /// </param>
        /// <param name='startPositionTicks'>
        /// StartPositionTicks
        /// </param>
        /// <param name='endPositionTicks'>
        /// EndPositionTicks
        /// </param>
        /// <param name='copyTimestamps'>
        /// CopyTimestamps
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatWithHttpMessagesAsync(string id, string mediaSourceId, int index, string format, long startPositionTicks, long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
