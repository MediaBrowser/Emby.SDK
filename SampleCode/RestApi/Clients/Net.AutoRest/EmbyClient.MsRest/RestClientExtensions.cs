// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RestClient.
    /// </summary>
    public static partial class RestClientExtensions
    {
            /// <summary>
            /// Gets all artists from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultBaseItemDto GetArtists(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetArtistsAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all artists from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetArtistsAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArtistsWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultUserLibraryTagItem GetAudiocodecs(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetAudiocodecsAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultUserLibraryTagItem> GetAudiocodecsAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAudiocodecsWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultUserLibraryTagItem GetAudiolayouts(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetAudiolayoutsAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultUserLibraryTagItem> GetAudiolayoutsAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAudiolayoutsWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets available channels
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            public static QueryResultBaseItemDto GetChannels(this IRestClient operations, string userId = default(string), int? startIndex = default(int?), string fields = default(string), int? limit = default(int?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?))
            {
                return operations.GetChannelsAsync(userId, startIndex, fields, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available channels
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetChannelsAsync(this IRestClient operations, string userId = default(string), int? startIndex = default(int?), string fields = default(string), int? limit = default(int?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChannelsWithHttpMessagesAsync(userId, startIndex, fields, limit, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new collection
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isLocked'>
            /// Whether or not to lock the new collection.
            /// </param>
            /// <param name='name'>
            /// The name of the new collection.
            /// </param>
            /// <param name='parentId'>
            /// Optional - create the collection within a specific folder
            /// </param>
            /// <param name='ids'>
            /// Item Ids to add to the collection
            /// </param>
            public static CollectionsCollectionCreationResult PostCollections(this IRestClient operations, bool? isLocked = default(bool?), string name = default(string), string parentId = default(string), string ids = default(string))
            {
                return operations.PostCollectionsAsync(isLocked, name, parentId, ids).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new collection
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isLocked'>
            /// Whether or not to lock the new collection.
            /// </param>
            /// <param name='name'>
            /// The name of the new collection.
            /// </param>
            /// <param name='parentId'>
            /// Optional - create the collection within a specific folder
            /// </param>
            /// <param name='ids'>
            /// Item Ids to add to the collection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionsCollectionCreationResult> PostCollectionsAsync(this IRestClient operations, bool? isLocked = default(bool?), string name = default(string), string parentId = default(string), string ids = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostCollectionsWithHttpMessagesAsync(isLocked, name, parentId, ids, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultUserLibraryTagItem GetContainers(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetContainersAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultUserLibraryTagItem> GetContainersAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContainersWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all devices
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static QueryResultDevicesDeviceInfo GetDevices(this IRestClient operations)
            {
                return operations.GetDevicesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all devices
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultDevicesDeviceInfo> GetDevicesAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDevicesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Device Id
            /// </param>
            public static void DeleteDevices(this IRestClient operations, string id)
            {
                operations.DeleteDevicesAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Device Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDevicesAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDevicesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of installed features
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EmbyFeaturesFeatureInfo> GetFeatures(this IRestClient operations)
            {
                return operations.GetFeaturesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of installed features
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EmbyFeaturesFeatureInfo>> GetFeaturesAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFeaturesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all Game genres from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultBaseItemDto GetGamegenres(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetGamegenresAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Game genres from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetGamegenresAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGamegenresWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all genres from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultBaseItemDto GetGenres(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetGenresAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all genres from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetGenresAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGenresWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets items based on a query.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultBaseItemDto GetItems(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetItemsAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetItemsAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an item from the library and file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Ids
            /// </param>
            public static void DeleteItems(this IRestClient operations, string ids)
            {
                operations.DeleteItemsAsync(ids).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an item from the library and file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Ids
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteItemsAsync(this IRestClient operations, string ids, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteItemsWithHttpMessagesAsync(ids, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultUserLibraryTagItem GetItemtypes(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetItemtypesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultUserLibraryTagItem> GetItemtypesAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemtypesWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all music genres from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultBaseItemDto GetMusicgenres(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetMusicgenresAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all music genres from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetMusicgenresAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMusicgenresWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultUserLibraryOfficialRatingItem GetOfficialratings(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetOfficialratingsAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultUserLibraryOfficialRatingItem> GetOfficialratingsAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOfficialratingsWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the OpenAPI 3 specifications
            /// </summary>
            /// <remarks>
            /// No authentication required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetOpenapi(this IRestClient operations)
            {
                return operations.GetOpenapiAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the OpenAPI 3 specifications
            /// </summary>
            /// <remarks>
            /// No authentication required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetOpenapiAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOpenapiWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets OpenAPI 3 specifications
            /// </summary>
            /// <remarks>
            /// No authentication required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetOpenapiJson(this IRestClient operations)
            {
                return operations.GetOpenapiJsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets OpenAPI 3 specifications
            /// </summary>
            /// <remarks>
            /// No authentication required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetOpenapiJsonAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOpenapiJsonWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets available packages
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='packageType'>
            /// Optional package type filter (System/UserInstalled)
            /// </param>
            /// <param name='targetSystems'>
            /// Optional. Filter by target system type. Allows multiple, comma delimited.
            /// </param>
            /// <param name='isPremium'>
            /// Optional. Filter by premium status
            /// </param>
            /// <param name='isAdult'>
            /// Optional. Filter by package that contain adult content.
            /// </param>
            public static IList<UpdatesPackageInfo> GetPackages(this IRestClient operations, string packageType = default(string), string targetSystems = default(string), bool? isPremium = default(bool?), bool? isAdult = default(bool?))
            {
                return operations.GetPackagesAsync(packageType, targetSystems, isPremium, isAdult).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available packages
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='packageType'>
            /// Optional package type filter (System/UserInstalled)
            /// </param>
            /// <param name='targetSystems'>
            /// Optional. Filter by target system type. Allows multiple, comma delimited.
            /// </param>
            /// <param name='isPremium'>
            /// Optional. Filter by premium status
            /// </param>
            /// <param name='isAdult'>
            /// Optional. Filter by package that contain adult content.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UpdatesPackageInfo>> GetPackagesAsync(this IRestClient operations, string packageType = default(string), string targetSystems = default(string), bool? isPremium = default(bool?), bool? isAdult = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPackagesWithHttpMessagesAsync(packageType, targetSystems, isPremium, isAdult, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all persons from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultBaseItemDto GetPersons(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetPersonsAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all persons from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetPersonsAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersonsWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new playlist
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the new playlist.
            /// </param>
            /// <param name='ids'>
            /// Item Ids to add to the playlist
            /// </param>
            /// <param name='mediaType'>
            /// The playlist media type
            /// </param>
            public static PlaylistsPlaylistCreationResult PostPlaylists(this IRestClient operations, string name = default(string), string ids = default(string), string mediaType = default(string))
            {
                return operations.PostPlaylistsAsync(name, ids, mediaType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new playlist
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the new playlist.
            /// </param>
            /// <param name='ids'>
            /// Item Ids to add to the playlist
            /// </param>
            /// <param name='mediaType'>
            /// The playlist media type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PlaylistsPlaylistCreationResult> PostPlaylistsAsync(this IRestClient operations, string name = default(string), string ids = default(string), string mediaType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostPlaylistsWithHttpMessagesAsync(name, ids, mediaType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of currently installed plugins
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<PluginsPluginInfo> GetPlugins(this IRestClient operations)
            {
                return operations.GetPluginsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of currently installed plugins
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PluginsPluginInfo>> GetPluginsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPluginsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets scheduled tasks
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isHidden'>
            /// Optional filter tasks that are hidden, or not.
            /// </param>
            /// <param name='isEnabled'>
            /// Optional filter tasks that are enabled, or not.
            /// </param>
            public static IList<TasksTaskInfo> GetScheduledtasks(this IRestClient operations, bool? isHidden = default(bool?), bool? isEnabled = default(bool?))
            {
                return operations.GetScheduledtasksAsync(isHidden, isEnabled).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets scheduled tasks
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isHidden'>
            /// Optional filter tasks that are hidden, or not.
            /// </param>
            /// <param name='isEnabled'>
            /// Optional filter tasks that are enabled, or not.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TasksTaskInfo>> GetScheduledtasksAsync(this IRestClient operations, bool? isHidden = default(bool?), bool? isEnabled = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetScheduledtasksWithHttpMessagesAsync(isHidden, isEnabled, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of sessions
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='controllableByUserId'>
            /// Optional. Filter by sessions that a given user is allowed to remote
            /// control.
            /// </param>
            /// <param name='deviceId'>
            /// Optional. Filter by device id.
            /// </param>
            /// <param name='id'>
            /// Optional. Filter by session id.
            /// </param>
            public static IList<SessionSessionInfo> GetSessions(this IRestClient operations, string controllableByUserId = default(string), string deviceId = default(string), string id = default(string))
            {
                return operations.GetSessionsAsync(controllableByUserId, deviceId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of sessions
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='controllableByUserId'>
            /// Optional. Filter by sessions that a given user is allowed to remote
            /// control.
            /// </param>
            /// <param name='deviceId'>
            /// Optional. Filter by device id.
            /// </param>
            /// <param name='id'>
            /// Optional. Filter by session id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SessionSessionInfo>> GetSessionsAsync(this IRestClient operations, string controllableByUserId = default(string), string deviceId = default(string), string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionsWithHttpMessagesAsync(controllableByUserId, deviceId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultUserLibraryTagItem GetStreamlanguages(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetStreamlanguagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultUserLibraryTagItem> GetStreamlanguagesAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStreamlanguagesWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all studios from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultBaseItemDto GetStudios(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetStudiosAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all studios from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetStudiosAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStudiosWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultUserLibraryTagItem GetSubtitlecodecs(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetSubtitlecodecsAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultUserLibraryTagItem> GetSubtitlecodecsAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubtitlecodecsWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the swagger specifications
            /// </summary>
            /// <remarks>
            /// No authentication required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetSwagger(this IRestClient operations)
            {
                return operations.GetSwaggerAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the swagger specifications
            /// </summary>
            /// <remarks>
            /// No authentication required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSwaggerAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSwaggerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the swagger specifications
            /// </summary>
            /// <remarks>
            /// No authentication required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetSwaggerJson(this IRestClient operations)
            {
                return operations.GetSwaggerJsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the swagger specifications
            /// </summary>
            /// <remarks>
            /// No authentication required
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSwaggerJsonAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSwaggerJsonWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultUserLibraryTagItem GetTags(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetTagsAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultUserLibraryTagItem> GetTagsAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTagsWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Finds movies and trailers similar to a given trailer.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultBaseItemDto GetTrailers(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetTrailersAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Finds movies and trailers similar to a given trailer.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetTrailersAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrailersWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultUserLibraryTagItem GetVideocodecs(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetVideocodecsAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultUserLibraryTagItem> GetVideocodecsAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVideocodecsWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultUserLibraryTagItem GetYears(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetYearsAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultUserLibraryTagItem> GetYearsAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetYearsWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='percentPlayed'>
            /// </param>
            /// <param name='unPlayedCount'>
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount(this IRestClient operations, int percentPlayed, int unPlayedCount, string id, int maxWidth, int maxHeight, string tag, string format, string type, int index, int? width = default(int?), int? height = default(int?), int? quality = default(int?), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsync(percentPlayed, unPlayedCount, id, maxWidth, maxHeight, tag, format, type, index, width, height, quality, cropWhitespace, enableImageEnhancers, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='percentPlayed'>
            /// </param>
            /// <param name='unPlayedCount'>
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsync(this IRestClient operations, int percentPlayed, int unPlayedCount, string id, int maxWidth, int maxHeight, string tag, string format, string type, int index, int? width = default(int?), int? height = default(int?), int? quality = default(int?), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithHttpMessagesAsync(percentPlayed, unPlayedCount, id, maxWidth, maxHeight, tag, format, type, index, width, height, quality, cropWhitespace, enableImageEnhancers, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='percentPlayed'>
            /// </param>
            /// <param name='unPlayedCount'>
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount(this IRestClient operations, int percentPlayed, int unPlayedCount, string id, int maxWidth, int maxHeight, string tag, string format, string type, int index, int? width = default(int?), int? height = default(int?), int? quality = default(int?), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsync(percentPlayed, unPlayedCount, id, maxWidth, maxHeight, tag, format, type, index, width, height, quality, cropWhitespace, enableImageEnhancers, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='percentPlayed'>
            /// </param>
            /// <param name='unPlayedCount'>
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountAsync(this IRestClient operations, int percentPlayed, int unPlayedCount, string id, int maxWidth, int maxHeight, string tag, string format, string type, int index, int? width = default(int?), int? height = default(int?), int? quality = default(int?), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithHttpMessagesAsync(percentPlayed, unPlayedCount, id, maxWidth, maxHeight, tag, format, type, index, width, height, quality, cropWhitespace, enableImageEnhancers, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an artist, by name
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The artist name
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            public static BaseItemDto GetArtistsByName(this IRestClient operations, string name, string userId = default(string))
            {
                return operations.GetArtistsByNameAsync(name, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an artist, by name
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The artist name
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseItemDto> GetArtistsByNameAsync(this IRestClient operations, string name, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArtistsByNameWithHttpMessagesAsync(name, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all album artists from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultBaseItemDto GetArtistsAlbumartists(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetArtistsAlbumartistsAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all album artists from a given item, folder, or the entire library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetArtistsAlbumartistsAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArtistsAlbumartistsWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static IList<NameValuePair> GetArtistsPrefixes(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetArtistsPrefixesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NameValuePair>> GetArtistsPrefixesAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArtistsPrefixesWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an instant playlist based on a given artist
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetArtistsInstantmix(this IRestClient operations, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetArtistsInstantmixAsync(includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an instant playlist based on a given artist
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetArtistsInstantmixAsync(this IRestClient operations, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArtistsInstantmixWithHttpMessagesAsync(includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of next up episodes
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='albumId'>
            /// Optional. Filter by series id
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            public static QueryResultBaseItemDto GetAudiobooksNextup(this IRestClient operations, string userId, int? startIndex = default(int?), int? limit = default(int?), string fields = default(string), string albumId = default(string), string parentId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?))
            {
                return operations.GetAudiobooksNextupAsync(userId, startIndex, limit, fields, albumId, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of next up episodes
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='albumId'>
            /// Optional. Filter by series id
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetAudiobooksNextupAsync(this IRestClient operations, string userId, int? startIndex = default(int?), int? limit = default(int?), string fields = default(string), string albumId = default(string), string parentId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAudiobooksNextupWithHttpMessagesAsync(userId, startIndex, limit, fields, albumId, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<NameIdPair> GetAuthProviders(this IRestClient operations)
            {
                return operations.GetAuthProvidersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NameIdPair>> GetAuthProvidersAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthProvidersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='app'>
            /// App
            /// </param>
            public static void PostAuthKeys(this IRestClient operations, string app)
            {
                operations.PostAuthKeysAsync(app).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='app'>
            /// App
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAuthKeysAsync(this IRestClient operations, string app, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostAuthKeysWithHttpMessagesAsync(app, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            public static void GetAuthKeys(this IRestClient operations, int? startIndex = default(int?), int? limit = default(int?))
            {
                operations.GetAuthKeysAsync(startIndex, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAuthKeysAsync(this IRestClient operations, int? startIndex = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAuthKeysWithHttpMessagesAsync(startIndex, limit, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets branding configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static BrandingBrandingOptions GetBrandingConfiguration(this IRestClient operations)
            {
                return operations.GetBrandingConfigurationAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets branding configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BrandingBrandingOptions> GetBrandingConfigurationAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBrandingConfigurationWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets custom css
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetBrandingCss(this IRestClient operations)
            {
                operations.GetBrandingCssAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets custom css
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetBrandingCssAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetBrandingCssWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets custom css
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetBrandingCssCss(this IRestClient operations)
            {
                operations.GetBrandingCssCssAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets custom css
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetBrandingCssCssAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetBrandingCssCssWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a Connect link for a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetConnectPending(this IRestClient operations)
            {
                operations.GetConnectPendingAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Connect link for a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetConnectPendingAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetConnectPendingWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the corresponding local user from a connect user id
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectUserId'>
            /// ConnectUserId
            /// </param>
            public static ConnectConnectAuthenticationExchangeResult GetConnectExchange(this IRestClient operations, string connectUserId)
            {
                return operations.GetConnectExchangeAsync(connectUserId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the corresponding local user from a connect user id
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectUserId'>
            /// ConnectUserId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectConnectAuthenticationExchangeResult> GetConnectExchangeAsync(this IRestClient operations, string connectUserId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConnectExchangeWithHttpMessagesAsync(connectUserId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates device options
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// DeviceOptions:
            /// </param>
            /// <param name='id'>
            /// Device Id
            /// </param>
            public static void PostDevicesOptions(this IRestClient operations, DevicesDeviceOptions body, string id)
            {
                operations.PostDevicesOptionsAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates device options
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// DeviceOptions:
            /// </param>
            /// <param name='id'>
            /// Device Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostDevicesOptionsAsync(this IRestClient operations, DevicesDeviceOptions body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostDevicesOptionsWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets options for a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Device Id
            /// </param>
            public static DevicesDeviceOptions GetDevicesOptions(this IRestClient operations, string id)
            {
                return operations.GetDevicesOptionsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets options for a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Device Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DevicesDeviceOptions> GetDevicesOptionsAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDevicesOptionsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets info for a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Device Id
            /// </param>
            public static DevicesDeviceInfo GetDevicesInfo(this IRestClient operations, string id)
            {
                return operations.GetDevicesInfoAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets info for a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Device Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DevicesDeviceInfo> GetDevicesInfoAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDevicesInfoWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets camera upload history for a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static DevicesContentUploadHistory GetDevicesCamerauploads(this IRestClient operations)
            {
                return operations.GetDevicesCamerauploadsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets camera upload history for a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DevicesContentUploadHistory> GetDevicesCamerauploadsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDevicesCamerauploadsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads content
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='album'>
            /// Album
            /// </param>
            /// <param name='name'>
            /// Name
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            public static void PostDevicesCamerauploads(this IRestClient operations, string body, string album, string name, string id)
            {
                operations.PostDevicesCamerauploadsAsync(body, album, name, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads content
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='album'>
            /// Album
            /// </param>
            /// <param name='name'>
            /// Name
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostDevicesCamerauploadsAsync(this IRestClient operations, string body, string album, string name, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostDevicesCamerauploadsWithHttpMessagesAsync(body, album, name, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Device Id
            /// </param>
            public static void PostDevicesDelete(this IRestClient operations, string id)
            {
                operations.PostDevicesDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Device Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostDevicesDeleteAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostDevicesDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a user's display preferences for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='client'>
            /// Client
            /// </param>
            public static DisplayPreferences GetDisplaypreferencesById(this IRestClient operations, string id, string userId, string client)
            {
                return operations.GetDisplaypreferencesByIdAsync(id, userId, client).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a user's display preferences for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='client'>
            /// Client
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DisplayPreferences> GetDisplaypreferencesByIdAsync(this IRestClient operations, string id, string userId, string client, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDisplaypreferencesByIdWithHttpMessagesAsync(id, userId, client, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a user's display preferences for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// DisplayPreferences:
            /// </param>
            /// <param name='displayPreferencesId'>
            /// DisplayPreferences Id
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            public static void PostDisplaypreferencesByDisplaypreferencesid(this IRestClient operations, DisplayPreferences body, string displayPreferencesId, string userId)
            {
                operations.PostDisplaypreferencesByDisplaypreferencesidAsync(body, displayPreferencesId, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user's display preferences for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// DisplayPreferences:
            /// </param>
            /// <param name='displayPreferencesId'>
            /// DisplayPreferences Id
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostDisplaypreferencesByDisplaypreferencesidAsync(this IRestClient operations, DisplayPreferences body, string displayPreferencesId, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostDisplaypreferencesByDisplaypreferencesidWithHttpMessagesAsync(body, displayPreferencesId, userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of profiles
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EmbyDlnaProfilesDlnaProfile> GetDlnaProfileinfos(this IRestClient operations)
            {
                return operations.GetDlnaProfileinfosAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of profiles
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EmbyDlnaProfilesDlnaProfile>> GetDlnaProfileinfosAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDlnaProfileinfosWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a profile
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// DlnaProfile:
            /// </param>
            public static void PostDlnaProfiles(this IRestClient operations, EmbyDlnaProfilesDlnaProfile body)
            {
                operations.PostDlnaProfilesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a profile
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// DlnaProfile:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostDlnaProfilesAsync(this IRestClient operations, EmbyDlnaProfilesDlnaProfile body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostDlnaProfilesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets available tone mapping options
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MediaEncodingConfigurationToneMappingToneMapOptionsVisibility GetEncodingTonemapoptions(this IRestClient operations)
            {
                return operations.GetEncodingTonemapoptionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available tone mapping options
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaEncodingConfigurationToneMappingToneMapOptionsVisibility> GetEncodingTonemapoptionsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEncodingTonemapoptionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the tone mapping options
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EmbyWebGenericEditEditObjectContainer GetEncodingFulltonemapoptions(this IRestClient operations)
            {
                return operations.GetEncodingFulltonemapoptionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the tone mapping options
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbyWebGenericEditEditObjectContainer> GetEncodingFulltonemapoptionsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEncodingFulltonemapoptionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the tone mapping options
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            public static void PostEncodingFulltonemapoptions(this IRestClient operations, string body)
            {
                operations.PostEncodingFulltonemapoptionsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the tone mapping options
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostEncodingFulltonemapoptionsAsync(this IRestClient operations, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostEncodingFulltonemapoptionsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the tone mapping options
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EmbyWebGenericEditEditObjectContainer GetEncodingPublictonemapoptions(this IRestClient operations)
            {
                return operations.GetEncodingPublictonemapoptionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the tone mapping options
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbyWebGenericEditEditObjectContainer> GetEncodingPublictonemapoptionsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEncodingPublictonemapoptionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the tone mapping options
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            public static void PostEncodingPublictonemapoptions(this IRestClient operations, string body)
            {
                operations.PostEncodingPublictonemapoptionsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the tone mapping options
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostEncodingPublictonemapoptionsAsync(this IRestClient operations, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostEncodingPublictonemapoptionsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the subtitle options
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EmbyWebGenericEditEditObjectContainer GetEncodingSubtitleoptions(this IRestClient operations)
            {
                return operations.GetEncodingSubtitleoptionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the subtitle options
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbyWebGenericEditEditObjectContainer> GetEncodingSubtitleoptionsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEncodingSubtitleoptionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the subtitle options
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            public static void PostEncodingSubtitleoptions(this IRestClient operations, string body)
            {
                operations.PostEncodingSubtitleoptionsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the subtitle options
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostEncodingSubtitleoptionsAsync(this IRestClient operations, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostEncodingSubtitleoptionsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the ffmpeg options
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EmbyWebGenericEditEditObjectContainer GetEncodingFfmpegoptions(this IRestClient operations)
            {
                return operations.GetEncodingFfmpegoptionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the ffmpeg options
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbyWebGenericEditEditObjectContainer> GetEncodingFfmpegoptionsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEncodingFfmpegoptionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the ffmpeg options
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            public static void PostEncodingFfmpegoptions(this IRestClient operations, string body)
            {
                operations.PostEncodingFfmpegoptionsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the ffmpeg options
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostEncodingFfmpegoptionsAsync(this IRestClient operations, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostEncodingFfmpegoptionsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the parameters for a specified codec.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codecId'>
            /// Codec Id
            /// </param>
            /// <param name='parameterContext'>
            /// Parameter Context. Possible values include: 'Playback', 'Conversion'
            /// </param>
            public static EmbyWebGenericEditEditObjectContainer GetEncodingCodecparameters(this IRestClient operations, string codecId, string parameterContext)
            {
                return operations.GetEncodingCodecparametersAsync(codecId, parameterContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the parameters for a specified codec.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codecId'>
            /// Codec Id
            /// </param>
            /// <param name='parameterContext'>
            /// Parameter Context. Possible values include: 'Playback', 'Conversion'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbyWebGenericEditEditObjectContainer> GetEncodingCodecparametersAsync(this IRestClient operations, string codecId, string parameterContext, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEncodingCodecparametersWithHttpMessagesAsync(codecId, parameterContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the parameters for a specified codec.
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='codecId'>
            /// Codec Id
            /// </param>
            /// <param name='parameterContext'>
            /// Parameter Context. Possible values include: 'Playback', 'Conversion'
            /// </param>
            public static void PostEncodingCodecparameters(this IRestClient operations, string body, string codecId, string parameterContext)
            {
                operations.PostEncodingCodecparametersAsync(body, codecId, parameterContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the parameters for a specified codec.
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='codecId'>
            /// Codec Id
            /// </param>
            /// <param name='parameterContext'>
            /// Parameter Context. Possible values include: 'Playback', 'Conversion'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostEncodingCodecparametersAsync(this IRestClient operations, string body, string codecId, string parameterContext, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostEncodingCodecparametersWithHttpMessagesAsync(body, codecId, parameterContext, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the contents of a given directory in the file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// ValidatePath
            /// </param>
            /// <param name='path'>
            /// </param>
            public static void PostEnvironmentValidatepath(this IRestClient operations, ValidatePath body, string path)
            {
                operations.PostEnvironmentValidatepathAsync(body, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the contents of a given directory in the file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// ValidatePath
            /// </param>
            /// <param name='path'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostEnvironmentValidatepathAsync(this IRestClient operations, ValidatePath body, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostEnvironmentValidatepathWithHttpMessagesAsync(body, path, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the parent path of a given path
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static DefaultDirectoryBrowserInfo GetEnvironmentDefaultdirectorybrowser(this IRestClient operations)
            {
                return operations.GetEnvironmentDefaultdirectorybrowserAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the parent path of a given path
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DefaultDirectoryBrowserInfo> GetEnvironmentDefaultdirectorybrowserAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnvironmentDefaultdirectorybrowserWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the contents of a given directory in the file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// </param>
            /// <param name='includeFiles'>
            /// An optional filter to include or exclude files from the results. true/false
            /// </param>
            /// <param name='includeDirectories'>
            /// An optional filter to include or exclude folders from the results.
            /// true/false
            /// </param>
            public static IList<IOFileSystemEntryInfo> GetEnvironmentDirectorycontents(this IRestClient operations, string path, bool? includeFiles = default(bool?), bool? includeDirectories = default(bool?))
            {
                return operations.GetEnvironmentDirectorycontentsAsync(path, includeFiles, includeDirectories).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the contents of a given directory in the file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// </param>
            /// <param name='includeFiles'>
            /// An optional filter to include or exclude files from the results. true/false
            /// </param>
            /// <param name='includeDirectories'>
            /// An optional filter to include or exclude folders from the results.
            /// true/false
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IOFileSystemEntryInfo>> GetEnvironmentDirectorycontentsAsync(this IRestClient operations, string path, bool? includeFiles = default(bool?), bool? includeDirectories = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnvironmentDirectorycontentsWithHttpMessagesAsync(path, includeFiles, includeDirectories, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets shares from a network device
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// </param>
            public static IList<IOFileSystemEntryInfo> GetEnvironmentNetworkshares(this IRestClient operations, string path)
            {
                return operations.GetEnvironmentNetworksharesAsync(path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets shares from a network device
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IOFileSystemEntryInfo>> GetEnvironmentNetworksharesAsync(this IRestClient operations, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnvironmentNetworksharesWithHttpMessagesAsync(path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets available drives from the server's file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IOFileSystemEntryInfo> GetEnvironmentDrives(this IRestClient operations)
            {
                return operations.GetEnvironmentDrivesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available drives from the server's file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IOFileSystemEntryInfo>> GetEnvironmentDrivesAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnvironmentDrivesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of devices on the network
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IOFileSystemEntryInfo> GetEnvironmentNetworkdevices(this IRestClient operations)
            {
                return operations.GetEnvironmentNetworkdevicesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of devices on the network
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IOFileSystemEntryInfo>> GetEnvironmentNetworkdevicesAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnvironmentNetworkdevicesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the parent path of a given path
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// </param>
            public static string GetEnvironmentParentpath(this IRestClient operations, string path)
            {
                return operations.GetEnvironmentParentpathAsync(path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the parent path of a given path
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='path'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetEnvironmentParentpathAsync(this IRestClient operations, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnvironmentParentpathWithHttpMessagesAsync(path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Game genre, by name
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The genre name
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            public static BaseItemDto GetGamegenresByName(this IRestClient operations, string name, string userId = default(string))
            {
                return operations.GetGamegenresByNameAsync(name, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Game genre, by name
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The genre name
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseItemDto> GetGamegenresByNameAsync(this IRestClient operations, string name, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGamegenresByNameWithHttpMessagesAsync(name, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a genre, by name
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The genre name
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            public static BaseItemDto GetGenresByName(this IRestClient operations, string name, string userId = default(string))
            {
                return operations.GetGenresByNameAsync(name, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a genre, by name
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The genre name
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseItemDto> GetGenresByNameAsync(this IRestClient operations, string name, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGenresByNameWithHttpMessagesAsync(name, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a remote image
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='imageUrl'>
            /// The image url
            /// </param>
            public static void GetImagesRemote(this IRestClient operations, string imageUrl)
            {
                operations.GetImagesRemoteAsync(imageUrl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a remote image
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='imageUrl'>
            /// The image url
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetImagesRemoteAsync(this IRestClient operations, string imageUrl, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetImagesRemoteWithHttpMessagesAsync(imageUrl, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// BaseItemDto:
            /// </param>
            /// <param name='itemId'>
            /// The id of the item
            /// </param>
            public static void PostItemsByItemid(this IRestClient operations, BaseItemDto body, string itemId)
            {
                operations.PostItemsByItemidAsync(body, itemId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// BaseItemDto:
            /// </param>
            /// <param name='itemId'>
            /// The id of the item
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByItemidAsync(this IRestClient operations, BaseItemDto body, string itemId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByItemidWithHttpMessagesAsync(body, itemId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static IList<NameValuePair> GetItemsPrefixes(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetItemsPrefixesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NameValuePair>> GetItemsPrefixesAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsPrefixesWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Optional. Get counts from a specific user's library.
            /// </param>
            /// <param name='isFavorite'>
            /// Optional. Get counts of favorite items
            /// </param>
            public static ItemCounts GetItemsCounts(this IRestClient operations, string userId = default(string), bool? isFavorite = default(bool?))
            {
                return operations.GetItemsCountsAsync(userId, isFavorite).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Optional. Get counts from a specific user's library.
            /// </param>
            /// <param name='isFavorite'>
            /// Optional. Get counts of favorite items
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ItemCounts> GetItemsCountsAsync(this IRestClient operations, string userId = default(string), bool? isFavorite = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsCountsWithHttpMessagesAsync(userId, isFavorite, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets info to debug intros
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<PersistenceIntroDebugInfo> GetItemsIntros(this IRestClient operations)
            {
                return operations.GetItemsIntrosAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets info to debug intros
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PersistenceIntroDebugInfo>> GetItemsIntrosAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsIntrosWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an item from the library and file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Ids
            /// </param>
            public static void PostItemsDelete(this IRestClient operations, string ids)
            {
                operations.PostItemsDeleteAsync(ids).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an item from the library and file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Ids
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsDeleteAsync(this IRestClient operations, string ids, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsDeleteWithHttpMessagesAsync(ids, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes an item from the library and file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static void DeleteItemsById(this IRestClient operations, string id)
            {
                operations.DeleteItemsByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an item from the library and file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteItemsByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteItemsByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LibraryLibraryOptionsResult GetLibrariesAvailableoptions(this IRestClient operations)
            {
                return operations.GetLibrariesAvailableoptionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LibraryLibraryOptionsResult> GetLibrariesAvailableoptionsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLibrariesAvailableoptionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all user media folders.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<LibraryMediaFolder> GetLibrarySelectablemediafolders(this IRestClient operations)
            {
                return operations.GetLibrarySelectablemediafoldersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all user media folders.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LibraryMediaFolder>> GetLibrarySelectablemediafoldersAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLibrarySelectablemediafoldersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all user media folders.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isHidden'>
            /// Optional. Filter by folders that are marked hidden, or not.
            /// </param>
            public static QueryResultBaseItemDto GetLibraryMediafolders(this IRestClient operations, bool? isHidden = default(bool?))
            {
                return operations.GetLibraryMediafoldersAsync(isHidden).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all user media folders.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isHidden'>
            /// Optional. Filter by folders that are marked hidden, or not.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetLibraryMediafoldersAsync(this IRestClient operations, bool? isHidden = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLibraryMediafoldersWithHttpMessagesAsync(isHidden, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of physical paths from virtual folders
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> GetLibraryPhysicalpaths(this IRestClient operations)
            {
                return operations.GetLibraryPhysicalpathsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of physical paths from virtual folders
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetLibraryPhysicalpathsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLibraryPhysicalpathsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts a library scan
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostLibraryRefresh(this IRestClient operations)
            {
                operations.PostLibraryRefreshAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a library scan
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLibraryRefreshAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLibraryRefreshWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// AddVirtualFolder
            /// </param>
            public static void PostLibraryVirtualfolders(this IRestClient operations, LibraryAddVirtualFolder body)
            {
                operations.PostLibraryVirtualfoldersAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// AddVirtualFolder
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLibraryVirtualfoldersAsync(this IRestClient operations, LibraryAddVirtualFolder body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLibraryVirtualfoldersWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeleteLibraryVirtualfolders(this IRestClient operations)
            {
                operations.DeleteLibraryVirtualfoldersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteLibraryVirtualfoldersAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteLibraryVirtualfoldersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Opens a media source
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// LiveStreamRequest:
            /// </param>
            public static MediaInfoLiveStreamResponse PostLivestreamsOpen(this IRestClient operations, MediaInfoLiveStreamRequest body)
            {
                return operations.PostLivestreamsOpenAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Opens a media source
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// LiveStreamRequest:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaInfoLiveStreamResponse> PostLivestreamsOpenAsync(this IRestClient operations, MediaInfoLiveStreamRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostLivestreamsOpenWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Closes a media source
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liveStreamId'>
            /// LiveStreamId
            /// </param>
            public static void PostLivestreamsClose(this IRestClient operations, string liveStreamId)
            {
                operations.PostLivestreamsCloseAsync(liveStreamId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Closes a media source
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liveStreamId'>
            /// LiveStreamId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivestreamsCloseAsync(this IRestClient operations, string liveStreamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivestreamsCloseWithHttpMessagesAsync(liveStreamId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Closes a media source
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liveStreamId'>
            /// LiveStreamId
            /// </param>
            public static void PostLivestreamsMediainfo(this IRestClient operations, string liveStreamId)
            {
                operations.PostLivestreamsMediainfoAsync(liveStreamId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Closes a media source
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='liveStreamId'>
            /// LiveStreamId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivestreamsMediainfoAsync(this IRestClient operations, string liveStreamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivestreamsMediainfoWithHttpMessagesAsync(liveStreamId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets live tv channel tags
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultBaseItemDto GetLivetvChanneltags(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetLivetvChanneltagsAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets live tv channel tags
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetLivetvChanneltagsAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvChanneltagsWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the top level live tv folder
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static BaseItemDto GetLivetvFolder(this IRestClient operations)
            {
                return operations.GetLivetvFolderAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the top level live tv folder
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseItemDto> GetLivetvFolderAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvFolderWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            public static void GetLivetvChannelmappings(this IRestClient operations, string providerId)
            {
                operations.GetLivetvChannelmappingsAsync(providerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetLivetvChannelmappingsAsync(this IRestClient operations, string providerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetLivetvChannelmappingsWithHttpMessagesAsync(providerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            public static void HeadLivetvChannelmappings(this IRestClient operations, string providerId)
            {
                operations.HeadLivetvChannelmappingsAsync(providerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadLivetvChannelmappingsAsync(this IRestClient operations, string providerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadLivetvChannelmappingsWithHttpMessagesAsync(providerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SetChannelMapping
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            public static void PostLivetvChannelmappings(this IRestClient operations, LiveTVApiSetChannelMapping body, string providerId)
            {
                operations.PostLivetvChannelmappingsAsync(body, providerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SetChannelMapping
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivetvChannelmappingsAsync(this IRestClient operations, LiveTVApiSetChannelMapping body, string providerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivetvChannelmappingsWithHttpMessagesAsync(body, providerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SetChannelMapping
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            public static void PutLivetvChannelmappings(this IRestClient operations, LiveTVApiSetChannelMapping body, string providerId)
            {
                operations.PutLivetvChannelmappingsAsync(body, providerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SetChannelMapping
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutLivetvChannelmappingsAsync(this IRestClient operations, LiveTVApiSetChannelMapping body, string providerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutLivetvChannelmappingsWithHttpMessagesAsync(body, providerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            public static void DeleteLivetvChannelmappings(this IRestClient operations, string providerId)
            {
                operations.DeleteLivetvChannelmappingsAsync(providerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteLivetvChannelmappingsAsync(this IRestClient operations, string providerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteLivetvChannelmappingsWithHttpMessagesAsync(providerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            public static void GetLivetvChannelmappingoptions(this IRestClient operations, string providerId)
            {
                operations.GetLivetvChannelmappingoptionsAsync(providerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetLivetvChannelmappingoptionsAsync(this IRestClient operations, string providerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetLivetvChannelmappingoptionsWithHttpMessagesAsync(providerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            public static void HeadLivetvChannelmappingoptions(this IRestClient operations, string providerId)
            {
                operations.HeadLivetvChannelmappingoptionsAsync(providerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadLivetvChannelmappingoptionsAsync(this IRestClient operations, string providerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadLivetvChannelmappingoptionsWithHttpMessagesAsync(providerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            public static void PostLivetvChannelmappingoptions(this IRestClient operations, string providerId)
            {
                operations.PostLivetvChannelmappingoptionsAsync(providerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivetvChannelmappingoptionsAsync(this IRestClient operations, string providerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivetvChannelmappingoptionsWithHttpMessagesAsync(providerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            public static void PutLivetvChannelmappingoptions(this IRestClient operations, string providerId)
            {
                operations.PutLivetvChannelmappingoptionsAsync(providerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutLivetvChannelmappingoptionsAsync(this IRestClient operations, string providerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutLivetvChannelmappingoptionsWithHttpMessagesAsync(providerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            public static void DeleteLivetvChannelmappingoptions(this IRestClient operations, string providerId)
            {
                operations.DeleteLivetvChannelmappingoptionsAsync(providerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Provider id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteLivetvChannelmappingoptionsAsync(this IRestClient operations, string providerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteLivetvChannelmappingoptionsWithHttpMessagesAsync(providerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds a listing provider
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// ListingsProviderInfo:
            /// </param>
            public static LiveTvListingsProviderInfo PostLivetvListingproviders(this IRestClient operations, LiveTvListingsProviderInfo body)
            {
                return operations.PostLivetvListingprovidersAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a listing provider
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// ListingsProviderInfo:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveTvListingsProviderInfo> PostLivetvListingprovidersAsync(this IRestClient operations, LiveTvListingsProviderInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostLivetvListingprovidersWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a listing provider
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Provider id
            /// </param>
            public static void DeleteLivetvListingproviders(this IRestClient operations, string id = default(string))
            {
                operations.DeleteLivetvListingprovidersAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a listing provider
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Provider id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteLivetvListingprovidersAsync(this IRestClient operations, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteLivetvListingprovidersWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets current listing providers
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// Channel id
            /// </param>
            public static IList<LiveTvListingsProviderInfo> GetLivetvListingproviders(this IRestClient operations, string channelId)
            {
                return operations.GetLivetvListingprovidersAsync(channelId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets current listing providers
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// Channel id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LiveTvListingsProviderInfo>> GetLivetvListingprovidersAsync(this IRestClient operations, string channelId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvListingprovidersWithHttpMessagesAsync(channelId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets tuner hosts
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<LiveTvTunerHostInfo> GetLivetvTunerhosts(this IRestClient operations)
            {
                return operations.GetLivetvTunerhostsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets tuner hosts
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LiveTvTunerHostInfo>> GetLivetvTunerhostsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvTunerhostsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a tuner host
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// TunerHostInfo:
            /// </param>
            public static LiveTvTunerHostInfo PostLivetvTunerhosts(this IRestClient operations, LiveTvTunerHostInfo body)
            {
                return operations.PostLivetvTunerhostsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a tuner host
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// TunerHostInfo:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveTvTunerHostInfo> PostLivetvTunerhostsAsync(this IRestClient operations, LiveTvTunerHostInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostLivetvTunerhostsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a tuner host
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Tuner host id
            /// </param>
            public static void DeleteLivetvTunerhosts(this IRestClient operations, string id = default(string))
            {
                operations.DeleteLivetvTunerhostsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a tuner host
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Tuner host id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteLivetvTunerhostsAsync(this IRestClient operations, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteLivetvTunerhostsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets available live tv services.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LiveTvLiveTvInfo GetLivetvInfo(this IRestClient operations)
            {
                return operations.GetLivetvInfoAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available live tv services.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveTvLiveTvInfo> GetLivetvInfoAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvInfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the epg.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// Optional filter by channel type. Possible values include: 'TV', 'Radio'
            /// </param>
            /// <param name='userId'>
            /// Optional filter by user and attach user data.
            /// </param>
            /// <param name='genreIds'>
            /// The genres to return guide information for.
            /// </param>
            /// <param name='minStartDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxStartDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='minEndDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxEndDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='isFavorite'>
            /// Filter by channels that are favorites, or not.
            /// </param>
            /// <param name='isLiked'>
            /// Filter by channels that are liked, or not.
            /// </param>
            /// <param name='isDisliked'>
            /// Filter by channels that are disliked, or not.
            /// </param>
            /// <param name='enableFavoriteSorting'>
            /// Incorporate favorite and like status into channel sorting.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='addCurrentProgram'>
            /// Optional. Adds current program info to each channel
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='channelIds'>
            /// The channels to return guide information for.
            /// </param>
            public static QueryResultLiveTVApiEpgRow GetLivetvEPG(this IRestClient operations, string type = default(string), string userId = default(string), string genreIds = default(string), string minStartDate = default(string), string maxStartDate = default(string), string minEndDate = default(string), string maxEndDate = default(string), int? startIndex = default(int?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? limit = default(int?), bool? isFavorite = default(bool?), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableFavoriteSorting = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string fields = default(string), bool? addCurrentProgram = default(bool?), bool? enableUserData = default(bool?), string channelIds = default(string))
            {
                return operations.GetLivetvEPGAsync(type, userId, genreIds, minStartDate, maxStartDate, minEndDate, maxEndDate, startIndex, isMovie, isSeries, isNews, isKids, isSports, limit, isFavorite, isLiked, isDisliked, enableFavoriteSorting, enableImages, imageTypeLimit, enableImageTypes, fields, addCurrentProgram, enableUserData, channelIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the epg.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// Optional filter by channel type. Possible values include: 'TV', 'Radio'
            /// </param>
            /// <param name='userId'>
            /// Optional filter by user and attach user data.
            /// </param>
            /// <param name='genreIds'>
            /// The genres to return guide information for.
            /// </param>
            /// <param name='minStartDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxStartDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='minEndDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxEndDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='isFavorite'>
            /// Filter by channels that are favorites, or not.
            /// </param>
            /// <param name='isLiked'>
            /// Filter by channels that are liked, or not.
            /// </param>
            /// <param name='isDisliked'>
            /// Filter by channels that are disliked, or not.
            /// </param>
            /// <param name='enableFavoriteSorting'>
            /// Incorporate favorite and like status into channel sorting.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='addCurrentProgram'>
            /// Optional. Adds current program info to each channel
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='channelIds'>
            /// The channels to return guide information for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultLiveTVApiEpgRow> GetLivetvEPGAsync(this IRestClient operations, string type = default(string), string userId = default(string), string genreIds = default(string), string minStartDate = default(string), string maxStartDate = default(string), string minEndDate = default(string), string maxEndDate = default(string), int? startIndex = default(int?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), int? limit = default(int?), bool? isFavorite = default(bool?), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableFavoriteSorting = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string fields = default(string), bool? addCurrentProgram = default(bool?), bool? enableUserData = default(bool?), string channelIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvEPGWithHttpMessagesAsync(type, userId, genreIds, minStartDate, maxStartDate, minEndDate, maxEndDate, startIndex, isMovie, isSeries, isNews, isKids, isSports, limit, isFavorite, isLiked, isDisliked, enableFavoriteSorting, enableImages, imageTypeLimit, enableImageTypes, fields, addCurrentProgram, enableUserData, channelIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets available live tv channels.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// Optional filter by channel type. Possible values include: 'TV', 'Radio'
            /// </param>
            /// <param name='isLiked'>
            /// Filter by channels that are liked, or not.
            /// </param>
            /// <param name='isDisliked'>
            /// Filter by channels that are disliked, or not.
            /// </param>
            /// <param name='enableFavoriteSorting'>
            /// Incorporate favorite and like status into channel sorting.
            /// </param>
            /// <param name='addCurrentProgram'>
            /// Optional. Adds current program info to each channel
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultBaseItemDto GetLivetvChannels(this IRestClient operations, string type = default(string), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableFavoriteSorting = default(bool?), bool? addCurrentProgram = default(bool?), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetLivetvChannelsAsync(type, isLiked, isDisliked, enableFavoriteSorting, addCurrentProgram, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available live tv channels.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// Optional filter by channel type. Possible values include: 'TV', 'Radio'
            /// </param>
            /// <param name='isLiked'>
            /// Filter by channels that are liked, or not.
            /// </param>
            /// <param name='isDisliked'>
            /// Filter by channels that are disliked, or not.
            /// </param>
            /// <param name='enableFavoriteSorting'>
            /// Incorporate favorite and like status into channel sorting.
            /// </param>
            /// <param name='addCurrentProgram'>
            /// Optional. Adds current program info to each channel
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetLivetvChannelsAsync(this IRestClient operations, string type = default(string), bool? isLiked = default(bool?), bool? isDisliked = default(bool?), bool? enableFavoriteSorting = default(bool?), bool? addCurrentProgram = default(bool?), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvChannelsWithHttpMessagesAsync(type, isLiked, isDisliked, enableFavoriteSorting, addCurrentProgram, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets available live tv epgs..
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelIds'>
            /// The channels to return guide information for.
            /// </param>
            /// <param name='minStartDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxStartDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='minEndDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxEndDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static void GetLivetvPrograms(this IRestClient operations, string channelIds = default(string), string minStartDate = default(string), string maxStartDate = default(string), string minEndDate = default(string), string maxEndDate = default(string), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                operations.GetLivetvProgramsAsync(channelIds, minStartDate, maxStartDate, minEndDate, maxEndDate, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available live tv epgs..
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelIds'>
            /// The channels to return guide information for.
            /// </param>
            /// <param name='minStartDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxStartDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='minEndDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxEndDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetLivetvProgramsAsync(this IRestClient operations, string channelIds = default(string), string minStartDate = default(string), string maxStartDate = default(string), string minEndDate = default(string), string maxEndDate = default(string), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetLivetvProgramsWithHttpMessagesAsync(channelIds, minStartDate, maxStartDate, minEndDate, maxEndDate, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets available live tv epgs..
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// BaseItemsRequest:
            /// </param>
            /// <param name='channelIds'>
            /// The channels to return guide information for.
            /// </param>
            /// <param name='minStartDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxStartDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='minEndDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxEndDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static void PostLivetvPrograms(this IRestClient operations, ApiBaseItemsRequest body, string channelIds = default(string), string minStartDate = default(string), string maxStartDate = default(string), string minEndDate = default(string), string maxEndDate = default(string), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                operations.PostLivetvProgramsAsync(body, channelIds, minStartDate, maxStartDate, minEndDate, maxEndDate, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available live tv epgs..
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// BaseItemsRequest:
            /// </param>
            /// <param name='channelIds'>
            /// The channels to return guide information for.
            /// </param>
            /// <param name='minStartDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxStartDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='minEndDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxEndDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivetvProgramsAsync(this IRestClient operations, ApiBaseItemsRequest body, string channelIds = default(string), string minStartDate = default(string), string maxStartDate = default(string), string minEndDate = default(string), string maxEndDate = default(string), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivetvProgramsWithHttpMessagesAsync(body, channelIds, minStartDate, maxStartDate, minEndDate, maxEndDate, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets live tv recordings
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// Optional filter by channel id.
            /// </param>
            /// <param name='status'>
            /// Optional filter by recording status. Possible values include: 'New',
            /// 'InProgress', 'Completed', 'Cancelled', 'ConflictedOk', 'ConflictedNotOk',
            /// 'Error'
            /// </param>
            /// <param name='isInProgress'>
            /// Optional filter by recordings that are in progress, or not.
            /// </param>
            /// <param name='seriesTimerId'>
            /// Optional filter by recordings belonging to a series timer
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static void GetLivetvRecordings(this IRestClient operations, string channelId = default(string), string status = default(string), bool? isInProgress = default(bool?), string seriesTimerId = default(string), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                operations.GetLivetvRecordingsAsync(channelId, status, isInProgress, seriesTimerId, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets live tv recordings
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// Optional filter by channel id.
            /// </param>
            /// <param name='status'>
            /// Optional filter by recording status. Possible values include: 'New',
            /// 'InProgress', 'Completed', 'Cancelled', 'ConflictedOk', 'ConflictedNotOk',
            /// 'Error'
            /// </param>
            /// <param name='isInProgress'>
            /// Optional filter by recordings that are in progress, or not.
            /// </param>
            /// <param name='seriesTimerId'>
            /// Optional filter by recordings belonging to a series timer
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetLivetvRecordingsAsync(this IRestClient operations, string channelId = default(string), string status = default(string), bool? isInProgress = default(bool?), string seriesTimerId = default(string), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetLivetvRecordingsWithHttpMessagesAsync(channelId, status, isInProgress, seriesTimerId, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets live tv timers
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// Optional filter by channel id.
            /// </param>
            /// <param name='seriesTimerId'>
            /// Optional filter by timers belonging to a series timer
            /// </param>
            public static QueryResultLiveTvTimerInfoDto GetLivetvTimers(this IRestClient operations, string channelId = default(string), string seriesTimerId = default(string))
            {
                return operations.GetLivetvTimersAsync(channelId, seriesTimerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets live tv timers
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// Optional filter by channel id.
            /// </param>
            /// <param name='seriesTimerId'>
            /// Optional filter by timers belonging to a series timer
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultLiveTvTimerInfoDto> GetLivetvTimersAsync(this IRestClient operations, string channelId = default(string), string seriesTimerId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvTimersWithHttpMessagesAsync(channelId, seriesTimerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a live tv timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// TimerInfoDto:
            /// </param>
            public static void PostLivetvTimers(this IRestClient operations, LiveTvTimerInfoDto body)
            {
                operations.PostLivetvTimersAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a live tv timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// TimerInfoDto:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivetvTimersAsync(this IRestClient operations, LiveTvTimerInfoDto body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivetvTimersWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets live tv series timers
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Sort by SortName or Priority
            /// </param>
            /// <param name='sortOrder'>
            /// Optional. Sort in Ascending or Descending order. Possible values include:
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            public static QueryResultLiveTvSeriesTimerInfoDto GetLivetvSeriestimers(this IRestClient operations, string sortBy = default(string), string sortOrder = default(string), int? startIndex = default(int?), int? limit = default(int?))
            {
                return operations.GetLivetvSeriestimersAsync(sortBy, sortOrder, startIndex, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets live tv series timers
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Sort by SortName or Priority
            /// </param>
            /// <param name='sortOrder'>
            /// Optional. Sort in Ascending or Descending order. Possible values include:
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultLiveTvSeriesTimerInfoDto> GetLivetvSeriestimersAsync(this IRestClient operations, string sortBy = default(string), string sortOrder = default(string), int? startIndex = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvSeriestimersWithHttpMessagesAsync(sortBy, sortOrder, startIndex, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a live tv series timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SeriesTimerInfo:
            /// </param>
            public static void PostLivetvSeriestimers(this IRestClient operations, LiveTvSeriesTimerInfo body)
            {
                operations.PostLivetvSeriestimersAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a live tv series timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SeriesTimerInfo:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivetvSeriestimersAsync(this IRestClient operations, LiveTvSeriesTimerInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivetvSeriestimersWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets guide info
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LiveTvGuideInfo GetLivetvGuideinfo(this IRestClient operations)
            {
                return operations.GetLivetvGuideinfoAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets guide info
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveTvGuideInfo> GetLivetvGuideinfoAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvGuideinfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets known parental ratings
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ParentalRating> GetLocalizationParentalratings(this IRestClient operations)
            {
                return operations.GetLocalizationParentalratingsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets known parental ratings
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ParentalRating>> GetLocalizationParentalratingsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLocalizationParentalratingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets localization options
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<GlobalizationLocalizatonOption> GetLocalizationOptions(this IRestClient operations)
            {
                return operations.GetLocalizationOptionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets localization options
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GlobalizationLocalizatonOption>> GetLocalizationOptionsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLocalizationOptionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets known countries
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<GlobalizationCountryInfo> GetLocalizationCountries(this IRestClient operations)
            {
                return operations.GetLocalizationCountriesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets known countries
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GlobalizationCountryInfo>> GetLocalizationCountriesAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLocalizationCountriesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets known cultures
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<GlobalizationCultureDto> GetLocalizationCultures(this IRestClient operations)
            {
                return operations.GetLocalizationCulturesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets known cultures
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GlobalizationCultureDto>> GetLocalizationCulturesAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLocalizationCulturesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets movie recommendations
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryLimit'>
            /// The max number of categories to return
            /// </param>
            /// <param name='itemLimit'>
            /// The max number of items to return per category
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            public static IList<RecommendationDto> GetMoviesRecommendations(this IRestClient operations, int? categoryLimit = default(int?), int? itemLimit = default(int?), string userId = default(string), string parentId = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string))
            {
                return operations.GetMoviesRecommendationsAsync(categoryLimit, itemLimit, userId, parentId, enableImages, enableUserData, imageTypeLimit, enableImageTypes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets movie recommendations
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryLimit'>
            /// The max number of categories to return
            /// </param>
            /// <param name='itemLimit'>
            /// The max number of items to return per category
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RecommendationDto>> GetMoviesRecommendationsAsync(this IRestClient operations, int? categoryLimit = default(int?), int? itemLimit = default(int?), string userId = default(string), string parentId = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMoviesRecommendationsWithHttpMessagesAsync(categoryLimit, itemLimit, userId, parentId, enableImages, enableUserData, imageTypeLimit, enableImageTypes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a music genre, by name
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The genre name
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            public static BaseItemDto GetMusicgenresByName(this IRestClient operations, string name, string userId = default(string))
            {
                return operations.GetMusicgenresByNameAsync(name, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a music genre, by name
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The genre name
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseItemDto> GetMusicgenresByNameAsync(this IRestClient operations, string name, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMusicgenresByNameWithHttpMessagesAsync(name, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an instant playlist based on a music genre
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetMusicgenresInstantmix(this IRestClient operations, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetMusicgenresInstantmixAsync(includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an instant playlist based on a music genre
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetMusicgenresInstantmixAsync(this IRestClient operations, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMusicgenresInstantmixWithHttpMessagesAsync(includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets notification types
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EmbyNotificationsNotificationCategoryInfo> GetNotificationsTypes(this IRestClient operations)
            {
                return operations.GetNotificationsTypesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets notification types
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EmbyNotificationsNotificationCategoryInfo>> GetNotificationsTypesAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotificationsTypesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a notification to all admin users
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The notification's name
            /// </param>
            /// <param name='description'>
            /// The notification's description
            /// </param>
            /// <param name='imageUrl'>
            /// The notification's image url
            /// </param>
            /// <param name='url'>
            /// The notification's info url
            /// </param>
            /// <param name='level'>
            /// The notification level
            /// </param>
            public static void PostNotificationsAdmin(this IRestClient operations, string name, string description, string imageUrl = default(string), string url = default(string), string level = default(string))
            {
                operations.PostNotificationsAdminAsync(name, description, imageUrl, url, level).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a notification to all admin users
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The notification's name
            /// </param>
            /// <param name='description'>
            /// The notification's description
            /// </param>
            /// <param name='imageUrl'>
            /// The notification's image url
            /// </param>
            /// <param name='url'>
            /// The notification's info url
            /// </param>
            /// <param name='level'>
            /// The notification level
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostNotificationsAdminAsync(this IRestClient operations, string name, string description, string imageUrl = default(string), string url = default(string), string level = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostNotificationsAdminWithHttpMessagesAsync(name, description, imageUrl, url, level, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets available package updates for currently installed packages
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='packageType'>
            /// Package type filter (System/UserInstalled)
            /// </param>
            public static IList<UpdatesPackageVersionInfo> GetPackagesUpdates(this IRestClient operations, string packageType)
            {
                return operations.GetPackagesUpdatesAsync(packageType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available package updates for currently installed packages
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='packageType'>
            /// Package type filter (System/UserInstalled)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UpdatesPackageVersionInfo>> GetPackagesUpdatesAsync(this IRestClient operations, string packageType, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPackagesUpdatesWithHttpMessagesAsync(packageType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a package, by name or assembly guid
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the package
            /// </param>
            /// <param name='assemblyGuid'>
            /// The guid of the associated assembly
            /// </param>
            public static UpdatesPackageInfo GetPackagesByName(this IRestClient operations, string name, string assemblyGuid = default(string))
            {
                return operations.GetPackagesByNameAsync(name, assemblyGuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a package, by name or assembly guid
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the package
            /// </param>
            /// <param name='assemblyGuid'>
            /// The guid of the associated assembly
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdatesPackageInfo> GetPackagesByNameAsync(this IRestClient operations, string name, string assemblyGuid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPackagesByNameWithHttpMessagesAsync(name, assemblyGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a person, by name
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The person name
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            public static BaseItemDto GetPersonsByName(this IRestClient operations, string name, string userId = default(string))
            {
                return operations.GetPersonsByNameAsync(name, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a person, by name
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The person name
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseItemDto> GetPersonsByNameAsync(this IRestClient operations, string name, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersonsByNameWithHttpMessagesAsync(name, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='size'>
            /// Size
            /// </param>
            public static void GetPlaybackBitratetest(this IRestClient operations, long size)
            {
                operations.GetPlaybackBitratetestAsync(size).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='size'>
            /// Size
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetPlaybackBitratetestAsync(this IRestClient operations, long size, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetPlaybackBitratetestWithHttpMessagesAsync(size, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Uninstalls a plugin
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Plugin Id
            /// </param>
            public static void DeletePluginsById(this IRestClient operations, string id)
            {
                operations.DeletePluginsByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uninstalls a plugin
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Plugin Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePluginsByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePluginsByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a scheduled task, by Id
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static TasksTaskInfo GetScheduledtasksById(this IRestClient operations, string id)
            {
                return operations.GetScheduledtasksByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a scheduled task, by Id
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TasksTaskInfo> GetScheduledtasksByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetScheduledtasksByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a the current play queue from a session
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Optional. Filter by session id.
            /// </param>
            /// <param name='deviceId'>
            /// Optional. Filter by device id.
            /// </param>
            public static QueryResultBaseItemDto GetSessionsPlayqueue(this IRestClient operations, string id = default(string), string deviceId = default(string))
            {
                return operations.GetSessionsPlayqueueAsync(id, deviceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a the current play queue from a session
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Optional. Filter by session id.
            /// </param>
            /// <param name='deviceId'>
            /// Optional. Filter by device id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetSessionsPlayqueueAsync(this IRestClient operations, string id = default(string), string deviceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionsPlayqueueWithHttpMessagesAsync(id, deviceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reports that a session has ended
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/User-Authentication" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostSessionsLogout(this IRestClient operations)
            {
                operations.PostSessionsLogoutAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reports that a session has ended
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/User-Authentication" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsLogoutAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsLogoutWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates capabilities for a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='playableMediaTypes'>
            /// A list of playable media types, comma delimited. Audio, Video, Book, Game,
            /// Photo.
            /// </param>
            /// <param name='supportedCommands'>
            /// A list of supported remote control commands, comma delimited
            /// </param>
            /// <param name='supportsMediaControl'>
            /// Determines whether media can be played remotely.
            /// </param>
            /// <param name='supportsSync'>
            /// Determines whether sync is supported.
            /// </param>
            public static void PostSessionsCapabilities(this IRestClient operations, string id, string playableMediaTypes = default(string), string supportedCommands = default(string), bool? supportsMediaControl = default(bool?), bool? supportsSync = default(bool?))
            {
                operations.PostSessionsCapabilitiesAsync(id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates capabilities for a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='playableMediaTypes'>
            /// A list of playable media types, comma delimited. Audio, Video, Book, Game,
            /// Photo.
            /// </param>
            /// <param name='supportedCommands'>
            /// A list of supported remote control commands, comma delimited
            /// </param>
            /// <param name='supportsMediaControl'>
            /// Determines whether media can be played remotely.
            /// </param>
            /// <param name='supportsSync'>
            /// Determines whether sync is supported.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsCapabilitiesAsync(this IRestClient operations, string id, string playableMediaTypes = default(string), string supportedCommands = default(string), bool? supportsMediaControl = default(bool?), bool? supportsSync = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsCapabilitiesWithHttpMessagesAsync(id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reports playback has started within a session
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Playback-Check-ins" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PlaybackStartInfo:
            /// </param>
            public static void PostSessionsPlaying(this IRestClient operations, PlaybackStartInfo body)
            {
                operations.PostSessionsPlayingAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reports playback has started within a session
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Playback-Check-ins" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PlaybackStartInfo:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsPlayingAsync(this IRestClient operations, PlaybackStartInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsPlayingWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of upcoming episodes
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            public static QueryResultBaseItemDto GetShowsUpcoming(this IRestClient operations, string userId, int? startIndex = default(int?), int? limit = default(int?), string fields = default(string), string parentId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?))
            {
                return operations.GetShowsUpcomingAsync(userId, startIndex, limit, fields, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of upcoming episodes
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetShowsUpcomingAsync(this IRestClient operations, string userId, int? startIndex = default(int?), int? limit = default(int?), string fields = default(string), string parentId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShowsUpcomingWithHttpMessagesAsync(userId, startIndex, limit, fields, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of next up episodes
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='seriesId'>
            /// Optional. Filter by series id
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            public static QueryResultBaseItemDto GetShowsNextup(this IRestClient operations, string userId, int? startIndex = default(int?), int? limit = default(int?), string fields = default(string), string seriesId = default(string), string parentId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?))
            {
                return operations.GetShowsNextupAsync(userId, startIndex, limit, fields, seriesId, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of next up episodes
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='seriesId'>
            /// Optional. Filter by series id
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetShowsNextupAsync(this IRestClient operations, string userId, int? startIndex = default(int?), int? limit = default(int?), string fields = default(string), string seriesId = default(string), string parentId = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShowsNextupWithHttpMessagesAsync(userId, startIndex, limit, fields, seriesId, parentId, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a studio, by name
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The studio name
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            public static BaseItemDto GetStudiosByName(this IRestClient operations, string name, string userId = default(string))
            {
                return operations.GetStudiosByNameAsync(name, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a studio, by name
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Items-by-name" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The studio name
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseItemDto> GetStudiosByNameAsync(this IRestClient operations, string name, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStudiosByNameWithHttpMessagesAsync(name, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of available sync targets.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// UserId
            /// </param>
            public static IList<SyncSyncTarget> GetSyncTargets(this IRestClient operations, string userId)
            {
                return operations.GetSyncTargetsAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of available sync targets.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// UserId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SyncSyncTarget>> GetSyncTargetsAsync(this IRestClient operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSyncTargetsWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets sync jobs.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static QueryResultSyncSyncJob GetSyncJobs(this IRestClient operations)
            {
                return operations.GetSyncJobsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets sync jobs.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultSyncSyncJob> GetSyncJobsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSyncJobsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets sync jobs.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SyncJobRequest:
            /// </param>
            public static SyncModelSyncJobCreationResult PostSyncJobs(this IRestClient operations, SyncModelSyncJobRequest body)
            {
                return operations.PostSyncJobsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets sync jobs.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SyncJobRequest:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SyncModelSyncJobCreationResult> PostSyncJobsAsync(this IRestClient operations, SyncModelSyncJobRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSyncJobsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets sync job items.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static QueryResultSyncModelSyncJobItem GetSyncJobitems(this IRestClient operations)
            {
                return operations.GetSyncJobitemsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets sync job items.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultSyncModelSyncJobItem> GetSyncJobitemsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSyncJobitemsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of available sync targets.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// UserId
            /// </param>
            /// <param name='itemIds'>
            /// ItemIds
            /// </param>
            /// <param name='parentId'>
            /// ParentId
            /// </param>
            /// <param name='targetId'>
            /// TargetId
            /// </param>
            /// <param name='category'>
            /// Category. Possible values include: 'Latest', 'NextUp', 'Resume'
            /// </param>
            public static SyncModelSyncDialogOptions GetSyncOptions(this IRestClient operations, string userId, string itemIds = default(string), string parentId = default(string), string targetId = default(string), string category = default(string))
            {
                return operations.GetSyncOptionsAsync(userId, itemIds, parentId, targetId, category).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of available sync targets.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// UserId
            /// </param>
            /// <param name='itemIds'>
            /// ItemIds
            /// </param>
            /// <param name='parentId'>
            /// ParentId
            /// </param>
            /// <param name='targetId'>
            /// TargetId
            /// </param>
            /// <param name='category'>
            /// Category. Possible values include: 'Latest', 'NextUp', 'Resume'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SyncModelSyncDialogOptions> GetSyncOptionsAsync(this IRestClient operations, string userId, string itemIds = default(string), string parentId = default(string), string targetId = default(string), string category = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSyncOptionsWithHttpMessagesAsync(userId, itemIds, parentId, targetId, category, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reports an action that occurred while offline.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// List`1:
            /// </param>
            public static void PostSyncOfflineactions(this IRestClient operations, IList<UsersUserAction> body)
            {
                operations.PostSyncOfflineactionsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reports an action that occurred while offline.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// List`1:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSyncOfflineactionsAsync(this IRestClient operations, IList<UsersUserAction> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSyncOfflineactionsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Syncs data between device and server
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SyncDataRequest:
            /// </param>
            public static SyncModelSyncDataResponse PostSyncData(this IRestClient operations, SyncModelSyncDataRequest body)
            {
                return operations.PostSyncDataAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Syncs data between device and server
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SyncDataRequest:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SyncModelSyncDataResponse> PostSyncDataAsync(this IRestClient operations, SyncModelSyncDataRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSyncDataWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets application configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ConfigurationServerConfiguration GetSystemConfiguration(this IRestClient operations)
            {
                return operations.GetSystemConfigurationAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets application configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigurationServerConfiguration> GetSystemConfigurationAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSystemConfigurationWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates application configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// ServerConfiguration:
            /// </param>
            public static void PostSystemConfiguration(this IRestClient operations, ConfigurationServerConfiguration body)
            {
                operations.PostSystemConfigurationAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates application configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// ServerConfiguration:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSystemConfigurationAsync(this IRestClient operations, ConfigurationServerConfiguration body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSystemConfigurationWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets release notes
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static UpdatesPackageVersionInfo GetSystemReleasenotes(this IRestClient operations)
            {
                return operations.GetSystemReleasenotesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets release notes
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdatesPackageVersionInfo> GetSystemReleasenotesAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSystemReleasenotesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostSystemPing(this IRestClient operations)
            {
                operations.PostSystemPingAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSystemPingAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSystemPingWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetSystemPing(this IRestClient operations)
            {
                operations.GetSystemPingAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSystemPingAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSystemPingWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets wake on lan information
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<WakeOnLanInfo> GetSystemWakeonlaninfo(this IRestClient operations)
            {
                return operations.GetSystemWakeonlaninfoAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets wake on lan information
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WakeOnLanInfo>> GetSystemWakeonlaninfoAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSystemWakeonlaninfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about the server
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static SystemInfo GetSystemInfo(this IRestClient operations)
            {
                return operations.GetSystemInfoAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the server
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SystemInfo> GetSystemInfoAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSystemInfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts the application, if needed
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostSystemRestart(this IRestClient operations)
            {
                operations.PostSystemRestartAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts the application, if needed
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSystemRestartAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSystemRestartWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Shuts down the application
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostSystemShutdown(this IRestClient operations)
            {
                operations.PostSystemShutdownAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shuts down the application
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSystemShutdownAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSystemShutdownWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets information about the request endpoint
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static NetEndPointInfo GetSystemEndpoint(this IRestClient operations)
            {
                return operations.GetSystemEndpointAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the request endpoint
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetEndPointInfo> GetSystemEndpointAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSystemEndpointWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets UI view data
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageId'>
            /// Id of the page controller
            /// </param>
            /// <param name='clientLocale'>
            /// Locale identifier of the client
            /// </param>
            public static EmbyWebGenericUIModelUIViewInfo GetUIView(this IRestClient operations, string pageId, string clientLocale)
            {
                return operations.GetUIViewAsync(pageId, clientLocale).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets UI view data
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageId'>
            /// Id of the page controller
            /// </param>
            /// <param name='clientLocale'>
            /// Locale identifier of the client
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbyWebGenericUIModelUIViewInfo> GetUIViewAsync(this IRestClient operations, string pageId, string clientLocale, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUIViewWithHttpMessagesAsync(pageId, clientLocale, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute a command in the context of tv setup
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RunUICommand
            /// </param>
            public static EmbyWebGenericUIModelUIViewInfo PostUICommand(this IRestClient operations, EmbyWebGenericUIApiEndpointsRunUICommand body)
            {
                return operations.PostUICommandAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute a command in the context of tv setup
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RunUICommand
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbyWebGenericUIModelUIViewInfo> PostUICommandAsync(this IRestClient operations, EmbyWebGenericUIApiEndpointsRunUICommand body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUICommandWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of publicly visible users for display on a login screen.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/User-Authentication" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<UserDto> GetUsersPublic(this IRestClient operations)
            {
                return operations.GetUsersPublicAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of publicly visible users for display on a login screen.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/User-Authentication" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserDto>> GetUsersPublicAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersPublicWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of users
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isHidden'>
            /// Optional filter by IsHidden=true or false
            /// </param>
            /// <param name='isDisabled'>
            /// Optional filter by IsDisabled=true or false
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            public static QueryResultUserDto GetUsersQuery(this IRestClient operations, bool? isHidden = default(bool?), bool? isDisabled = default(bool?), int? startIndex = default(int?), int? limit = default(int?), string nameStartsWithOrGreater = default(string))
            {
                return operations.GetUsersQueryAsync(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of users
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isHidden'>
            /// Optional filter by IsHidden=true or false
            /// </param>
            /// <param name='isDisabled'>
            /// Optional filter by IsDisabled=true or false
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultUserDto> GetUsersQueryAsync(this IRestClient operations, bool? isHidden = default(bool?), bool? isDisabled = default(bool?), int? startIndex = default(int?), int? limit = default(int?), string nameStartsWithOrGreater = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersQueryWithHttpMessagesAsync(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of users
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isHidden'>
            /// Optional filter by IsHidden=true or false
            /// </param>
            /// <param name='isDisabled'>
            /// Optional filter by IsDisabled=true or false
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            public static IList<NameIdPair> GetUsersPrefixes(this IRestClient operations, bool? isHidden = default(bool?), bool? isDisabled = default(bool?), int? startIndex = default(int?), int? limit = default(int?), string nameStartsWithOrGreater = default(string))
            {
                return operations.GetUsersPrefixesAsync(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of users
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isHidden'>
            /// Optional filter by IsHidden=true or false
            /// </param>
            /// <param name='isDisabled'>
            /// Optional filter by IsDisabled=true or false
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NameIdPair>> GetUsersPrefixesAsync(this IRestClient operations, bool? isHidden = default(bool?), bool? isDisabled = default(bool?), int? startIndex = default(int?), int? limit = default(int?), string nameStartsWithOrGreater = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersPrefixesWithHttpMessagesAsync(isHidden, isDisabled, startIndex, limit, nameStartsWithOrGreater, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a user by Id
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static UserDto GetUsersById(this IRestClient operations, string id)
            {
                return operations.GetUsersByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a user by Id
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserDto> GetUsersByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteUsersById(this IRestClient operations, string id)
            {
                operations.DeleteUsersByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUsersByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUsersByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UserDto:
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostUsersById(this IRestClient operations, UserDto body, string id)
            {
                operations.PostUsersByIdAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UserDto:
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByIdAsync(this IRestClient operations, UserDto body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByIdWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Authenticates a user
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/User-Authentication" />
            /// </summary>
            /// <remarks>
            /// Authenticate a user by nane and password. A 200 status code indicates
            /// success, while anything in the 400 or 500 range indicates failure
            /// ---
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// AuthenticateUserByName
            /// </param>
            /// <param name='xEmbyAuthorization'>
            /// The authorization header can be either named 'Authorization' or
            /// 'X-Emby-Authorization'.
            /// It must be of the following schema:
            /// Emby UserId="(guid)", Client="(string)", Device="(string)",
            /// DeviceId="(string)", Version="string", Token="(string)"
            /// Please consult the documentation for further details.
            /// </param>
            public static AuthenticationAuthenticationResult PostUsersAuthenticatebyname(this IRestClient operations, AuthenticateUserByName body, string xEmbyAuthorization)
            {
                return operations.PostUsersAuthenticatebynameAsync(body, xEmbyAuthorization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Authenticates a user
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/User-Authentication" />
            /// </summary>
            /// <remarks>
            /// Authenticate a user by nane and password. A 200 status code indicates
            /// success, while anything in the 400 or 500 range indicates failure
            /// ---
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// AuthenticateUserByName
            /// </param>
            /// <param name='xEmbyAuthorization'>
            /// The authorization header can be either named 'Authorization' or
            /// 'X-Emby-Authorization'.
            /// It must be of the following schema:
            /// Emby UserId="(guid)", Client="(string)", Device="(string)",
            /// DeviceId="(string)", Version="string", Token="(string)"
            /// Please consult the documentation for further details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticationAuthenticationResult> PostUsersAuthenticatebynameAsync(this IRestClient operations, AuthenticateUserByName body, string xEmbyAuthorization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUsersAuthenticatebynameWithHttpMessagesAsync(body, xEmbyAuthorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// CreateUserByName
            /// </param>
            public static UserDto PostUsersNew(this IRestClient operations, CreateUserByName body)
            {
                return operations.PostUsersNewAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// CreateUserByName
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserDto> PostUsersNewAsync(this IRestClient operations, CreateUserByName body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUsersNewWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Initiates the forgot password process for a local user
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// ForgotPassword
            /// </param>
            public static UsersForgotPasswordResult PostUsersForgotpassword(this IRestClient operations, ForgotPassword body)
            {
                return operations.PostUsersForgotpasswordAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initiates the forgot password process for a local user
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// ForgotPassword
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersForgotPasswordResult> PostUsersForgotpasswordAsync(this IRestClient operations, ForgotPassword body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUsersForgotpasswordWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Merges videos into a single record
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Item id list. This allows multiple, comma delimited.
            /// </param>
            public static void PostVideosMergeversions(this IRestClient operations, string ids = default(string))
            {
                operations.PostVideosMergeversionsAsync(ids).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Merges videos into a single record
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Item id list. This allows multiple, comma delimited.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostVideosMergeversionsAsync(this IRestClient operations, string ids = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostVideosMergeversionsWithHttpMessagesAsync(ids, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='playSessionId'>
            /// The play session id
            /// </param>
            public static void DeleteVideosActiveencodings(this IRestClient operations, string deviceId, string playSessionId)
            {
                operations.DeleteVideosActiveencodingsAsync(deviceId, playSessionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='playSessionId'>
            /// The play session id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteVideosActiveencodingsAsync(this IRestClient operations, string deviceId, string playSessionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteVideosActiveencodingsWithHttpMessagesAsync(deviceId, playSessionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetWebConfigurationpage(this IRestClient operations)
            {
                operations.GetWebConfigurationpageAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetWebConfigurationpageAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetWebConfigurationpageWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EmbyWebApiConfigurationPageInfo> GetWebConfigurationpages(this IRestClient operations)
            {
                return operations.GetWebConfigurationpagesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EmbyWebApiConfigurationPageInfo>> GetWebConfigurationpagesAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebConfigurationpagesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetWebStrings(this IRestClient operations)
            {
                operations.GetWebStringsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetWebStringsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetWebStringsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates an instant playlist based on a given album
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetAlbumsByIdInstantmix(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetAlbumsByIdInstantmixAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an instant playlist based on a given album
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetAlbumsByIdInstantmixAsync(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAlbumsByIdInstantmixWithHttpMessagesAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Finds albums similar to a given album.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetAlbumsByIdSimilar(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetAlbumsByIdSimilarAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Finds albums similar to a given album.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetAlbumsByIdSimilarAsync(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAlbumsByIdSimilarWithHttpMessagesAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Finds albums similar to a given album.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetArtistsByIdSimilar(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetArtistsByIdSimilarAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Finds albums similar to a given album.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetArtistsByIdSimilarAsync(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArtistsByIdSimilarWithHttpMessagesAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            public static void GetAudioByIdUniversalByContainer(this IRestClient operations, string id, string container, string deviceId = default(string), long? startTimeTicks = default(long?))
            {
                operations.GetAudioByIdUniversalByContainerAsync(id, container, deviceId, startTimeTicks).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAudioByIdUniversalByContainerAsync(this IRestClient operations, string id, string container, string deviceId = default(string), long? startTimeTicks = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAudioByIdUniversalByContainerWithHttpMessagesAsync(id, container, deviceId, startTimeTicks, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            public static void HeadAudioByIdUniversalByContainer(this IRestClient operations, string id, string container, string deviceId = default(string), long? startTimeTicks = default(long?))
            {
                operations.HeadAudioByIdUniversalByContainerAsync(id, container, deviceId, startTimeTicks).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadAudioByIdUniversalByContainerAsync(this IRestClient operations, string id, string container, string deviceId = default(string), long? startTimeTicks = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadAudioByIdUniversalByContainerWithHttpMessagesAsync(id, container, deviceId, startTimeTicks, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            public static void GetAudioByIdUniversal(this IRestClient operations, string id, string deviceId = default(string), long? startTimeTicks = default(long?))
            {
                operations.GetAudioByIdUniversalAsync(id, deviceId, startTimeTicks).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAudioByIdUniversalAsync(this IRestClient operations, string id, string deviceId = default(string), long? startTimeTicks = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAudioByIdUniversalWithHttpMessagesAsync(id, deviceId, startTimeTicks, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            public static void HeadAudioByIdUniversal(this IRestClient operations, string id, string deviceId = default(string), long? startTimeTicks = default(long?))
            {
                operations.HeadAudioByIdUniversalAsync(id, deviceId, startTimeTicks).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadAudioByIdUniversalAsync(this IRestClient operations, string id, string deviceId = default(string), long? startTimeTicks = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadAudioByIdUniversalWithHttpMessagesAsync(id, deviceId, startTimeTicks, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void GetAudioByIdStreamByContainer(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.GetAudioByIdStreamByContainerAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAudioByIdStreamByContainerAsync(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAudioByIdStreamByContainerWithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void HeadAudioByIdStreamByContainer(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.HeadAudioByIdStreamByContainerAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadAudioByIdStreamByContainerAsync(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadAudioByIdStreamByContainerWithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void GetAudioByIdStream(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.GetAudioByIdStreamAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAudioByIdStreamAsync(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAudioByIdStreamWithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void HeadAudioByIdStream(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.HeadAudioByIdStreamAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an audio stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadAudioByIdStreamAsync(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadAudioByIdStreamWithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an audio stream using HTTP live streaming.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void GetAudioByIdMasterM3u8(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.GetAudioByIdMasterM3u8Async(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an audio stream using HTTP live streaming.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAudioByIdMasterM3u8Async(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAudioByIdMasterM3u8WithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an audio stream using HTTP live streaming.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void HeadAudioByIdMasterM3u8(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.HeadAudioByIdMasterM3u8Async(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an audio stream using HTTP live streaming.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadAudioByIdMasterM3u8Async(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadAudioByIdMasterM3u8WithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an audio stream using HTTP live streaming.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void GetAudioByIdMainM3u8(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.GetAudioByIdMainM3u8Async(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an audio stream using HTTP live streaming.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAudioByIdMainM3u8Async(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAudioByIdMainM3u8WithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// Auth Key
            /// </param>
            public static void DeleteAuthKeysByKey(this IRestClient operations, string key)
            {
                operations.DeleteAuthKeysByKeyAsync(key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// Auth Key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAuthKeysByKeyAsync(this IRestClient operations, string key, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAuthKeysByKeyWithHttpMessagesAsync(key, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds items to a collection
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Item id, comma delimited
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostCollectionsByIdItems(this IRestClient operations, string ids, string id)
            {
                operations.PostCollectionsByIdItemsAsync(ids, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds items to a collection
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Item id, comma delimited
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostCollectionsByIdItemsAsync(this IRestClient operations, string ids, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostCollectionsByIdItemsWithHttpMessagesAsync(ids, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes items from a collection
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Item id, comma delimited
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteCollectionsByIdItems(this IRestClient operations, string ids, string id)
            {
                operations.DeleteCollectionsByIdItemsAsync(ids, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes items from a collection
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Item id, comma delimited
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCollectionsByIdItemsAsync(this IRestClient operations, string ids, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCollectionsByIdItemsWithHttpMessagesAsync(ids, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets dlna server info
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            public static void GetDlnaByUuidDescriptionXml(this IRestClient operations, string uuId)
            {
                operations.GetDlnaByUuidDescriptionXmlAsync(uuId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets dlna server info
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDlnaByUuidDescriptionXmlAsync(this IRestClient operations, string uuId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetDlnaByUuidDescriptionXmlWithHttpMessagesAsync(uuId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets dlna server info
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            public static void GetDlnaByUuidDescription(this IRestClient operations, string uuId)
            {
                operations.GetDlnaByUuidDescriptionAsync(uuId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets dlna server info
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDlnaByUuidDescriptionAsync(this IRestClient operations, string uuId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetDlnaByUuidDescriptionWithHttpMessagesAsync(uuId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a server icon
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filename'>
            /// The icon filename
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            public static void GetDlnaIconsByFilename(this IRestClient operations, string filename, string uuId = default(string))
            {
                operations.GetDlnaIconsByFilenameAsync(filename, uuId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a server icon
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filename'>
            /// The icon filename
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDlnaIconsByFilenameAsync(this IRestClient operations, string filename, string uuId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetDlnaIconsByFilenameWithHttpMessagesAsync(filename, uuId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a single profile
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Profile Id
            /// </param>
            public static EmbyDlnaProfilesDlnaProfile GetDlnaProfilesById(this IRestClient operations, string id)
            {
                return operations.GetDlnaProfilesByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single profile
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Profile Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbyDlnaProfilesDlnaProfile> GetDlnaProfilesByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDlnaProfilesByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a profile
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Profile Id
            /// </param>
            public static void DeleteDlnaProfilesById(this IRestClient operations, string id)
            {
                operations.DeleteDlnaProfilesByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a profile
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Profile Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDlnaProfilesByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDlnaProfilesByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a profile
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// DlnaProfile:
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostDlnaProfilesById(this IRestClient operations, EmbyDlnaProfilesDlnaProfile body, string id)
            {
                operations.PostDlnaProfilesByIdAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a profile
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// DlnaProfile:
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostDlnaProfilesByIdAsync(this IRestClient operations, EmbyDlnaProfilesDlnaProfile body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostDlnaProfilesByIdWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the default profile
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EmbyDlnaProfilesDlnaProfile GetDlnaProfilesDefault(this IRestClient operations)
            {
                return operations.GetDlnaProfilesDefaultAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the default profile
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbyDlnaProfilesDlnaProfile> GetDlnaProfilesDefaultAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDlnaProfilesDefaultWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets details about available video encoders and decoders
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<MediaEncodingCodecsVideoCodecsVideoCodecBase> GetEncodingCodecinformationVideo(this IRestClient operations)
            {
                return operations.GetEncodingCodecinformationVideoAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details about available video encoders and decoders
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MediaEncodingCodecsVideoCodecsVideoCodecBase>> GetEncodingCodecinformationVideoAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEncodingCodecinformationVideoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets default codec configurations
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ConfigurationCodecConfiguration> GetEncodingCodecconfigurationDefaults(this IRestClient operations)
            {
                return operations.GetEncodingCodecconfigurationDefaultsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets default codec configurations
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConfigurationCodecConfiguration>> GetEncodingCodecconfigurationDefaultsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEncodingCodecconfigurationDefaultsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Finds games similar to a given game.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetGamesByIdSimilar(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetGamesByIdSimilarAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Finds games similar to a given game.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetGamesByIdSimilarAsync(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGamesByIdSimilarWithHttpMessagesAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets external id infos for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static IList<ExternalIdInfo> GetItemsByIdExternalidinfos(this IRestClient operations, string id)
            {
                return operations.GetItemsByIdExternalidinfosAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets external id infos for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ExternalIdInfo>> GetItemsByIdExternalidinfosAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdExternalidinfosWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            public static IList<RemoteSearchResult> PostItemsRemotesearchTrailer(this IRestClient operations, ProvidersRemoteSearchQueryProvidersTrailerInfo body)
            {
                return operations.PostItemsRemotesearchTrailerAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RemoteSearchResult>> PostItemsRemotesearchTrailerAsync(this IRestClient operations, ProvidersRemoteSearchQueryProvidersTrailerInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostItemsRemotesearchTrailerWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            public static IList<RemoteSearchResult> PostItemsRemotesearchBook(this IRestClient operations, ProvidersRemoteSearchQueryProvidersBookInfo body)
            {
                return operations.PostItemsRemotesearchBookAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RemoteSearchResult>> PostItemsRemotesearchBookAsync(this IRestClient operations, ProvidersRemoteSearchQueryProvidersBookInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostItemsRemotesearchBookWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            public static IList<RemoteSearchResult> PostItemsRemotesearchMovie(this IRestClient operations, ProvidersRemoteSearchQueryProvidersMovieInfo body)
            {
                return operations.PostItemsRemotesearchMovieAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RemoteSearchResult>> PostItemsRemotesearchMovieAsync(this IRestClient operations, ProvidersRemoteSearchQueryProvidersMovieInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostItemsRemotesearchMovieWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            public static IList<RemoteSearchResult> PostItemsRemotesearchSeries(this IRestClient operations, ProvidersRemoteSearchQueryProvidersSeriesInfo body)
            {
                return operations.PostItemsRemotesearchSeriesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RemoteSearchResult>> PostItemsRemotesearchSeriesAsync(this IRestClient operations, ProvidersRemoteSearchQueryProvidersSeriesInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostItemsRemotesearchSeriesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            public static IList<RemoteSearchResult> PostItemsRemotesearchGame(this IRestClient operations, ProvidersRemoteSearchQueryProvidersGameInfo body)
            {
                return operations.PostItemsRemotesearchGameAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RemoteSearchResult>> PostItemsRemotesearchGameAsync(this IRestClient operations, ProvidersRemoteSearchQueryProvidersGameInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostItemsRemotesearchGameWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            public static IList<RemoteSearchResult> PostItemsRemotesearchBoxset(this IRestClient operations, ProvidersRemoteSearchQueryProvidersItemLookupInfo body)
            {
                return operations.PostItemsRemotesearchBoxsetAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RemoteSearchResult>> PostItemsRemotesearchBoxsetAsync(this IRestClient operations, ProvidersRemoteSearchQueryProvidersItemLookupInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostItemsRemotesearchBoxsetWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            public static IList<RemoteSearchResult> PostItemsRemotesearchMusicvideo(this IRestClient operations, ProvidersRemoteSearchQueryProvidersMusicVideoInfo body)
            {
                return operations.PostItemsRemotesearchMusicvideoAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RemoteSearchResult>> PostItemsRemotesearchMusicvideoAsync(this IRestClient operations, ProvidersRemoteSearchQueryProvidersMusicVideoInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostItemsRemotesearchMusicvideoWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            public static IList<RemoteSearchResult> PostItemsRemotesearchPerson(this IRestClient operations, ProvidersRemoteSearchQueryProvidersPersonLookupInfo body)
            {
                return operations.PostItemsRemotesearchPersonAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RemoteSearchResult>> PostItemsRemotesearchPersonAsync(this IRestClient operations, ProvidersRemoteSearchQueryProvidersPersonLookupInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostItemsRemotesearchPersonWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            public static IList<RemoteSearchResult> PostItemsRemotesearchMusicalbum(this IRestClient operations, ProvidersRemoteSearchQueryProvidersAlbumInfo body)
            {
                return operations.PostItemsRemotesearchMusicalbumAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RemoteSearchResult>> PostItemsRemotesearchMusicalbumAsync(this IRestClient operations, ProvidersRemoteSearchQueryProvidersAlbumInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostItemsRemotesearchMusicalbumWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            public static IList<RemoteSearchResult> PostItemsRemotesearchMusicartist(this IRestClient operations, ProvidersRemoteSearchQueryProvidersArtistInfo body)
            {
                return operations.PostItemsRemotesearchMusicartistAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchQuery`1:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RemoteSearchResult>> PostItemsRemotesearchMusicartistAsync(this IRestClient operations, ProvidersRemoteSearchQueryProvidersArtistInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostItemsRemotesearchMusicartistWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a remote image
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='imageUrl'>
            /// The image url
            /// </param>
            /// <param name='providerName'>
            /// </param>
            public static void GetItemsRemotesearchImage(this IRestClient operations, string imageUrl, string providerName)
            {
                operations.GetItemsRemotesearchImageAsync(imageUrl, providerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a remote image
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='imageUrl'>
            /// The image url
            /// </param>
            /// <param name='providerName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetItemsRemotesearchImageAsync(this IRestClient operations, string imageUrl, string providerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetItemsRemotesearchImageWithHttpMessagesAsync(imageUrl, providerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Resets metadata for one or more items
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemIds'>
            /// The item ids
            /// </param>
            public static void PostItemsMetadataReset(this IRestClient operations, string itemIds)
            {
                operations.PostItemsMetadataResetAsync(itemIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets metadata for one or more items
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemIds'>
            /// The item ids
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsMetadataResetAsync(this IRestClient operations, string itemIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsMetadataResetWithHttpMessagesAsync(itemIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Refreshes metadata for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='recursive'>
            /// Indicates if the refresh should occur recursively.
            /// </param>
            /// <param name='metadataRefreshMode'>
            /// Specifies the metadata refresh mode. Possible values include:
            /// 'ValidationOnly', 'Default', 'FullRefresh'
            /// </param>
            /// <param name='imageRefreshMode'>
            /// Specifies the image refresh mode. Possible values include:
            /// 'ValidationOnly', 'Default', 'FullRefresh'
            /// </param>
            /// <param name='replaceAllMetadata'>
            /// Determines if metadata should be replaced. Only applicable if mode is
            /// FullRefresh
            /// </param>
            /// <param name='replaceAllImages'>
            /// Determines if images should be replaced. Only applicable if mode is
            /// FullRefresh
            /// </param>
            public static void PostItemsByIdRefresh(this IRestClient operations, string id, bool? recursive = default(bool?), string metadataRefreshMode = default(string), string imageRefreshMode = default(string), bool? replaceAllMetadata = default(bool?), bool? replaceAllImages = default(bool?))
            {
                operations.PostItemsByIdRefreshAsync(id, recursive, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Refreshes metadata for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='recursive'>
            /// Indicates if the refresh should occur recursively.
            /// </param>
            /// <param name='metadataRefreshMode'>
            /// Specifies the metadata refresh mode. Possible values include:
            /// 'ValidationOnly', 'Default', 'FullRefresh'
            /// </param>
            /// <param name='imageRefreshMode'>
            /// Specifies the image refresh mode. Possible values include:
            /// 'ValidationOnly', 'Default', 'FullRefresh'
            /// </param>
            /// <param name='replaceAllMetadata'>
            /// Determines if metadata should be replaced. Only applicable if mode is
            /// FullRefresh
            /// </param>
            /// <param name='replaceAllImages'>
            /// Determines if images should be replaced. Only applicable if mode is
            /// FullRefresh
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByIdRefreshAsync(this IRestClient operations, string id, bool? recursive = default(bool?), string metadataRefreshMode = default(string), string imageRefreshMode = default(string), bool? replaceAllMetadata = default(bool?), bool? replaceAllImages = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByIdRefreshWithHttpMessagesAsync(id, recursive, metadataRefreshMode, imageRefreshMode, replaceAllMetadata, replaceAllImages, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets metadata editor info for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemId'>
            /// The id of the item
            /// </param>
            public static MetadataEditorInfo GetItemsByItemidMetadataeditor(this IRestClient operations, string itemId)
            {
                return operations.GetItemsByItemidMetadataeditorAsync(itemId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets metadata editor info for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemId'>
            /// The id of the item
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetadataEditorInfo> GetItemsByItemidMetadataeditorAsync(this IRestClient operations, string itemId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByItemidMetadataeditorWithHttpMessagesAsync(itemId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Makes an item public to all users
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static void PostItemsByIdMakepublic(this IRestClient operations, string id)
            {
                operations.PostItemsByIdMakepublicAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Makes an item public to all users
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByIdMakepublicAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByIdMakepublicWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Makes an item private
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static void PostItemsByIdMakeprivate(this IRestClient operations, string id)
            {
                operations.PostItemsByIdMakeprivateAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Makes an item private
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByIdMakeprivateAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByIdMakeprivateWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates an instant playlist based on a given item
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetItemsByIdInstantmix(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetItemsByIdInstantmixAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an instant playlist based on a given item
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetItemsByIdInstantmixAsync(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdInstantmixWithHttpMessagesAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets delete info for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static LibraryDeleteInfo GetItemsByIdDeleteinfo(this IRestClient operations, string id)
            {
                return operations.GetItemsByIdDeleteinfoAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets delete info for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LibraryDeleteInfo> GetItemsByIdDeleteinfoAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdDeleteinfoWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets similar items
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetItemsByIdSimilar(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetItemsByIdSimilarAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets similar items
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetItemsByIdSimilarAsync(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdSimilarWithHttpMessagesAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Downloads item media
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static void GetItemsByIdDownload(this IRestClient operations, string id)
            {
                operations.GetItemsByIdDownloadAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Downloads item media
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetItemsByIdDownloadAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetItemsByIdDownloadWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the original file of an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static void GetItemsByIdFile(this IRestClient operations, string id)
            {
                operations.GetItemsByIdFileAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the original file of an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetItemsByIdFileAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetItemsByIdFileWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all parents of an item
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            public static IList<BaseItemDto> GetItemsByIdAncestors(this IRestClient operations, string id, string userId = default(string))
            {
                return operations.GetItemsByIdAncestorsAsync(id, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all parents of an item
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BaseItemDto>> GetItemsByIdAncestorsAsync(this IRestClient operations, string id, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdAncestorsWithHttpMessagesAsync(id, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets critic reviews for an item
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            public static QueryResultBaseItemDto GetItemsByIdCriticreviews(this IRestClient operations, string id, int? startIndex = default(int?), int? limit = default(int?))
            {
                return operations.GetItemsByIdCriticreviewsAsync(id, startIndex, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets critic reviews for an item
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetItemsByIdCriticreviewsAsync(this IRestClient operations, string id, int? startIndex = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdCriticreviewsWithHttpMessagesAsync(id, startIndex, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an item from the library and file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static void PostItemsByIdDelete(this IRestClient operations, string id)
            {
                operations.PostItemsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an item from the library and file system
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByIdDeleteAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets theme videos and songs for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='inheritFromParent'>
            /// Determines whether or not parent items should be searched for theme media.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static AllThemeMediaResult GetItemsByIdThememedia(this IRestClient operations, string id, string userId = default(string), bool? inheritFromParent = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), string fields = default(string))
            {
                return operations.GetItemsByIdThememediaAsync(id, userId, inheritFromParent, enableImages, imageTypeLimit, enableImageTypes, enableUserData, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets theme videos and songs for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='inheritFromParent'>
            /// Determines whether or not parent items should be searched for theme media.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AllThemeMediaResult> GetItemsByIdThememediaAsync(this IRestClient operations, string id, string userId = default(string), bool? inheritFromParent = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdThememediaWithHttpMessagesAsync(id, userId, inheritFromParent, enableImages, imageTypeLimit, enableImageTypes, enableUserData, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets theme songs for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='inheritFromParent'>
            /// Determines whether or not parent items should be searched for theme media.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static ThemeMediaResult GetItemsByIdThemesongs(this IRestClient operations, string id, string userId = default(string), bool? inheritFromParent = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), string fields = default(string))
            {
                return operations.GetItemsByIdThemesongsAsync(id, userId, inheritFromParent, enableImages, imageTypeLimit, enableImageTypes, enableUserData, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets theme songs for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='inheritFromParent'>
            /// Determines whether or not parent items should be searched for theme media.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThemeMediaResult> GetItemsByIdThemesongsAsync(this IRestClient operations, string id, string userId = default(string), bool? inheritFromParent = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdThemesongsWithHttpMessagesAsync(id, userId, inheritFromParent, enableImages, imageTypeLimit, enableImageTypes, enableUserData, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets theme videos for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='inheritFromParent'>
            /// Determines whether or not parent items should be searched for theme media.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static ThemeMediaResult GetItemsByIdThemevideos(this IRestClient operations, string id, string userId = default(string), bool? inheritFromParent = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), string fields = default(string))
            {
                return operations.GetItemsByIdThemevideosAsync(id, userId, inheritFromParent, enableImages, imageTypeLimit, enableImageTypes, enableUserData, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets theme videos for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='inheritFromParent'>
            /// Determines whether or not parent items should be searched for theme media.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThemeMediaResult> GetItemsByIdThemevideosAsync(this IRestClient operations, string id, string userId = default(string), bool? inheritFromParent = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdThemevideosWithHttpMessagesAsync(id, userId, inheritFromParent, enableImages, imageTypeLimit, enableImageTypes, enableUserData, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about an item's images
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static IList<ImageInfo> GetItemsByIdImages(this IRestClient operations, string id)
            {
                return operations.GetItemsByIdImagesAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about an item's images
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ImageInfo>> GetItemsByIdImagesAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdImagesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets available remote images for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// The image type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='providerName'>
            /// Optional. The image provider to use
            /// </param>
            /// <param name='includeAllLanguages'>
            /// Optional.
            /// </param>
            public static RemoteImageResult GetItemsByIdRemoteimages(this IRestClient operations, string id, string type = default(string), int? startIndex = default(int?), int? limit = default(int?), string providerName = default(string), bool? includeAllLanguages = default(bool?))
            {
                return operations.GetItemsByIdRemoteimagesAsync(id, type, startIndex, limit, providerName, includeAllLanguages).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available remote images for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// The image type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='providerName'>
            /// Optional. The image provider to use
            /// </param>
            /// <param name='includeAllLanguages'>
            /// Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RemoteImageResult> GetItemsByIdRemoteimagesAsync(this IRestClient operations, string id, string type = default(string), int? startIndex = default(int?), int? limit = default(int?), string providerName = default(string), bool? includeAllLanguages = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdRemoteimagesWithHttpMessagesAsync(id, type, startIndex, limit, providerName, includeAllLanguages, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='width'>
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static RokuMetadataApiThumbnailSetInfo GetItemsByIdThumbnailset(this IRestClient operations, int width, string id)
            {
                return operations.GetItemsByIdThumbnailsetAsync(width, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='width'>
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RokuMetadataApiThumbnailSetInfo> GetItemsByIdThumbnailsetAsync(this IRestClient operations, int width, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdThumbnailsetWithHttpMessagesAsync(width, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets live playback media info for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            public static MediaInfoPlaybackInfoResponse GetItemsByIdPlaybackinfo(this IRestClient operations, string id, string userId)
            {
                return operations.GetItemsByIdPlaybackinfoAsync(id, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets live playback media info for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaInfoPlaybackInfoResponse> GetItemsByIdPlaybackinfoAsync(this IRestClient operations, string id, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdPlaybackinfoWithHttpMessagesAsync(id, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets live playback media info for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PlaybackInfoRequest:
            /// </param>
            /// <param name='id'>
            /// </param>
            public static MediaInfoPlaybackInfoResponse PostItemsByIdPlaybackinfo(this IRestClient operations, MediaInfoPlaybackInfoRequest body, string id)
            {
                return operations.PostItemsByIdPlaybackinfoAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets live playback media info for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PlaybackInfoRequest:
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaInfoPlaybackInfoResponse> PostItemsByIdPlaybackinfoAsync(this IRestClient operations, MediaInfoPlaybackInfoRequest body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostItemsByIdPlaybackinfoWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deprecated. Use /Library/Media/Updated
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostLibrarySeriesAdded(this IRestClient operations)
            {
                operations.PostLibrarySeriesAddedAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deprecated. Use /Library/Media/Updated
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLibrarySeriesAddedAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLibrarySeriesAddedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deprecated. Use /Library/Media/Updated
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostLibrarySeriesUpdated(this IRestClient operations)
            {
                operations.PostLibrarySeriesUpdatedAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deprecated. Use /Library/Media/Updated
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLibrarySeriesUpdatedAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLibrarySeriesUpdatedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reports that new movies have been added by an external source
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PostUpdatedMedia
            /// </param>
            public static void PostLibraryMediaUpdated(this IRestClient operations, LibraryPostUpdatedMedia body)
            {
                operations.PostLibraryMediaUpdatedAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reports that new movies have been added by an external source
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PostUpdatedMedia
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLibraryMediaUpdatedAsync(this IRestClient operations, LibraryPostUpdatedMedia body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLibraryMediaUpdatedWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deprecated. Use /Library/Media/Updated
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostLibraryMoviesAdded(this IRestClient operations)
            {
                operations.PostLibraryMoviesAddedAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deprecated. Use /Library/Media/Updated
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLibraryMoviesAddedAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLibraryMoviesAddedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deprecated. Use /Library/Media/Updated
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void PostLibraryMoviesUpdated(this IRestClient operations)
            {
                operations.PostLibraryMoviesUpdatedAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deprecated. Use /Library/Media/Updated
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLibraryMoviesUpdatedAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLibraryMoviesUpdatedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            public static QueryResultVirtualFolderInfo GetLibraryVirtualfoldersQuery(this IRestClient operations, int? startIndex = default(int?), int? limit = default(int?))
            {
                return operations.GetLibraryVirtualfoldersQueryAsync(startIndex, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultVirtualFolderInfo> GetLibraryVirtualfoldersQueryAsync(this IRestClient operations, int? startIndex = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLibraryVirtualfoldersQueryWithHttpMessagesAsync(startIndex, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UpdateLibraryOptions
            /// </param>
            public static void PostLibraryVirtualfoldersLibraryoptions(this IRestClient operations, LibraryUpdateLibraryOptions body)
            {
                operations.PostLibraryVirtualfoldersLibraryoptionsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UpdateLibraryOptions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLibraryVirtualfoldersLibraryoptionsAsync(this IRestClient operations, LibraryUpdateLibraryOptions body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLibraryVirtualfoldersLibraryoptionsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RenameVirtualFolder
            /// </param>
            public static void PostLibraryVirtualfoldersName(this IRestClient operations, LibraryRenameVirtualFolder body)
            {
                operations.PostLibraryVirtualfoldersNameAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RenameVirtualFolder
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLibraryVirtualfoldersNameAsync(this IRestClient operations, LibraryRenameVirtualFolder body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLibraryVirtualfoldersNameWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoveVirtualFolder
            /// </param>
            public static void PostLibraryVirtualfoldersDelete(this IRestClient operations, LibraryRemoveVirtualFolder body)
            {
                operations.PostLibraryVirtualfoldersDeleteAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoveVirtualFolder
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLibraryVirtualfoldersDeleteAsync(this IRestClient operations, LibraryRemoveVirtualFolder body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLibraryVirtualfoldersDeleteWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// AddMediaPath
            /// </param>
            public static void PostLibraryVirtualfoldersPaths(this IRestClient operations, LibraryAddMediaPath body)
            {
                operations.PostLibraryVirtualfoldersPathsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// AddMediaPath
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLibraryVirtualfoldersPathsAsync(this IRestClient operations, LibraryAddMediaPath body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLibraryVirtualfoldersPathsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeleteLibraryVirtualfoldersPaths(this IRestClient operations)
            {
                operations.DeleteLibraryVirtualfoldersPathsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteLibraryVirtualfoldersPathsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteLibraryVirtualfoldersPathsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a live tv program
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static BaseItemDto GetLivetvProgramsById(this IRestClient operations, string id)
            {
                return operations.GetLivetvProgramsByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a live tv program
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseItemDto> GetLivetvProgramsByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvProgramsByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<NameIdPair> GetLivetvTunerhostsTypes(this IRestClient operations)
            {
                return operations.GetLivetvTunerhostsTypesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NameIdPair>> GetLivetvTunerhostsTypesAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvTunerhostsTypesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the channel management list
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Name,
            /// StartDate
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            public static QueryResultEmbyLiveTVChannelManagementInfo GetLivetvManageChannels(this IRestClient operations, int? startIndex = default(int?), int? limit = default(int?), string sortBy = default(string), string sortOrder = default(string))
            {
                return operations.GetLivetvManageChannelsAsync(startIndex, limit, sortBy, sortOrder).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the channel management list
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Name,
            /// StartDate
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultEmbyLiveTVChannelManagementInfo> GetLivetvManageChannelsAsync(this IRestClient operations, int? startIndex = default(int?), int? limit = default(int?), string sortBy = default(string), string sortOrder = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvManageChannelsWithHttpMessagesAsync(startIndex, limit, sortBy, sortOrder, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets live tv channel tag prefixes
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static IList<LiveTVApiTagItem> GetLivetvChanneltagsPrefixes(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetLivetvChanneltagsPrefixesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets live tv channel tag prefixes
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LiveTVApiTagItem>> GetLivetvChanneltagsPrefixesAsync(this IRestClient operations, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvChanneltagsPrefixesWithHttpMessagesAsync(artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets recording folders
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Optional filter by user and attach user data.
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            public static IList<BaseItemDto> GetLivetvRecordingsFolders(this IRestClient operations, string userId = default(string), string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?))
            {
                return operations.GetLivetvRecordingsFoldersAsync(userId, fields, enableImages, imageTypeLimit, enableImageTypes, enableUserData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets recording folders
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Optional filter by user and attach user data.
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BaseItemDto>> GetLivetvRecordingsFoldersAsync(this IRestClient operations, string userId = default(string), string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvRecordingsFoldersWithHttpMessagesAsync(userId, fields, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<LiveTvTunerHostInfo> GetLivetvTunersDiscvover(this IRestClient operations)
            {
                return operations.GetLivetvTunersDiscvoverAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LiveTvTunerHostInfo>> GetLivetvTunersDiscvoverAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvTunersDiscvoverWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LiveTvListingsProviderInfo GetLivetvListingprovidersDefault(this IRestClient operations)
            {
                return operations.GetLivetvListingprovidersDefaultAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveTvListingsProviderInfo> GetLivetvListingprovidersDefaultAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvListingprovidersDefaultWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a listing provider
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Provider id
            /// </param>
            public static void PostLivetvListingprovidersDelete(this IRestClient operations, string id = default(string))
            {
                operations.PostLivetvListingprovidersDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a listing provider
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Provider id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivetvListingprovidersDeleteAsync(this IRestClient operations, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivetvListingprovidersDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a tuner host
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Tuner host id
            /// </param>
            public static void PostLivetvTunerhostsDelete(this IRestClient operations, string id = default(string))
            {
                operations.PostLivetvTunerhostsDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a tuner host
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Tuner host id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivetvTunerhostsDeleteAsync(this IRestClient operations, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivetvTunerhostsDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets available lineups
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Provider id
            /// </param>
            /// <param name='type'>
            /// Provider Type
            /// </param>
            /// <param name='location'>
            /// Location
            /// </param>
            /// <param name='country'>
            /// Country
            /// </param>
            public static IList<NameIdPair> GetLivetvListingprovidersLineups(this IRestClient operations, string id = default(string), string type = default(string), string location = default(string), string country = default(string))
            {
                return operations.GetLivetvListingprovidersLineupsAsync(id, type, location, country).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available lineups
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Provider id
            /// </param>
            /// <param name='type'>
            /// Provider Type
            /// </param>
            /// <param name='location'>
            /// Location
            /// </param>
            /// <param name='country'>
            /// Country
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NameIdPair>> GetLivetvListingprovidersLineupsAsync(this IRestClient operations, string id = default(string), string type = default(string), string location = default(string), string country = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvListingprovidersLineupsWithHttpMessagesAsync(id, type, location, country, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a live tv channel
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Channel Id
            /// </param>
            /// <param name='userId'>
            /// Optional attach user data.
            /// </param>
            public static BaseItemDto GetLivetvChannelsById(this IRestClient operations, string id, string userId = default(string))
            {
                return operations.GetLivetvChannelsByIdAsync(id, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a live tv channel
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Channel Id
            /// </param>
            /// <param name='userId'>
            /// Optional attach user data.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseItemDto> GetLivetvChannelsByIdAsync(this IRestClient operations, string id, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvChannelsByIdWithHttpMessagesAsync(id, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets available live tv epgs..
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Optional filter by user id.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='isAiring'>
            /// Optional. Filter by programs that are currently airing, or not.
            /// </param>
            /// <param name='hasAired'>
            /// Optional. Filter by programs that have completed airing, or not.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='genreIds'>
            /// The genres to return guide information for.
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            public static QueryResultBaseItemDto GetLivetvProgramsRecommended(this IRestClient operations, string userId = default(string), int? limit = default(int?), bool? isAiring = default(bool?), bool? hasAired = default(bool?), bool? isSeries = default(bool?), bool? isMovie = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string genreIds = default(string), string fields = default(string), bool? enableUserData = default(bool?))
            {
                return operations.GetLivetvProgramsRecommendedAsync(userId, limit, isAiring, hasAired, isSeries, isMovie, isNews, isKids, isSports, enableImages, imageTypeLimit, enableImageTypes, genreIds, fields, enableUserData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available live tv epgs..
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// Optional filter by user id.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='isAiring'>
            /// Optional. Filter by programs that are currently airing, or not.
            /// </param>
            /// <param name='hasAired'>
            /// Optional. Filter by programs that have completed airing, or not.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='genreIds'>
            /// The genres to return guide information for.
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetLivetvProgramsRecommendedAsync(this IRestClient operations, string userId = default(string), int? limit = default(int?), bool? isAiring = default(bool?), bool? hasAired = default(bool?), bool? isSeries = default(bool?), bool? isMovie = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string genreIds = default(string), string fields = default(string), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvProgramsRecommendedWithHttpMessagesAsync(userId, limit, isAiring, hasAired, isSeries, isMovie, isNews, isKids, isSports, enableImages, imageTypeLimit, enableImageTypes, genreIds, fields, enableUserData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets live tv recordings
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static QueryResultBaseItemDto GetLivetvRecordingsSeries(this IRestClient operations)
            {
                return operations.GetLivetvRecordingsSeriesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets live tv recordings
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetLivetvRecordingsSeriesAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvRecordingsSeriesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a live tv recording
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Recording Id
            /// </param>
            /// <param name='userId'>
            /// Optional attach user data.
            /// </param>
            public static BaseItemDto GetLivetvRecordingsById(this IRestClient operations, string id, string userId = default(string))
            {
                return operations.GetLivetvRecordingsByIdAsync(id, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a live tv recording
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Recording Id
            /// </param>
            /// <param name='userId'>
            /// Optional attach user data.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseItemDto> GetLivetvRecordingsByIdAsync(this IRestClient operations, string id, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvRecordingsByIdWithHttpMessagesAsync(id, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a live tv recording
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Recording Id
            /// </param>
            public static void DeleteLivetvRecordingsById(this IRestClient operations, string id)
            {
                operations.DeleteLivetvRecordingsByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a live tv recording
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Recording Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteLivetvRecordingsByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteLivetvRecordingsByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a live tv timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timer Id
            /// </param>
            public static LiveTvTimerInfoDto GetLivetvTimersById(this IRestClient operations, string id)
            {
                return operations.GetLivetvTimersByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a live tv timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timer Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveTvTimerInfoDto> GetLivetvTimersByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvTimersByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a live tv timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timer Id
            /// </param>
            public static void DeleteLivetvTimersById(this IRestClient operations, string id)
            {
                operations.DeleteLivetvTimersByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a live tv timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timer Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteLivetvTimersByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteLivetvTimersByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a live tv timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// TimerInfoDto:
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostLivetvTimersById(this IRestClient operations, LiveTvTimerInfoDto body, string id)
            {
                operations.PostLivetvTimersByIdAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a live tv timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// TimerInfoDto:
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivetvTimersByIdAsync(this IRestClient operations, LiveTvTimerInfoDto body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivetvTimersByIdWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a live tv series timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timer Id
            /// </param>
            public static LiveTvTimerInfoDto GetLivetvSeriestimersById(this IRestClient operations, string id)
            {
                return operations.GetLivetvSeriestimersByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a live tv series timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timer Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveTvTimerInfoDto> GetLivetvSeriestimersByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvSeriestimersByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a live tv series timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timer Id
            /// </param>
            public static void DeleteLivetvSeriestimersById(this IRestClient operations, string id)
            {
                operations.DeleteLivetvSeriestimersByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a live tv series timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timer Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteLivetvSeriestimersByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteLivetvSeriestimersByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a live tv series timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SeriesTimerInfo:
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostLivetvSeriestimersById(this IRestClient operations, LiveTvSeriesTimerInfo body, string id)
            {
                operations.PostLivetvSeriestimersByIdAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a live tv series timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SeriesTimerInfo:
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivetvSeriestimersByIdAsync(this IRestClient operations, LiveTvSeriesTimerInfo body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivetvSeriestimersByIdWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets default values for a new timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// Optional, to attach default values based on a program.
            /// </param>
            public static LiveTvSeriesTimerInfoDto GetLivetvTimersDefaults(this IRestClient operations, string programId = default(string))
            {
                return operations.GetLivetvTimersDefaultsAsync(programId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets default values for a new timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='programId'>
            /// Optional, to attach default values based on a program.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveTvSeriesTimerInfoDto> GetLivetvTimersDefaultsAsync(this IRestClient operations, string programId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvTimersDefaultsWithHttpMessagesAsync(programId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets live tv recording groups
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static QueryResultBaseItemDto GetLivetvRecordingsGroups(this IRestClient operations)
            {
                return operations.GetLivetvRecordingsGroupsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets live tv recording groups
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetLivetvRecordingsGroupsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvRecordingsGroupsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets listing provider
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<LiveTVApiListingProviderTypeInfo> GetLivetvListingprovidersAvailable(this IRestClient operations)
            {
                return operations.GetLivetvListingprovidersAvailableAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets listing provider
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LiveTVApiListingProviderTypeInfo>> GetLivetvListingprovidersAvailableAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvListingprovidersAvailableWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Finds movies and trailers similar to a given movie.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetMoviesByIdSimilar(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetMoviesByIdSimilarAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Finds movies and trailers similar to a given movie.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetMoviesByIdSimilarAsync(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMoviesByIdSimilarWithHttpMessagesAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an instant playlist based on a music genre
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The genre name
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetMusicgenresByNameInstantmix(this IRestClient operations, string name, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetMusicgenresByNameInstantmixAsync(name, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an instant playlist based on a music genre
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The genre name
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetMusicgenresByNameInstantmixAsync(this IRestClient operations, string name, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMusicgenresByNameInstantmixWithHttpMessagesAsync(name, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a test notification
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UserNotificationInfo:
            /// </param>
            public static void PostNotificationsServicesTest(this IRestClient operations, EmbyNotificationsUserNotificationInfo body)
            {
                operations.PostNotificationsServicesTestAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a test notification
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UserNotificationInfo:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostNotificationsServicesTestAsync(this IRestClient operations, EmbyNotificationsUserNotificationInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostNotificationsServicesTestWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets default notification info
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static EmbyNotificationsUserNotificationInfo GetNotificationsServicesDefaults(this IRestClient operations)
            {
                return operations.GetNotificationsServicesDefaultsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets default notification info
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbyNotificationsUserNotificationInfo> GetNotificationsServicesDefaultsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotificationsServicesDefaultsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Installs a package
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Package name
            /// </param>
            /// <param name='assemblyGuid'>
            /// Guid of the associated assembly
            /// </param>
            /// <param name='version'>
            /// Optional version. Defaults to latest version.
            /// </param>
            /// <param name='updateClass'>
            /// Optional update class (Dev, Beta, Release). Defaults to Release. Possible
            /// values include: 'Release', 'Beta', 'Dev'
            /// </param>
            public static void PostPackagesInstalledByName(this IRestClient operations, string name, string assemblyGuid = default(string), string version = default(string), string updateClass = default(string))
            {
                operations.PostPackagesInstalledByNameAsync(name, assemblyGuid, version, updateClass).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Installs a package
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Package name
            /// </param>
            /// <param name='assemblyGuid'>
            /// Guid of the associated assembly
            /// </param>
            /// <param name='version'>
            /// Optional version. Defaults to latest version.
            /// </param>
            /// <param name='updateClass'>
            /// Optional update class (Dev, Beta, Release). Defaults to Release. Possible
            /// values include: 'Release', 'Beta', 'Dev'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostPackagesInstalledByNameAsync(this IRestClient operations, string name, string assemblyGuid = default(string), string version = default(string), string updateClass = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostPackagesInstalledByNameWithHttpMessagesAsync(name, assemblyGuid, version, updateClass, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancels a package installation
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Installation Id
            /// </param>
            public static void DeletePackagesInstallingById(this IRestClient operations, string id)
            {
                operations.DeletePackagesInstallingByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a package installation
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Installation Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePackagesInstallingByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePackagesInstallingByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets add to playlist info
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Item id, comma delimited
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            public static object GetPlaylistsByIdAddtoplaylistinfo(this IRestClient operations, string ids, string id, string userId = default(string))
            {
                return operations.GetPlaylistsByIdAddtoplaylistinfoAsync(ids, id, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets add to playlist info
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Item id, comma delimited
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPlaylistsByIdAddtoplaylistinfoAsync(this IRestClient operations, string ids, string id, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPlaylistsByIdAddtoplaylistinfoWithHttpMessagesAsync(ids, id, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds items to a playlist
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Item id, comma delimited
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            public static PlaylistsAddToPlaylistResult PostPlaylistsByIdItems(this IRestClient operations, string ids, string id, string userId = default(string))
            {
                return operations.PostPlaylistsByIdItemsAsync(ids, id, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds items to a playlist
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Item id, comma delimited
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PlaylistsAddToPlaylistResult> PostPlaylistsByIdItemsAsync(this IRestClient operations, string ids, string id, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostPlaylistsByIdItemsWithHttpMessagesAsync(ids, id, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes items from a playlist
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='entryIds'>
            /// </param>
            public static void DeletePlaylistsByIdItems(this IRestClient operations, string id, string entryIds)
            {
                operations.DeletePlaylistsByIdItemsAsync(id, entryIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes items from a playlist
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='entryIds'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePlaylistsByIdItemsAsync(this IRestClient operations, string id, string entryIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePlaylistsByIdItemsWithHttpMessagesAsync(id, entryIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the original items of a playlist
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            public static QueryResultBaseItemDto GetPlaylistsByIdItems(this IRestClient operations, string id, string userId = default(string), int? startIndex = default(int?), int? limit = default(int?), string fields = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string))
            {
                return operations.GetPlaylistsByIdItemsAsync(id, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the original items of a playlist
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetPlaylistsByIdItemsAsync(this IRestClient operations, string id, string userId = default(string), int? startIndex = default(int?), int? limit = default(int?), string fields = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPlaylistsByIdItemsWithHttpMessagesAsync(id, userId, startIndex, limit, fields, enableImages, enableUserData, imageTypeLimit, enableImageTypes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an instant playlist based on a given playlist
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetPlaylistsByIdInstantmix(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetPlaylistsByIdInstantmixAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an instant playlist based on a given playlist
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetPlaylistsByIdInstantmixAsync(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPlaylistsByIdInstantmixWithHttpMessagesAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a plugin thumb image
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Plugin Id
            /// </param>
            public static void GetPluginsByIdThumb(this IRestClient operations, string id)
            {
                operations.GetPluginsByIdThumbAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a plugin thumb image
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Plugin Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetPluginsByIdThumbAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetPluginsByIdThumbWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a plugin's configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Plugin Id
            /// </param>
            public static void GetPluginsByIdConfiguration(this IRestClient operations, string id)
            {
                operations.GetPluginsByIdConfigurationAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a plugin's configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Plugin Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetPluginsByIdConfigurationAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetPluginsByIdConfigurationWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a plugin's configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='id'>
            /// Plugin Id
            /// </param>
            public static void PostPluginsByIdConfiguration(this IRestClient operations, string body, string id)
            {
                operations.PostPluginsByIdConfigurationAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a plugin's configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='id'>
            /// Plugin Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostPluginsByIdConfigurationAsync(this IRestClient operations, string body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostPluginsByIdConfigurationWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Uninstalls a plugin
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Plugin Id
            /// </param>
            public static void PostPluginsByIdDelete(this IRestClient operations, string id)
            {
                operations.PostPluginsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uninstalls a plugin
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Plugin Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostPluginsByIdDeleteAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostPluginsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Starts a scheduled task
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostScheduledtasksRunningById(this IRestClient operations, string id)
            {
                operations.PostScheduledtasksRunningByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a scheduled task
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostScheduledtasksRunningByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostScheduledtasksRunningByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops a scheduled task
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteScheduledtasksRunningById(this IRestClient operations, string id)
            {
                operations.DeleteScheduledtasksRunningByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a scheduled task
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteScheduledtasksRunningByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteScheduledtasksRunningByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the triggers for a scheduled task
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// List`1:
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostScheduledtasksByIdTriggers(this IRestClient operations, IList<TasksTaskTriggerInfo> body, string id)
            {
                operations.PostScheduledtasksByIdTriggersAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the triggers for a scheduled task
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// List`1:
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostScheduledtasksByIdTriggersAsync(this IRestClient operations, IList<TasksTaskTriggerInfo> body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostScheduledtasksByIdTriggersWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Instructs a session to browse to an item or view
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='itemType'>
            /// The type of item to browse to.
            /// </param>
            /// <param name='itemId'>
            /// The Id of the item.
            /// </param>
            /// <param name='itemName'>
            /// The name of the item.
            /// </param>
            public static void PostSessionsByIdViewing(this IRestClient operations, string id, string itemType, string itemId, string itemName)
            {
                operations.PostSessionsByIdViewingAsync(id, itemType, itemId, itemName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Instructs a session to browse to an item or view
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='itemType'>
            /// The type of item to browse to.
            /// </param>
            /// <param name='itemId'>
            /// The Id of the item.
            /// </param>
            /// <param name='itemName'>
            /// The name of the item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsByIdViewingAsync(this IRestClient operations, string id, string itemType, string itemId, string itemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsByIdViewingWithHttpMessagesAsync(id, itemType, itemId, itemName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Issues a command to a client to display a message to the user
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='text'>
            /// The message text.
            /// </param>
            /// <param name='header'>
            /// The message header.
            /// </param>
            /// <param name='timeoutMs'>
            /// The message timeout. If omitted the user will have to confirm viewing the
            /// message.
            /// </param>
            public static void PostSessionsByIdMessage(this IRestClient operations, string id, string text, string header, long? timeoutMs = default(long?))
            {
                operations.PostSessionsByIdMessageAsync(id, text, header, timeoutMs).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Issues a command to a client to display a message to the user
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='text'>
            /// The message text.
            /// </param>
            /// <param name='header'>
            /// The message header.
            /// </param>
            /// <param name='timeoutMs'>
            /// The message timeout. If omitted the user will have to confirm viewing the
            /// message.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsByIdMessageAsync(this IRestClient operations, string id, string text, string header, long? timeoutMs = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsByIdMessageWithHttpMessagesAsync(id, text, header, timeoutMs, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Instructs a session to play an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PlayRequest:
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='itemIds'>
            /// The ids of the items to play, comma delimited
            /// </param>
            /// <param name='playCommand'>
            /// The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients
            /// who have not yet implemented play next and play last may play now. Possible
            /// values include: 'PlayNow', 'PlayNext', 'PlayLast', 'PlayInstantMix',
            /// 'PlayShuffle'
            /// </param>
            /// <param name='startPositionTicks'>
            /// The starting position of the first item.
            /// </param>
            public static void PostSessionsByIdPlaying(this IRestClient operations, PlayRequest body, string id, IList<long?> itemIds, string playCommand, long? startPositionTicks = default(long?))
            {
                operations.PostSessionsByIdPlayingAsync(body, id, itemIds, playCommand, startPositionTicks).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Instructs a session to play an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PlayRequest:
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='itemIds'>
            /// The ids of the items to play, comma delimited
            /// </param>
            /// <param name='playCommand'>
            /// The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients
            /// who have not yet implemented play next and play last may play now. Possible
            /// values include: 'PlayNow', 'PlayNext', 'PlayLast', 'PlayInstantMix',
            /// 'PlayShuffle'
            /// </param>
            /// <param name='startPositionTicks'>
            /// The starting position of the first item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsByIdPlayingAsync(this IRestClient operations, PlayRequest body, string id, IList<long?> itemIds, string playCommand, long? startPositionTicks = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsByIdPlayingWithHttpMessagesAsync(body, id, itemIds, playCommand, startPositionTicks, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Issues a system command to a client
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// GeneralCommand:
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            public static void PostSessionsByIdCommand(this IRestClient operations, GeneralCommand body, string id)
            {
                operations.PostSessionsByIdCommandAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Issues a system command to a client
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// GeneralCommand:
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsByIdCommandAsync(this IRestClient operations, GeneralCommand body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsByIdCommandWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates capabilities for a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// ClientCapabilities:
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            public static void PostSessionsCapabilitiesFull(this IRestClient operations, ClientCapabilities body, string id)
            {
                operations.PostSessionsCapabilitiesFullAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates capabilities for a device
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// ClientCapabilities:
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsCapabilitiesFullAsync(this IRestClient operations, ClientCapabilities body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsCapabilitiesFullWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reports playback progress within a session
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Playback-Check-ins" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PlaybackProgressInfo:
            /// </param>
            public static void PostSessionsPlayingProgress(this IRestClient operations, PlaybackProgressInfo body)
            {
                operations.PostSessionsPlayingProgressAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reports playback progress within a session
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Playback-Check-ins" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PlaybackProgressInfo:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsPlayingProgressAsync(this IRestClient operations, PlaybackProgressInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsPlayingProgressWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Pings a playback session
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='playSessionId'>
            /// </param>
            public static void PostSessionsPlayingPing(this IRestClient operations, string playSessionId = default(string))
            {
                operations.PostSessionsPlayingPingAsync(playSessionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Pings a playback session
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='playSessionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsPlayingPingAsync(this IRestClient operations, string playSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsPlayingPingWithHttpMessagesAsync(playSessionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reports playback has stopped within a session
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Playback-Check-ins" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PlaybackStopInfo:
            /// </param>
            public static void PostSessionsPlayingStopped(this IRestClient operations, PlaybackStopInfo body)
            {
                operations.PostSessionsPlayingStoppedAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reports playback has stopped within a session
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Playback-Check-ins" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PlaybackStopInfo:
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsPlayingStoppedAsync(this IRestClient operations, PlaybackStopInfo body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsPlayingStoppedWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets seasons for a tv series
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// The series id
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='isSpecialSeason'>
            /// Optional. Filter by special season.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            public static QueryResultBaseItemDto GetShowsByIdSeasons(this IRestClient operations, string userId, string id, string fields = default(string), bool? isSpecialSeason = default(bool?), bool? isMissing = default(bool?), string adjacentTo = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?))
            {
                return operations.GetShowsByIdSeasonsAsync(userId, id, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets seasons for a tv series
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// The series id
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='isSpecialSeason'>
            /// Optional. Filter by special season.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetShowsByIdSeasonsAsync(this IRestClient operations, string userId, string id, string fields = default(string), bool? isSpecialSeason = default(bool?), bool? isMissing = default(bool?), string adjacentTo = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShowsByIdSeasonsWithHttpMessagesAsync(userId, id, fields, isSpecialSeason, isMissing, adjacentTo, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets episodes for a tv season
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The series id
            /// </param>
            /// <param name='season'>
            /// Optional filter by season number.
            /// </param>
            /// <param name='seasonId'>
            /// Optional. Filter by season id
            /// </param>
            /// <param name='startItemId'>
            /// Optional. Skip through the list until a given item is found.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static void GetShowsByIdEpisodes(this IRestClient operations, string id, int? season = default(int?), string seasonId = default(string), string startItemId = default(string), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                operations.GetShowsByIdEpisodesAsync(id, season, seasonId, startItemId, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets episodes for a tv season
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The series id
            /// </param>
            /// <param name='season'>
            /// Optional filter by season number.
            /// </param>
            /// <param name='seasonId'>
            /// Optional. Filter by season id
            /// </param>
            /// <param name='startItemId'>
            /// Optional. Skip through the list until a given item is found.
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetShowsByIdEpisodesAsync(this IRestClient operations, string id, int? season = default(int?), string seasonId = default(string), string startItemId = default(string), string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string userId = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetShowsByIdEpisodesWithHttpMessagesAsync(id, season, seasonId, startItemId, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, userId, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Finds tv shows similar to a given one.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetShowsByIdSimilar(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetShowsByIdSimilarAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Finds tv shows similar to a given one.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetShowsByIdSimilarAsync(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShowsByIdSimilarWithHttpMessagesAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an instant playlist based on a given song
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetSongsByIdInstantmix(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetSongsByIdInstantmixAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an instant playlist based on a given song
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetSongsByIdInstantmixAsync(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSongsByIdInstantmixWithHttpMessagesAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets sync status for an item.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SyncedItemProgress:
            /// </param>
            /// <param name='itemId'>
            /// </param>
            public static void PostSyncByItemidStatus(this IRestClient operations, SyncModelSyncedItemProgress body, string itemId)
            {
                operations.PostSyncByItemidStatusAsync(body, itemId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets sync status for an item.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SyncedItemProgress:
            /// </param>
            /// <param name='itemId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSyncByItemidStatusAsync(this IRestClient operations, SyncModelSyncedItemProgress body, string itemId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSyncByItemidStatusWithHttpMessagesAsync(body, itemId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a sync job.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            public static SyncSyncJob GetSyncJobsById(this IRestClient operations, string id)
            {
                return operations.GetSyncJobsByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a sync job.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SyncSyncJob> GetSyncJobsByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSyncJobsByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a sync job.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            public static void DeleteSyncJobsById(this IRestClient operations, string id)
            {
                operations.DeleteSyncJobsByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a sync job.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSyncJobsByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSyncJobsByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a sync job.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SyncJob:
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostSyncJobsById(this IRestClient operations, SyncSyncJob body, long id)
            {
                operations.PostSyncJobsByIdAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a sync job.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SyncJob:
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSyncJobsByIdAsync(this IRestClient operations, SyncSyncJob body, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSyncJobsByIdWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancels items from a sync target
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemIds'>
            /// ItemIds
            /// </param>
            public static void PostSyncItemsCancel(this IRestClient operations, string itemIds = default(string))
            {
                operations.PostSyncItemsCancelAsync(itemIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels items from a sync target
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemIds'>
            /// ItemIds
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSyncItemsCancelAsync(this IRestClient operations, string itemIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSyncItemsCancelWithHttpMessagesAsync(itemIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancels items from a sync target
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetId'>
            /// TargetId
            /// </param>
            /// <param name='itemIds'>
            /// ItemIds
            /// </param>
            public static void DeleteSyncByTargetidItems(this IRestClient operations, string targetId, string itemIds = default(string))
            {
                operations.DeleteSyncByTargetidItemsAsync(targetId, itemIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels items from a sync target
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetId'>
            /// TargetId
            /// </param>
            /// <param name='itemIds'>
            /// ItemIds
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSyncByTargetidItemsAsync(this IRestClient operations, string targetId, string itemIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSyncByTargetidItemsWithHttpMessagesAsync(targetId, itemIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets ready to download sync items.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetId'>
            /// TargetId
            /// </param>
            public static IList<SyncModelSyncedItem> GetSyncItemsReady(this IRestClient operations, string targetId)
            {
                return operations.GetSyncItemsReadyAsync(targetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets ready to download sync items.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetId'>
            /// TargetId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SyncModelSyncedItem>> GetSyncItemsReadyAsync(this IRestClient operations, string targetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSyncItemsReadyWithHttpMessagesAsync(targetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a sync job item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            public static void DeleteSyncJobitemsById(this IRestClient operations, string id)
            {
                operations.DeleteSyncJobitemsByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a sync job item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSyncJobitemsByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSyncJobitemsByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a named configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// Key
            /// </param>
            public static void GetSystemConfigurationByKey(this IRestClient operations, string key)
            {
                operations.GetSystemConfigurationByKeyAsync(key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a named configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// Key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSystemConfigurationByKeyAsync(this IRestClient operations, string key, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSystemConfigurationByKeyWithHttpMessagesAsync(key, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates named configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='key'>
            /// Key
            /// </param>
            public static void PostSystemConfigurationByKey(this IRestClient operations, string body, string key)
            {
                operations.PostSystemConfigurationByKeyAsync(body, key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates named configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='key'>
            /// Key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSystemConfigurationByKeyAsync(this IRestClient operations, string body, string key, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSystemConfigurationByKeyWithHttpMessagesAsync(body, key, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets release notes
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<UpdatesPackageVersionInfo> GetSystemReleasenotesVersions(this IRestClient operations)
            {
                return operations.GetSystemReleasenotesVersionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets release notes
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UpdatesPackageVersionInfo>> GetSystemReleasenotesVersionsAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSystemReleasenotesVersionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of available server log files
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            public static QueryResultLogFile GetSystemLogsQuery(this IRestClient operations, int? startIndex = default(int?), int? limit = default(int?))
            {
                return operations.GetSystemLogsQueryAsync(startIndex, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of available server log files
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultLogFile> GetSystemLogsQueryAsync(this IRestClient operations, int? startIndex = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSystemLogsQueryWithHttpMessagesAsync(startIndex, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a log file
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The log file name.
            /// </param>
            /// <param name='sanitize'>
            /// Return sanitized log
            /// </param>
            public static void GetSystemLogsByName(this IRestClient operations, string name, bool? sanitize = default(bool?))
            {
                operations.GetSystemLogsByNameAsync(name, sanitize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a log file
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The log file name.
            /// </param>
            /// <param name='sanitize'>
            /// Return sanitized log
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSystemLogsByNameAsync(this IRestClient operations, string name, bool? sanitize = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSystemLogsByNameWithHttpMessagesAsync(name, sanitize, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets public information about the server
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PublicSystemInfo GetSystemInfoPublic(this IRestClient operations)
            {
                return operations.GetSystemInfoPublicAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets public information about the server
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublicSystemInfo> GetSystemInfoPublicAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSystemInfoPublicWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets activity log entries
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='minDate'>
            /// Optional. The minimum date. Format = ISO
            /// </param>
            public static QueryResultActivityLogEntry GetSystemActivitylogEntries(this IRestClient operations, int? startIndex = default(int?), int? limit = default(int?), string minDate = default(string))
            {
                return operations.GetSystemActivitylogEntriesAsync(startIndex, limit, minDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets activity log entries
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='minDate'>
            /// Optional. The minimum date. Format = ISO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultActivityLogEntry> GetSystemActivitylogEntriesAsync(this IRestClient operations, int? startIndex = default(int?), int? limit = default(int?), string minDate = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSystemActivitylogEntriesWithHttpMessagesAsync(startIndex, limit, minDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Finds movies and trailers similar to a given trailer.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            public static QueryResultBaseItemDto GetTrailersByIdSimilar(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string))
            {
                return operations.GetTrailersByIdSimilarAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Finds movies and trailers similar to a given trailer.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetTrailersByIdSimilarAsync(this IRestClient operations, string id, string includeItemTypes = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string userId = default(string), int? limit = default(int?), string fields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrailersByIdSimilarWithHttpMessagesAsync(id, includeItemTypes, enableImages, enableUserData, imageTypeLimit, enableImageTypes, userId, limit, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets items based on a query.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            public static QueryResultBaseItemDto GetUsersByUseridSuggestions(this IRestClient operations, string userId, string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?))
            {
                return operations.GetUsersByUseridSuggestionsAsync(userId, fields, enableImages, imageTypeLimit, enableImageTypes, enableUserData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetUsersByUseridSuggestionsAsync(this IRestClient operations, string userId, string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersByUseridSuggestionsWithHttpMessagesAsync(userId, fields, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostUsersByIdDelete(this IRestClient operations, string id)
            {
                operations.PostUsersByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByIdDeleteAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Authenticates a user
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/User-Authentication" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// AuthenticateUser
            /// </param>
            /// <param name='id'>
            /// </param>
            public static AuthenticationAuthenticationResult PostUsersByIdAuthenticate(this IRestClient operations, AuthenticateUser body, string id)
            {
                return operations.PostUsersByIdAuthenticateAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Authenticates a user
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/User-Authentication" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// AuthenticateUser
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticationAuthenticationResult> PostUsersByIdAuthenticateAsync(this IRestClient operations, AuthenticateUser body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUsersByIdAuthenticateWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a user's password
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UpdateUserPassword
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostUsersByIdPassword(this IRestClient operations, UpdateUserPassword body, string id)
            {
                operations.PostUsersByIdPasswordAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user's password
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UpdateUserPassword
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByIdPasswordAsync(this IRestClient operations, UpdateUserPassword body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByIdPasswordWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a user's easy password
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UpdateUserEasyPassword
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostUsersByIdEasypassword(this IRestClient operations, UpdateUserEasyPassword body, string id)
            {
                operations.PostUsersByIdEasypasswordAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user's easy password
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UpdateUserEasyPassword
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByIdEasypasswordAsync(this IRestClient operations, UpdateUserEasyPassword body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByIdEasypasswordWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Redeems a forgot password pin
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// ForgotPasswordPin
            /// </param>
            public static UsersPinRedeemResult PostUsersForgotpasswordPin(this IRestClient operations, ForgotPasswordPin body)
            {
                return operations.PostUsersForgotpasswordPinAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Redeems a forgot password pin
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// ForgotPasswordPin
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersPinRedeemResult> PostUsersForgotpasswordPinAsync(this IRestClient operations, ForgotPasswordPin body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUsersForgotpasswordPinWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a user configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UserConfiguration:
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostUsersByIdConfiguration(this IRestClient operations, ConfigurationUserConfiguration body, string id)
            {
                operations.PostUsersByIdConfigurationAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user configuration
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UserConfiguration:
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByIdConfigurationAsync(this IRestClient operations, ConfigurationUserConfiguration body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByIdConfigurationWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a user policy
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UserPolicy:
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostUsersByIdPolicy(this IRestClient operations, UsersUserPolicy body, string id)
            {
                operations.PostUsersByIdPolicyAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user policy
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UserPolicy:
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByIdPolicyAsync(this IRestClient operations, UsersUserPolicy body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByIdPolicyWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets items based on a query.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Browsing-the-Library" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultBaseItemDto GetUsersByUseridItems(this IRestClient operations, string userId, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetUsersByUseridItemsAsync(userId, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Browsing-the-Library" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetUsersByUseridItemsAsync(this IRestClient operations, string userId, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersByUseridItemsWithHttpMessagesAsync(userId, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Browsing-the-Library" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='includeExternalContent'>
            /// Whether or not to include external views such as channels or live tv
            /// </param>
            public static QueryResultBaseItemDto GetUsersByUseridViews(this IRestClient operations, string userId, bool includeExternalContent)
            {
                return operations.GetUsersByUseridViewsAsync(userId, includeExternalContent).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Browsing-the-Library" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='includeExternalContent'>
            /// Whether or not to include external views such as channels or live tv
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetUsersByUseridViewsAsync(this IRestClient operations, string userId, bool includeExternalContent, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersByUseridViewsWithHttpMessagesAsync(userId, includeExternalContent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes alternate video sources.
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static void DeleteVideosByIdAlternatesources(this IRestClient operations, string id)
            {
                operations.DeleteVideosByIdAlternatesourcesAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes alternate video sources.
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteVideosByIdAlternatesourcesAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteVideosByIdAlternatesourcesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets additional parts for a video.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            public static QueryResultBaseItemDto GetVideosByIdAdditionalparts(this IRestClient operations, string id, string userId = default(string), string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?))
            {
                return operations.GetVideosByIdAdditionalpartsAsync(id, userId, fields, enableImages, imageTypeLimit, enableImageTypes, enableUserData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets additional parts for a video.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='userId'>
            /// Optional. Filter by user id, and attach user data
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetVideosByIdAdditionalpartsAsync(this IRestClient operations, string id, string userId = default(string), string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVideosByIdAdditionalpartsWithHttpMessagesAsync(id, userId, fields, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='width'>
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static void GetVideosByIdIndexBif(this IRestClient operations, int width, string id)
            {
                operations.GetVideosByIdIndexBifAsync(width, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='width'>
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVideosByIdIndexBifAsync(this IRestClient operations, int width, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetVideosByIdIndexBifWithHttpMessagesAsync(width, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a video stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void GetVideosByIdStreamByContainer(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.GetVideosByIdStreamByContainerAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a video stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVideosByIdStreamByContainerAsync(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetVideosByIdStreamByContainerWithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a video stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void HeadVideosByIdStreamByContainer(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.HeadVideosByIdStreamByContainerAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a video stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadVideosByIdStreamByContainerAsync(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadVideosByIdStreamByContainerWithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a video stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void GetVideosByIdStream(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.GetVideosByIdStreamAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a video stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVideosByIdStreamAsync(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetVideosByIdStreamWithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a video stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void HeadVideosByIdStream(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.HeadVideosByIdStreamAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a video stream
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadVideosByIdStreamAsync(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadVideosByIdStreamWithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a video stream using HTTP live streaming.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void GetVideosByIdMasterM3u8(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.GetVideosByIdMasterM3u8Async(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a video stream using HTTP live streaming.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVideosByIdMasterM3u8Async(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetVideosByIdMasterM3u8WithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a video stream using HTTP live streaming.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void HeadVideosByIdMasterM3u8(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.HeadVideosByIdMasterM3u8Async(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a video stream using HTTP live streaming.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadVideosByIdMasterM3u8Async(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadVideosByIdMasterM3u8WithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a video stream using HTTP live streaming.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void GetVideosByIdMainM3u8(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.GetVideosByIdMainM3u8Async(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a video stream using HTTP live streaming.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVideosByIdMainM3u8Async(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetVideosByIdMainM3u8WithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an HLS subtitle playlist.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='subtitleSegmentLength'>
            /// The subtitle segment length
            /// </param>
            /// <param name='manifestSubtitles'>
            /// The subtitle segment format
            /// </param>
            public static void GetVideosByIdSubtitlesM3u8(this IRestClient operations, string id, int subtitleSegmentLength, string manifestSubtitles)
            {
                operations.GetVideosByIdSubtitlesM3u8Async(id, subtitleSegmentLength, manifestSubtitles).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an HLS subtitle playlist.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='subtitleSegmentLength'>
            /// The subtitle segment length
            /// </param>
            /// <param name='manifestSubtitles'>
            /// The subtitle segment format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVideosByIdSubtitlesM3u8Async(this IRestClient operations, string id, int subtitleSegmentLength, string manifestSubtitles, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetVideosByIdSubtitlesM3u8WithHttpMessagesAsync(id, subtitleSegmentLength, manifestSubtitles, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an HLS subtitle playlist.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='subtitleSegmentLength'>
            /// The subtitle segment length
            /// </param>
            /// <param name='manifestSubtitles'>
            /// The subtitle segment format
            /// </param>
            public static void GetVideosByIdLiveSubtitlesM3u8(this IRestClient operations, string id, int subtitleSegmentLength, string manifestSubtitles)
            {
                operations.GetVideosByIdLiveSubtitlesM3u8Async(id, subtitleSegmentLength, manifestSubtitles).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an HLS subtitle playlist.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='subtitleSegmentLength'>
            /// The subtitle segment length
            /// </param>
            /// <param name='manifestSubtitles'>
            /// The subtitle segment format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVideosByIdLiveSubtitlesM3u8Async(this IRestClient operations, string id, int subtitleSegmentLength, string manifestSubtitles, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetVideosByIdLiveSubtitlesM3u8WithHttpMessagesAsync(id, subtitleSegmentLength, manifestSubtitles, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='playSessionId'>
            /// The play session id
            /// </param>
            public static void PostVideosActiveencodingsDelete(this IRestClient operations, string deviceId, string playSessionId)
            {
                operations.PostVideosActiveencodingsDeleteAsync(deviceId, playSessionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='playSessionId'>
            /// The play session id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostVideosActiveencodingsDeleteAsync(this IRestClient operations, string deviceId, string playSessionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostVideosActiveencodingsDeleteWithHttpMessagesAsync(deviceId, playSessionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            public static void GetVideosByIdLiveM3u8(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?))
            {
                operations.GetVideosByIdLiveM3u8Async(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='container'>
            /// Container
            /// </param>
            /// <param name='deviceProfileId'>
            /// Optional. The dlna device profile id to utilize.
            /// </param>
            /// <param name='deviceId'>
            /// The device id of the client requesting. Used to stop encoding processes
            /// when needed.
            /// </param>
            /// <param name='audioCodec'>
            /// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the
            /// server will auto-select using the url's extension. Options: aac, mp3,
            /// vorbis, wma.
            /// </param>
            /// <param name='enableAutoStreamCopy'>
            /// Whether or not to allow automatic stream copy if requested values match the
            /// original source. Defaults to true.
            /// </param>
            /// <param name='audioSampleRate'>
            /// Optional. Specify a specific audio sample rate, e.g. 44100
            /// </param>
            /// <param name='audioBitRate'>
            /// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='audioChannels'>
            /// Optional. Specify a specific number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='maxAudioChannels'>
            /// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
            /// </param>
            /// <param name='staticParameter'>
            /// Optional. If true, the original file will be streamed statically without
            /// any encoding. Use either no url extension or the original file extension.
            /// true/false
            /// </param>
            /// <param name='profile'>
            /// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
            /// </param>
            /// <param name='level'>
            /// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
            /// </param>
            /// <param name='framerate'>
            /// Optional. A specific video framerate to encode to, e.g. 23.976. Generally
            /// this should be omitted unless the device has specific requirements.
            /// </param>
            /// <param name='maxFramerate'>
            /// Optional. A specific maximum video framerate to encode to, e.g. 23.976.
            /// Generally this should be omitted unless the device has specific
            /// requirements.
            /// </param>
            /// <param name='copyTimestamps'>
            /// Whether or not to copy timestamps when transcoding with an offset. Defaults
            /// to false.
            /// </param>
            /// <param name='startTimeTicks'>
            /// Optional. Specify a starting offset, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='width'>
            /// Optional. The fixed horizontal resolution of the encoded video.
            /// </param>
            /// <param name='height'>
            /// Optional. The fixed vertical resolution of the encoded video.
            /// </param>
            /// <param name='maxWidth'>
            /// Optional. The maximum horizontal resolution of the encoded video.
            /// </param>
            /// <param name='maxHeight'>
            /// Optional. The maximum vertical resolution of the encoded video.
            /// </param>
            /// <param name='videoBitRate'>
            /// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted
            /// this will be left to encoder defaults.
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// Optional. The index of the subtitle stream to use. If omitted no subtitles
            /// will be used.
            /// </param>
            /// <param name='subtitleMethod'>
            /// Optional. Specify the subtitle delivery method. Possible values include:
            /// 'Encode', 'Embed', 'External', 'Hls', 'VideoSideData'
            /// </param>
            /// <param name='maxRefFrames'>
            /// Optional.
            /// </param>
            /// <param name='maxVideoBitDepth'>
            /// Optional.
            /// </param>
            /// <param name='videoCodec'>
            /// Optional. Specify a video codec to encode to, e.g. h264. If omitted the
            /// server will auto-select using the url's extension. Options: h264, mpeg4,
            /// theora, vpx, wmv.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// Optional. The index of the audio stream to use. If omitted the first audio
            /// stream will be used.
            /// </param>
            /// <param name='videoStreamIndex'>
            /// Optional. The index of the video stream to use. If omitted the first video
            /// stream will be used.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVideosByIdLiveM3u8Async(this IRestClient operations, string id, string container, string deviceProfileId = default(string), string deviceId = default(string), string audioCodec = default(string), bool? enableAutoStreamCopy = default(bool?), int? audioSampleRate = default(int?), int? audioBitRate = default(int?), int? audioChannels = default(int?), int? maxAudioChannels = default(int?), bool? staticParameter = default(bool?), string profile = default(string), string level = default(string), double? framerate = default(double?), double? maxFramerate = default(double?), bool? copyTimestamps = default(bool?), long? startTimeTicks = default(long?), int? width = default(int?), int? height = default(int?), int? maxWidth = default(int?), int? maxHeight = default(int?), int? videoBitRate = default(int?), int? subtitleStreamIndex = default(int?), string subtitleMethod = default(string), int? maxRefFrames = default(int?), int? maxVideoBitDepth = default(int?), string videoCodec = default(string), int? audioStreamIndex = default(int?), int? videoStreamIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetVideosByIdLiveM3u8WithHttpMessagesAsync(id, container, deviceProfileId, deviceId, audioCodec, enableAutoStreamCopy, audioSampleRate, audioBitRate, audioChannels, maxAudioChannels, staticParameter, profile, level, framerate, maxFramerate, copyTimestamps, startTimeTicks, width, height, maxWidth, maxHeight, videoBitRate, subtitleStreamIndex, subtitleMethod, maxRefFrames, maxVideoBitDepth, videoCodec, audioStreamIndex, videoStreamIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void GetArtistsByNameImagesByType(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.GetArtistsByNameImagesByTypeAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetArtistsByNameImagesByTypeAsync(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetArtistsByNameImagesByTypeWithHttpMessagesAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void HeadArtistsByNameImagesByType(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.HeadArtistsByNameImagesByTypeAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadArtistsByNameImagesByTypeAsync(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadArtistsByNameImagesByTypeWithHttpMessagesAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// Auth Key
            /// </param>
            public static void PostAuthKeysByKeyDelete(this IRestClient operations, string key)
            {
                operations.PostAuthKeysByKeyDeleteAsync(key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// Auth Key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAuthKeysByKeyDeleteAsync(this IRestClient operations, string key, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostAuthKeysByKeyDeleteWithHttpMessagesAsync(key, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes items from a collection
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Item id, comma delimited
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostCollectionsByIdItemsDelete(this IRestClient operations, string ids, string id)
            {
                operations.PostCollectionsByIdItemsDeleteAsync(ids, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes items from a collection
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// Item id, comma delimited
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostCollectionsByIdItemsDeleteAsync(this IRestClient operations, string ids, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostCollectionsByIdItemsDeleteWithHttpMessagesAsync(ids, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets dlna content directory xml
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            public static void GetDlnaByUuidContentdirectoryContentdirectoryXml(this IRestClient operations, string uuId)
            {
                operations.GetDlnaByUuidContentdirectoryContentdirectoryXmlAsync(uuId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets dlna content directory xml
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDlnaByUuidContentdirectoryContentdirectoryXmlAsync(this IRestClient operations, string uuId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetDlnaByUuidContentdirectoryContentdirectoryXmlWithHttpMessagesAsync(uuId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets dlna content directory xml
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            public static void GetDlnaByUuidContentdirectoryContentdirectory(this IRestClient operations, string uuId)
            {
                operations.GetDlnaByUuidContentdirectoryContentdirectoryAsync(uuId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets dlna content directory xml
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDlnaByUuidContentdirectoryContentdirectoryAsync(this IRestClient operations, string uuId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetDlnaByUuidContentdirectoryContentdirectoryWithHttpMessagesAsync(uuId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets dlna connection manager xml
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            public static void GetDlnaByUuidConnectionmanagerConnectionmanagerXml(this IRestClient operations, string uuId)
            {
                operations.GetDlnaByUuidConnectionmanagerConnectionmanagerXmlAsync(uuId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets dlna connection manager xml
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDlnaByUuidConnectionmanagerConnectionmanagerXmlAsync(this IRestClient operations, string uuId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetDlnaByUuidConnectionmanagerConnectionmanagerXmlWithHttpMessagesAsync(uuId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets dlna connection manager xml
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            public static void GetDlnaByUuidConnectionmanagerConnectionmanager(this IRestClient operations, string uuId)
            {
                operations.GetDlnaByUuidConnectionmanagerConnectionmanagerAsync(uuId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets dlna connection manager xml
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDlnaByUuidConnectionmanagerConnectionmanagerAsync(this IRestClient operations, string uuId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetDlnaByUuidConnectionmanagerConnectionmanagerWithHttpMessagesAsync(uuId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Processes a control request
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            public static void PostDlnaByUuidContentdirectoryControl(this IRestClient operations, string body, string uuId)
            {
                operations.PostDlnaByUuidContentdirectoryControlAsync(body, uuId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Processes a control request
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostDlnaByUuidContentdirectoryControlAsync(this IRestClient operations, string body, string uuId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostDlnaByUuidContentdirectoryControlWithHttpMessagesAsync(body, uuId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Processes a control request
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            public static void PostDlnaByUuidConnectionmanagerControl(this IRestClient operations, string body, string uuId)
            {
                operations.PostDlnaByUuidConnectionmanagerControlAsync(body, uuId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Processes a control request
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostDlnaByUuidConnectionmanagerControlAsync(this IRestClient operations, string body, string uuId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostDlnaByUuidConnectionmanagerControlWithHttpMessagesAsync(body, uuId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a server icon
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            /// <param name='filename'>
            /// The icon filename
            /// </param>
            public static void GetDlnaByUuidIconsByFilename(this IRestClient operations, string uuId, string filename)
            {
                operations.GetDlnaByUuidIconsByFilenameAsync(uuId, filename).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a server icon
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuId'>
            /// Server UuId
            /// </param>
            /// <param name='filename'>
            /// The icon filename
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetDlnaByUuidIconsByFilenameAsync(this IRestClient operations, string uuId, string filename, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetDlnaByUuidIconsByFilenameWithHttpMessagesAsync(uuId, filename, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void GetGamegenresByNameImagesByType(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.GetGamegenresByNameImagesByTypeAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetGamegenresByNameImagesByTypeAsync(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetGamegenresByNameImagesByTypeWithHttpMessagesAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void HeadGamegenresByNameImagesByType(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.HeadGamegenresByNameImagesByTypeAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadGamegenresByNameImagesByTypeAsync(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadGamegenresByNameImagesByTypeWithHttpMessagesAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void GetGenresByNameImagesByType(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.GetGenresByNameImagesByTypeAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetGenresByNameImagesByTypeAsync(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetGenresByNameImagesByTypeWithHttpMessagesAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void HeadGenresByNameImagesByType(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.HeadGenresByNameImagesByTypeAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadGenresByNameImagesByTypeAsync(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadGenresByNameImagesByTypeWithHttpMessagesAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Applies search criteria to an item and refreshes metadata
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchResult:
            /// </param>
            /// <param name='id'>
            /// The item id
            /// </param>
            /// <param name='replaceAllImages'>
            /// Whether or not to replace all images
            /// </param>
            public static void PostItemsRemotesearchApplyById(this IRestClient operations, RemoteSearchResult body, string id, bool? replaceAllImages = default(bool?))
            {
                operations.PostItemsRemotesearchApplyByIdAsync(body, id, replaceAllImages).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Applies search criteria to an item and refreshes metadata
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoteSearchResult:
            /// </param>
            /// <param name='id'>
            /// The item id
            /// </param>
            /// <param name='replaceAllImages'>
            /// Whether or not to replace all images
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsRemotesearchApplyByIdAsync(this IRestClient operations, RemoteSearchResult body, string id, bool? replaceAllImages = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsRemotesearchApplyByIdWithHttpMessagesAsync(body, id, replaceAllImages, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds new tags to an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// AddTags
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static void PostItemsByIdTagsAdd(this IRestClient operations, UserLibraryAddTags body, string id)
            {
                operations.PostItemsByIdTagsAddAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds new tags to an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// AddTags
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByIdTagsAddAsync(this IRestClient operations, UserLibraryAddTags body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByIdTagsAddWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes an external subtitle file
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            public static void DeleteItemsByIdSubtitlesByIndex(this IRestClient operations, string id, string mediaSourceId, int index)
            {
                operations.DeleteItemsByIdSubtitlesByIndexAsync(id, mediaSourceId, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an external subtitle file
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteItemsByIdSubtitlesByIndexAsync(this IRestClient operations, string id, string mediaSourceId, int index, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteItemsByIdSubtitlesByIndexWithHttpMessagesAsync(id, mediaSourceId, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void GetItemsByIdImagesByType(this IRestClient operations, string id, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.GetItemsByIdImagesByTypeAsync(id, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetItemsByIdImagesByTypeAsync(this IRestClient operations, string id, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetItemsByIdImagesByTypeWithHttpMessagesAsync(id, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void HeadItemsByIdImagesByType(this IRestClient operations, string id, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.HeadItemsByIdImagesByTypeAsync(id, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadItemsByIdImagesByTypeAsync(this IRestClient operations, string id, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadItemsByIdImagesByTypeWithHttpMessagesAsync(id, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Uploads an image for an item, must be base64 encoded.
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void PostItemsByIdImagesByType(this IRestClient operations, string body, string id, string type, int? index = default(int?))
            {
                operations.PostItemsByIdImagesByTypeAsync(body, id, type, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads an image for an item, must be base64 encoded.
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByIdImagesByTypeAsync(this IRestClient operations, string body, string id, string type, int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByIdImagesByTypeWithHttpMessagesAsync(body, id, type, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void DeleteItemsByIdImagesByType(this IRestClient operations, string id, string type, int? index = default(int?))
            {
                operations.DeleteItemsByIdImagesByTypeAsync(id, type, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteItemsByIdImagesByTypeAsync(this IRestClient operations, string id, string type, int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteItemsByIdImagesByTypeWithHttpMessagesAsync(id, type, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets available remote image providers for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static IList<ImageProviderInfo> GetItemsByIdRemoteimagesProviders(this IRestClient operations, string id)
            {
                return operations.GetItemsByIdRemoteimagesProvidersAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available remote image providers for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ImageProviderInfo>> GetItemsByIdRemoteimagesProvidersAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdRemoteimagesProvidersWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Downloads a remote image for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// The image type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='providerName'>
            /// The image provider
            /// </param>
            /// <param name='imageUrl'>
            /// The image url
            /// </param>
            public static void PostItemsByIdRemoteimagesDownload(this IRestClient operations, string id, string type, string providerName = default(string), string imageUrl = default(string))
            {
                operations.PostItemsByIdRemoteimagesDownloadAsync(id, type, providerName, imageUrl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Downloads a remote image for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// The image type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='providerName'>
            /// The image provider
            /// </param>
            /// <param name='imageUrl'>
            /// The image url
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByIdRemoteimagesDownloadAsync(this IRestClient operations, string id, string type, string providerName = default(string), string imageUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByIdRemoteimagesDownloadWithHttpMessagesAsync(id, type, providerName, imageUrl, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UpdateMediaPath
            /// </param>
            public static void PostLibraryVirtualfoldersPathsUpdate(this IRestClient operations, LibraryUpdateMediaPath body)
            {
                operations.PostLibraryVirtualfoldersPathsUpdateAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UpdateMediaPath
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLibraryVirtualfoldersPathsUpdateAsync(this IRestClient operations, LibraryUpdateMediaPath body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLibraryVirtualfoldersPathsUpdateWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoveMediaPath
            /// </param>
            public static void PostLibraryVirtualfoldersPathsDelete(this IRestClient operations, LibraryRemoveMediaPath body)
            {
                operations.PostLibraryVirtualfoldersPathsDeleteAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// RemoveMediaPath
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLibraryVirtualfoldersPathsDeleteAsync(this IRestClient operations, LibraryRemoveMediaPath body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLibraryVirtualfoldersPathsDeleteWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a live tv channel
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void GetLivetvLiverecordingsByIdStream(this IRestClient operations, string id)
            {
                operations.GetLivetvLiverecordingsByIdStreamAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a live tv channel
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetLivetvLiverecordingsByIdStreamAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetLivetvLiverecordingsByIdStreamWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a live tv channel
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='container'>
            /// </param>
            public static void GetLivetvLivestreamfilesByIdStreamByContainer(this IRestClient operations, string id, string container)
            {
                operations.GetLivetvLivestreamfilesByIdStreamByContainerAsync(id, container).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a live tv channel
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='container'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetLivetvLivestreamfilesByIdStreamByContainerAsync(this IRestClient operations, string id, string container, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetLivetvLivestreamfilesByIdStreamByContainerWithHttpMessagesAsync(id, container, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets available lineups
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetLivetvListingprovidersSchedulesdirectCountries(this IRestClient operations)
            {
                operations.GetLivetvListingprovidersSchedulesdirectCountriesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets available lineups
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetLivetvListingprovidersSchedulesdirectCountriesAsync(this IRestClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetLivetvListingprovidersSchedulesdirectCountriesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets tuner hosts
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// Type
            /// </param>
            public static LiveTvTunerHostInfo GetLivetvTunerhostsDefaultByType(this IRestClient operations, string type)
            {
                return operations.GetLivetvTunerhostsDefaultByTypeAsync(type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets tuner hosts
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// Type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LiveTvTunerHostInfo> GetLivetvTunerhostsDefaultByTypeAsync(this IRestClient operations, string type, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLivetvTunerhostsDefaultByTypeWithHttpMessagesAsync(type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a live tv recording
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Recording Id
            /// </param>
            public static void PostLivetvRecordingsByIdDelete(this IRestClient operations, string id)
            {
                operations.PostLivetvRecordingsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a live tv recording
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Recording Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivetvRecordingsByIdDeleteAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivetvRecordingsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancels a live tv timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timer Id
            /// </param>
            public static void PostLivetvTimersByIdDelete(this IRestClient operations, string id)
            {
                operations.PostLivetvTimersByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a live tv timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timer Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivetvTimersByIdDeleteAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivetvTimersByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancels a live tv series timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timer Id
            /// </param>
            public static void PostLivetvSeriestimersByIdDelete(this IRestClient operations, string id)
            {
                operations.PostLivetvSeriestimersByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a live tv series timer
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Timer Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivetvSeriestimersByIdDeleteAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivetvSeriestimersByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Resets a tv tuner
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Tuner Id
            /// </param>
            public static void PostLivetvTunersByIdReset(this IRestClient operations, string id)
            {
                operations.PostLivetvTunersByIdResetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets a tv tuner
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Tuner Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostLivetvTunersByIdResetAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostLivetvTunersByIdResetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void GetMusicgenresByNameImagesByType(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.GetMusicgenresByNameImagesByTypeAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetMusicgenresByNameImagesByTypeAsync(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetMusicgenresByNameImagesByTypeWithHttpMessagesAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void HeadMusicgenresByNameImagesByType(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.HeadMusicgenresByNameImagesByTypeAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadMusicgenresByNameImagesByTypeAsync(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadMusicgenresByNameImagesByTypeWithHttpMessagesAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancels a package installation
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Installation Id
            /// </param>
            public static void PostPackagesInstallingByIdDelete(this IRestClient operations, string id)
            {
                operations.PostPackagesInstallingByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a package installation
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Installation Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostPackagesInstallingByIdDeleteAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostPackagesInstallingByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void GetPersonsByNameImagesByType(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.GetPersonsByNameImagesByTypeAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetPersonsByNameImagesByTypeAsync(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetPersonsByNameImagesByTypeWithHttpMessagesAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void HeadPersonsByNameImagesByType(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.HeadPersonsByNameImagesByTypeAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadPersonsByNameImagesByTypeAsync(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadPersonsByNameImagesByTypeWithHttpMessagesAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes items from a playlist
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='entryIds'>
            /// </param>
            public static void PostPlaylistsByIdItemsDelete(this IRestClient operations, string id, string entryIds)
            {
                operations.PostPlaylistsByIdItemsDeleteAsync(id, entryIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes items from a playlist
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='entryIds'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostPlaylistsByIdItemsDeleteAsync(this IRestClient operations, string id, string entryIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostPlaylistsByIdItemsDeleteWithHttpMessagesAsync(id, entryIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static void GetProvidersSubtitlesSubtitlesById(this IRestClient operations, string id)
            {
                operations.GetProvidersSubtitlesSubtitlesByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetProvidersSubtitlesSubtitlesByIdAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetProvidersSubtitlesSubtitlesByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops a scheduled task
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void PostScheduledtasksRunningByIdDelete(this IRestClient operations, string id)
            {
                operations.PostScheduledtasksRunningByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a scheduled task
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostScheduledtasksRunningByIdDeleteAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostScheduledtasksRunningByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Issues a playstate command to a client
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PlaystateRequest:
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='command'>
            /// Possible values include: 'Stop', 'Pause', 'Unpause', 'NextTrack',
            /// 'PreviousTrack', 'Seek', 'Rewind', 'FastForward', 'PlayPause',
            /// 'SeekRelative'
            /// </param>
            public static void PostSessionsByIdPlayingByCommand(this IRestClient operations, PlaystateRequest body, string id, string command)
            {
                operations.PostSessionsByIdPlayingByCommandAsync(body, id, command).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Issues a playstate command to a client
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// PlaystateRequest:
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='command'>
            /// Possible values include: 'Stop', 'Pause', 'Unpause', 'NextTrack',
            /// 'PreviousTrack', 'Seek', 'Rewind', 'FastForward', 'PlayPause',
            /// 'SeekRelative'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsByIdPlayingByCommandAsync(this IRestClient operations, PlaystateRequest body, string id, string command, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsByIdPlayingByCommandWithHttpMessagesAsync(body, id, command, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Issues a system command to a client
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='command'>
            /// The command to send.
            /// </param>
            public static void PostSessionsByIdSystemByCommand(this IRestClient operations, string id, string command)
            {
                operations.PostSessionsByIdSystemByCommandAsync(id, command).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Issues a system command to a client
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='command'>
            /// The command to send.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsByIdSystemByCommandAsync(this IRestClient operations, string id, string command, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsByIdSystemByCommandWithHttpMessagesAsync(id, command, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Issues a system command to a client
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='command'>
            /// The command to send.
            /// </param>
            public static void PostSessionsByIdCommandByCommand(this IRestClient operations, string id, string command)
            {
                operations.PostSessionsByIdCommandByCommandAsync(id, command).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Issues a system command to a client
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='command'>
            /// The command to send.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsByIdCommandByCommandAsync(this IRestClient operations, string id, string command, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsByIdCommandByCommandWithHttpMessagesAsync(id, command, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds an additional user to a session
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='userId'>
            /// UserId Id
            /// </param>
            public static void PostSessionsByIdUsersByUserid(this IRestClient operations, string id, string userId)
            {
                operations.PostSessionsByIdUsersByUseridAsync(id, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds an additional user to a session
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='userId'>
            /// UserId Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsByIdUsersByUseridAsync(this IRestClient operations, string id, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsByIdUsersByUseridWithHttpMessagesAsync(id, userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes an additional user from a session
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='userId'>
            /// UserId Id
            /// </param>
            public static void DeleteSessionsByIdUsersByUserid(this IRestClient operations, string id, string userId)
            {
                operations.DeleteSessionsByIdUsersByUseridAsync(id, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes an additional user from a session
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='userId'>
            /// UserId Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSessionsByIdUsersByUseridAsync(this IRestClient operations, string id, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSessionsByIdUsersByUseridWithHttpMessagesAsync(id, userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void GetStudiosByNameImagesByType(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.GetStudiosByNameImagesByTypeAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetStudiosByNameImagesByTypeAsync(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetStudiosByNameImagesByTypeWithHttpMessagesAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void HeadStudiosByNameImagesByType(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.HeadStudiosByNameImagesByTypeAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadStudiosByNameImagesByTypeAsync(this IRestClient operations, string name, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadStudiosByNameImagesByTypeWithHttpMessagesAsync(name, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancels a sync job.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            public static void PostSyncJobsByIdDelete(this IRestClient operations, string id)
            {
                operations.PostSyncJobsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a sync job.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSyncJobsByIdDeleteAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSyncJobsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancels items from a sync target
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetId'>
            /// TargetId
            /// </param>
            /// <param name='itemIds'>
            /// ItemIds
            /// </param>
            public static void PostSyncByTargetidItemsDelete(this IRestClient operations, string targetId, string itemIds = default(string))
            {
                operations.PostSyncByTargetidItemsDeleteAsync(targetId, itemIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels items from a sync target
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='targetId'>
            /// TargetId
            /// </param>
            /// <param name='itemIds'>
            /// ItemIds
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSyncByTargetidItemsDeleteAsync(this IRestClient operations, string targetId, string itemIds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSyncByTargetidItemsDeleteWithHttpMessagesAsync(targetId, itemIds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reports that a sync job item has successfully been transferred.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            public static void PostSyncJobitemsByIdTransferred(this IRestClient operations, string id)
            {
                operations.PostSyncJobitemsByIdTransferredAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reports that a sync job item has successfully been transferred.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSyncJobitemsByIdTransferredAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSyncJobitemsByIdTransferredWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a sync job item file
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            public static void GetSyncJobitemsByIdFile(this IRestClient operations, string id)
            {
                operations.GetSyncJobitemsByIdFileAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a sync job item file
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSyncJobitemsByIdFileAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSyncJobitemsByIdFileWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a sync job item file
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            /// <param name='name'>
            /// Name
            /// </param>
            public static void GetSyncJobitemsByIdAdditionalfiles(this IRestClient operations, string id, string name)
            {
                operations.GetSyncJobitemsByIdAdditionalfilesAsync(id, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a sync job item file
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            /// <param name='name'>
            /// Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSyncJobitemsByIdAdditionalfilesAsync(this IRestClient operations, string id, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSyncJobitemsByIdAdditionalfilesWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Enables a cancelled or queued sync job item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            public static void PostSyncJobitemsByIdEnable(this IRestClient operations, string id)
            {
                operations.PostSyncJobitemsByIdEnableAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enables a cancelled or queued sync job item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSyncJobitemsByIdEnableAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSyncJobitemsByIdEnableWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancels a sync job item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            public static void PostSyncJobitemsByIdDelete(this IRestClient operations, string id)
            {
                operations.PostSyncJobitemsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a sync job item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSyncJobitemsByIdDeleteAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSyncJobitemsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Marks a job item for removal
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            public static void PostSyncJobitemsByIdMarkforremoval(this IRestClient operations, string id)
            {
                operations.PostSyncJobitemsByIdMarkforremovalAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Marks a job item for removal
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSyncJobitemsByIdMarkforremovalAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSyncJobitemsByIdMarkforremovalWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unmarks a job item for removal
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            public static void PostSyncJobitemsByIdUnmarkforremoval(this IRestClient operations, string id)
            {
                operations.PostSyncJobitemsByIdUnmarkforremovalAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unmarks a job item for removal
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSyncJobitemsByIdUnmarkforremovalAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSyncJobitemsByIdUnmarkforremovalWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a log file
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The log file name.
            /// </param>
            public static QueryResultString GetSystemLogsByNameLines(this IRestClient operations, string name)
            {
                return operations.GetSystemLogsByNameLinesAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a log file
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The log file name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultString> GetSystemLogsByNameLinesAsync(this IRestClient operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSystemLogsByNameLinesWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Clears audio or subtitle track selections for a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='trackType'>
            /// </param>
            public static void DeleteUsersByIdTrackselectionsByTracktype(this IRestClient operations, string id, string trackType)
            {
                operations.DeleteUsersByIdTrackselectionsByTracktypeAsync(id, trackType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clears audio or subtitle track selections for a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='trackType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUsersByIdTrackselectionsByTracktypeAsync(this IRestClient operations, string id, string trackType, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUsersByIdTrackselectionsByTracktypeWithHttpMessagesAsync(id, trackType, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a typed user setting
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// Key
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static void GetUsersByUseridTypedsettingsByKey(this IRestClient operations, string key, string userId)
            {
                operations.GetUsersByUseridTypedsettingsByKeyAsync(key, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a typed user setting
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// Key
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetUsersByUseridTypedsettingsByKeyAsync(this IRestClient operations, string key, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetUsersByUseridTypedsettingsByKeyWithHttpMessagesAsync(key, userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a typed user setting
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='key'>
            /// Key
            /// </param>
            public static void PostUsersByUseridTypedsettingsByKey(this IRestClient operations, string body, string userId, string key)
            {
                operations.PostUsersByUseridTypedsettingsByKeyAsync(body, userId, key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a typed user setting
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='key'>
            /// Key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByUseridTypedsettingsByKeyAsync(this IRestClient operations, string body, string userId, string key, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByUseridTypedsettingsByKeyWithHttpMessagesAsync(body, userId, key, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets items based on a query.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            public static QueryResultBaseItemDto GetUsersByUseridItemsResume(this IRestClient operations, string userId, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string))
            {
                return operations.GetUsersByUseridItemsResumeAsync(userId, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets items based on a query.
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='artistType'>
            /// Artist or AlbumArtist
            /// </param>
            /// <param name='maxOfficialRating'>
            /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='hasThemeSong'>
            /// Optional filter by items with theme songs.
            /// </param>
            /// <param name='hasThemeVideo'>
            /// Optional filter by items with theme videos.
            /// </param>
            /// <param name='hasSubtitles'>
            /// Optional filter by items with subtitles.
            /// </param>
            /// <param name='hasSpecialFeature'>
            /// Optional filter by items with special features.
            /// </param>
            /// <param name='hasTrailer'>
            /// Optional filter by items with trailers.
            /// </param>
            /// <param name='adjacentTo'>
            /// Optional. Return items that are siblings of a supplied item.
            /// </param>
            /// <param name='minIndexNumber'>
            /// Optional filter by minimum index number.
            /// </param>
            /// <param name='minPlayers'>
            /// Optional filter by minimum number of game players.
            /// </param>
            /// <param name='maxPlayers'>
            /// Optional filter by maximum number of game players.
            /// </param>
            /// <param name='parentIndexNumber'>
            /// Optional filter by parent index number.
            /// </param>
            /// <param name='hasParentalRating'>
            /// Optional filter by items that have or do not have a parental rating
            /// </param>
            /// <param name='isHD'>
            /// Optional filter by items that are HD or not.
            /// </param>
            /// <param name='locationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='excludeLocationTypes'>
            /// Optional. If specified, results will be filtered based on LocationType.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='isMissing'>
            /// Optional filter by items that are missing episodes or not.
            /// </param>
            /// <param name='isUnaired'>
            /// Optional filter by items that are unaired episodes or not.
            /// </param>
            /// <param name='minCommunityRating'>
            /// Optional filter by minimum community rating.
            /// </param>
            /// <param name='minCriticRating'>
            /// Optional filter by minimum critic rating.
            /// </param>
            /// <param name='airedDuringSeason'>
            /// Gets all episodes that aired during a season, including specials.
            /// </param>
            /// <param name='minPremiereDate'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSaved'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='minDateLastSavedForUser'>
            /// Optional. The minimum premiere date. Format = ISO
            /// </param>
            /// <param name='maxPremiereDate'>
            /// Optional. The maximum premiere date. Format = ISO
            /// </param>
            /// <param name='hasOverview'>
            /// Optional filter by items that have an overview or not.
            /// </param>
            /// <param name='hasImdbId'>
            /// Optional filter by items that have an imdb id or not.
            /// </param>
            /// <param name='hasTmdbId'>
            /// Optional filter by items that have a tmdb id or not.
            /// </param>
            /// <param name='hasTvdbId'>
            /// Optional filter by items that have a tvdb id or not.
            /// </param>
            /// <param name='excludeItemIds'>
            /// Optional. If specified, results will be filtered by exxcluding item ids.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='startIndex'>
            /// Optional. The record index to start at. All items with a lower index will
            /// be dropped from the results.
            /// </param>
            /// <param name='limit'>
            /// Optional. The maximum number of records to return
            /// </param>
            /// <param name='recursive'>
            /// When searching within folders, this determines whether or not the search
            /// will be recursive. true/false
            /// </param>
            /// <param name='searchTerm'>
            /// Enter a search term to perform a search request
            /// </param>
            /// <param name='sortOrder'>
            /// Sort Order - Ascending,Descending
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines
            /// </param>
            /// <param name='excludeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='anyProviderIdEquals'>
            /// Optional. If specified, result will be filtered to contain only items which
            /// match at least one of the specified IDs. Each provider ID must be in the
            /// form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted
            /// value pairs.
            /// </param>
            /// <param name='filters'>
            /// Optional. Specify additional filters to apply. This allows multiple, comma
            /// delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed,
            /// IsFavorite, IsResumable, Likes, Dislikes
            /// </param>
            /// <param name='isFavorite'>
            /// Optional filter by items that are marked as favorite, or not.
            /// </param>
            /// <param name='isMovie'>
            /// Optional filter for movies.
            /// </param>
            /// <param name='isSeries'>
            /// Optional filter for series.
            /// </param>
            /// <param name='isFolder'>
            /// Optional filter for folders.
            /// </param>
            /// <param name='isNews'>
            /// Optional filter for news.
            /// </param>
            /// <param name='isKids'>
            /// Optional filter for kids.
            /// </param>
            /// <param name='isSports'>
            /// Optional filter for sports.
            /// </param>
            /// <param name='projectToMedia'>
            /// ProjectToMedia
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='imageTypes'>
            /// Optional. If specified, results will be filtered based on those containing
            /// image types. This allows multiple, comma delimited.
            /// </param>
            /// <param name='sortBy'>
            /// Optional. Specify one or more sort orders, comma delimeted. Options: Album,
            /// AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated,
            /// DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random,
            /// Revenue, Runtime
            /// </param>
            /// <param name='isPlayed'>
            /// Optional filter by items that are played, or not.
            /// </param>
            /// <param name='genres'>
            /// Optional. If specified, results will be filtered based on genre. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='officialRatings'>
            /// Optional. If specified, results will be filtered based on OfficialRating.
            /// This allows multiple, pipe delimeted.
            /// </param>
            /// <param name='tags'>
            /// Optional. If specified, results will be filtered based on tag. This allows
            /// multiple, pipe delimeted.
            /// </param>
            /// <param name='years'>
            /// Optional. If specified, results will be filtered based on production year.
            /// This allows multiple, comma delimeted.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='person'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personIds'>
            /// Optional. If specified, results will be filtered to include only those
            /// containing the specified person.
            /// </param>
            /// <param name='personTypes'>
            /// Optional. If specified, along with Person, results will be filtered to
            /// include only those containing the specified person and PersonType. Allows
            /// multiple, comma-delimited
            /// </param>
            /// <param name='studios'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='studioIds'>
            /// Optional. If specified, results will be filtered based on studio. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artists'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='artistIds'>
            /// Optional. If specified, results will be filtered based on artist. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='albums'>
            /// Optional. If specified, results will be filtered based on album. This
            /// allows multiple, pipe delimeted.
            /// </param>
            /// <param name='ids'>
            /// Optional. If specific items are needed, specify a list of item id's to
            /// retrieve. This allows multiple, comma delimited.
            /// </param>
            /// <param name='videoTypes'>
            /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows
            /// multiple, comma delimeted.
            /// </param>
            /// <param name='containers'>
            /// Optional filter by Container. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioCodecs'>
            /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='audioLayouts'>
            /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='videoCodecs'>
            /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='subtitleCodecs'>
            /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='path'>
            /// Optional filter by Path.
            /// </param>
            /// <param name='minOfficialRating'>
            /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
            /// </param>
            /// <param name='isLocked'>
            /// Optional filter by items that are locked.
            /// </param>
            /// <param name='isPlaceHolder'>
            /// Optional filter by items that are placeholders
            /// </param>
            /// <param name='hasOfficialRating'>
            /// Optional filter by items that have official ratings
            /// </param>
            /// <param name='groupItemsIntoCollections'>
            /// Whether or not to hide items behind their boxsets.
            /// </param>
            /// <param name='is3D'>
            /// Optional filter by items that are 3D, or not.
            /// </param>
            /// <param name='seriesStatus'>
            /// Optional filter by Series Status. Allows multiple, comma delimeted.
            /// </param>
            /// <param name='nameStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='artistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='albumArtistStartsWithOrGreater'>
            /// Optional filter by items whose name is sorted equally or greater than a
            /// given input string.
            /// </param>
            /// <param name='nameStartsWith'>
            /// Optional filter by items whose name is sorted equally than a given input
            /// string.
            /// </param>
            /// <param name='nameLessThan'>
            /// Optional filter by items whose name is equally or lesser than a given input
            /// string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetUsersByUseridItemsResumeAsync(this IRestClient operations, string userId, string artistType = default(string), string maxOfficialRating = default(string), bool? hasThemeSong = default(bool?), bool? hasThemeVideo = default(bool?), bool? hasSubtitles = default(bool?), bool? hasSpecialFeature = default(bool?), bool? hasTrailer = default(bool?), string adjacentTo = default(string), int? minIndexNumber = default(int?), int? minPlayers = default(int?), int? maxPlayers = default(int?), int? parentIndexNumber = default(int?), bool? hasParentalRating = default(bool?), bool? isHD = default(bool?), string locationTypes = default(string), string excludeLocationTypes = default(string), bool? isMissing = default(bool?), bool? isUnaired = default(bool?), double? minCommunityRating = default(double?), double? minCriticRating = default(double?), int? airedDuringSeason = default(int?), string minPremiereDate = default(string), string minDateLastSaved = default(string), string minDateLastSavedForUser = default(string), string maxPremiereDate = default(string), bool? hasOverview = default(bool?), bool? hasImdbId = default(bool?), bool? hasTmdbId = default(bool?), bool? hasTvdbId = default(bool?), string excludeItemIds = default(string), int? startIndex = default(int?), int? limit = default(int?), bool? recursive = default(bool?), string searchTerm = default(string), string sortOrder = default(string), string parentId = default(string), string fields = default(string), string excludeItemTypes = default(string), string includeItemTypes = default(string), string anyProviderIdEquals = default(string), string filters = default(string), bool? isFavorite = default(bool?), bool? isMovie = default(bool?), bool? isSeries = default(bool?), bool? isFolder = default(bool?), bool? isNews = default(bool?), bool? isKids = default(bool?), bool? isSports = default(bool?), bool? projectToMedia = default(bool?), string mediaTypes = default(string), string imageTypes = default(string), string sortBy = default(string), bool? isPlayed = default(bool?), string genres = default(string), string officialRatings = default(string), string tags = default(string), string years = default(string), bool? enableImages = default(bool?), bool? enableUserData = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), string person = default(string), string personIds = default(string), string personTypes = default(string), string studios = default(string), string studioIds = default(string), string artists = default(string), string artistIds = default(string), string albums = default(string), string ids = default(string), string videoTypes = default(string), string containers = default(string), string audioCodecs = default(string), string audioLayouts = default(string), string videoCodecs = default(string), string subtitleCodecs = default(string), string path = default(string), string minOfficialRating = default(string), bool? isLocked = default(bool?), bool? isPlaceHolder = default(bool?), bool? hasOfficialRating = default(bool?), bool? groupItemsIntoCollections = default(bool?), bool? is3D = default(bool?), string seriesStatus = default(string), string nameStartsWithOrGreater = default(string), string artistStartsWithOrGreater = default(string), string albumArtistStartsWithOrGreater = default(string), string nameStartsWith = default(string), string nameLessThan = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersByUseridItemsResumeWithHttpMessagesAsync(userId, artistType, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, minIndexNumber, minPlayers, maxPlayers, parentIndexNumber, hasParentalRating, isHD, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, airedDuringSeason, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, includeItemTypes, anyProviderIdEquals, filters, isFavorite, isMovie, isSeries, isFolder, isNews, isKids, isSports, projectToMedia, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableImages, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, studioIds, artists, artistIds, albums, ids, videoTypes, containers, audioCodecs, audioLayouts, videoCodecs, subtitleCodecs, path, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, groupItemsIntoCollections, is3D, seriesStatus, nameStartsWithOrGreater, artistStartsWithOrGreater, albumArtistStartsWithOrGreater, nameStartsWith, nameLessThan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets latest media
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Latest-Items" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='limit'>
            /// Limit
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Chapters, DateCreated,
            /// Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path,
            /// People, ProviderIds, PrimaryImageAspectRatio, SortName, Studios, Taglines
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='isFolder'>
            /// Filter by items that are folders, or not.
            /// </param>
            /// <param name='isPlayed'>
            /// Filter by items that are played, or not.
            /// </param>
            /// <param name='groupItems'>
            /// Whether or not to group items into a parent container.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            public static IList<BaseItemDto> GetUsersByUseridItemsLatest(this IRestClient operations, string userId, int? limit = default(int?), string parentId = default(string), string fields = default(string), string includeItemTypes = default(string), string mediaTypes = default(string), bool? isFolder = default(bool?), bool? isPlayed = default(bool?), bool? groupItems = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?))
            {
                return operations.GetUsersByUseridItemsLatestAsync(userId, limit, parentId, fields, includeItemTypes, mediaTypes, isFolder, isPlayed, groupItems, enableImages, imageTypeLimit, enableImageTypes, enableUserData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets latest media
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Latest-Items" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='limit'>
            /// Limit
            /// </param>
            /// <param name='parentId'>
            /// Specify this to localize the search to a specific item or folder. Omit to
            /// use the root
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Chapters, DateCreated,
            /// Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path,
            /// People, ProviderIds, PrimaryImageAspectRatio, SortName, Studios, Taglines
            /// </param>
            /// <param name='includeItemTypes'>
            /// Optional. If specified, results will be filtered based on item type. This
            /// allows multiple, comma delimeted.
            /// </param>
            /// <param name='mediaTypes'>
            /// Optional filter by MediaType. Allows multiple, comma delimited.
            /// </param>
            /// <param name='isFolder'>
            /// Filter by items that are folders, or not.
            /// </param>
            /// <param name='isPlayed'>
            /// Filter by items that are played, or not.
            /// </param>
            /// <param name='groupItems'>
            /// Whether or not to group items into a parent container.
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BaseItemDto>> GetUsersByUseridItemsLatestAsync(this IRestClient operations, string userId, int? limit = default(int?), string parentId = default(string), string fields = default(string), string includeItemTypes = default(string), string mediaTypes = default(string), bool? isFolder = default(bool?), bool? isPlayed = default(bool?), bool? groupItems = default(bool?), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersByUseridItemsLatestWithHttpMessagesAsync(userId, limit, parentId, fields, includeItemTypes, mediaTypes, isFolder, isPlayed, groupItems, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an item from a user's library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static BaseItemDto GetUsersByUseridItemsById(this IRestClient operations, string userId, string id)
            {
                return operations.GetUsersByUseridItemsByIdAsync(userId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an item from a user's library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseItemDto> GetUsersByUseridItemsByIdAsync(this IRestClient operations, string userId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersByUseridItemsByIdWithHttpMessagesAsync(userId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the root folder from a user's library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            public static BaseItemDto GetUsersByUseridItemsRoot(this IRestClient operations, string userId)
            {
                return operations.GetUsersByUseridItemsRootAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the root folder from a user's library
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseItemDto> GetUsersByUseridItemsRootAsync(this IRestClient operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersByUseridItemsRootWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Marks an item as a favorite
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static UserItemDataDto PostUsersByUseridFavoriteitemsById(this IRestClient operations, string userId, string id)
            {
                return operations.PostUsersByUseridFavoriteitemsByIdAsync(userId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Marks an item as a favorite
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserItemDataDto> PostUsersByUseridFavoriteitemsByIdAsync(this IRestClient operations, string userId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUsersByUseridFavoriteitemsByIdWithHttpMessagesAsync(userId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unmarks an item as a favorite
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static UserItemDataDto DeleteUsersByUseridFavoriteitemsById(this IRestClient operations, string userId, string id)
            {
                return operations.DeleteUsersByUseridFavoriteitemsByIdAsync(userId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unmarks an item as a favorite
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserItemDataDto> DeleteUsersByUseridFavoriteitemsByIdAsync(this IRestClient operations, string userId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteUsersByUseridFavoriteitemsByIdWithHttpMessagesAsync(userId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/User-Authentication" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void GetUsersByIdImagesByType(this IRestClient operations, string id, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.GetUsersByIdImagesByTypeAsync(id, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/User-Authentication" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetUsersByIdImagesByTypeAsync(this IRestClient operations, string id, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetUsersByIdImagesByTypeWithHttpMessagesAsync(id, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void HeadUsersByIdImagesByType(this IRestClient operations, string id, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?))
            {
                operations.HeadUsersByIdImagesByTypeAsync(id, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadUsersByIdImagesByTypeAsync(this IRestClient operations, string id, string type, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadUsersByIdImagesByTypeWithHttpMessagesAsync(id, type, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Uploads an image for an item, must be base64 encoded.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void PostUsersByIdImagesByType(this IRestClient operations, string body, string id, string type, int? index = default(int?))
            {
                operations.PostUsersByIdImagesByTypeAsync(body, id, type, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads an image for an item, must be base64 encoded.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByIdImagesByTypeAsync(this IRestClient operations, string body, string id, string type, int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByIdImagesByTypeWithHttpMessagesAsync(body, id, type, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void DeleteUsersByIdImagesByType(this IRestClient operations, string id, string type, int? index = default(int?))
            {
                operations.DeleteUsersByIdImagesByTypeAsync(id, type, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUsersByIdImagesByTypeAsync(this IRestClient operations, string id, string type, int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUsersByIdImagesByTypeWithHttpMessagesAsync(id, type, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Marks an item as played
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Playback-Check-ins" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='datePlayed'>
            /// The date the item was played (if any). Format = yyyyMMddHHmmss
            /// </param>
            public static UserItemDataDto PostUsersByUseridPlayeditemsById(this IRestClient operations, string userId, string id, string datePlayed = default(string))
            {
                return operations.PostUsersByUseridPlayeditemsByIdAsync(userId, id, datePlayed).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Marks an item as played
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Playback-Check-ins" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='datePlayed'>
            /// The date the item was played (if any). Format = yyyyMMddHHmmss
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserItemDataDto> PostUsersByUseridPlayeditemsByIdAsync(this IRestClient operations, string userId, string id, string datePlayed = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUsersByUseridPlayeditemsByIdWithHttpMessagesAsync(userId, id, datePlayed, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Marks an item as unplayed
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Playback-Check-ins" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static UserItemDataDto DeleteUsersByUseridPlayeditemsById(this IRestClient operations, string userId, string id)
            {
                return operations.DeleteUsersByUseridPlayeditemsByIdAsync(userId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Marks an item as unplayed
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Playback-Check-ins" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserItemDataDto> DeleteUsersByUseridPlayeditemsByIdAsync(this IRestClient operations, string userId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteUsersByUseridPlayeditemsByIdWithHttpMessagesAsync(userId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reports that a user has begun playing an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// The id of the MediaSource
            /// </param>
            /// <param name='canSeek'>
            /// Indicates if the client can seek
            /// </param>
            /// <param name='audioStreamIndex'>
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// </param>
            /// <param name='playMethod'>
            /// Possible values include: 'Transcode', 'DirectStream', 'DirectPlay'
            /// </param>
            /// <param name='liveStreamId'>
            /// </param>
            /// <param name='playSessionId'>
            /// </param>
            public static void PostUsersByUseridPlayingitemsById(this IRestClient operations, string userId, string id, string mediaSourceId, bool? canSeek = default(bool?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), string playMethod = default(string), string liveStreamId = default(string), string playSessionId = default(string))
            {
                operations.PostUsersByUseridPlayingitemsByIdAsync(userId, id, mediaSourceId, canSeek, audioStreamIndex, subtitleStreamIndex, playMethod, liveStreamId, playSessionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reports that a user has begun playing an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// The id of the MediaSource
            /// </param>
            /// <param name='canSeek'>
            /// Indicates if the client can seek
            /// </param>
            /// <param name='audioStreamIndex'>
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// </param>
            /// <param name='playMethod'>
            /// Possible values include: 'Transcode', 'DirectStream', 'DirectPlay'
            /// </param>
            /// <param name='liveStreamId'>
            /// </param>
            /// <param name='playSessionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByUseridPlayingitemsByIdAsync(this IRestClient operations, string userId, string id, string mediaSourceId, bool? canSeek = default(bool?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), string playMethod = default(string), string liveStreamId = default(string), string playSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByUseridPlayingitemsByIdWithHttpMessagesAsync(userId, id, mediaSourceId, canSeek, audioStreamIndex, subtitleStreamIndex, playMethod, liveStreamId, playSessionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reports that a user has stopped playing an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// The id of the MediaSource
            /// </param>
            /// <param name='nextMediaType'>
            /// The next media type that will play
            /// </param>
            /// <param name='positionTicks'>
            /// Optional. The position, in ticks, where playback stopped. 1ms = 10000
            /// ticks.
            /// </param>
            /// <param name='liveStreamId'>
            /// </param>
            /// <param name='playSessionId'>
            /// </param>
            public static void DeleteUsersByUseridPlayingitemsById(this IRestClient operations, string userId, string id, string mediaSourceId, string nextMediaType, long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string))
            {
                operations.DeleteUsersByUseridPlayingitemsByIdAsync(userId, id, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reports that a user has stopped playing an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// The id of the MediaSource
            /// </param>
            /// <param name='nextMediaType'>
            /// The next media type that will play
            /// </param>
            /// <param name='positionTicks'>
            /// Optional. The position, in ticks, where playback stopped. 1ms = 10000
            /// ticks.
            /// </param>
            /// <param name='liveStreamId'>
            /// </param>
            /// <param name='playSessionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUsersByUseridPlayingitemsByIdAsync(this IRestClient operations, string userId, string id, string mediaSourceId, string nextMediaType, long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUsersByUseridPlayingitemsByIdWithHttpMessagesAsync(userId, id, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a Connect link for a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='connectUsername'>
            /// Connect username
            /// </param>
            public static ConnectUserLinkResult PostUsersByIdConnectLink(this IRestClient operations, string id, string connectUsername)
            {
                return operations.PostUsersByIdConnectLinkAsync(id, connectUsername).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Connect link for a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='connectUsername'>
            /// Connect username
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectUserLinkResult> PostUsersByIdConnectLinkAsync(this IRestClient operations, string id, string connectUsername, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUsersByIdConnectLinkWithHttpMessagesAsync(id, connectUsername, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a Connect link for a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            public static void DeleteUsersByIdConnectLink(this IRestClient operations, string id)
            {
                operations.DeleteUsersByIdConnectLinkAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a Connect link for a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUsersByIdConnectLinkAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUsersByIdConnectLinkWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes alternate video sources.
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static void PostVideosByIdAlternatesourcesDelete(this IRestClient operations, string id)
            {
                operations.PostVideosByIdAlternatesourcesDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes alternate video sources.
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostVideosByIdAlternatesourcesDeleteAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostVideosByIdAlternatesourcesDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes an external subtitle file
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            public static void DeleteVideosByIdSubtitlesByIndex(this IRestClient operations, string id, string mediaSourceId, int index)
            {
                operations.DeleteVideosByIdSubtitlesByIndexAsync(id, mediaSourceId, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an external subtitle file
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteVideosByIdSubtitlesByIndexAsync(this IRestClient operations, string id, string mediaSourceId, int index, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteVideosByIdSubtitlesByIndexWithHttpMessagesAsync(id, mediaSourceId, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void GetArtistsByNameImagesByTypeByIndex(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.GetArtistsByNameImagesByTypeByIndexAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetArtistsByNameImagesByTypeByIndexAsync(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetArtistsByNameImagesByTypeByIndexWithHttpMessagesAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void HeadArtistsByNameImagesByTypeByIndex(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.HeadArtistsByNameImagesByTypeByIndexAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadArtistsByNameImagesByTypeByIndexAsync(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadArtistsByNameImagesByTypeByIndexWithHttpMessagesAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='segmentContainer'>
            /// </param>
            /// <param name='segmentId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='playlistId'>
            /// </param>
            public static void GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(this IRestClient operations, string segmentContainer, string segmentId, string id, string playlistId)
            {
                operations.GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerAsync(segmentContainer, segmentId, id, playlistId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='segmentContainer'>
            /// </param>
            /// <param name='segmentId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='playlistId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerAsync(this IRestClient operations, string segmentContainer, string segmentId, string id, string playlistId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerWithHttpMessagesAsync(segmentContainer, segmentId, id, playlistId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='segmentContainer'>
            /// </param>
            /// <param name='segmentId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='playlistId'>
            /// </param>
            public static void HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(this IRestClient operations, string segmentContainer, string segmentId, string id, string playlistId)
            {
                operations.HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerAsync(segmentContainer, segmentId, id, playlistId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='segmentContainer'>
            /// </param>
            /// <param name='segmentId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='playlistId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerAsync(this IRestClient operations, string segmentContainer, string segmentId, string id, string playlistId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerWithHttpMessagesAsync(segmentContainer, segmentId, id, playlistId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void GetGamegenresByNameImagesByTypeByIndex(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.GetGamegenresByNameImagesByTypeByIndexAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetGamegenresByNameImagesByTypeByIndexAsync(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetGamegenresByNameImagesByTypeByIndexWithHttpMessagesAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void HeadGamegenresByNameImagesByTypeByIndex(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.HeadGamegenresByNameImagesByTypeByIndexAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadGamegenresByNameImagesByTypeByIndexAsync(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadGamegenresByNameImagesByTypeByIndexWithHttpMessagesAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void GetGenresByNameImagesByTypeByIndex(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.GetGenresByNameImagesByTypeByIndexAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetGenresByNameImagesByTypeByIndexAsync(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetGenresByNameImagesByTypeByIndexWithHttpMessagesAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void HeadGenresByNameImagesByTypeByIndex(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.HeadGenresByNameImagesByTypeByIndexAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadGenresByNameImagesByTypeByIndexAsync(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadGenresByNameImagesByTypeByIndexWithHttpMessagesAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='language'>
            /// Language
            /// </param>
            /// <param name='isPerfectMatch'>
            /// IsPerfectMatch
            /// </param>
            /// <param name='isForced'>
            /// IsForced
            /// </param>
            public static IList<RemoteSubtitleInfo> GetItemsByIdRemotesearchSubtitlesByLanguage(this IRestClient operations, string id, string mediaSourceId, string language, bool? isPerfectMatch = default(bool?), bool? isForced = default(bool?))
            {
                return operations.GetItemsByIdRemotesearchSubtitlesByLanguageAsync(id, mediaSourceId, language, isPerfectMatch, isForced).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='language'>
            /// Language
            /// </param>
            /// <param name='isPerfectMatch'>
            /// IsPerfectMatch
            /// </param>
            /// <param name='isForced'>
            /// IsForced
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RemoteSubtitleInfo>> GetItemsByIdRemotesearchSubtitlesByLanguageAsync(this IRestClient operations, string id, string mediaSourceId, string language, bool? isPerfectMatch = default(bool?), bool? isForced = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemsByIdRemotesearchSubtitlesByLanguageWithHttpMessagesAsync(id, mediaSourceId, language, isPerfectMatch, isForced, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an external subtitle file
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            public static void PostItemsByIdSubtitlesByIndexDelete(this IRestClient operations, string id, string mediaSourceId, int index)
            {
                operations.PostItemsByIdSubtitlesByIndexDeleteAsync(id, mediaSourceId, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an external subtitle file
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByIdSubtitlesByIndexDeleteAsync(this IRestClient operations, string id, string mediaSourceId, int index, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByIdSubtitlesByIndexDeleteWithHttpMessagesAsync(id, mediaSourceId, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='subtitleId'>
            /// SubtitleId
            /// </param>
            public static SubtitlesSubtitleDownloadResult PostItemsByIdRemotesearchSubtitlesBySubtitleid(this IRestClient operations, string id, string mediaSourceId, string subtitleId)
            {
                return operations.PostItemsByIdRemotesearchSubtitlesBySubtitleidAsync(id, mediaSourceId, subtitleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='subtitleId'>
            /// SubtitleId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubtitlesSubtitleDownloadResult> PostItemsByIdRemotesearchSubtitlesBySubtitleidAsync(this IRestClient operations, string id, string mediaSourceId, string subtitleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostItemsByIdRemotesearchSubtitlesBySubtitleidWithHttpMessagesAsync(id, mediaSourceId, subtitleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void GetItemsByIdImagesByTypeByIndex(this IRestClient operations, string id, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.GetItemsByIdImagesByTypeByIndexAsync(id, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetItemsByIdImagesByTypeByIndexAsync(this IRestClient operations, string id, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetItemsByIdImagesByTypeByIndexWithHttpMessagesAsync(id, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void HeadItemsByIdImagesByTypeByIndex(this IRestClient operations, string id, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.HeadItemsByIdImagesByTypeByIndexAsync(id, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadItemsByIdImagesByTypeByIndexAsync(this IRestClient operations, string id, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadItemsByIdImagesByTypeByIndexWithHttpMessagesAsync(id, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Uploads an image for an item, must be base64 encoded.
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void PostItemsByIdImagesByTypeByIndex(this IRestClient operations, string body, string id, string type, int index)
            {
                operations.PostItemsByIdImagesByTypeByIndexAsync(body, id, type, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads an image for an item, must be base64 encoded.
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByIdImagesByTypeByIndexAsync(this IRestClient operations, string body, string id, string type, int index, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByIdImagesByTypeByIndexWithHttpMessagesAsync(body, id, type, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void DeleteItemsByIdImagesByTypeByIndex(this IRestClient operations, string id, string type, int index)
            {
                operations.DeleteItemsByIdImagesByTypeByIndexAsync(id, type, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteItemsByIdImagesByTypeByIndexAsync(this IRestClient operations, string id, string type, int index, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteItemsByIdImagesByTypeByIndexWithHttpMessagesAsync(id, type, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void PostItemsByIdImagesByTypeDelete(this IRestClient operations, string id, string type, int? index = default(int?))
            {
                operations.PostItemsByIdImagesByTypeDeleteAsync(id, type, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByIdImagesByTypeDeleteAsync(this IRestClient operations, string id, string type, int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByIdImagesByTypeDeleteWithHttpMessagesAsync(id, type, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sets a channel disabled or not
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SetChannelDisabled
            /// </param>
            /// <param name='id'>
            /// </param>
            public static QueryResultEmbyLiveTVChannelManagementInfo PostLivetvManageChannelsByIdDisabled(this IRestClient operations, LiveTVApiSetChannelDisabled body, string id)
            {
                return operations.PostLivetvManageChannelsByIdDisabledAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets a channel disabled or not
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SetChannelDisabled
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultEmbyLiveTVChannelManagementInfo> PostLivetvManageChannelsByIdDisabledAsync(this IRestClient operations, LiveTVApiSetChannelDisabled body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostLivetvManageChannelsByIdDisabledWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets a channel sort index
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SetChannelSortIndex
            /// </param>
            /// <param name='id'>
            /// </param>
            public static QueryResultEmbyLiveTVChannelManagementInfo PostLivetvManageChannelsByIdSortindex(this IRestClient operations, LiveTVApiSetChannelSortIndex body, string id)
            {
                return operations.PostLivetvManageChannelsByIdSortindexAsync(body, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets a channel sort index
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// SetChannelSortIndex
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultEmbyLiveTVChannelManagementInfo> PostLivetvManageChannelsByIdSortindexAsync(this IRestClient operations, LiveTVApiSetChannelSortIndex body, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostLivetvManageChannelsByIdSortindexWithHttpMessagesAsync(body, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void GetMusicgenresByNameImagesByTypeByIndex(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.GetMusicgenresByNameImagesByTypeByIndexAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetMusicgenresByNameImagesByTypeByIndexAsync(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetMusicgenresByNameImagesByTypeByIndexWithHttpMessagesAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void HeadMusicgenresByNameImagesByTypeByIndex(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.HeadMusicgenresByNameImagesByTypeByIndexAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadMusicgenresByNameImagesByTypeByIndexAsync(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadMusicgenresByNameImagesByTypeByIndexWithHttpMessagesAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void GetPersonsByNameImagesByTypeByIndex(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.GetPersonsByNameImagesByTypeByIndexAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetPersonsByNameImagesByTypeByIndexAsync(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetPersonsByNameImagesByTypeByIndexWithHttpMessagesAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void HeadPersonsByNameImagesByTypeByIndex(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.HeadPersonsByNameImagesByTypeByIndexAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadPersonsByNameImagesByTypeByIndexAsync(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadPersonsByNameImagesByTypeByIndexWithHttpMessagesAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes an additional user from a session
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='userId'>
            /// UserId Id
            /// </param>
            public static void PostSessionsByIdUsersByUseridDelete(this IRestClient operations, string id, string userId)
            {
                operations.PostSessionsByIdUsersByUseridDeleteAsync(id, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes an additional user from a session
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Session Id
            /// </param>
            /// <param name='userId'>
            /// UserId Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostSessionsByIdUsersByUseridDeleteAsync(this IRestClient operations, string id, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostSessionsByIdUsersByUseridDeleteWithHttpMessagesAsync(id, userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void GetStudiosByNameImagesByTypeByIndex(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.GetStudiosByNameImagesByTypeByIndexAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetStudiosByNameImagesByTypeByIndexAsync(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetStudiosByNameImagesByTypeByIndexWithHttpMessagesAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void HeadStudiosByNameImagesByTypeByIndex(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.HeadStudiosByNameImagesByTypeByIndexAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Item name
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadStudiosByNameImagesByTypeByIndexAsync(this IRestClient operations, string name, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadStudiosByNameImagesByTypeByIndexWithHttpMessagesAsync(name, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Clears audio or subtitle track selections for a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='trackType'>
            /// </param>
            public static void PostUsersByIdTrackselectionsByTracktypeDelete(this IRestClient operations, string id, string trackType)
            {
                operations.PostUsersByIdTrackselectionsByTracktypeDeleteAsync(id, trackType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clears audio or subtitle track selections for a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='trackType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByIdTrackselectionsByTracktypeDeleteAsync(this IRestClient operations, string id, string trackType, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByIdTrackselectionsByTracktypeDeleteWithHttpMessagesAsync(id, trackType, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets special features for an item
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Movie Id
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            public static IList<BaseItemDto> GetUsersByUseridItemsByIdSpecialfeatures(this IRestClient operations, string userId, string id, string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?))
            {
                return operations.GetUsersByUseridItemsByIdSpecialfeaturesAsync(userId, id, fields, enableImages, imageTypeLimit, enableImageTypes, enableUserData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets special features for an item
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Movie Id
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BaseItemDto>> GetUsersByUseridItemsByIdSpecialfeaturesAsync(this IRestClient operations, string userId, string id, string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersByUseridItemsByIdSpecialfeaturesWithHttpMessagesAsync(userId, id, fields, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets local trailers for an item
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            public static IList<BaseItemDto> GetUsersByUseridItemsByIdLocaltrailers(this IRestClient operations, string userId, string id, string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?))
            {
                return operations.GetUsersByUseridItemsByIdLocaltrailersAsync(userId, id, fields, enableImages, imageTypeLimit, enableImageTypes, enableUserData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets local trailers for an item
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BaseItemDto>> GetUsersByUseridItemsByIdLocaltrailersAsync(this IRestClient operations, string userId, string id, string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersByUseridItemsByIdLocaltrailersWithHttpMessagesAsync(userId, id, fields, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets intros to play before the main media item plays
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            public static QueryResultBaseItemDto GetUsersByUseridItemsByIdIntros(this IRestClient operations, string userId, string id, string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?))
            {
                return operations.GetUsersByUseridItemsByIdIntrosAsync(userId, id, fields, enableImages, imageTypeLimit, enableImageTypes, enableUserData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets intros to play before the main media item plays
            /// <see href="https://github.com/MediaBrowser/Emby/wiki/Item-Information" />
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='fields'>
            /// Optional. Specify additional fields of information to return in the output.
            /// This allows multiple, comma delimeted. Options: Budget, Chapters,
            /// DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview,
            /// ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue,
            /// SortName, Studios, Taglines, TrailerUrls
            /// </param>
            /// <param name='enableImages'>
            /// Optional, include image information in output
            /// </param>
            /// <param name='imageTypeLimit'>
            /// Optional, the max number of images to return, per image type
            /// </param>
            /// <param name='enableImageTypes'>
            /// Optional. The image types to include in the output.
            /// </param>
            /// <param name='enableUserData'>
            /// Optional, include user data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultBaseItemDto> GetUsersByUseridItemsByIdIntrosAsync(this IRestClient operations, string userId, string id, string fields = default(string), bool? enableImages = default(bool?), int? imageTypeLimit = default(int?), string enableImageTypes = default(string), bool? enableUserData = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersByUseridItemsByIdIntrosWithHttpMessagesAsync(userId, id, fields, enableImages, imageTypeLimit, enableImageTypes, enableUserData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unmarks an item as a favorite
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static UserItemDataDto PostUsersByUseridFavoriteitemsByIdDelete(this IRestClient operations, string userId, string id)
            {
                return operations.PostUsersByUseridFavoriteitemsByIdDeleteAsync(userId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unmarks an item as a favorite
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserItemDataDto> PostUsersByUseridFavoriteitemsByIdDeleteAsync(this IRestClient operations, string userId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUsersByUseridFavoriteitemsByIdDeleteWithHttpMessagesAsync(userId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a user's saved personal rating for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static UserItemDataDto DeleteUsersByUseridItemsByIdRating(this IRestClient operations, string userId, string id)
            {
                return operations.DeleteUsersByUseridItemsByIdRatingAsync(userId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user's saved personal rating for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserItemDataDto> DeleteUsersByUseridItemsByIdRatingAsync(this IRestClient operations, string userId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteUsersByUseridItemsByIdRatingWithHttpMessagesAsync(userId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a user's rating for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='likes'>
            /// Whether the user likes the item or not. true/false
            /// </param>
            public static UserItemDataDto PostUsersByUseridItemsByIdRating(this IRestClient operations, string userId, string id, bool likes)
            {
                return operations.PostUsersByUseridItemsByIdRatingAsync(userId, id, likes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user's rating for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='likes'>
            /// Whether the user likes the item or not. true/false
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserItemDataDto> PostUsersByUseridItemsByIdRatingAsync(this IRestClient operations, string userId, string id, bool likes, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUsersByUseridItemsByIdRatingWithHttpMessagesAsync(userId, id, likes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a user's hide from resume for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='hide'>
            /// Whether the item should be hidden from reusme or not. true/false
            /// </param>
            public static UserItemDataDto PostUsersByUseridItemsByIdHidefromresume(this IRestClient operations, string userId, string id, bool hide)
            {
                return operations.PostUsersByUseridItemsByIdHidefromresumeAsync(userId, id, hide).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user's hide from resume for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='hide'>
            /// Whether the item should be hidden from reusme or not. true/false
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserItemDataDto> PostUsersByUseridItemsByIdHidefromresumeAsync(this IRestClient operations, string userId, string id, bool hide, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUsersByUseridItemsByIdHidefromresumeWithHttpMessagesAsync(userId, id, hide, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void GetUsersByIdImagesByTypeByIndex(this IRestClient operations, string id, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.GetUsersByIdImagesByTypeByIndexAsync(id, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetUsersByIdImagesByTypeByIndexAsync(this IRestClient operations, string id, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetUsersByIdImagesByTypeByIndexWithHttpMessagesAsync(id, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            public static void HeadUsersByIdImagesByTypeByIndex(this IRestClient operations, string id, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?))
            {
                operations.HeadUsersByIdImagesByTypeByIndexAsync(id, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='maxWidth'>
            /// The maximum image width to return.
            /// </param>
            /// <param name='maxHeight'>
            /// The maximum image height to return.
            /// </param>
            /// <param name='width'>
            /// The fixed image width to return.
            /// </param>
            /// <param name='height'>
            /// The fixed image height to return.
            /// </param>
            /// <param name='quality'>
            /// Optional quality setting, from 0-100. Defaults to 90 and should suffice in
            /// most cases.
            /// </param>
            /// <param name='tag'>
            /// Optional. Supply the cache tag from the item object to receive strong
            /// caching headers.
            /// </param>
            /// <param name='cropWhitespace'>
            /// Specify if whitespace should be cropped out of the image. True/False. If
            /// unspecified, whitespace will be cropped from logos and clear art.
            /// </param>
            /// <param name='enableImageEnhancers'>
            /// Enable or disable image enhancers such as cover art.
            /// </param>
            /// <param name='format'>
            /// Determines the output foramt of the image - original,gif,jpg,png
            /// </param>
            /// <param name='backgroundColor'>
            /// Optional. Apply a background color for transparent images.
            /// </param>
            /// <param name='foregroundLayer'>
            /// Optional. Apply a foreground layer on top of the image.
            /// </param>
            /// <param name='autoOrient'>
            /// Set to true to force normalization of orientation in the event the renderer
            /// does not support it.
            /// </param>
            /// <param name='keepAnimation'>
            /// Set to true to retain image animation (when supported).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadUsersByIdImagesByTypeByIndexAsync(this IRestClient operations, string id, string type, int index, int? maxWidth = default(int?), int? maxHeight = default(int?), int? width = default(int?), int? height = default(int?), int? quality = default(int?), string tag = default(string), bool? cropWhitespace = default(bool?), bool? enableImageEnhancers = default(bool?), string format = default(string), string backgroundColor = default(string), string foregroundLayer = default(string), bool? autoOrient = default(bool?), bool? keepAnimation = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadUsersByIdImagesByTypeByIndexWithHttpMessagesAsync(id, type, index, maxWidth, maxHeight, width, height, quality, tag, cropWhitespace, enableImageEnhancers, format, backgroundColor, foregroundLayer, autoOrient, keepAnimation, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Uploads an image for an item, must be base64 encoded.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void PostUsersByIdImagesByTypeByIndex(this IRestClient operations, string body, string id, string type, int index)
            {
                operations.PostUsersByIdImagesByTypeByIndexAsync(body, id, type, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads an image for an item, must be base64 encoded.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Binary stream
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByIdImagesByTypeByIndexAsync(this IRestClient operations, string body, string id, string type, int index, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByIdImagesByTypeByIndexWithHttpMessagesAsync(body, id, type, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void DeleteUsersByIdImagesByTypeByIndex(this IRestClient operations, string id, string type, int index)
            {
                operations.DeleteUsersByIdImagesByTypeByIndexAsync(id, type, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUsersByIdImagesByTypeByIndexAsync(this IRestClient operations, string id, string type, int index, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUsersByIdImagesByTypeByIndexWithHttpMessagesAsync(id, type, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void PostUsersByIdImagesByTypeDelete(this IRestClient operations, string id, string type, int? index = default(int?))
            {
                operations.PostUsersByIdImagesByTypeDeleteAsync(id, type, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByIdImagesByTypeDeleteAsync(this IRestClient operations, string id, string type, int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByIdImagesByTypeDeleteWithHttpMessagesAsync(id, type, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates userdata for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UserItemDataDto:
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='itemId'>
            /// </param>
            public static void PostUsersByUseridItemsByItemidUserdata(this IRestClient operations, UserItemDataDto body, string userId, string itemId)
            {
                operations.PostUsersByUseridItemsByItemidUserdataAsync(body, userId, itemId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates userdata for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UserItemDataDto:
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='itemId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByUseridItemsByItemidUserdataAsync(this IRestClient operations, UserItemDataDto body, string userId, string itemId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByUseridItemsByItemidUserdataWithHttpMessagesAsync(body, userId, itemId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reports a user's playback progress
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// OnPlaybackProgress
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// The id of the MediaSource
            /// </param>
            /// <param name='positionTicks'>
            /// Optional. The current position, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='isPaused'>
            /// Indicates if the player is paused.
            /// </param>
            /// <param name='isMuted'>
            /// Indicates if the player is muted.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// </param>
            /// <param name='volumeLevel'>
            /// Scale of 0-100
            /// </param>
            /// <param name='playMethod'>
            /// Possible values include: 'Transcode', 'DirectStream', 'DirectPlay'
            /// </param>
            /// <param name='liveStreamId'>
            /// </param>
            /// <param name='playSessionId'>
            /// </param>
            /// <param name='repeatMode'>
            /// Possible values include: 'RepeatNone', 'RepeatAll', 'RepeatOne'
            /// </param>
            /// <param name='subtitleOffset'>
            /// </param>
            /// <param name='playbackRate'>
            /// </param>
            public static void PostUsersByUseridPlayingitemsByIdProgress(this IRestClient operations, MediaEncodingApiOnPlaybackProgress body, string userId, string id, string mediaSourceId, long? positionTicks = default(long?), bool? isPaused = default(bool?), bool? isMuted = default(bool?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? volumeLevel = default(int?), string playMethod = default(string), string liveStreamId = default(string), string playSessionId = default(string), string repeatMode = default(string), int? subtitleOffset = default(int?), double? playbackRate = default(double?))
            {
                operations.PostUsersByUseridPlayingitemsByIdProgressAsync(body, userId, id, mediaSourceId, positionTicks, isPaused, isMuted, audioStreamIndex, subtitleStreamIndex, volumeLevel, playMethod, liveStreamId, playSessionId, repeatMode, subtitleOffset, playbackRate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reports a user's playback progress
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// OnPlaybackProgress
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// The id of the MediaSource
            /// </param>
            /// <param name='positionTicks'>
            /// Optional. The current position, in ticks. 1ms = 10000 ticks.
            /// </param>
            /// <param name='isPaused'>
            /// Indicates if the player is paused.
            /// </param>
            /// <param name='isMuted'>
            /// Indicates if the player is muted.
            /// </param>
            /// <param name='audioStreamIndex'>
            /// </param>
            /// <param name='subtitleStreamIndex'>
            /// </param>
            /// <param name='volumeLevel'>
            /// Scale of 0-100
            /// </param>
            /// <param name='playMethod'>
            /// Possible values include: 'Transcode', 'DirectStream', 'DirectPlay'
            /// </param>
            /// <param name='liveStreamId'>
            /// </param>
            /// <param name='playSessionId'>
            /// </param>
            /// <param name='repeatMode'>
            /// Possible values include: 'RepeatNone', 'RepeatAll', 'RepeatOne'
            /// </param>
            /// <param name='subtitleOffset'>
            /// </param>
            /// <param name='playbackRate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByUseridPlayingitemsByIdProgressAsync(this IRestClient operations, MediaEncodingApiOnPlaybackProgress body, string userId, string id, string mediaSourceId, long? positionTicks = default(long?), bool? isPaused = default(bool?), bool? isMuted = default(bool?), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), int? volumeLevel = default(int?), string playMethod = default(string), string liveStreamId = default(string), string playSessionId = default(string), string repeatMode = default(string), int? subtitleOffset = default(int?), double? playbackRate = default(double?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByUseridPlayingitemsByIdProgressWithHttpMessagesAsync(body, userId, id, mediaSourceId, positionTicks, isPaused, isMuted, audioStreamIndex, subtitleStreamIndex, volumeLevel, playMethod, liveStreamId, playSessionId, repeatMode, subtitleOffset, playbackRate, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reports that a user has stopped playing an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// The id of the MediaSource
            /// </param>
            /// <param name='nextMediaType'>
            /// The next media type that will play
            /// </param>
            /// <param name='positionTicks'>
            /// Optional. The position, in ticks, where playback stopped. 1ms = 10000
            /// ticks.
            /// </param>
            /// <param name='liveStreamId'>
            /// </param>
            /// <param name='playSessionId'>
            /// </param>
            public static void PostUsersByUseridPlayingitemsByIdDelete(this IRestClient operations, string userId, string id, string mediaSourceId, string nextMediaType, long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string))
            {
                operations.PostUsersByUseridPlayingitemsByIdDeleteAsync(userId, id, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reports that a user has stopped playing an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// The id of the MediaSource
            /// </param>
            /// <param name='nextMediaType'>
            /// The next media type that will play
            /// </param>
            /// <param name='positionTicks'>
            /// Optional. The position, in ticks, where playback stopped. 1ms = 10000
            /// ticks.
            /// </param>
            /// <param name='liveStreamId'>
            /// </param>
            /// <param name='playSessionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByUseridPlayingitemsByIdDeleteAsync(this IRestClient operations, string userId, string id, string mediaSourceId, string nextMediaType, long? positionTicks = default(long?), string liveStreamId = default(string), string playSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByUseridPlayingitemsByIdDeleteWithHttpMessagesAsync(userId, id, mediaSourceId, nextMediaType, positionTicks, liveStreamId, playSessionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Marks an item as unplayed
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static UserItemDataDto PostUsersByUseridPlayeditemsByIdDelete(this IRestClient operations, string userId, string id)
            {
                return operations.PostUsersByUseridPlayeditemsByIdDeleteAsync(userId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Marks an item as unplayed
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserItemDataDto> PostUsersByUseridPlayeditemsByIdDeleteAsync(this IRestClient operations, string userId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUsersByUseridPlayeditemsByIdDeleteWithHttpMessagesAsync(userId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a Connect link for a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            public static void PostUsersByIdConnectLinkDelete(this IRestClient operations, string id)
            {
                operations.PostUsersByIdConnectLinkDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a Connect link for a user
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByIdConnectLinkDeleteAsync(this IRestClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByIdConnectLinkDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes an external subtitle file
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            public static void PostVideosByIdSubtitlesByIndexDelete(this IRestClient operations, string id, string mediaSourceId, int index)
            {
                operations.PostVideosByIdSubtitlesByIndexDeleteAsync(id, mediaSourceId, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an external subtitle file
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostVideosByIdSubtitlesByIndexDeleteAsync(this IRestClient operations, string id, string mediaSourceId, int index, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostVideosByIdSubtitlesByIndexDeleteWithHttpMessagesAsync(id, mediaSourceId, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='segmentContainer'>
            /// </param>
            /// <param name='segmentId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='playlistId'>
            /// </param>
            public static void GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(this IRestClient operations, string segmentContainer, string segmentId, string id, string playlistId)
            {
                operations.GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerAsync(segmentContainer, segmentId, id, playlistId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='segmentContainer'>
            /// </param>
            /// <param name='segmentId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='playlistId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerAsync(this IRestClient operations, string segmentContainer, string segmentId, string id, string playlistId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerWithHttpMessagesAsync(segmentContainer, segmentId, id, playlistId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='segmentContainer'>
            /// </param>
            /// <param name='segmentId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='playlistId'>
            /// </param>
            public static void HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(this IRestClient operations, string segmentContainer, string segmentId, string id, string playlistId)
            {
                operations.HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerAsync(segmentContainer, segmentId, id, playlistId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='segmentContainer'>
            /// </param>
            /// <param name='segmentId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='playlistId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerAsync(this IRestClient operations, string segmentContainer, string segmentId, string id, string playlistId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerWithHttpMessagesAsync(segmentContainer, segmentId, id, playlistId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='segmentContainer'>
            /// </param>
            /// <param name='segmentId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='playlistId'>
            /// </param>
            public static void GetVideosByIdHlsByPlaylistidBySegmentidBySegmentcontainer(this IRestClient operations, string segmentContainer, string segmentId, string id, string playlistId)
            {
                operations.GetVideosByIdHlsByPlaylistidBySegmentidBySegmentcontainerAsync(segmentContainer, segmentId, id, playlistId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='segmentContainer'>
            /// </param>
            /// <param name='segmentId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='playlistId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVideosByIdHlsByPlaylistidBySegmentidBySegmentcontainerAsync(this IRestClient operations, string segmentContainer, string segmentId, string id, string playlistId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetVideosByIdHlsByPlaylistidBySegmentidBySegmentcontainerWithHttpMessagesAsync(segmentContainer, segmentId, id, playlistId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets subtitles in a specified format.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            /// <param name='format'>
            /// Format
            /// </param>
            /// <param name='startPositionTicks'>
            /// StartPositionTicks
            /// </param>
            /// <param name='endPositionTicks'>
            /// EndPositionTicks
            /// </param>
            /// <param name='copyTimestamps'>
            /// CopyTimestamps
            /// </param>
            public static void GetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormat(this IRestClient operations, string id, string mediaSourceId, int index, string format, long? startPositionTicks = default(long?), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?))
            {
                operations.GetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatAsync(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets subtitles in a specified format.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            /// <param name='format'>
            /// Format
            /// </param>
            /// <param name='startPositionTicks'>
            /// StartPositionTicks
            /// </param>
            /// <param name='endPositionTicks'>
            /// EndPositionTicks
            /// </param>
            /// <param name='copyTimestamps'>
            /// CopyTimestamps
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatAsync(this IRestClient operations, string id, string mediaSourceId, int index, string format, long? startPositionTicks = default(long?), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatWithHttpMessagesAsync(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void PostItemsByIdImagesByTypeByIndexDelete(this IRestClient operations, string id, string type, int index)
            {
                operations.PostItemsByIdImagesByTypeByIndexDeleteAsync(id, type, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as administrator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByIdImagesByTypeByIndexDeleteAsync(this IRestClient operations, string id, string type, int index, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByIdImagesByTypeByIndexDeleteWithHttpMessagesAsync(id, type, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the index for an item image
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='newIndex'>
            /// The new image index
            /// </param>
            public static void PostItemsByIdImagesByTypeByIndexIndex(this IRestClient operations, string id, string type, int index, int newIndex)
            {
                operations.PostItemsByIdImagesByTypeByIndexIndexAsync(id, type, index, newIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the index for an item image
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='newIndex'>
            /// The new image index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByIdImagesByTypeByIndexIndexAsync(this IRestClient operations, string id, string type, int index, int newIndex, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByIdImagesByTypeByIndexIndexWithHttpMessagesAsync(id, type, index, newIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the index for an item image
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='url'>
            /// The url for the new image
            /// </param>
            public static void PostItemsByIdImagesByTypeByIndexUrl(this IRestClient operations, string id, string type, int index, string url)
            {
                operations.PostItemsByIdImagesByTypeByIndexUrlAsync(id, type, index, url).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the index for an item image
            /// </summary>
            /// <remarks>
            /// Requires authentication as administrator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='url'>
            /// The url for the new image
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostItemsByIdImagesByTypeByIndexUrlAsync(this IRestClient operations, string id, string type, int index, string url, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostItemsByIdImagesByTypeByIndexUrlWithHttpMessagesAsync(id, type, index, url, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Moves a playlist item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemId'>
            /// ItemId
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='newIndex'>
            /// NewIndex
            /// </param>
            public static void PostPlaylistsByIdItemsByItemidMoveByNewindex(this IRestClient operations, long itemId, string id, int newIndex)
            {
                operations.PostPlaylistsByIdItemsByItemidMoveByNewindexAsync(itemId, id, newIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Moves a playlist item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='itemId'>
            /// ItemId
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='newIndex'>
            /// NewIndex
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostPlaylistsByIdItemsByItemidMoveByNewindexAsync(this IRestClient operations, long itemId, string id, int newIndex, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostPlaylistsByIdItemsByItemidMoveByNewindexWithHttpMessagesAsync(itemId, id, newIndex, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a user's saved personal rating for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            public static UserItemDataDto PostUsersByUseridItemsByIdRatingDelete(this IRestClient operations, string userId, string id)
            {
                return operations.PostUsersByUseridItemsByIdRatingDeleteAsync(userId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user's saved personal rating for an item
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserItemDataDto> PostUsersByUseridItemsByIdRatingDeleteAsync(this IRestClient operations, string userId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUsersByUseridItemsByIdRatingDeleteWithHttpMessagesAsync(userId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            public static void PostUsersByIdImagesByTypeByIndexDelete(this IRestClient operations, string id, string type, int index)
            {
                operations.PostUsersByIdImagesByTypeByIndexDeleteAsync(id, type, index).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requires authentication as user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User Id
            /// </param>
            /// <param name='type'>
            /// Image Type. Possible values include: 'Primary', 'Art', 'Backdrop',
            /// 'Banner', 'Logo', 'Thumb', 'Disc', 'Box', 'Screenshot', 'Menu', 'Chapter',
            /// 'BoxRear', 'Thumbnail', 'LogoLight', 'LogoLightColor'
            /// </param>
            /// <param name='index'>
            /// Image Index
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostUsersByIdImagesByTypeByIndexDeleteAsync(this IRestClient operations, string id, string type, int index, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostUsersByIdImagesByTypeByIndexDeleteWithHttpMessagesAsync(id, type, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets subtitles in a specified format.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            /// <param name='format'>
            /// Format
            /// </param>
            /// <param name='startPositionTicks'>
            /// StartPositionTicks
            /// </param>
            /// <param name='endPositionTicks'>
            /// EndPositionTicks
            /// </param>
            /// <param name='copyTimestamps'>
            /// CopyTimestamps
            /// </param>
            public static void GetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormat(this IRestClient operations, string id, string mediaSourceId, int index, string format, long? startPositionTicks = default(long?), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?))
            {
                operations.GetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatAsync(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets subtitles in a specified format.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            /// <param name='format'>
            /// Format
            /// </param>
            /// <param name='startPositionTicks'>
            /// StartPositionTicks
            /// </param>
            /// <param name='endPositionTicks'>
            /// EndPositionTicks
            /// </param>
            /// <param name='copyTimestamps'>
            /// CopyTimestamps
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatAsync(this IRestClient operations, string id, string mediaSourceId, int index, string format, long? startPositionTicks = default(long?), long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatWithHttpMessagesAsync(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets subtitles in a specified format.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            /// <param name='format'>
            /// Format
            /// </param>
            /// <param name='startPositionTicks'>
            /// StartPositionTicks
            /// </param>
            /// <param name='endPositionTicks'>
            /// EndPositionTicks
            /// </param>
            /// <param name='copyTimestamps'>
            /// CopyTimestamps
            /// </param>
            public static void GetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat(this IRestClient operations, string id, string mediaSourceId, int index, string format, long startPositionTicks, long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?))
            {
                operations.GetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatAsync(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets subtitles in a specified format.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            /// <param name='format'>
            /// Format
            /// </param>
            /// <param name='startPositionTicks'>
            /// StartPositionTicks
            /// </param>
            /// <param name='endPositionTicks'>
            /// EndPositionTicks
            /// </param>
            /// <param name='copyTimestamps'>
            /// CopyTimestamps
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatAsync(this IRestClient operations, string id, string mediaSourceId, int index, string format, long startPositionTicks, long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatWithHttpMessagesAsync(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets subtitles in a specified format.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            /// <param name='format'>
            /// Format
            /// </param>
            /// <param name='startPositionTicks'>
            /// StartPositionTicks
            /// </param>
            /// <param name='endPositionTicks'>
            /// EndPositionTicks
            /// </param>
            /// <param name='copyTimestamps'>
            /// CopyTimestamps
            /// </param>
            public static void GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat(this IRestClient operations, string id, string mediaSourceId, int index, string format, long startPositionTicks, long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?))
            {
                operations.GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatAsync(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets subtitles in a specified format.
            /// </summary>
            /// <remarks>
            /// Requires authentication as user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Item Id
            /// </param>
            /// <param name='mediaSourceId'>
            /// MediaSourceId
            /// </param>
            /// <param name='index'>
            /// The subtitle stream index
            /// </param>
            /// <param name='format'>
            /// Format
            /// </param>
            /// <param name='startPositionTicks'>
            /// StartPositionTicks
            /// </param>
            /// <param name='endPositionTicks'>
            /// EndPositionTicks
            /// </param>
            /// <param name='copyTimestamps'>
            /// CopyTimestamps
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatAsync(this IRestClient operations, string id, string mediaSourceId, int index, string format, long startPositionTicks, long? endPositionTicks = default(long?), bool? copyTimestamps = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatWithHttpMessagesAsync(id, mediaSourceId, index, format, startPositionTicks, endPositionTicks, copyTimestamps, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
