// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class EmbyDlnaProfilesDlnaProfile
    {
        /// <summary>
        /// Initializes a new instance of the EmbyDlnaProfilesDlnaProfile
        /// class.
        /// </summary>
        public EmbyDlnaProfilesDlnaProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmbyDlnaProfilesDlnaProfile
        /// class.
        /// </summary>
        /// <param name="type">Possible values include: 'System',
        /// 'User'</param>
        public EmbyDlnaProfilesDlnaProfile(string type = default(string), string path = default(string), string userId = default(string), string albumArtPn = default(string), int? maxAlbumArtWidth = default(int?), int? maxAlbumArtHeight = default(int?), int? maxIconWidth = default(int?), int? maxIconHeight = default(int?), string friendlyName = default(string), string manufacturer = default(string), string manufacturerUrl = default(string), string modelName = default(string), string modelDescription = default(string), string modelNumber = default(string), string modelUrl = default(string), string serialNumber = default(string), bool? enableAlbumArtInDidl = default(bool?), bool? enableSingleAlbumArtLimit = default(bool?), bool? enableSingleSubtitleLimit = default(bool?), string protocolInfo = default(string), int? timelineOffsetSeconds = default(int?), bool? requiresPlainVideoItems = default(bool?), bool? requiresPlainFolders = default(bool?), bool? ignoreTranscodeByteRangeRequests = default(bool?), bool? supportsSamsungBookmark = default(bool?), EmbyDlnaProfilesDeviceIdentification identification = default(EmbyDlnaProfilesDeviceIdentification), EmbyDlnaProfilesProtocolInfoDetection protocolInfoDetection = default(EmbyDlnaProfilesProtocolInfoDetection), string name = default(string), string id = default(string), string supportedMediaTypes = default(string), long? maxStreamingBitrate = default(long?), int? musicStreamingTranscodingBitrate = default(int?), int? maxStaticMusicBitrate = default(int?), IList<DlnaDirectPlayProfile> directPlayProfiles = default(IList<DlnaDirectPlayProfile>), IList<DlnaTranscodingProfile> transcodingProfiles = default(IList<DlnaTranscodingProfile>), IList<DlnaContainerProfile> containerProfiles = default(IList<DlnaContainerProfile>), IList<DlnaCodecProfile> codecProfiles = default(IList<DlnaCodecProfile>), IList<DlnaResponseProfile> responseProfiles = default(IList<DlnaResponseProfile>), IList<DlnaSubtitleProfile> subtitleProfiles = default(IList<DlnaSubtitleProfile>))
        {
            Type = type;
            Path = path;
            UserId = userId;
            AlbumArtPn = albumArtPn;
            MaxAlbumArtWidth = maxAlbumArtWidth;
            MaxAlbumArtHeight = maxAlbumArtHeight;
            MaxIconWidth = maxIconWidth;
            MaxIconHeight = maxIconHeight;
            FriendlyName = friendlyName;
            Manufacturer = manufacturer;
            ManufacturerUrl = manufacturerUrl;
            ModelName = modelName;
            ModelDescription = modelDescription;
            ModelNumber = modelNumber;
            ModelUrl = modelUrl;
            SerialNumber = serialNumber;
            EnableAlbumArtInDidl = enableAlbumArtInDidl;
            EnableSingleAlbumArtLimit = enableSingleAlbumArtLimit;
            EnableSingleSubtitleLimit = enableSingleSubtitleLimit;
            ProtocolInfo = protocolInfo;
            TimelineOffsetSeconds = timelineOffsetSeconds;
            RequiresPlainVideoItems = requiresPlainVideoItems;
            RequiresPlainFolders = requiresPlainFolders;
            IgnoreTranscodeByteRangeRequests = ignoreTranscodeByteRangeRequests;
            SupportsSamsungBookmark = supportsSamsungBookmark;
            Identification = identification;
            ProtocolInfoDetection = protocolInfoDetection;
            Name = name;
            Id = id;
            SupportedMediaTypes = supportedMediaTypes;
            MaxStreamingBitrate = maxStreamingBitrate;
            MusicStreamingTranscodingBitrate = musicStreamingTranscodingBitrate;
            MaxStaticMusicBitrate = maxStaticMusicBitrate;
            DirectPlayProfiles = directPlayProfiles;
            TranscodingProfiles = transcodingProfiles;
            ContainerProfiles = containerProfiles;
            CodecProfiles = codecProfiles;
            ResponseProfiles = responseProfiles;
            SubtitleProfiles = subtitleProfiles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'System', 'User'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Path")]
        public string Path { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UserId")]
        public string UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AlbumArtPn")]
        public string AlbumArtPn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxAlbumArtWidth")]
        public int? MaxAlbumArtWidth { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxAlbumArtHeight")]
        public int? MaxAlbumArtHeight { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxIconWidth")]
        public int? MaxIconWidth { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxIconHeight")]
        public int? MaxIconHeight { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FriendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Manufacturer")]
        public string Manufacturer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ManufacturerUrl")]
        public string ManufacturerUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ModelName")]
        public string ModelName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ModelDescription")]
        public string ModelDescription { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ModelNumber")]
        public string ModelNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ModelUrl")]
        public string ModelUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SerialNumber")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableAlbumArtInDidl")]
        public bool? EnableAlbumArtInDidl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableSingleAlbumArtLimit")]
        public bool? EnableSingleAlbumArtLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableSingleSubtitleLimit")]
        public bool? EnableSingleSubtitleLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ProtocolInfo")]
        public string ProtocolInfo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TimelineOffsetSeconds")]
        public int? TimelineOffsetSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiresPlainVideoItems")]
        public bool? RequiresPlainVideoItems { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiresPlainFolders")]
        public bool? RequiresPlainFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IgnoreTranscodeByteRangeRequests")]
        public bool? IgnoreTranscodeByteRangeRequests { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SupportsSamsungBookmark")]
        public bool? SupportsSamsungBookmark { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Identification")]
        public EmbyDlnaProfilesDeviceIdentification Identification { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ProtocolInfoDetection")]
        public EmbyDlnaProfilesProtocolInfoDetection ProtocolInfoDetection { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SupportedMediaTypes")]
        public string SupportedMediaTypes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxStreamingBitrate")]
        public long? MaxStreamingBitrate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MusicStreamingTranscodingBitrate")]
        public int? MusicStreamingTranscodingBitrate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxStaticMusicBitrate")]
        public int? MaxStaticMusicBitrate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DirectPlayProfiles")]
        public IList<DlnaDirectPlayProfile> DirectPlayProfiles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TranscodingProfiles")]
        public IList<DlnaTranscodingProfile> TranscodingProfiles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ContainerProfiles")]
        public IList<DlnaContainerProfile> ContainerProfiles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CodecProfiles")]
        public IList<DlnaCodecProfile> CodecProfiles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ResponseProfiles")]
        public IList<DlnaResponseProfile> ResponseProfiles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SubtitleProfiles")]
        public IList<DlnaSubtitleProfile> SubtitleProfiles { get; set; }

    }
}
