// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LibraryLibraryTypeOptions
    {
        /// <summary>
        /// Initializes a new instance of the LibraryLibraryTypeOptions class.
        /// </summary>
        public LibraryLibraryTypeOptions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LibraryLibraryTypeOptions class.
        /// </summary>
        public LibraryLibraryTypeOptions(string type = default(string), IList<LibraryLibraryOptionInfo> metadataFetchers = default(IList<LibraryLibraryOptionInfo>), IList<LibraryLibraryOptionInfo> imageFetchers = default(IList<LibraryLibraryOptionInfo>), IList<string> supportedImageTypes = default(IList<string>), IList<ConfigurationImageOption> defaultImageOptions = default(IList<ConfigurationImageOption>))
        {
            Type = type;
            MetadataFetchers = metadataFetchers;
            ImageFetchers = imageFetchers;
            SupportedImageTypes = supportedImageTypes;
            DefaultImageOptions = defaultImageOptions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MetadataFetchers")]
        public IList<LibraryLibraryOptionInfo> MetadataFetchers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ImageFetchers")]
        public IList<LibraryLibraryOptionInfo> ImageFetchers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SupportedImageTypes")]
        public IList<string> SupportedImageTypes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DefaultImageOptions")]
        public IList<ConfigurationImageOption> DefaultImageOptions { get; set; }

    }
}
