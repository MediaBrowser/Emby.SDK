// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class UsersUserPolicy
    {
        /// <summary>
        /// Initializes a new instance of the UsersUserPolicy class.
        /// </summary>
        public UsersUserPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UsersUserPolicy class.
        /// </summary>
        public UsersUserPolicy(bool? isAdministrator = default(bool?), bool? isHidden = default(bool?), bool? isHiddenRemotely = default(bool?), bool? isHiddenFromUnusedDevices = default(bool?), bool? isDisabled = default(bool?), long? lockedOutDate = default(long?), int? maxParentalRating = default(int?), bool? allowTagOrRating = default(bool?), IList<string> blockedTags = default(IList<string>), bool? isTagBlockingModeInclusive = default(bool?), IList<string> includeTags = default(IList<string>), bool? enableUserPreferenceAccess = default(bool?), IList<ConfigurationAccessSchedule> accessSchedules = default(IList<ConfigurationAccessSchedule>), IList<string> blockUnratedItems = default(IList<string>), bool? enableRemoteControlOfOtherUsers = default(bool?), bool? enableSharedDeviceControl = default(bool?), bool? enableRemoteAccess = default(bool?), bool? enableLiveTvManagement = default(bool?), bool? enableLiveTvAccess = default(bool?), bool? enableMediaPlayback = default(bool?), bool? enableAudioPlaybackTranscoding = default(bool?), bool? enableVideoPlaybackTranscoding = default(bool?), bool? enablePlaybackRemuxing = default(bool?), bool? enableContentDeletion = default(bool?), IList<string> restrictedFeatures = default(IList<string>), IList<string> enableContentDeletionFromFolders = default(IList<string>), bool? enableContentDownloading = default(bool?), bool? enableSubtitleDownloading = default(bool?), bool? enableSubtitleManagement = default(bool?), bool? enableSyncTranscoding = default(bool?), bool? enableMediaConversion = default(bool?), IList<string> enabledChannels = default(IList<string>), bool? enableAllChannels = default(bool?), IList<string> enabledFolders = default(IList<string>), bool? enableAllFolders = default(bool?), int? invalidLoginAttemptCount = default(int?), bool? enablePublicSharing = default(bool?), IList<string> blockedMediaFolders = default(IList<string>), int? remoteClientBitrateLimit = default(int?), string authenticationProviderId = default(string), IList<string> excludedSubFolders = default(IList<string>), int? simultaneousStreamLimit = default(int?), IList<string> enabledDevices = default(IList<string>), bool? enableAllDevices = default(bool?), bool? allowCameraUpload = default(bool?))
        {
            IsAdministrator = isAdministrator;
            IsHidden = isHidden;
            IsHiddenRemotely = isHiddenRemotely;
            IsHiddenFromUnusedDevices = isHiddenFromUnusedDevices;
            IsDisabled = isDisabled;
            LockedOutDate = lockedOutDate;
            MaxParentalRating = maxParentalRating;
            AllowTagOrRating = allowTagOrRating;
            BlockedTags = blockedTags;
            IsTagBlockingModeInclusive = isTagBlockingModeInclusive;
            IncludeTags = includeTags;
            EnableUserPreferenceAccess = enableUserPreferenceAccess;
            AccessSchedules = accessSchedules;
            BlockUnratedItems = blockUnratedItems;
            EnableRemoteControlOfOtherUsers = enableRemoteControlOfOtherUsers;
            EnableSharedDeviceControl = enableSharedDeviceControl;
            EnableRemoteAccess = enableRemoteAccess;
            EnableLiveTvManagement = enableLiveTvManagement;
            EnableLiveTvAccess = enableLiveTvAccess;
            EnableMediaPlayback = enableMediaPlayback;
            EnableAudioPlaybackTranscoding = enableAudioPlaybackTranscoding;
            EnableVideoPlaybackTranscoding = enableVideoPlaybackTranscoding;
            EnablePlaybackRemuxing = enablePlaybackRemuxing;
            EnableContentDeletion = enableContentDeletion;
            RestrictedFeatures = restrictedFeatures;
            EnableContentDeletionFromFolders = enableContentDeletionFromFolders;
            EnableContentDownloading = enableContentDownloading;
            EnableSubtitleDownloading = enableSubtitleDownloading;
            EnableSubtitleManagement = enableSubtitleManagement;
            EnableSyncTranscoding = enableSyncTranscoding;
            EnableMediaConversion = enableMediaConversion;
            EnabledChannels = enabledChannels;
            EnableAllChannels = enableAllChannels;
            EnabledFolders = enabledFolders;
            EnableAllFolders = enableAllFolders;
            InvalidLoginAttemptCount = invalidLoginAttemptCount;
            EnablePublicSharing = enablePublicSharing;
            BlockedMediaFolders = blockedMediaFolders;
            RemoteClientBitrateLimit = remoteClientBitrateLimit;
            AuthenticationProviderId = authenticationProviderId;
            ExcludedSubFolders = excludedSubFolders;
            SimultaneousStreamLimit = simultaneousStreamLimit;
            EnabledDevices = enabledDevices;
            EnableAllDevices = enableAllDevices;
            AllowCameraUpload = allowCameraUpload;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsAdministrator")]
        public bool? IsAdministrator { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsHidden")]
        public bool? IsHidden { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsHiddenRemotely")]
        public bool? IsHiddenRemotely { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsHiddenFromUnusedDevices")]
        public bool? IsHiddenFromUnusedDevices { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsDisabled")]
        public bool? IsDisabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LockedOutDate")]
        public long? LockedOutDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxParentalRating")]
        public int? MaxParentalRating { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AllowTagOrRating")]
        public bool? AllowTagOrRating { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockedTags")]
        public IList<string> BlockedTags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsTagBlockingModeInclusive")]
        public bool? IsTagBlockingModeInclusive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IncludeTags")]
        public IList<string> IncludeTags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableUserPreferenceAccess")]
        public bool? EnableUserPreferenceAccess { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AccessSchedules")]
        public IList<ConfigurationAccessSchedule> AccessSchedules { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockUnratedItems")]
        public IList<string> BlockUnratedItems { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableRemoteControlOfOtherUsers")]
        public bool? EnableRemoteControlOfOtherUsers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableSharedDeviceControl")]
        public bool? EnableSharedDeviceControl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableRemoteAccess")]
        public bool? EnableRemoteAccess { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableLiveTvManagement")]
        public bool? EnableLiveTvManagement { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableLiveTvAccess")]
        public bool? EnableLiveTvAccess { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableMediaPlayback")]
        public bool? EnableMediaPlayback { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableAudioPlaybackTranscoding")]
        public bool? EnableAudioPlaybackTranscoding { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableVideoPlaybackTranscoding")]
        public bool? EnableVideoPlaybackTranscoding { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnablePlaybackRemuxing")]
        public bool? EnablePlaybackRemuxing { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableContentDeletion")]
        public bool? EnableContentDeletion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RestrictedFeatures")]
        public IList<string> RestrictedFeatures { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableContentDeletionFromFolders")]
        public IList<string> EnableContentDeletionFromFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableContentDownloading")]
        public bool? EnableContentDownloading { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableSubtitleDownloading")]
        public bool? EnableSubtitleDownloading { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableSubtitleManagement")]
        public bool? EnableSubtitleManagement { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableSyncTranscoding")]
        public bool? EnableSyncTranscoding { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableMediaConversion")]
        public bool? EnableMediaConversion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnabledChannels")]
        public IList<string> EnabledChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableAllChannels")]
        public bool? EnableAllChannels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnabledFolders")]
        public IList<string> EnabledFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableAllFolders")]
        public bool? EnableAllFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "InvalidLoginAttemptCount")]
        public int? InvalidLoginAttemptCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnablePublicSharing")]
        public bool? EnablePublicSharing { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockedMediaFolders")]
        public IList<string> BlockedMediaFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RemoteClientBitrateLimit")]
        public int? RemoteClientBitrateLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AuthenticationProviderId")]
        public string AuthenticationProviderId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ExcludedSubFolders")]
        public IList<string> ExcludedSubFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SimultaneousStreamLimit")]
        public int? SimultaneousStreamLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnabledDevices")]
        public IList<string> EnabledDevices { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableAllDevices")]
        public bool? EnableAllDevices { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AllowCameraUpload")]
        public bool? AllowCameraUpload { get; set; }

    }
}
