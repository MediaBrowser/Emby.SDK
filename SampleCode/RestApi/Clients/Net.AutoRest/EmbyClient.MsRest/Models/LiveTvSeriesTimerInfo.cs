// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LiveTvSeriesTimerInfo
    {
        /// <summary>
        /// Initializes a new instance of the LiveTvSeriesTimerInfo class.
        /// </summary>
        public LiveTvSeriesTimerInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LiveTvSeriesTimerInfo class.
        /// </summary>
        /// <param name="keepUntil">Possible values include: 'UntilDeleted',
        /// 'UntilSpaceNeeded', 'UntilWatched', 'UntilDate'</param>
        /// <param name="timerType">Possible values include: 'Program',
        /// 'DateTime', 'Keyword'</param>
        public LiveTvSeriesTimerInfo(string id = default(string), string channelId = default(string), IList<string> channelIds = default(IList<string>), string programId = default(string), string name = default(string), string serviceName = default(string), string overview = default(string), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), bool? recordAnyTime = default(bool?), int? keepUpTo = default(int?), string keepUntil = default(string), bool? skipEpisodesInLibrary = default(bool?), bool? recordNewOnly = default(bool?), IList<string> days = default(IList<string>), int? priority = default(int?), int? prePaddingSeconds = default(int?), int? postPaddingSeconds = default(int?), bool? isPrePaddingRequired = default(bool?), bool? isPostPaddingRequired = default(bool?), string seriesId = default(string), IDictionary<string, string> providerIds = default(IDictionary<string, string>), int? maxRecordingSeconds = default(int?), IList<LiveTvKeywordInfo> keywords = default(IList<LiveTvKeywordInfo>), string timerType = default(string))
        {
            Id = id;
            ChannelId = channelId;
            ChannelIds = channelIds;
            ProgramId = programId;
            Name = name;
            ServiceName = serviceName;
            Overview = overview;
            StartDate = startDate;
            EndDate = endDate;
            RecordAnyTime = recordAnyTime;
            KeepUpTo = keepUpTo;
            KeepUntil = keepUntil;
            SkipEpisodesInLibrary = skipEpisodesInLibrary;
            RecordNewOnly = recordNewOnly;
            Days = days;
            Priority = priority;
            PrePaddingSeconds = prePaddingSeconds;
            PostPaddingSeconds = postPaddingSeconds;
            IsPrePaddingRequired = isPrePaddingRequired;
            IsPostPaddingRequired = isPostPaddingRequired;
            SeriesId = seriesId;
            ProviderIds = providerIds;
            MaxRecordingSeconds = maxRecordingSeconds;
            Keywords = keywords;
            TimerType = timerType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ChannelId")]
        public string ChannelId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ChannelIds")]
        public IList<string> ChannelIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ProgramId")]
        public string ProgramId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ServiceName")]
        public string ServiceName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Overview")]
        public string Overview { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "StartDate")]
        public System.DateTime? StartDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EndDate")]
        public System.DateTime? EndDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RecordAnyTime")]
        public bool? RecordAnyTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "KeepUpTo")]
        public int? KeepUpTo { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'UntilDeleted',
        /// 'UntilSpaceNeeded', 'UntilWatched', 'UntilDate'
        /// </summary>
        [JsonProperty(PropertyName = "KeepUntil")]
        public string KeepUntil { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SkipEpisodesInLibrary")]
        public bool? SkipEpisodesInLibrary { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RecordNewOnly")]
        public bool? RecordNewOnly { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Days")]
        public IList<string> Days { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PrePaddingSeconds")]
        public int? PrePaddingSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PostPaddingSeconds")]
        public int? PostPaddingSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsPrePaddingRequired")]
        public bool? IsPrePaddingRequired { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsPostPaddingRequired")]
        public bool? IsPostPaddingRequired { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SeriesId")]
        public string SeriesId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ProviderIds")]
        public IDictionary<string, string> ProviderIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxRecordingSeconds")]
        public int? MaxRecordingSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Keywords")]
        public IList<LiveTvKeywordInfo> Keywords { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Program', 'DateTime',
        /// 'Keyword'
        /// </summary>
        [JsonProperty(PropertyName = "TimerType")]
        public string TimerType { get; set; }

    }
}
