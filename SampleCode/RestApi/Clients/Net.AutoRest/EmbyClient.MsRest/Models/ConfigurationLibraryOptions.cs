// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ConfigurationLibraryOptions
    {
        /// <summary>
        /// Initializes a new instance of the ConfigurationLibraryOptions
        /// class.
        /// </summary>
        public ConfigurationLibraryOptions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConfigurationLibraryOptions
        /// class.
        /// </summary>
        public ConfigurationLibraryOptions(bool? enableArchiveMediaFiles = default(bool?), bool? enablePhotos = default(bool?), bool? enableRealtimeMonitor = default(bool?), bool? enableMarkerDetection = default(bool?), bool? enableMarkerDetectionDuringLibraryScan = default(bool?), int? introDetectionFingerprintLength = default(int?), bool? enableChapterImageExtraction = default(bool?), bool? extractChapterImagesDuringLibraryScan = default(bool?), bool? downloadImagesInAdvance = default(bool?), IList<ConfigurationMediaPathInfo> pathInfos = default(IList<ConfigurationMediaPathInfo>), bool? ignoreHiddenFiles = default(bool?), IList<string> ignoreFileExtensions = default(IList<string>), bool? saveLocalMetadata = default(bool?), bool? saveMetadataHidden = default(bool?), bool? saveLocalThumbnailSets = default(bool?), bool? importMissingEpisodes = default(bool?), bool? importPlaylists = default(bool?), bool? enableAutomaticSeriesGrouping = default(bool?), bool? shareEmbeddedMusicAlbumImages = default(bool?), bool? enableEmbeddedTitles = default(bool?), bool? enableAudioResume = default(bool?), int? automaticRefreshIntervalDays = default(int?), int? placeholderMetadataRefreshIntervalDays = default(int?), string preferredMetadataLanguage = default(string), string preferredImageLanguage = default(string), string contentType = default(string), string metadataCountryCode = default(string), string name = default(string), IList<string> metadataSavers = default(IList<string>), IList<string> disabledLocalMetadataReaders = default(IList<string>), IList<string> localMetadataReaderOrder = default(IList<string>), IList<string> disabledLyricsFetchers = default(IList<string>), bool? saveLyricsWithMedia = default(bool?), int? lyricsDownloadMaxAgeDays = default(int?), IList<string> lyricsFetcherOrder = default(IList<string>), IList<string> lyricsDownloadLanguages = default(IList<string>), IList<string> disabledSubtitleFetchers = default(IList<string>), IList<string> subtitleFetcherOrder = default(IList<string>), bool? skipSubtitlesIfEmbeddedSubtitlesPresent = default(bool?), bool? skipSubtitlesIfAudioTrackMatches = default(bool?), IList<string> subtitleDownloadLanguages = default(IList<string>), int? subtitleDownloadMaxAgeDays = default(int?), bool? requirePerfectSubtitleMatch = default(bool?), bool? saveSubtitlesWithMedia = default(bool?), bool? forcedSubtitlesOnly = default(bool?), bool? hearingImpairedSubtitlesOnly = default(bool?), IList<ConfigurationTypeOptions> typeOptions = default(IList<ConfigurationTypeOptions>), bool? collapseSingleItemFolders = default(bool?), bool? enableAdultMetadata = default(bool?), bool? importCollections = default(bool?), int? minCollectionItems = default(int?), string musicFolderStructure = default(string), int? minResumePct = default(int?), int? maxResumePct = default(int?), int? minResumeDurationSeconds = default(int?), int? thumbnailImagesIntervalSeconds = default(int?), int? sampleIgnoreSize = default(int?))
        {
            EnableArchiveMediaFiles = enableArchiveMediaFiles;
            EnablePhotos = enablePhotos;
            EnableRealtimeMonitor = enableRealtimeMonitor;
            EnableMarkerDetection = enableMarkerDetection;
            EnableMarkerDetectionDuringLibraryScan = enableMarkerDetectionDuringLibraryScan;
            IntroDetectionFingerprintLength = introDetectionFingerprintLength;
            EnableChapterImageExtraction = enableChapterImageExtraction;
            ExtractChapterImagesDuringLibraryScan = extractChapterImagesDuringLibraryScan;
            DownloadImagesInAdvance = downloadImagesInAdvance;
            PathInfos = pathInfos;
            IgnoreHiddenFiles = ignoreHiddenFiles;
            IgnoreFileExtensions = ignoreFileExtensions;
            SaveLocalMetadata = saveLocalMetadata;
            SaveMetadataHidden = saveMetadataHidden;
            SaveLocalThumbnailSets = saveLocalThumbnailSets;
            ImportMissingEpisodes = importMissingEpisodes;
            ImportPlaylists = importPlaylists;
            EnableAutomaticSeriesGrouping = enableAutomaticSeriesGrouping;
            ShareEmbeddedMusicAlbumImages = shareEmbeddedMusicAlbumImages;
            EnableEmbeddedTitles = enableEmbeddedTitles;
            EnableAudioResume = enableAudioResume;
            AutomaticRefreshIntervalDays = automaticRefreshIntervalDays;
            PlaceholderMetadataRefreshIntervalDays = placeholderMetadataRefreshIntervalDays;
            PreferredMetadataLanguage = preferredMetadataLanguage;
            PreferredImageLanguage = preferredImageLanguage;
            ContentType = contentType;
            MetadataCountryCode = metadataCountryCode;
            Name = name;
            MetadataSavers = metadataSavers;
            DisabledLocalMetadataReaders = disabledLocalMetadataReaders;
            LocalMetadataReaderOrder = localMetadataReaderOrder;
            DisabledLyricsFetchers = disabledLyricsFetchers;
            SaveLyricsWithMedia = saveLyricsWithMedia;
            LyricsDownloadMaxAgeDays = lyricsDownloadMaxAgeDays;
            LyricsFetcherOrder = lyricsFetcherOrder;
            LyricsDownloadLanguages = lyricsDownloadLanguages;
            DisabledSubtitleFetchers = disabledSubtitleFetchers;
            SubtitleFetcherOrder = subtitleFetcherOrder;
            SkipSubtitlesIfEmbeddedSubtitlesPresent = skipSubtitlesIfEmbeddedSubtitlesPresent;
            SkipSubtitlesIfAudioTrackMatches = skipSubtitlesIfAudioTrackMatches;
            SubtitleDownloadLanguages = subtitleDownloadLanguages;
            SubtitleDownloadMaxAgeDays = subtitleDownloadMaxAgeDays;
            RequirePerfectSubtitleMatch = requirePerfectSubtitleMatch;
            SaveSubtitlesWithMedia = saveSubtitlesWithMedia;
            ForcedSubtitlesOnly = forcedSubtitlesOnly;
            HearingImpairedSubtitlesOnly = hearingImpairedSubtitlesOnly;
            TypeOptions = typeOptions;
            CollapseSingleItemFolders = collapseSingleItemFolders;
            EnableAdultMetadata = enableAdultMetadata;
            ImportCollections = importCollections;
            MinCollectionItems = minCollectionItems;
            MusicFolderStructure = musicFolderStructure;
            MinResumePct = minResumePct;
            MaxResumePct = maxResumePct;
            MinResumeDurationSeconds = minResumeDurationSeconds;
            ThumbnailImagesIntervalSeconds = thumbnailImagesIntervalSeconds;
            SampleIgnoreSize = sampleIgnoreSize;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableArchiveMediaFiles")]
        public bool? EnableArchiveMediaFiles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnablePhotos")]
        public bool? EnablePhotos { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableRealtimeMonitor")]
        public bool? EnableRealtimeMonitor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableMarkerDetection")]
        public bool? EnableMarkerDetection { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableMarkerDetectionDuringLibraryScan")]
        public bool? EnableMarkerDetectionDuringLibraryScan { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IntroDetectionFingerprintLength")]
        public int? IntroDetectionFingerprintLength { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableChapterImageExtraction")]
        public bool? EnableChapterImageExtraction { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ExtractChapterImagesDuringLibraryScan")]
        public bool? ExtractChapterImagesDuringLibraryScan { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DownloadImagesInAdvance")]
        public bool? DownloadImagesInAdvance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PathInfos")]
        public IList<ConfigurationMediaPathInfo> PathInfos { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IgnoreHiddenFiles")]
        public bool? IgnoreHiddenFiles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IgnoreFileExtensions")]
        public IList<string> IgnoreFileExtensions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SaveLocalMetadata")]
        public bool? SaveLocalMetadata { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SaveMetadataHidden")]
        public bool? SaveMetadataHidden { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SaveLocalThumbnailSets")]
        public bool? SaveLocalThumbnailSets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ImportMissingEpisodes")]
        public bool? ImportMissingEpisodes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ImportPlaylists")]
        public bool? ImportPlaylists { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableAutomaticSeriesGrouping")]
        public bool? EnableAutomaticSeriesGrouping { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShareEmbeddedMusicAlbumImages")]
        public bool? ShareEmbeddedMusicAlbumImages { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableEmbeddedTitles")]
        public bool? EnableEmbeddedTitles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableAudioResume")]
        public bool? EnableAudioResume { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AutomaticRefreshIntervalDays")]
        public int? AutomaticRefreshIntervalDays { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlaceholderMetadataRefreshIntervalDays")]
        public int? PlaceholderMetadataRefreshIntervalDays { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PreferredMetadataLanguage")]
        public string PreferredMetadataLanguage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PreferredImageLanguage")]
        public string PreferredImageLanguage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ContentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MetadataCountryCode")]
        public string MetadataCountryCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MetadataSavers")]
        public IList<string> MetadataSavers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisabledLocalMetadataReaders")]
        public IList<string> DisabledLocalMetadataReaders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LocalMetadataReaderOrder")]
        public IList<string> LocalMetadataReaderOrder { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisabledLyricsFetchers")]
        public IList<string> DisabledLyricsFetchers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SaveLyricsWithMedia")]
        public bool? SaveLyricsWithMedia { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LyricsDownloadMaxAgeDays")]
        public int? LyricsDownloadMaxAgeDays { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LyricsFetcherOrder")]
        public IList<string> LyricsFetcherOrder { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LyricsDownloadLanguages")]
        public IList<string> LyricsDownloadLanguages { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisabledSubtitleFetchers")]
        public IList<string> DisabledSubtitleFetchers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SubtitleFetcherOrder")]
        public IList<string> SubtitleFetcherOrder { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SkipSubtitlesIfEmbeddedSubtitlesPresent")]
        public bool? SkipSubtitlesIfEmbeddedSubtitlesPresent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SkipSubtitlesIfAudioTrackMatches")]
        public bool? SkipSubtitlesIfAudioTrackMatches { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SubtitleDownloadLanguages")]
        public IList<string> SubtitleDownloadLanguages { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SubtitleDownloadMaxAgeDays")]
        public int? SubtitleDownloadMaxAgeDays { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequirePerfectSubtitleMatch")]
        public bool? RequirePerfectSubtitleMatch { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SaveSubtitlesWithMedia")]
        public bool? SaveSubtitlesWithMedia { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ForcedSubtitlesOnly")]
        public bool? ForcedSubtitlesOnly { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HearingImpairedSubtitlesOnly")]
        public bool? HearingImpairedSubtitlesOnly { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TypeOptions")]
        public IList<ConfigurationTypeOptions> TypeOptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CollapseSingleItemFolders")]
        public bool? CollapseSingleItemFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableAdultMetadata")]
        public bool? EnableAdultMetadata { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ImportCollections")]
        public bool? ImportCollections { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MinCollectionItems")]
        public int? MinCollectionItems { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MusicFolderStructure")]
        public string MusicFolderStructure { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MinResumePct")]
        public int? MinResumePct { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxResumePct")]
        public int? MaxResumePct { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MinResumeDurationSeconds")]
        public int? MinResumeDurationSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ThumbnailImagesIntervalSeconds")]
        public int? ThumbnailImagesIntervalSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SampleIgnoreSize")]
        public int? SampleIgnoreSize { get; set; }

    }
}
