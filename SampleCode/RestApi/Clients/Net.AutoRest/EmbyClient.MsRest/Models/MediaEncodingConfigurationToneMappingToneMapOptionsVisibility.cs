// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class MediaEncodingConfigurationToneMappingToneMapOptionsVisibility
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MediaEncodingConfigurationToneMappingToneMapOptionsVisibility
        /// class.
        /// </summary>
        public MediaEncodingConfigurationToneMappingToneMapOptionsVisibility()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MediaEncodingConfigurationToneMappingToneMapOptionsVisibility
        /// class.
        /// </summary>
        /// <param name="operatingSystem">Possible values include: 'Windows',
        /// 'Linux', 'OSX', 'BSD', 'Android'</param>
        public MediaEncodingConfigurationToneMappingToneMapOptionsVisibility(bool? showAdvanced = default(bool?), bool? isSoftwareToneMappingAvailable = default(bool?), bool? isAnyHardwareToneMappingAvailable = default(bool?), bool? showNvidiaOptions = default(bool?), bool? showQuickSyncOptions = default(bool?), bool? showVaapiOptions = default(bool?), bool? isOpenClAvailable = default(bool?), bool? isOpenClSuperTAvailable = default(bool?), bool? isVaapiNativeAvailable = default(bool?), bool? isQuickSyncNativeAvailable = default(bool?), string operatingSystem = default(string))
        {
            ShowAdvanced = showAdvanced;
            IsSoftwareToneMappingAvailable = isSoftwareToneMappingAvailable;
            IsAnyHardwareToneMappingAvailable = isAnyHardwareToneMappingAvailable;
            ShowNvidiaOptions = showNvidiaOptions;
            ShowQuickSyncOptions = showQuickSyncOptions;
            ShowVaapiOptions = showVaapiOptions;
            IsOpenClAvailable = isOpenClAvailable;
            IsOpenClSuperTAvailable = isOpenClSuperTAvailable;
            IsVaapiNativeAvailable = isVaapiNativeAvailable;
            IsQuickSyncNativeAvailable = isQuickSyncNativeAvailable;
            OperatingSystem = operatingSystem;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShowAdvanced")]
        public bool? ShowAdvanced { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsSoftwareToneMappingAvailable")]
        public bool? IsSoftwareToneMappingAvailable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsAnyHardwareToneMappingAvailable")]
        public bool? IsAnyHardwareToneMappingAvailable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShowNvidiaOptions")]
        public bool? ShowNvidiaOptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShowQuickSyncOptions")]
        public bool? ShowQuickSyncOptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShowVaapiOptions")]
        public bool? ShowVaapiOptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsOpenClAvailable")]
        public bool? IsOpenClAvailable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsOpenClSuperTAvailable")]
        public bool? IsOpenClSuperTAvailable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsVaapiNativeAvailable")]
        public bool? IsVaapiNativeAvailable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsQuickSyncNativeAvailable")]
        public bool? IsQuickSyncNativeAvailable { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Windows', 'Linux', 'OSX',
        /// 'BSD', 'Android'
        /// </summary>
        [JsonProperty(PropertyName = "OperatingSystem")]
        public string OperatingSystem { get; set; }

    }
}
