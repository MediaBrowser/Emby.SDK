// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LiveTvTimerInfoDto
    {
        /// <summary>
        /// Initializes a new instance of the LiveTvTimerInfoDto class.
        /// </summary>
        public LiveTvTimerInfoDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LiveTvTimerInfoDto class.
        /// </summary>
        /// <param name="status">Possible values include: 'New', 'InProgress',
        /// 'Completed', 'Cancelled', 'ConflictedOk', 'ConflictedNotOk',
        /// 'Error'</param>
        /// <param name="timerType">Possible values include: 'Program',
        /// 'DateTime', 'Keyword'</param>
        /// <param name="keepUntil">Possible values include: 'UntilDeleted',
        /// 'UntilSpaceNeeded', 'UntilWatched', 'UntilDate'</param>
        public LiveTvTimerInfoDto(string status = default(string), string seriesTimerId = default(string), long? runTimeTicks = default(long?), BaseItemDto programInfo = default(BaseItemDto), string timerType = default(string), string id = default(string), string type = default(string), string serverId = default(string), string channelId = default(string), string channelName = default(string), string channelNumber = default(string), string channelPrimaryImageTag = default(string), string programId = default(string), string name = default(string), string overview = default(string), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), int? priority = default(int?), int? prePaddingSeconds = default(int?), int? postPaddingSeconds = default(int?), bool? isPrePaddingRequired = default(bool?), string parentBackdropItemId = default(string), IList<string> parentBackdropImageTags = default(IList<string>), bool? isPostPaddingRequired = default(bool?), string keepUntil = default(string))
        {
            Status = status;
            SeriesTimerId = seriesTimerId;
            RunTimeTicks = runTimeTicks;
            ProgramInfo = programInfo;
            TimerType = timerType;
            Id = id;
            Type = type;
            ServerId = serverId;
            ChannelId = channelId;
            ChannelName = channelName;
            ChannelNumber = channelNumber;
            ChannelPrimaryImageTag = channelPrimaryImageTag;
            ProgramId = programId;
            Name = name;
            Overview = overview;
            StartDate = startDate;
            EndDate = endDate;
            Priority = priority;
            PrePaddingSeconds = prePaddingSeconds;
            PostPaddingSeconds = postPaddingSeconds;
            IsPrePaddingRequired = isPrePaddingRequired;
            ParentBackdropItemId = parentBackdropItemId;
            ParentBackdropImageTags = parentBackdropImageTags;
            IsPostPaddingRequired = isPostPaddingRequired;
            KeepUntil = keepUntil;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'New', 'InProgress',
        /// 'Completed', 'Cancelled', 'ConflictedOk', 'ConflictedNotOk',
        /// 'Error'
        /// </summary>
        [JsonProperty(PropertyName = "Status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SeriesTimerId")]
        public string SeriesTimerId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RunTimeTicks")]
        public long? RunTimeTicks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ProgramInfo")]
        public BaseItemDto ProgramInfo { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Program', 'DateTime',
        /// 'Keyword'
        /// </summary>
        [JsonProperty(PropertyName = "TimerType")]
        public string TimerType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ServerId")]
        public string ServerId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ChannelId")]
        public string ChannelId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ChannelName")]
        public string ChannelName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ChannelNumber")]
        public string ChannelNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ChannelPrimaryImageTag")]
        public string ChannelPrimaryImageTag { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ProgramId")]
        public string ProgramId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Overview")]
        public string Overview { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "StartDate")]
        public System.DateTime? StartDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EndDate")]
        public System.DateTime? EndDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PrePaddingSeconds")]
        public int? PrePaddingSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PostPaddingSeconds")]
        public int? PostPaddingSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsPrePaddingRequired")]
        public bool? IsPrePaddingRequired { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ParentBackdropItemId")]
        public string ParentBackdropItemId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ParentBackdropImageTags")]
        public IList<string> ParentBackdropImageTags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsPostPaddingRequired")]
        public bool? IsPostPaddingRequired { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'UntilDeleted',
        /// 'UntilSpaceNeeded', 'UntilWatched', 'UntilDate'
        /// </summary>
        [JsonProperty(PropertyName = "KeepUntil")]
        public string KeepUntil { get; set; }

    }
}
