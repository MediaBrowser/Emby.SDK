// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MediaEncodingCodecsVideoCodecsVideoCodecBase
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MediaEncodingCodecsVideoCodecsVideoCodecBase class.
        /// </summary>
        public MediaEncodingCodecsVideoCodecsVideoCodecBase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MediaEncodingCodecsVideoCodecsVideoCodecBase class.
        /// </summary>
        /// <param name="codecKind">Possible values include: 'Audio', 'Video',
        /// 'SubTitles'</param>
        /// <param name="videoMediaType">Possible values include: 'Unknown',
        /// 'copy', 'flv1', 'h263', 'h263p', 'h264', 'hevc', 'mjpeg',
        /// 'mpeg1video', 'mpeg2video', 'mpeg4', 'msvideo1', 'theora',
        /// 'vc1image', 'vc1', 'vp8', 'vp9', 'wmv1', 'wmv2', 'wmv3', '_012v',
        /// '_4xm', '_8bps', 'a64_multi', 'a64_multi5', 'aasc', 'aic',
        /// 'alias_pix', 'amv', 'anm', 'ansi', 'apng', 'asv1', 'asv2', 'aura',
        /// 'aura2', 'av1', 'avrn', 'avrp', 'avs', 'avui', 'ayuv',
        /// 'bethsoftvid', 'bfi', 'binkvideo', 'bintext', 'bitpacked', 'bmp',
        /// 'bmv_video', 'brender_pix', 'c93', 'cavs', 'cdgraphics', 'cdxl',
        /// 'cfhd', 'cinepak', 'clearvideo', 'cljr', 'cllc', 'cmv', 'cpia',
        /// 'cscd', 'cyuv', 'daala', 'dds', 'dfa', 'dirac', 'dnxhd', 'dpx',
        /// 'dsicinvideo', 'dvvideo', 'dxa', 'dxtory', 'dxv', 'escape124',
        /// 'escape130', 'exr', 'ffv1', 'ffvhuff', 'fic', 'fits', 'flashsv',
        /// 'flashsv2', 'flic', 'fmvc', 'fraps', 'frwu', 'g2m', 'gdv', 'gif',
        /// 'h261', 'h263i', 'hap', 'hnm4video', 'hq_hqa', 'hqx', 'huffyuv',
        /// 'idcin', 'idf', 'iff_ilbm', 'indeo2', 'indeo3', 'indeo4', 'indeo5',
        /// 'interplayvideo', 'jpeg2000', 'jpegls', 'jv', 'kgv1', 'kmvc',
        /// 'lagarith', 'ljpeg', 'loco', 'm101', 'mad', 'magicyuv', 'mdec',
        /// 'mimic', 'mjpegb', 'mmvideo', 'motionpixels', 'msa1', 'mscc',
        /// 'msmpeg4v1', 'msmpeg4v2', 'msmpeg4v3', 'msrle', 'mss1', 'mss2',
        /// 'mszh', 'mts2', 'mvc1', 'mvc2', 'mxpeg', 'nuv', 'paf_video', 'pam',
        /// 'pbm', 'pcx', 'pgm', 'pgmyuv', 'pictor', 'pixlet', 'png', 'ppm',
        /// 'prores', 'psd', 'ptx', 'qdraw', 'qpeg', 'qtrle', 'r10k', 'r210',
        /// 'rawvideo', 'rl2', 'roq', 'rpza', 'rscc', 'rv10', 'rv20', 'rv30',
        /// 'rv40', 'sanm', 'scpr', 'screenpresso', 'sgi', 'sgirle',
        /// 'sheervideo', 'smackvideo', 'smc', 'smvjpeg', 'snow', 'sp5x',
        /// 'speedhq', 'srgc', 'sunrast', 'svg', 'svq1', 'svq3', 'targa',
        /// 'targa_y216', 'tdsc', 'tgq', 'tgv', 'thp', 'tiertexseqvideo',
        /// 'tiff', 'tmv', 'tqi', 'truemotion1', 'truemotion2',
        /// 'truemotion2rt', 'tscc', 'tscc2', 'txd', 'ulti', 'utvideo', 'v210',
        /// 'v210x', 'v308', 'v408', 'v410', 'vb', 'vble', 'vcr1', 'vixl',
        /// 'vmdvideo', 'vmnc', 'vp3', 'vp5', 'vp6', 'vp6a', 'vp6f', 'vp7',
        /// 'webp', 'wmv3image', 'wnv1', 'wrapped_avframe', 'ws_vqa',
        /// 'xan_wc3', 'xan_wc4', 'xbin', 'xbm', 'xface', 'xpm', 'xwd', 'y41p',
        /// 'ylc', 'yop', 'yuv4', 'zerocodec', 'zlib', 'zmbv'</param>
        /// <param name="direction">Possible values include: 'Encoder',
        /// 'Decoder'</param>
        /// <param name="secondaryFramework">Possible values include:
        /// 'Unknown', 'None', 'AmdAmf', 'MediaCodec', 'NvEncDec', 'OpenMax',
        /// 'QuickSync', 'VaApi', 'V4L2', 'DxVa', 'D3d11va', 'VideoToolbox',
        /// 'Mmal'</param>
        public MediaEncodingCodecsVideoCodecsVideoCodecBase(MediaEncodingCodecsCommonInterfacesICodecDeviceInfo codecDeviceInfo = default(MediaEncodingCodecsCommonInterfacesICodecDeviceInfo), string codecKind = default(string), string mediaTypeName = default(string), string videoMediaType = default(string), int? minWidth = default(int?), int? maxWidth = default(int?), int? minHeight = default(int?), int? maxHeight = default(int?), int? widthAlignment = default(int?), int? heightAlignment = default(int?), EmbyMediaModelTypesBitRate maxBitRate = default(EmbyMediaModelTypesBitRate), IList<string> supportedColorFormats = default(IList<string>), IList<string> supportedColorFormatStrings = default(IList<string>), IList<EmbyMediaModelTypesProfileLevelInformation> profileAndLevelInformation = default(IList<EmbyMediaModelTypesProfileLevelInformation>), string id = default(string), string direction = default(string), string name = default(string), string description = default(string), string frameworkCodec = default(string), bool? isHardwareCodec = default(bool?), string secondaryFramework = default(string), string secondaryFrameworkCodec = default(string), int? maxInstanceCount = default(int?), bool? isEnabledByDefault = default(bool?), int? defaultPriority = default(int?))
        {
            CodecDeviceInfo = codecDeviceInfo;
            CodecKind = codecKind;
            MediaTypeName = mediaTypeName;
            VideoMediaType = videoMediaType;
            MinWidth = minWidth;
            MaxWidth = maxWidth;
            MinHeight = minHeight;
            MaxHeight = maxHeight;
            WidthAlignment = widthAlignment;
            HeightAlignment = heightAlignment;
            MaxBitRate = maxBitRate;
            SupportedColorFormats = supportedColorFormats;
            SupportedColorFormatStrings = supportedColorFormatStrings;
            ProfileAndLevelInformation = profileAndLevelInformation;
            Id = id;
            Direction = direction;
            Name = name;
            Description = description;
            FrameworkCodec = frameworkCodec;
            IsHardwareCodec = isHardwareCodec;
            SecondaryFramework = secondaryFramework;
            SecondaryFrameworkCodec = secondaryFrameworkCodec;
            MaxInstanceCount = maxInstanceCount;
            IsEnabledByDefault = isEnabledByDefault;
            DefaultPriority = defaultPriority;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CodecDeviceInfo")]
        public MediaEncodingCodecsCommonInterfacesICodecDeviceInfo CodecDeviceInfo { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Audio', 'Video', 'SubTitles'
        /// </summary>
        [JsonProperty(PropertyName = "CodecKind")]
        public string CodecKind { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MediaTypeName")]
        public string MediaTypeName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Unknown', 'copy', 'flv1',
        /// 'h263', 'h263p', 'h264', 'hevc', 'mjpeg', 'mpeg1video',
        /// 'mpeg2video', 'mpeg4', 'msvideo1', 'theora', 'vc1image', 'vc1',
        /// 'vp8', 'vp9', 'wmv1', 'wmv2', 'wmv3', '_012v', '_4xm', '_8bps',
        /// 'a64_multi', 'a64_multi5', 'aasc', 'aic', 'alias_pix', 'amv',
        /// 'anm', 'ansi', 'apng', 'asv1', 'asv2', 'aura', 'aura2', 'av1',
        /// 'avrn', 'avrp', 'avs', 'avui', 'ayuv', 'bethsoftvid', 'bfi',
        /// 'binkvideo', 'bintext', 'bitpacked', 'bmp', 'bmv_video',
        /// 'brender_pix', 'c93', 'cavs', 'cdgraphics', 'cdxl', 'cfhd',
        /// 'cinepak', 'clearvideo', 'cljr', 'cllc', 'cmv', 'cpia', 'cscd',
        /// 'cyuv', 'daala', 'dds', 'dfa', 'dirac', 'dnxhd', 'dpx',
        /// 'dsicinvideo', 'dvvideo', 'dxa', 'dxtory', 'dxv', 'escape124',
        /// 'escape130', 'exr', 'ffv1', 'ffvhuff', 'fic', 'fits', 'flashsv',
        /// 'flashsv2', 'flic', 'fmvc', 'fraps', 'frwu', 'g2m', 'gdv', 'gif',
        /// 'h261', 'h263i', 'hap', 'hnm4video', 'hq_hqa', 'hqx', 'huffyuv',
        /// 'idcin', 'idf', 'iff_ilbm', 'indeo2', 'indeo3', 'indeo4', 'indeo5',
        /// 'interplayvideo', 'jpeg2000', 'jpegls', 'jv', 'kgv1', 'kmvc',
        /// 'lagarith', 'ljpeg', 'loco', 'm101', 'mad', 'magicyuv', 'mdec',
        /// 'mimic', 'mjpegb', 'mmvideo', 'motionpixels', 'msa1', 'mscc',
        /// 'msmpeg4v1', 'msmpeg4v2', 'msmpeg4v3', 'msrle', 'mss1', 'mss2',
        /// 'mszh', 'mts2', 'mvc1', 'mvc2', 'mxpeg', 'nuv', 'paf_video', 'pam',
        /// 'pbm', 'pcx', 'pgm', 'pgmyuv', 'pictor', 'pixlet', 'png', 'ppm',
        /// 'prores', 'psd', 'ptx', 'qdraw', 'qpeg', 'qtrle', 'r10k', 'r210',
        /// 'rawvideo', 'rl2', 'roq', 'rpza', 'rscc', 'rv10', 'rv20', 'rv30',
        /// 'rv40', 'sanm', 'scpr', 'screenpresso', 'sgi', 'sgirle',
        /// 'sheervideo', 'smackvideo', 'smc', 'smvjpeg', 'snow', 'sp5x',
        /// 'speedhq', 'srgc', 'sunrast', 'svg', 'svq1', 'svq3', 'targa',
        /// 'targa_y216', 'tdsc', 'tgq', 'tgv', 'thp', 'tiertexseqvideo',
        /// 'tiff', 'tmv', 'tqi', 'truemotion1', 'truemotion2',
        /// 'truemotion2rt', 'tscc', 'tscc2', 'txd', 'ulti', 'utvideo', 'v210',
        /// 'v210x', 'v308', 'v408', 'v410', 'vb', 'vble', 'vcr1', 'vixl',
        /// 'vmdvideo', 'vmnc', 'vp3', 'vp5', 'vp6', 'vp6a', 'vp6f', 'vp7',
        /// 'webp', 'wmv3image', 'wnv1', 'wrapped_avframe', 'ws_vqa',
        /// 'xan_wc3', 'xan_wc4', 'xbin', 'xbm', 'xface', 'xpm', 'xwd', 'y41p',
        /// 'ylc', 'yop', 'yuv4', 'zerocodec', 'zlib', 'zmbv'
        /// </summary>
        [JsonProperty(PropertyName = "VideoMediaType")]
        public string VideoMediaType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MinWidth")]
        public int? MinWidth { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxWidth")]
        public int? MaxWidth { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MinHeight")]
        public int? MinHeight { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxHeight")]
        public int? MaxHeight { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "WidthAlignment")]
        public int? WidthAlignment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HeightAlignment")]
        public int? HeightAlignment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxBitRate")]
        public EmbyMediaModelTypesBitRate MaxBitRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SupportedColorFormats")]
        public IList<string> SupportedColorFormats { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SupportedColorFormatStrings")]
        public IList<string> SupportedColorFormatStrings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ProfileAndLevelInformation")]
        public IList<EmbyMediaModelTypesProfileLevelInformation> ProfileAndLevelInformation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Encoder', 'Decoder'
        /// </summary>
        [JsonProperty(PropertyName = "Direction")]
        public string Direction { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FrameworkCodec")]
        public string FrameworkCodec { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsHardwareCodec")]
        public bool? IsHardwareCodec { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Unknown', 'None', 'AmdAmf',
        /// 'MediaCodec', 'NvEncDec', 'OpenMax', 'QuickSync', 'VaApi', 'V4L2',
        /// 'DxVa', 'D3d11va', 'VideoToolbox', 'Mmal'
        /// </summary>
        [JsonProperty(PropertyName = "SecondaryFramework")]
        public string SecondaryFramework { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SecondaryFrameworkCodec")]
        public string SecondaryFrameworkCodec { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxInstanceCount")]
        public int? MaxInstanceCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsEnabledByDefault")]
        public bool? IsEnabledByDefault { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DefaultPriority")]
        public int? DefaultPriority { get; set; }

    }
}
