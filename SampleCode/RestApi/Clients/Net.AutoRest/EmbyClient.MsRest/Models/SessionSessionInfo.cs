// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SessionSessionInfo
    {
        /// <summary>
        /// Initializes a new instance of the SessionSessionInfo class.
        /// </summary>
        public SessionSessionInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SessionSessionInfo class.
        /// </summary>
        public SessionSessionInfo(PlayerStateInfo playState = default(PlayerStateInfo), IList<SessionUserInfo> additionalUsers = default(IList<SessionUserInfo>), string remoteEndPoint = default(string), string protocol = default(string), IList<string> playableMediaTypes = default(IList<string>), string playlistItemId = default(string), int? playlistIndex = default(int?), int? playlistLength = default(int?), string id = default(string), string serverId = default(string), string userId = default(string), string userName = default(string), string userPrimaryImageTag = default(string), string client = default(string), System.DateTime? lastActivityDate = default(System.DateTime?), string deviceName = default(string), string deviceType = default(string), BaseItemDto nowPlayingItem = default(BaseItemDto), long? internalDeviceId = default(long?), string deviceId = default(string), string applicationVersion = default(string), string appIconUrl = default(string), IList<string> supportedCommands = default(IList<string>), TranscodingInfo transcodingInfo = default(TranscodingInfo), bool? supportsRemoteControl = default(bool?))
        {
            PlayState = playState;
            AdditionalUsers = additionalUsers;
            RemoteEndPoint = remoteEndPoint;
            Protocol = protocol;
            PlayableMediaTypes = playableMediaTypes;
            PlaylistItemId = playlistItemId;
            PlaylistIndex = playlistIndex;
            PlaylistLength = playlistLength;
            Id = id;
            ServerId = serverId;
            UserId = userId;
            UserName = userName;
            UserPrimaryImageTag = userPrimaryImageTag;
            Client = client;
            LastActivityDate = lastActivityDate;
            DeviceName = deviceName;
            DeviceType = deviceType;
            NowPlayingItem = nowPlayingItem;
            InternalDeviceId = internalDeviceId;
            DeviceId = deviceId;
            ApplicationVersion = applicationVersion;
            AppIconUrl = appIconUrl;
            SupportedCommands = supportedCommands;
            TranscodingInfo = transcodingInfo;
            SupportsRemoteControl = supportsRemoteControl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlayState")]
        public PlayerStateInfo PlayState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AdditionalUsers")]
        public IList<SessionUserInfo> AdditionalUsers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RemoteEndPoint")]
        public string RemoteEndPoint { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Protocol")]
        public string Protocol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlayableMediaTypes")]
        public IList<string> PlayableMediaTypes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlaylistItemId")]
        public string PlaylistItemId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlaylistIndex")]
        public int? PlaylistIndex { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlaylistLength")]
        public int? PlaylistLength { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ServerId")]
        public string ServerId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UserId")]
        public string UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UserName")]
        public string UserName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UserPrimaryImageTag")]
        public string UserPrimaryImageTag { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Client")]
        public string Client { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LastActivityDate")]
        public System.DateTime? LastActivityDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DeviceName")]
        public string DeviceName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DeviceType")]
        public string DeviceType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "NowPlayingItem")]
        public BaseItemDto NowPlayingItem { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "InternalDeviceId")]
        public long? InternalDeviceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DeviceId")]
        public string DeviceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ApplicationVersion")]
        public string ApplicationVersion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AppIconUrl")]
        public string AppIconUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SupportedCommands")]
        public IList<string> SupportedCommands { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TranscodingInfo")]
        public TranscodingInfo TranscodingInfo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SupportsRemoteControl")]
        public bool? SupportsRemoteControl { get; set; }

    }
}
