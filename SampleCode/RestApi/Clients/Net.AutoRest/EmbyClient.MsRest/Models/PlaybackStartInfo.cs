// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class PlaybackStartInfo
    {
        /// <summary>
        /// Initializes a new instance of the PlaybackStartInfo class.
        /// </summary>
        public PlaybackStartInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PlaybackStartInfo class.
        /// </summary>
        /// <param name="eventName">Possible values include: 'TimeUpdate',
        /// 'Pause', 'Unpause', 'VolumeChange', 'RepeatModeChange',
        /// 'AudioTrackChange', 'SubtitleTrackChange', 'PlaylistItemMove',
        /// 'PlaylistItemRemove', 'PlaylistItemAdd', 'QualityChange',
        /// 'StateChange', 'SubtitleOffsetChange', 'PlaybackRateChange'</param>
        /// <param name="playMethod">Possible values include: 'Transcode',
        /// 'DirectStream', 'DirectPlay'</param>
        /// <param name="repeatMode">Possible values include: 'RepeatNone',
        /// 'RepeatAll', 'RepeatOne'</param>
        public PlaybackStartInfo(bool? canSeek = default(bool?), BaseItemDto item = default(BaseItemDto), IList<QueueItem> nowPlayingQueue = default(IList<QueueItem>), string playlistItemId = default(string), string itemId = default(string), string sessionId = default(string), string mediaSourceId = default(string), int? audioStreamIndex = default(int?), int? subtitleStreamIndex = default(int?), bool? isPaused = default(bool?), int? playlistIndex = default(int?), int? playlistLength = default(int?), bool? isMuted = default(bool?), long? positionTicks = default(long?), long? runTimeTicks = default(long?), long? playbackStartTimeTicks = default(long?), int? volumeLevel = default(int?), int? brightness = default(int?), string aspectRatio = default(string), string eventName = default(string), string playMethod = default(string), string liveStreamId = default(string), string playSessionId = default(string), string repeatMode = default(string), int? subtitleOffset = default(int?), double? playbackRate = default(double?), IList<string> playlistItemIds = default(IList<string>))
        {
            CanSeek = canSeek;
            Item = item;
            NowPlayingQueue = nowPlayingQueue;
            PlaylistItemId = playlistItemId;
            ItemId = itemId;
            SessionId = sessionId;
            MediaSourceId = mediaSourceId;
            AudioStreamIndex = audioStreamIndex;
            SubtitleStreamIndex = subtitleStreamIndex;
            IsPaused = isPaused;
            PlaylistIndex = playlistIndex;
            PlaylistLength = playlistLength;
            IsMuted = isMuted;
            PositionTicks = positionTicks;
            RunTimeTicks = runTimeTicks;
            PlaybackStartTimeTicks = playbackStartTimeTicks;
            VolumeLevel = volumeLevel;
            Brightness = brightness;
            AspectRatio = aspectRatio;
            EventName = eventName;
            PlayMethod = playMethod;
            LiveStreamId = liveStreamId;
            PlaySessionId = playSessionId;
            RepeatMode = repeatMode;
            SubtitleOffset = subtitleOffset;
            PlaybackRate = playbackRate;
            PlaylistItemIds = playlistItemIds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CanSeek")]
        public bool? CanSeek { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Item")]
        public BaseItemDto Item { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "NowPlayingQueue")]
        public IList<QueueItem> NowPlayingQueue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlaylistItemId")]
        public string PlaylistItemId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ItemId")]
        public string ItemId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SessionId")]
        public string SessionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MediaSourceId")]
        public string MediaSourceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AudioStreamIndex")]
        public int? AudioStreamIndex { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SubtitleStreamIndex")]
        public int? SubtitleStreamIndex { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsPaused")]
        public bool? IsPaused { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlaylistIndex")]
        public int? PlaylistIndex { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlaylistLength")]
        public int? PlaylistLength { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsMuted")]
        public bool? IsMuted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PositionTicks")]
        public long? PositionTicks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RunTimeTicks")]
        public long? RunTimeTicks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlaybackStartTimeTicks")]
        public long? PlaybackStartTimeTicks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "VolumeLevel")]
        public int? VolumeLevel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Brightness")]
        public int? Brightness { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AspectRatio")]
        public string AspectRatio { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'TimeUpdate', 'Pause',
        /// 'Unpause', 'VolumeChange', 'RepeatModeChange', 'AudioTrackChange',
        /// 'SubtitleTrackChange', 'PlaylistItemMove', 'PlaylistItemRemove',
        /// 'PlaylistItemAdd', 'QualityChange', 'StateChange',
        /// 'SubtitleOffsetChange', 'PlaybackRateChange'
        /// </summary>
        [JsonProperty(PropertyName = "EventName")]
        public string EventName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Transcode', 'DirectStream',
        /// 'DirectPlay'
        /// </summary>
        [JsonProperty(PropertyName = "PlayMethod")]
        public string PlayMethod { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LiveStreamId")]
        public string LiveStreamId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlaySessionId")]
        public string PlaySessionId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'RepeatNone', 'RepeatAll',
        /// 'RepeatOne'
        /// </summary>
        [JsonProperty(PropertyName = "RepeatMode")]
        public string RepeatMode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SubtitleOffset")]
        public int? SubtitleOffset { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlaybackRate")]
        public double? PlaybackRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlaylistItemIds")]
        public IList<string> PlaylistItemIds { get; set; }

    }
}
