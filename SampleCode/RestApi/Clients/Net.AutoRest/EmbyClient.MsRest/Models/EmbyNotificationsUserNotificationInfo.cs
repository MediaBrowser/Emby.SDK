// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class EmbyNotificationsUserNotificationInfo
    {
        /// <summary>
        /// Initializes a new instance of the
        /// EmbyNotificationsUserNotificationInfo class.
        /// </summary>
        public EmbyNotificationsUserNotificationInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// EmbyNotificationsUserNotificationInfo class.
        /// </summary>
        public EmbyNotificationsUserNotificationInfo(string notifierKey = default(string), string setupModuleUrl = default(string), string serviceName = default(string), string friendlyName = default(string), string id = default(string), bool? enabled = default(bool?), IList<string> userIds = default(IList<string>), IList<string> libraryIds = default(IList<string>), IList<string> eventIds = default(IList<string>), string userId = default(string), bool? isSelfNotification = default(bool?), IDictionary<string, string> options = default(IDictionary<string, string>))
        {
            NotifierKey = notifierKey;
            SetupModuleUrl = setupModuleUrl;
            ServiceName = serviceName;
            FriendlyName = friendlyName;
            Id = id;
            Enabled = enabled;
            UserIds = userIds;
            LibraryIds = libraryIds;
            EventIds = eventIds;
            UserId = userId;
            IsSelfNotification = isSelfNotification;
            Options = options;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "NotifierKey")]
        public string NotifierKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SetupModuleUrl")]
        public string SetupModuleUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ServiceName")]
        public string ServiceName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FriendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UserIds")]
        public IList<string> UserIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LibraryIds")]
        public IList<string> LibraryIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EventIds")]
        public IList<string> EventIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UserId")]
        public string UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsSelfNotification")]
        public bool? IsSelfNotification { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Options")]
        public IDictionary<string, string> Options { get; set; }

    }
}
