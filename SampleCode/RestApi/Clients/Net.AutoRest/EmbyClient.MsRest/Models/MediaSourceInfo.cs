// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MediaSourceInfo
    {
        /// <summary>
        /// Initializes a new instance of the MediaSourceInfo class.
        /// </summary>
        public MediaSourceInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MediaSourceInfo class.
        /// </summary>
        /// <param name="protocol">Possible values include: 'File', 'Http',
        /// 'Rtmp', 'Rtsp', 'Udp', 'Rtp', 'Ftp', 'Mms'</param>
        /// <param name="encoderProtocol">Possible values include: 'File',
        /// 'Http', 'Rtmp', 'Rtsp', 'Udp', 'Rtp', 'Ftp', 'Mms'</param>
        /// <param name="type">Possible values include: 'Default', 'Grouping',
        /// 'Placeholder'</param>
        /// <param name="video3DFormat">Possible values include:
        /// 'HalfSideBySide', 'FullSideBySide', 'FullTopAndBottom',
        /// 'HalfTopAndBottom', 'MVC'</param>
        /// <param name="timestamp">Possible values include: 'None', 'Zero',
        /// 'Valid'</param>
        public MediaSourceInfo(string protocol = default(string), string id = default(string), string path = default(string), string encoderPath = default(string), string encoderProtocol = default(string), string type = default(string), string container = default(string), long? size = default(long?), string name = default(string), string sortName = default(string), bool? isRemote = default(bool?), long? runTimeTicks = default(long?), long? containerStartTimeTicks = default(long?), bool? supportsTranscoding = default(bool?), bool? supportsDirectStream = default(bool?), bool? supportsDirectPlay = default(bool?), bool? isInfiniteStream = default(bool?), bool? requiresOpening = default(bool?), string openToken = default(string), bool? requiresClosing = default(bool?), string liveStreamId = default(string), int? bufferMs = default(int?), bool? requiresLooping = default(bool?), bool? supportsProbing = default(bool?), string video3DFormat = default(string), IList<MediaStream> mediaStreams = default(IList<MediaStream>), IList<string> formats = default(IList<string>), int? bitrate = default(int?), string timestamp = default(string), IDictionary<string, string> requiredHttpHeaders = default(IDictionary<string, string>), string directStreamUrl = default(string), string transcodingUrl = default(string), string transcodingSubProtocol = default(string), string transcodingContainer = default(string), int? analyzeDurationMs = default(int?), bool? readAtNativeFramerate = default(bool?), int? defaultAudioStreamIndex = default(int?), int? defaultSubtitleStreamIndex = default(int?), string itemId = default(string), string serverId = default(string))
        {
            Protocol = protocol;
            Id = id;
            Path = path;
            EncoderPath = encoderPath;
            EncoderProtocol = encoderProtocol;
            Type = type;
            Container = container;
            Size = size;
            Name = name;
            SortName = sortName;
            IsRemote = isRemote;
            RunTimeTicks = runTimeTicks;
            ContainerStartTimeTicks = containerStartTimeTicks;
            SupportsTranscoding = supportsTranscoding;
            SupportsDirectStream = supportsDirectStream;
            SupportsDirectPlay = supportsDirectPlay;
            IsInfiniteStream = isInfiniteStream;
            RequiresOpening = requiresOpening;
            OpenToken = openToken;
            RequiresClosing = requiresClosing;
            LiveStreamId = liveStreamId;
            BufferMs = bufferMs;
            RequiresLooping = requiresLooping;
            SupportsProbing = supportsProbing;
            Video3DFormat = video3DFormat;
            MediaStreams = mediaStreams;
            Formats = formats;
            Bitrate = bitrate;
            Timestamp = timestamp;
            RequiredHttpHeaders = requiredHttpHeaders;
            DirectStreamUrl = directStreamUrl;
            TranscodingUrl = transcodingUrl;
            TranscodingSubProtocol = transcodingSubProtocol;
            TranscodingContainer = transcodingContainer;
            AnalyzeDurationMs = analyzeDurationMs;
            ReadAtNativeFramerate = readAtNativeFramerate;
            DefaultAudioStreamIndex = defaultAudioStreamIndex;
            DefaultSubtitleStreamIndex = defaultSubtitleStreamIndex;
            ItemId = itemId;
            ServerId = serverId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'File', 'Http', 'Rtmp',
        /// 'Rtsp', 'Udp', 'Rtp', 'Ftp', 'Mms'
        /// </summary>
        [JsonProperty(PropertyName = "Protocol")]
        public string Protocol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Path")]
        public string Path { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EncoderPath")]
        public string EncoderPath { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'File', 'Http', 'Rtmp',
        /// 'Rtsp', 'Udp', 'Rtp', 'Ftp', 'Mms'
        /// </summary>
        [JsonProperty(PropertyName = "EncoderProtocol")]
        public string EncoderProtocol { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Default', 'Grouping',
        /// 'Placeholder'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Container")]
        public string Container { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Size")]
        public long? Size { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SortName")]
        public string SortName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsRemote")]
        public bool? IsRemote { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RunTimeTicks")]
        public long? RunTimeTicks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ContainerStartTimeTicks")]
        public long? ContainerStartTimeTicks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SupportsTranscoding")]
        public bool? SupportsTranscoding { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SupportsDirectStream")]
        public bool? SupportsDirectStream { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SupportsDirectPlay")]
        public bool? SupportsDirectPlay { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsInfiniteStream")]
        public bool? IsInfiniteStream { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiresOpening")]
        public bool? RequiresOpening { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OpenToken")]
        public string OpenToken { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiresClosing")]
        public bool? RequiresClosing { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LiveStreamId")]
        public string LiveStreamId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BufferMs")]
        public int? BufferMs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiresLooping")]
        public bool? RequiresLooping { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SupportsProbing")]
        public bool? SupportsProbing { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'HalfSideBySide',
        /// 'FullSideBySide', 'FullTopAndBottom', 'HalfTopAndBottom', 'MVC'
        /// </summary>
        [JsonProperty(PropertyName = "Video3DFormat")]
        public string Video3DFormat { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MediaStreams")]
        public IList<MediaStream> MediaStreams { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Formats")]
        public IList<string> Formats { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Bitrate")]
        public int? Bitrate { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'None', 'Zero', 'Valid'
        /// </summary>
        [JsonProperty(PropertyName = "Timestamp")]
        public string Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiredHttpHeaders")]
        public IDictionary<string, string> RequiredHttpHeaders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DirectStreamUrl")]
        public string DirectStreamUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TranscodingUrl")]
        public string TranscodingUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TranscodingSubProtocol")]
        public string TranscodingSubProtocol { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TranscodingContainer")]
        public string TranscodingContainer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AnalyzeDurationMs")]
        public int? AnalyzeDurationMs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ReadAtNativeFramerate")]
        public bool? ReadAtNativeFramerate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DefaultAudioStreamIndex")]
        public int? DefaultAudioStreamIndex { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DefaultSubtitleStreamIndex")]
        public int? DefaultSubtitleStreamIndex { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ItemId")]
        public string ItemId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ServerId")]
        public string ServerId { get; set; }

    }
}
