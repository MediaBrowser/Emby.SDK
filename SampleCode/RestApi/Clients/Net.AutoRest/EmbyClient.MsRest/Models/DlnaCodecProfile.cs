// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DlnaCodecProfile
    {
        /// <summary>
        /// Initializes a new instance of the DlnaCodecProfile class.
        /// </summary>
        public DlnaCodecProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DlnaCodecProfile class.
        /// </summary>
        /// <param name="type">Possible values include: 'Video', 'VideoAudio',
        /// 'Audio'</param>
        public DlnaCodecProfile(string type = default(string), IList<DlnaProfileCondition> conditions = default(IList<DlnaProfileCondition>), IList<DlnaProfileCondition> applyConditions = default(IList<DlnaProfileCondition>), string codec = default(string), string container = default(string))
        {
            Type = type;
            Conditions = conditions;
            ApplyConditions = applyConditions;
            Codec = codec;
            Container = container;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Video', 'VideoAudio',
        /// 'Audio'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Conditions")]
        public IList<DlnaProfileCondition> Conditions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ApplyConditions")]
        public IList<DlnaProfileCondition> ApplyConditions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Codec")]
        public string Codec { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Container")]
        public string Container { get; set; }

    }
}
