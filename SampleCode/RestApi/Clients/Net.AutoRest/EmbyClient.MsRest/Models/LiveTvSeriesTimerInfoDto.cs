// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LiveTvSeriesTimerInfoDto
    {
        /// <summary>
        /// Initializes a new instance of the LiveTvSeriesTimerInfoDto class.
        /// </summary>
        public LiveTvSeriesTimerInfoDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LiveTvSeriesTimerInfoDto class.
        /// </summary>
        /// <param name="timerType">Possible values include: 'Program',
        /// 'DateTime', 'Keyword'</param>
        /// <param name="keepUntil">Possible values include: 'UntilDeleted',
        /// 'UntilSpaceNeeded', 'UntilWatched', 'UntilDate'</param>
        public LiveTvSeriesTimerInfoDto(bool? recordAnyTime = default(bool?), bool? skipEpisodesInLibrary = default(bool?), bool? recordAnyChannel = default(bool?), int? keepUpTo = default(int?), int? maxRecordingSeconds = default(int?), bool? recordNewOnly = default(bool?), IList<string> channelIds = default(IList<string>), IList<string> days = default(IList<string>), IDictionary<string, string> imageTags = default(IDictionary<string, string>), string parentThumbItemId = default(string), string parentThumbImageTag = default(string), string parentPrimaryImageItemId = default(string), string parentPrimaryImageTag = default(string), string seriesId = default(string), IList<LiveTvKeywordInfo> keywords = default(IList<LiveTvKeywordInfo>), string timerType = default(string), string id = default(string), string type = default(string), string serverId = default(string), string channelId = default(string), string channelName = default(string), string channelPrimaryImageTag = default(string), string programId = default(string), string name = default(string), string overview = default(string), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), int? priority = default(int?), int? prePaddingSeconds = default(int?), int? postPaddingSeconds = default(int?), bool? isPrePaddingRequired = default(bool?), string parentBackdropItemId = default(string), IList<string> parentBackdropImageTags = default(IList<string>), bool? isPostPaddingRequired = default(bool?), string keepUntil = default(string))
        {
            RecordAnyTime = recordAnyTime;
            SkipEpisodesInLibrary = skipEpisodesInLibrary;
            RecordAnyChannel = recordAnyChannel;
            KeepUpTo = keepUpTo;
            MaxRecordingSeconds = maxRecordingSeconds;
            RecordNewOnly = recordNewOnly;
            ChannelIds = channelIds;
            Days = days;
            ImageTags = imageTags;
            ParentThumbItemId = parentThumbItemId;
            ParentThumbImageTag = parentThumbImageTag;
            ParentPrimaryImageItemId = parentPrimaryImageItemId;
            ParentPrimaryImageTag = parentPrimaryImageTag;
            SeriesId = seriesId;
            Keywords = keywords;
            TimerType = timerType;
            Id = id;
            Type = type;
            ServerId = serverId;
            ChannelId = channelId;
            ChannelName = channelName;
            ChannelPrimaryImageTag = channelPrimaryImageTag;
            ProgramId = programId;
            Name = name;
            Overview = overview;
            StartDate = startDate;
            EndDate = endDate;
            Priority = priority;
            PrePaddingSeconds = prePaddingSeconds;
            PostPaddingSeconds = postPaddingSeconds;
            IsPrePaddingRequired = isPrePaddingRequired;
            ParentBackdropItemId = parentBackdropItemId;
            ParentBackdropImageTags = parentBackdropImageTags;
            IsPostPaddingRequired = isPostPaddingRequired;
            KeepUntil = keepUntil;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RecordAnyTime")]
        public bool? RecordAnyTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SkipEpisodesInLibrary")]
        public bool? SkipEpisodesInLibrary { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RecordAnyChannel")]
        public bool? RecordAnyChannel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "KeepUpTo")]
        public int? KeepUpTo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MaxRecordingSeconds")]
        public int? MaxRecordingSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RecordNewOnly")]
        public bool? RecordNewOnly { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ChannelIds")]
        public IList<string> ChannelIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Days")]
        public IList<string> Days { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ImageTags")]
        public IDictionary<string, string> ImageTags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ParentThumbItemId")]
        public string ParentThumbItemId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ParentThumbImageTag")]
        public string ParentThumbImageTag { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ParentPrimaryImageItemId")]
        public string ParentPrimaryImageItemId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ParentPrimaryImageTag")]
        public string ParentPrimaryImageTag { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SeriesId")]
        public string SeriesId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Keywords")]
        public IList<LiveTvKeywordInfo> Keywords { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Program', 'DateTime',
        /// 'Keyword'
        /// </summary>
        [JsonProperty(PropertyName = "TimerType")]
        public string TimerType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ServerId")]
        public string ServerId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ChannelId")]
        public string ChannelId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ChannelName")]
        public string ChannelName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ChannelPrimaryImageTag")]
        public string ChannelPrimaryImageTag { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ProgramId")]
        public string ProgramId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Overview")]
        public string Overview { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "StartDate")]
        public System.DateTime? StartDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EndDate")]
        public System.DateTime? EndDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PrePaddingSeconds")]
        public int? PrePaddingSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PostPaddingSeconds")]
        public int? PostPaddingSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsPrePaddingRequired")]
        public bool? IsPrePaddingRequired { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ParentBackdropItemId")]
        public string ParentBackdropItemId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ParentBackdropImageTags")]
        public IList<string> ParentBackdropImageTags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsPostPaddingRequired")]
        public bool? IsPostPaddingRequired { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'UntilDeleted',
        /// 'UntilSpaceNeeded', 'UntilWatched', 'UntilDate'
        /// </summary>
        [JsonProperty(PropertyName = "KeepUntil")]
        public string KeepUntil { get; set; }

    }
}
