// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EmbyClient.MsRest.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ConfigurationServerConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the ConfigurationServerConfiguration
        /// class.
        /// </summary>
        public ConfigurationServerConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConfigurationServerConfiguration
        /// class.
        /// </summary>
        /// <param name="imageSavingConvention">Possible values include:
        /// 'Legacy', 'Compatible'</param>
        /// <param name="preferredDetectedRemoteAddressFamily">Possible values
        /// include: 'Unspecified', 'Unix', 'InterNetwork', 'ImpLink', 'Pup',
        /// 'Chaos', 'NS', 'Ipx', 'Osi', 'Iso', 'Ecma', 'DataKit', 'Ccitt',
        /// 'Sna', 'DecNet', 'DataLink', 'Lat', 'HyperChannel', 'AppleTalk',
        /// 'NetBios', 'VoiceView', 'FireFox', 'Banyan', 'Atm',
        /// 'InterNetworkV6', 'Cluster', 'Ieee12844', 'Irda',
        /// 'NetworkDesigners', 'Max', 'Packet', 'ControllerAreaNetwork',
        /// 'Unknown'</param>
        /// <param name="proxyHeaderMode">Possible values include: 'None',
        /// 'LanAddressesOnly', 'RemoteAddressesOnly', 'AllAddresses'</param>
        public ConfigurationServerConfiguration(bool? enableUPnP = default(bool?), int? publicPort = default(int?), int? publicHttpsPort = default(int?), int? httpServerPortNumber = default(int?), int? httpsPortNumber = default(int?), bool? enableHttps = default(bool?), string certificatePath = default(string), string certificatePassword = default(string), bool? isPortAuthorized = default(bool?), bool? autoRunWebApp = default(bool?), bool? enableRemoteAccess = default(bool?), bool? logAllQueryTimes = default(bool?), bool? enableCaseSensitiveItemIds = default(bool?), string metadataPath = default(string), string metadataNetworkPath = default(string), string preferredMetadataLanguage = default(string), string metadataCountryCode = default(string), IList<string> sortRemoveWords = default(IList<string>), int? libraryMonitorDelay = default(int?), bool? enableDashboardResponseCaching = default(bool?), string dashboardSourcePath = default(string), string imageSavingConvention = default(string), bool? enableAutomaticRestart = default(bool?), string serverName = default(string), string preferredDetectedRemoteAddressFamily = default(string), string wanDdns = default(string), string uICulture = default(string), int? remoteClientBitrateLimit = default(int?), IList<string> localNetworkSubnets = default(IList<string>), IList<string> localNetworkAddresses = default(IList<string>), bool? enableExternalContentInSuggestions = default(bool?), bool? requireHttps = default(bool?), bool? isBehindProxy = default(bool?), IList<string> remoteIPFilter = default(IList<string>), bool? isRemoteIPFilterBlacklist = default(bool?), int? imageExtractionTimeoutMs = default(int?), IList<ConfigurationPathSubstitution> pathSubstitutions = default(IList<ConfigurationPathSubstitution>), IList<string> uninstalledPlugins = default(IList<string>), bool? collapseVideoFolders = default(bool?), bool? enableOriginalTrackTitles = default(bool?), bool? vacuumDatabaseOnStartup = default(bool?), int? simultaneousStreamLimit = default(int?), int? databaseCacheSizeMB = default(int?), bool? enableSqLiteMmio = default(bool?), bool? playlistsUpgradedToM3U = default(bool?), bool? forcedSortNameUpgraded = default(bool?), bool? inheritedParentalRatingValueUpgraded = default(bool?), bool? imageExtractorUpgraded = default(bool?), bool? enablePeopleLetterSubFolders = default(bool?), bool? optimizeDatabaseOnShutdown = default(bool?), int? databaseAnalysisLimit = default(int?), bool? disableAsyncIO = default(bool?), bool? migratedToUserItemShares = default(bool?), bool? enableFks = default(bool?), bool? allowRenegotiation = default(bool?), string proxyHeaderMode = default(string), bool? enableDebugLevelLogging = default(bool?), string revertDebugLogging = default(string), bool? enableAutoUpdate = default(bool?), int? logFileRetentionDays = default(int?), bool? runAtStartup = default(bool?), bool? isStartupWizardCompleted = default(bool?), string cachePath = default(string))
        {
            EnableUPnP = enableUPnP;
            PublicPort = publicPort;
            PublicHttpsPort = publicHttpsPort;
            HttpServerPortNumber = httpServerPortNumber;
            HttpsPortNumber = httpsPortNumber;
            EnableHttps = enableHttps;
            CertificatePath = certificatePath;
            CertificatePassword = certificatePassword;
            IsPortAuthorized = isPortAuthorized;
            AutoRunWebApp = autoRunWebApp;
            EnableRemoteAccess = enableRemoteAccess;
            LogAllQueryTimes = logAllQueryTimes;
            EnableCaseSensitiveItemIds = enableCaseSensitiveItemIds;
            MetadataPath = metadataPath;
            MetadataNetworkPath = metadataNetworkPath;
            PreferredMetadataLanguage = preferredMetadataLanguage;
            MetadataCountryCode = metadataCountryCode;
            SortRemoveWords = sortRemoveWords;
            LibraryMonitorDelay = libraryMonitorDelay;
            EnableDashboardResponseCaching = enableDashboardResponseCaching;
            DashboardSourcePath = dashboardSourcePath;
            ImageSavingConvention = imageSavingConvention;
            EnableAutomaticRestart = enableAutomaticRestart;
            ServerName = serverName;
            PreferredDetectedRemoteAddressFamily = preferredDetectedRemoteAddressFamily;
            WanDdns = wanDdns;
            UICulture = uICulture;
            RemoteClientBitrateLimit = remoteClientBitrateLimit;
            LocalNetworkSubnets = localNetworkSubnets;
            LocalNetworkAddresses = localNetworkAddresses;
            EnableExternalContentInSuggestions = enableExternalContentInSuggestions;
            RequireHttps = requireHttps;
            IsBehindProxy = isBehindProxy;
            RemoteIPFilter = remoteIPFilter;
            IsRemoteIPFilterBlacklist = isRemoteIPFilterBlacklist;
            ImageExtractionTimeoutMs = imageExtractionTimeoutMs;
            PathSubstitutions = pathSubstitutions;
            UninstalledPlugins = uninstalledPlugins;
            CollapseVideoFolders = collapseVideoFolders;
            EnableOriginalTrackTitles = enableOriginalTrackTitles;
            VacuumDatabaseOnStartup = vacuumDatabaseOnStartup;
            SimultaneousStreamLimit = simultaneousStreamLimit;
            DatabaseCacheSizeMB = databaseCacheSizeMB;
            EnableSqLiteMmio = enableSqLiteMmio;
            PlaylistsUpgradedToM3U = playlistsUpgradedToM3U;
            ForcedSortNameUpgraded = forcedSortNameUpgraded;
            InheritedParentalRatingValueUpgraded = inheritedParentalRatingValueUpgraded;
            ImageExtractorUpgraded = imageExtractorUpgraded;
            EnablePeopleLetterSubFolders = enablePeopleLetterSubFolders;
            OptimizeDatabaseOnShutdown = optimizeDatabaseOnShutdown;
            DatabaseAnalysisLimit = databaseAnalysisLimit;
            DisableAsyncIO = disableAsyncIO;
            MigratedToUserItemShares = migratedToUserItemShares;
            EnableFks = enableFks;
            AllowRenegotiation = allowRenegotiation;
            ProxyHeaderMode = proxyHeaderMode;
            EnableDebugLevelLogging = enableDebugLevelLogging;
            RevertDebugLogging = revertDebugLogging;
            EnableAutoUpdate = enableAutoUpdate;
            LogFileRetentionDays = logFileRetentionDays;
            RunAtStartup = runAtStartup;
            IsStartupWizardCompleted = isStartupWizardCompleted;
            CachePath = cachePath;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableUPnP")]
        public bool? EnableUPnP { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PublicPort")]
        public int? PublicPort { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PublicHttpsPort")]
        public int? PublicHttpsPort { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HttpServerPortNumber")]
        public int? HttpServerPortNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HttpsPortNumber")]
        public int? HttpsPortNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableHttps")]
        public bool? EnableHttps { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CertificatePath")]
        public string CertificatePath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CertificatePassword")]
        public string CertificatePassword { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsPortAuthorized")]
        public bool? IsPortAuthorized { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AutoRunWebApp")]
        public bool? AutoRunWebApp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableRemoteAccess")]
        public bool? EnableRemoteAccess { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LogAllQueryTimes")]
        public bool? LogAllQueryTimes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableCaseSensitiveItemIds")]
        public bool? EnableCaseSensitiveItemIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MetadataPath")]
        public string MetadataPath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MetadataNetworkPath")]
        public string MetadataNetworkPath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PreferredMetadataLanguage")]
        public string PreferredMetadataLanguage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MetadataCountryCode")]
        public string MetadataCountryCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SortRemoveWords")]
        public IList<string> SortRemoveWords { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LibraryMonitorDelay")]
        public int? LibraryMonitorDelay { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableDashboardResponseCaching")]
        public bool? EnableDashboardResponseCaching { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DashboardSourcePath")]
        public string DashboardSourcePath { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Legacy', 'Compatible'
        /// </summary>
        [JsonProperty(PropertyName = "ImageSavingConvention")]
        public string ImageSavingConvention { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableAutomaticRestart")]
        public bool? EnableAutomaticRestart { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ServerName")]
        public string ServerName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Unspecified', 'Unix',
        /// 'InterNetwork', 'ImpLink', 'Pup', 'Chaos', 'NS', 'Ipx', 'Osi',
        /// 'Iso', 'Ecma', 'DataKit', 'Ccitt', 'Sna', 'DecNet', 'DataLink',
        /// 'Lat', 'HyperChannel', 'AppleTalk', 'NetBios', 'VoiceView',
        /// 'FireFox', 'Banyan', 'Atm', 'InterNetworkV6', 'Cluster',
        /// 'Ieee12844', 'Irda', 'NetworkDesigners', 'Max', 'Packet',
        /// 'ControllerAreaNetwork', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "PreferredDetectedRemoteAddressFamily")]
        public string PreferredDetectedRemoteAddressFamily { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "WanDdns")]
        public string WanDdns { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UICulture")]
        public string UICulture { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RemoteClientBitrateLimit")]
        public int? RemoteClientBitrateLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LocalNetworkSubnets")]
        public IList<string> LocalNetworkSubnets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LocalNetworkAddresses")]
        public IList<string> LocalNetworkAddresses { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableExternalContentInSuggestions")]
        public bool? EnableExternalContentInSuggestions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequireHttps")]
        public bool? RequireHttps { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsBehindProxy")]
        public bool? IsBehindProxy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RemoteIPFilter")]
        public IList<string> RemoteIPFilter { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsRemoteIPFilterBlacklist")]
        public bool? IsRemoteIPFilterBlacklist { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ImageExtractionTimeoutMs")]
        public int? ImageExtractionTimeoutMs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PathSubstitutions")]
        public IList<ConfigurationPathSubstitution> PathSubstitutions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UninstalledPlugins")]
        public IList<string> UninstalledPlugins { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CollapseVideoFolders")]
        public bool? CollapseVideoFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableOriginalTrackTitles")]
        public bool? EnableOriginalTrackTitles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "VacuumDatabaseOnStartup")]
        public bool? VacuumDatabaseOnStartup { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SimultaneousStreamLimit")]
        public int? SimultaneousStreamLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DatabaseCacheSizeMB")]
        public int? DatabaseCacheSizeMB { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableSqLiteMmio")]
        public bool? EnableSqLiteMmio { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PlaylistsUpgradedToM3U")]
        public bool? PlaylistsUpgradedToM3U { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ForcedSortNameUpgraded")]
        public bool? ForcedSortNameUpgraded { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "InheritedParentalRatingValueUpgraded")]
        public bool? InheritedParentalRatingValueUpgraded { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ImageExtractorUpgraded")]
        public bool? ImageExtractorUpgraded { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnablePeopleLetterSubFolders")]
        public bool? EnablePeopleLetterSubFolders { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OptimizeDatabaseOnShutdown")]
        public bool? OptimizeDatabaseOnShutdown { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DatabaseAnalysisLimit")]
        public int? DatabaseAnalysisLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisableAsyncIO")]
        public bool? DisableAsyncIO { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MigratedToUserItemShares")]
        public bool? MigratedToUserItemShares { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableFks")]
        public bool? EnableFks { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AllowRenegotiation")]
        public bool? AllowRenegotiation { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'None', 'LanAddressesOnly',
        /// 'RemoteAddressesOnly', 'AllAddresses'
        /// </summary>
        [JsonProperty(PropertyName = "ProxyHeaderMode")]
        public string ProxyHeaderMode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableDebugLevelLogging")]
        public bool? EnableDebugLevelLogging { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RevertDebugLogging")]
        public string RevertDebugLogging { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EnableAutoUpdate")]
        public bool? EnableAutoUpdate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LogFileRetentionDays")]
        public int? LogFileRetentionDays { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RunAtStartup")]
        public bool? RunAtStartup { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsStartupWizardCompleted")]
        public bool? IsStartupWizardCompleted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CachePath")]
        public string CachePath { get; set; }

    }
}
