// <copyright file="DeviceServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class DeviceServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Deletes a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Device Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteDevices (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling DeviceServiceApi->DeleteDevices");
            }
            
            var request = new RestRequest("/Devices", Method.Delete);

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets all devices
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultDevicesDeviceInfo)</returns>
        public async Task<RestResponse<QueryResultDevicesDeviceInfo>> GetDevices (string sortOrder)
        {
            var request = new RestRequest("/Devices", Method.Get);

            if (sortOrder != null)
            {
                request.AddQueryParameter("SortOrder", this.ApiClient.ParameterToString(sortOrder));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultDevicesDeviceInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets camera upload history for a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (DevicesContentUploadHistory)</returns>
        public async Task<RestResponse<DevicesContentUploadHistory>> GetDevicesCamerauploads ()
        {
            var request = new RestRequest("/Devices/CameraUploads", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<DevicesContentUploadHistory>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets info for a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Device Id</param>
        /// <returns>Task of ApiResponse (DevicesDeviceInfo)</returns>
        public async Task<RestResponse<DevicesDeviceInfo>> GetDevicesInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling DeviceServiceApi->GetDevicesInfo");
            }
            
            var request = new RestRequest("/Devices/Info", Method.Get);

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<DevicesDeviceInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets options for a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Device Id</param>
        /// <returns>Task of ApiResponse (DevicesDeviceOptions)</returns>
        public async Task<RestResponse<DevicesDeviceOptions>> GetDevicesOptions (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling DeviceServiceApi->GetDevicesOptions");
            }
            
            var request = new RestRequest("/Devices/Options", Method.Get);

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<DevicesDeviceOptions>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Uploads content
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">Binary stream</param>
        /// <param name="album">Album</param>
        /// <param name="name">Name</param>
        /// <param name="id">Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostDevicesCamerauploads (Object body, string album, string name, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling DeviceServiceApi->PostDevicesCamerauploads");
            }
            
            // verify the required parameter 'album' is set
            if (album == null)
            {
                throw new ApiException("Missing required parameter 'album' when calling DeviceServiceApi->PostDevicesCamerauploads");
            }
            
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling DeviceServiceApi->PostDevicesCamerauploads");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling DeviceServiceApi->PostDevicesCamerauploads");
            }
            
            var request = new RestRequest("/Devices/CameraUploads", Method.Post);

            if (album != null)
            {
                request.AddQueryParameter("Album", this.ApiClient.ParameterToString(album));
            }

            if (name != null)
            {
                request.AddQueryParameter("Name", this.ApiClient.ParameterToString(name));
            }

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Deletes a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Device Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostDevicesDelete (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling DeviceServiceApi->PostDevicesDelete");
            }
            
            var request = new RestRequest("/Devices/Delete", Method.Post);

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates device options
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">DeviceOptions: </param>
        /// <param name="id">Device Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostDevicesOptions (DevicesDeviceOptions body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling DeviceServiceApi->PostDevicesOptions");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling DeviceServiceApi->PostDevicesOptions");
            }
            
            var request = new RestRequest("/Devices/Options", Method.Post);

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
