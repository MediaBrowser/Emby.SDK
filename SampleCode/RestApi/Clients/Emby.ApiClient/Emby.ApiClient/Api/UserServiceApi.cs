// <copyright file="UserServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class UserServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteUsersById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserServiceApi->DeleteUsersById");
            }
            
            var request = new RestRequest("/Users/{Id}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Clears audio or subtitle track selections for a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="trackType"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteUsersByIdTrackselectionsByTracktype (string id, string trackType)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserServiceApi->DeleteUsersByIdTrackselectionsByTracktype");
            }
            
            // verify the required parameter 'trackType' is set
            if (trackType == null)
            {
                throw new ApiException("Missing required parameter 'trackType' when calling UserServiceApi->DeleteUsersByIdTrackselectionsByTracktype");
            }
            
            var request = new RestRequest("/Users/{Id}/TrackSelections/{TrackType}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (trackType != null)
            {
                request.AddParameter("TrackType", this.ApiClient.ParameterToString(trackType), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a user by Id
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async Task<RestResponse<UserDto>> GetUsersById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserServiceApi->GetUsersById");
            }
            
            var request = new RestRequest("/Users/{Id}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<UserDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a typed user setting
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="key">Key</param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetUsersByUseridTypedsettingsByKey (string key, string userId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new ApiException("Missing required parameter 'key' when calling UserServiceApi->GetUsersByUseridTypedsettingsByKey");
            }
            
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserServiceApi->GetUsersByUseridTypedsettingsByKey");
            }
            
            var request = new RestRequest("/Users/{UserId}/TypedSettings/{Key}", Method.Get);

            if (key != null)
            {
                request.AddParameter("Key", this.ApiClient.ParameterToString(key), ParameterType.UrlSegment);
            }

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="isHidden">Optional filter by IsHidden&#x3D;true or false (optional)</param>
        /// <param name="isDisabled">Optional filter by IsDisabled&#x3D;true or false (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultUserDto)</returns>
        public async Task<RestResponse<QueryResultUserDto>> GetUsersItemaccess (bool? isHidden, bool? isDisabled, int? startIndex, int? limit, string nameStartsWithOrGreater, string sortOrder)
        {
            var request = new RestRequest("/Users/ItemAccess", Method.Get);

            if (isHidden != null)
            {
                request.AddQueryParameter("IsHidden", this.ApiClient.ParameterToString(isHidden));
            }

            if (isDisabled != null)
            {
                request.AddQueryParameter("IsDisabled", this.ApiClient.ParameterToString(isDisabled));
            }

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (nameStartsWithOrGreater != null)
            {
                request.AddQueryParameter("NameStartsWithOrGreater", this.ApiClient.ParameterToString(nameStartsWithOrGreater));
            }

            if (sortOrder != null)
            {
                request.AddQueryParameter("SortOrder", this.ApiClient.ParameterToString(sortOrder));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultUserDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="isHidden">Optional filter by IsHidden&#x3D;true or false (optional)</param>
        /// <param name="isDisabled">Optional filter by IsDisabled&#x3D;true or false (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NameIdPair&gt;)</returns>
        public async Task<RestResponse<List<NameIdPair>>> GetUsersPrefixes (bool? isHidden, bool? isDisabled, int? startIndex, int? limit, string nameStartsWithOrGreater, string sortOrder)
        {
            var request = new RestRequest("/Users/Prefixes", Method.Get);

            if (isHidden != null)
            {
                request.AddQueryParameter("IsHidden", this.ApiClient.ParameterToString(isHidden));
            }

            if (isDisabled != null)
            {
                request.AddQueryParameter("IsDisabled", this.ApiClient.ParameterToString(isDisabled));
            }

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (nameStartsWithOrGreater != null)
            {
                request.AddQueryParameter("NameStartsWithOrGreater", this.ApiClient.ParameterToString(nameStartsWithOrGreater));
            }

            if (sortOrder != null)
            {
                request.AddQueryParameter("SortOrder", this.ApiClient.ParameterToString(sortOrder));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<NameIdPair>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of publicly visible users for display on a login screen.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (List&lt;UserDto&gt;)</returns>
        public async Task<RestResponse<List<UserDto>>> GetUsersPublic ()
        {
            var request = new RestRequest("/Users/Public", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<UserDto>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="isHidden">Optional filter by IsHidden&#x3D;true or false (optional)</param>
        /// <param name="isDisabled">Optional filter by IsDisabled&#x3D;true or false (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultUserDto)</returns>
        public async Task<RestResponse<QueryResultUserDto>> GetUsersQuery (bool? isHidden, bool? isDisabled, int? startIndex, int? limit, string nameStartsWithOrGreater, string sortOrder)
        {
            var request = new RestRequest("/Users/Query", Method.Get);

            if (isHidden != null)
            {
                request.AddQueryParameter("IsHidden", this.ApiClient.ParameterToString(isHidden));
            }

            if (isDisabled != null)
            {
                request.AddQueryParameter("IsDisabled", this.ApiClient.ParameterToString(isDisabled));
            }

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (nameStartsWithOrGreater != null)
            {
                request.AddQueryParameter("NameStartsWithOrGreater", this.ApiClient.ParameterToString(nameStartsWithOrGreater));
            }

            if (sortOrder != null)
            {
                request.AddQueryParameter("SortOrder", this.ApiClient.ParameterToString(sortOrder));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultUserDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Authenticates a user
        /// </summary>
        /// <remarks>
        /// Authenticate a user by nane and password. A 200 status code indicates success, while anything in the 400 or 500 range indicates failure - -- Requires authentication as user
        /// </remarks>
        /// <param name="body">AuthenticateUserByName</param>
        /// <param name="xEmbyAuthorization">The authorization header can be either named &#x27;Authorization&#x27; or &#x27;X-Emby-Authorization&#x27;.    It must be of the following schema:     Emby UserId&#x3D;\&quot;(guid)\&quot;, Client&#x3D;\&quot;(string)\&quot;, Device&#x3D;\&quot;(string)\&quot;, DeviceId&#x3D;\&quot;(string)\&quot;, Version&#x3D;\&quot;string\&quot;, Token&#x3D;\&quot;(string)\&quot;     Please consult the documentation for further details.</param>
        /// <returns>Task of ApiResponse (AuthenticationAuthenticationResult)</returns>
        public async Task<RestResponse<AuthenticationAuthenticationResult>> PostUsersAuthenticatebyname (AuthenticateUserByName body, string xEmbyAuthorization)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling UserServiceApi->PostUsersAuthenticatebyname");
            }
            
            // verify the required parameter 'xEmbyAuthorization' is set
            if (xEmbyAuthorization == null)
            {
                throw new ApiException("Missing required parameter 'xEmbyAuthorization' when calling UserServiceApi->PostUsersAuthenticatebyname");
            }
            
            var request = new RestRequest("/Users/AuthenticateByName", Method.Post);

            if (xEmbyAuthorization != null)
            {
                request.AddHeader("X-Emby-Authorization", this.ApiClient.ParameterToString(xEmbyAuthorization));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<AuthenticationAuthenticationResult>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">UserDto: </param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersById (UserDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling UserServiceApi->PostUsersById");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserServiceApi->PostUsersById");
            }
            
            var request = new RestRequest("/Users/{Id}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Authenticates a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">AuthenticateUser</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (AuthenticationAuthenticationResult)</returns>
        public async Task<RestResponse<AuthenticationAuthenticationResult>> PostUsersByIdAuthenticate (AuthenticateUser body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling UserServiceApi->PostUsersByIdAuthenticate");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserServiceApi->PostUsersByIdAuthenticate");
            }
            
            var request = new RestRequest("/Users/{Id}/Authenticate", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<AuthenticationAuthenticationResult>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates a user configuration
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">UserConfiguration: </param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByIdConfiguration (UserConfiguration body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling UserServiceApi->PostUsersByIdConfiguration");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserServiceApi->PostUsersByIdConfiguration");
            }
            
            var request = new RestRequest("/Users/{Id}/Configuration", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates a user configuration
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">Binary stream</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByIdConfigurationPartial (Object body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling UserServiceApi->PostUsersByIdConfigurationPartial");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserServiceApi->PostUsersByIdConfigurationPartial");
            }
            
            var request = new RestRequest("/Users/{Id}/Configuration/Partial", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Deletes a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByIdDelete (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserServiceApi->PostUsersByIdDelete");
            }
            
            var request = new RestRequest("/Users/{Id}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates a user&#x27;s password
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">UpdateUserPassword</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByIdPassword (UpdateUserPassword body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling UserServiceApi->PostUsersByIdPassword");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserServiceApi->PostUsersByIdPassword");
            }
            
            var request = new RestRequest("/Users/{Id}/Password", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates a user policy
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">UserPolicy: </param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByIdPolicy (UserPolicy body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling UserServiceApi->PostUsersByIdPolicy");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserServiceApi->PostUsersByIdPolicy");
            }
            
            var request = new RestRequest("/Users/{Id}/Policy", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Clears audio or subtitle track selections for a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="trackType"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByIdTrackselectionsByTracktypeDelete (string id, string trackType)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserServiceApi->PostUsersByIdTrackselectionsByTracktypeDelete");
            }
            
            // verify the required parameter 'trackType' is set
            if (trackType == null)
            {
                throw new ApiException("Missing required parameter 'trackType' when calling UserServiceApi->PostUsersByIdTrackselectionsByTracktypeDelete");
            }
            
            var request = new RestRequest("/Users/{Id}/TrackSelections/{TrackType}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (trackType != null)
            {
                request.AddParameter("TrackType", this.ApiClient.ParameterToString(trackType), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates a typed user setting
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">Binary stream</param>
        /// <param name="userId"></param>
        /// <param name="key">Key</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByUseridTypedsettingsByKey (Object body, string userId, string key)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling UserServiceApi->PostUsersByUseridTypedsettingsByKey");
            }
            
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserServiceApi->PostUsersByUseridTypedsettingsByKey");
            }
            
            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new ApiException("Missing required parameter 'key' when calling UserServiceApi->PostUsersByUseridTypedsettingsByKey");
            }
            
            var request = new RestRequest("/Users/{UserId}/TypedSettings/{Key}", Method.Post);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (key != null)
            {
                request.AddParameter("Key", this.ApiClient.ParameterToString(key), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Initiates the forgot password process for a local user
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">ForgotPassword</param>
        /// <returns>Task of ApiResponse (ForgotPasswordResult)</returns>
        public async Task<RestResponse<ForgotPasswordResult>> PostUsersForgotpassword (ForgotPassword body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling UserServiceApi->PostUsersForgotpassword");
            }
            
            var request = new RestRequest("/Users/ForgotPassword", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<ForgotPasswordResult>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Redeems a forgot password pin
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">ForgotPasswordPin</param>
        /// <returns>Task of ApiResponse (PinRedeemResult)</returns>
        public async Task<RestResponse<PinRedeemResult>> PostUsersForgotpasswordPin (ForgotPasswordPin body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling UserServiceApi->PostUsersForgotpasswordPin");
            }
            
            var request = new RestRequest("/Users/ForgotPassword/Pin", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<PinRedeemResult>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Creates a user
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">CreateUserByName</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async Task<RestResponse<UserDto>> PostUsersNew (CreateUserByName body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling UserServiceApi->PostUsersNew");
            }
            
            var request = new RestRequest("/Users/New", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<UserDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
