// <copyright file="MediaInfoServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class MediaInfoServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaInfoServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MediaInfoServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Gets live playback media info for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="userId">User Id</param>
        /// <returns>Task of ApiResponse (PlaybackInfoResponse)</returns>
        public async Task<RestResponse<PlaybackInfoResponse>> GetItemsByIdPlaybackinfo (string id, string userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling MediaInfoServiceApi->GetItemsByIdPlaybackinfo");
            }
            
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling MediaInfoServiceApi->GetItemsByIdPlaybackinfo");
            }
            
            var request = new RestRequest("/Items/{Id}/PlaybackInfo", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<PlaybackInfoResponse>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="size">Size</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetPlaybackBitratetest (long? size)
        {
            // verify the required parameter 'size' is set
            if (size == null)
            {
                throw new ApiException("Missing required parameter 'size' when calling MediaInfoServiceApi->GetPlaybackBitratetest");
            }
            
            var request = new RestRequest("/Playback/BitrateTest", Method.Get);

            if (size != null)
            {
                request.AddQueryParameter("Size", this.ApiClient.ParameterToString(size));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets live playback media info for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">PlaybackInfoRequest: </param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (PlaybackInfoResponse)</returns>
        public async Task<RestResponse<PlaybackInfoResponse>> PostItemsByIdPlaybackinfo (PlaybackInfoRequest body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling MediaInfoServiceApi->PostItemsByIdPlaybackinfo");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling MediaInfoServiceApi->PostItemsByIdPlaybackinfo");
            }
            
            var request = new RestRequest("/Items/{Id}/PlaybackInfo", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<PlaybackInfoResponse>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Closes a media source
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="liveStreamId">LiveStreamId</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivestreamsClose (string liveStreamId)
        {
            // verify the required parameter 'liveStreamId' is set
            if (liveStreamId == null)
            {
                throw new ApiException("Missing required parameter 'liveStreamId' when calling MediaInfoServiceApi->PostLivestreamsClose");
            }
            
            var request = new RestRequest("/LiveStreams/Close", Method.Post);

            if (liveStreamId != null)
            {
                request.AddQueryParameter("LiveStreamId", this.ApiClient.ParameterToString(liveStreamId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Closes a media source
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="liveStreamId">LiveStreamId</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivestreamsMediainfo (string liveStreamId)
        {
            // verify the required parameter 'liveStreamId' is set
            if (liveStreamId == null)
            {
                throw new ApiException("Missing required parameter 'liveStreamId' when calling MediaInfoServiceApi->PostLivestreamsMediainfo");
            }
            
            var request = new RestRequest("/LiveStreams/MediaInfo", Method.Post);

            if (liveStreamId != null)
            {
                request.AddQueryParameter("LiveStreamId", this.ApiClient.ParameterToString(liveStreamId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Opens a media source
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">LiveStreamRequest: </param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        public async Task<RestResponse<LiveStreamResponse>> PostLivestreamsOpen (LiveStreamRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling MediaInfoServiceApi->PostLivestreamsOpen");
            }
            
            var request = new RestRequest("/LiveStreams/Open", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<LiveStreamResponse>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
