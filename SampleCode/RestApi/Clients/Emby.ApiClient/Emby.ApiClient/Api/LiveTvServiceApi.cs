// <copyright file="LiveTvServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class LiveTvServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveTvServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LiveTvServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="providerId">Provider id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteLivetvChannelmappingoptions (string providerId)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new ApiException("Missing required parameter 'providerId' when calling LiveTvServiceApi->DeleteLivetvChannelmappingoptions");
            }
            
            var request = new RestRequest("/LiveTv/ChannelMappingOptions", Method.Delete);

            if (providerId != null)
            {
                request.AddQueryParameter("ProviderId", this.ApiClient.ParameterToString(providerId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="providerId">Provider id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteLivetvChannelmappings (string providerId)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new ApiException("Missing required parameter 'providerId' when calling LiveTvServiceApi->DeleteLivetvChannelmappings");
            }
            
            var request = new RestRequest("/LiveTv/ChannelMappings", Method.Delete);

            if (providerId != null)
            {
                request.AddQueryParameter("ProviderId", this.ApiClient.ParameterToString(providerId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Deletes a listing provider
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Provider id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteLivetvListingproviders (string id)
        {
            var request = new RestRequest("/LiveTv/ListingProviders", Method.Delete);

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Deletes a live tv recording
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Recording Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteLivetvRecordingsById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->DeleteLivetvRecordingsById");
            }
            
            var request = new RestRequest("/LiveTv/Recordings/{Id}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Cancels a live tv series timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Timer Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteLivetvSeriestimersById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->DeleteLivetvSeriestimersById");
            }
            
            var request = new RestRequest("/LiveTv/SeriesTimers/{Id}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Cancels a live tv timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Timer Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteLivetvTimersById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->DeleteLivetvTimersById");
            }
            
            var request = new RestRequest("/LiveTv/Timers/{Id}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Deletes a tuner host
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Tuner host id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteLivetvTunerhosts (string id)
        {
            var request = new RestRequest("/LiveTv/TunerHosts", Method.Delete);

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets available recording options
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (ApiAvailableRecordingOptions)</returns>
        public async Task<RestResponse<ApiAvailableRecordingOptions>> GetLivetvAvailablerecordingoptions ()
        {
            var request = new RestRequest("/LiveTv/AvailableRecordingOptions", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<ApiAvailableRecordingOptions>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="providerId">Provider id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetLivetvChannelmappingoptions (string providerId)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new ApiException("Missing required parameter 'providerId' when calling LiveTvServiceApi->GetLivetvChannelmappingoptions");
            }
            
            var request = new RestRequest("/LiveTv/ChannelMappingOptions", Method.Get);

            if (providerId != null)
            {
                request.AddQueryParameter("ProviderId", this.ApiClient.ParameterToString(providerId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="providerId">Provider id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetLivetvChannelmappings (string providerId)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new ApiException("Missing required parameter 'providerId' when calling LiveTvServiceApi->GetLivetvChannelmappings");
            }
            
            var request = new RestRequest("/LiveTv/ChannelMappings", Method.Get);

            if (providerId != null)
            {
                request.AddQueryParameter("ProviderId", this.ApiClient.ParameterToString(providerId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets available live tv channels.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="type">Optional filter by channel type. (optional)</param>
        /// <param name="isLiked">Filter by channels that are liked, or not. (optional)</param>
        /// <param name="isDisliked">Filter by channels that are disliked, or not. (optional)</param>
        /// <param name="enableFavoriteSorting">Incorporate favorite and like status into channel sorting. (optional)</param>
        /// <param name="addCurrentProgram">Optional. Adds current program info to each channel (optional)</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async Task<RestResponse<QueryResultBaseItemDto>> GetLivetvChannels (LiveTvChannelType type, bool? isLiked, bool? isDisliked, bool? enableFavoriteSorting, bool? addCurrentProgram, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, string adjacentTo, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            var request = new RestRequest("/LiveTv/Channels", Method.Get);

            if (type != null)
            {
                request.AddQueryParameter("Type", this.ApiClient.ParameterToString(type));
            }

            if (isLiked != null)
            {
                request.AddQueryParameter("IsLiked", this.ApiClient.ParameterToString(isLiked));
            }

            if (isDisliked != null)
            {
                request.AddQueryParameter("IsDisliked", this.ApiClient.ParameterToString(isDisliked));
            }

            if (enableFavoriteSorting != null)
            {
                request.AddQueryParameter("EnableFavoriteSorting", this.ApiClient.ParameterToString(enableFavoriteSorting));
            }

            if (addCurrentProgram != null)
            {
                request.AddQueryParameter("AddCurrentProgram", this.ApiClient.ParameterToString(addCurrentProgram));
            }

            if (artistType != null)
            {
                request.AddQueryParameter("ArtistType", this.ApiClient.ParameterToString(artistType));
            }

            if (maxOfficialRating != null)
            {
                request.AddQueryParameter("MaxOfficialRating", this.ApiClient.ParameterToString(maxOfficialRating));
            }

            if (hasThemeSong != null)
            {
                request.AddQueryParameter("HasThemeSong", this.ApiClient.ParameterToString(hasThemeSong));
            }

            if (hasThemeVideo != null)
            {
                request.AddQueryParameter("HasThemeVideo", this.ApiClient.ParameterToString(hasThemeVideo));
            }

            if (hasSubtitles != null)
            {
                request.AddQueryParameter("HasSubtitles", this.ApiClient.ParameterToString(hasSubtitles));
            }

            if (hasSpecialFeature != null)
            {
                request.AddQueryParameter("HasSpecialFeature", this.ApiClient.ParameterToString(hasSpecialFeature));
            }

            if (hasTrailer != null)
            {
                request.AddQueryParameter("HasTrailer", this.ApiClient.ParameterToString(hasTrailer));
            }

            if (adjacentTo != null)
            {
                request.AddQueryParameter("AdjacentTo", this.ApiClient.ParameterToString(adjacentTo));
            }

            if (minIndexNumber != null)
            {
                request.AddQueryParameter("MinIndexNumber", this.ApiClient.ParameterToString(minIndexNumber));
            }

            if (minStartDate != null)
            {
                request.AddQueryParameter("MinStartDate", this.ApiClient.ParameterToString(minStartDate));
            }

            if (maxStartDate != null)
            {
                request.AddQueryParameter("MaxStartDate", this.ApiClient.ParameterToString(maxStartDate));
            }

            if (minEndDate != null)
            {
                request.AddQueryParameter("MinEndDate", this.ApiClient.ParameterToString(minEndDate));
            }

            if (maxEndDate != null)
            {
                request.AddQueryParameter("MaxEndDate", this.ApiClient.ParameterToString(maxEndDate));
            }

            if (minPlayers != null)
            {
                request.AddQueryParameter("MinPlayers", this.ApiClient.ParameterToString(minPlayers));
            }

            if (maxPlayers != null)
            {
                request.AddQueryParameter("MaxPlayers", this.ApiClient.ParameterToString(maxPlayers));
            }

            if (parentIndexNumber != null)
            {
                request.AddQueryParameter("ParentIndexNumber", this.ApiClient.ParameterToString(parentIndexNumber));
            }

            if (hasParentalRating != null)
            {
                request.AddQueryParameter("HasParentalRating", this.ApiClient.ParameterToString(hasParentalRating));
            }

            if (isHD != null)
            {
                request.AddQueryParameter("IsHD", this.ApiClient.ParameterToString(isHD));
            }

            if (isUnaired != null)
            {
                request.AddQueryParameter("IsUnaired", this.ApiClient.ParameterToString(isUnaired));
            }

            if (minCommunityRating != null)
            {
                request.AddQueryParameter("MinCommunityRating", this.ApiClient.ParameterToString(minCommunityRating));
            }

            if (minCriticRating != null)
            {
                request.AddQueryParameter("MinCriticRating", this.ApiClient.ParameterToString(minCriticRating));
            }

            if (airedDuringSeason != null)
            {
                request.AddQueryParameter("AiredDuringSeason", this.ApiClient.ParameterToString(airedDuringSeason));
            }

            if (minPremiereDate != null)
            {
                request.AddQueryParameter("MinPremiereDate", this.ApiClient.ParameterToString(minPremiereDate));
            }

            if (minDateLastSaved != null)
            {
                request.AddQueryParameter("MinDateLastSaved", this.ApiClient.ParameterToString(minDateLastSaved));
            }

            if (minDateLastSavedForUser != null)
            {
                request.AddQueryParameter("MinDateLastSavedForUser", this.ApiClient.ParameterToString(minDateLastSavedForUser));
            }

            if (maxPremiereDate != null)
            {
                request.AddQueryParameter("MaxPremiereDate", this.ApiClient.ParameterToString(maxPremiereDate));
            }

            if (hasOverview != null)
            {
                request.AddQueryParameter("HasOverview", this.ApiClient.ParameterToString(hasOverview));
            }

            if (hasImdbId != null)
            {
                request.AddQueryParameter("HasImdbId", this.ApiClient.ParameterToString(hasImdbId));
            }

            if (hasTmdbId != null)
            {
                request.AddQueryParameter("HasTmdbId", this.ApiClient.ParameterToString(hasTmdbId));
            }

            if (hasTvdbId != null)
            {
                request.AddQueryParameter("HasTvdbId", this.ApiClient.ParameterToString(hasTvdbId));
            }

            if (excludeItemIds != null)
            {
                request.AddQueryParameter("ExcludeItemIds", this.ApiClient.ParameterToString(excludeItemIds));
            }

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (recursive != null)
            {
                request.AddQueryParameter("Recursive", this.ApiClient.ParameterToString(recursive));
            }

            if (searchTerm != null)
            {
                request.AddQueryParameter("SearchTerm", this.ApiClient.ParameterToString(searchTerm));
            }

            if (sortOrder != null)
            {
                request.AddQueryParameter("SortOrder", this.ApiClient.ParameterToString(sortOrder));
            }

            if (parentId != null)
            {
                request.AddQueryParameter("ParentId", this.ApiClient.ParameterToString(parentId));
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (excludeItemTypes != null)
            {
                request.AddQueryParameter("ExcludeItemTypes", this.ApiClient.ParameterToString(excludeItemTypes));
            }

            if (includeItemTypes != null)
            {
                request.AddQueryParameter("IncludeItemTypes", this.ApiClient.ParameterToString(includeItemTypes));
            }

            if (anyProviderIdEquals != null)
            {
                request.AddQueryParameter("AnyProviderIdEquals", this.ApiClient.ParameterToString(anyProviderIdEquals));
            }

            if (filters != null)
            {
                request.AddQueryParameter("Filters", this.ApiClient.ParameterToString(filters));
            }

            if (isFavorite != null)
            {
                request.AddQueryParameter("IsFavorite", this.ApiClient.ParameterToString(isFavorite));
            }

            if (isMovie != null)
            {
                request.AddQueryParameter("IsMovie", this.ApiClient.ParameterToString(isMovie));
            }

            if (isSeries != null)
            {
                request.AddQueryParameter("IsSeries", this.ApiClient.ParameterToString(isSeries));
            }

            if (isFolder != null)
            {
                request.AddQueryParameter("IsFolder", this.ApiClient.ParameterToString(isFolder));
            }

            if (isNews != null)
            {
                request.AddQueryParameter("IsNews", this.ApiClient.ParameterToString(isNews));
            }

            if (isKids != null)
            {
                request.AddQueryParameter("IsKids", this.ApiClient.ParameterToString(isKids));
            }

            if (isSports != null)
            {
                request.AddQueryParameter("IsSports", this.ApiClient.ParameterToString(isSports));
            }

            if (isNew != null)
            {
                request.AddQueryParameter("IsNew", this.ApiClient.ParameterToString(isNew));
            }

            if (isPremiere != null)
            {
                request.AddQueryParameter("IsPremiere", this.ApiClient.ParameterToString(isPremiere));
            }

            if (isNewOrPremiere != null)
            {
                request.AddQueryParameter("IsNewOrPremiere", this.ApiClient.ParameterToString(isNewOrPremiere));
            }

            if (isRepeat != null)
            {
                request.AddQueryParameter("IsRepeat", this.ApiClient.ParameterToString(isRepeat));
            }

            if (projectToMedia != null)
            {
                request.AddQueryParameter("ProjectToMedia", this.ApiClient.ParameterToString(projectToMedia));
            }

            if (mediaTypes != null)
            {
                request.AddQueryParameter("MediaTypes", this.ApiClient.ParameterToString(mediaTypes));
            }

            if (imageTypes != null)
            {
                request.AddQueryParameter("ImageTypes", this.ApiClient.ParameterToString(imageTypes));
            }

            if (sortBy != null)
            {
                request.AddQueryParameter("SortBy", this.ApiClient.ParameterToString(sortBy));
            }

            if (isPlayed != null)
            {
                request.AddQueryParameter("IsPlayed", this.ApiClient.ParameterToString(isPlayed));
            }

            if (genres != null)
            {
                request.AddQueryParameter("Genres", this.ApiClient.ParameterToString(genres));
            }

            if (officialRatings != null)
            {
                request.AddQueryParameter("OfficialRatings", this.ApiClient.ParameterToString(officialRatings));
            }

            if (tags != null)
            {
                request.AddQueryParameter("Tags", this.ApiClient.ParameterToString(tags));
            }

            if (excludeTags != null)
            {
                request.AddQueryParameter("ExcludeTags", this.ApiClient.ParameterToString(excludeTags));
            }

            if (years != null)
            {
                request.AddQueryParameter("Years", this.ApiClient.ParameterToString(years));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (person != null)
            {
                request.AddQueryParameter("Person", this.ApiClient.ParameterToString(person));
            }

            if (personIds != null)
            {
                request.AddQueryParameter("PersonIds", this.ApiClient.ParameterToString(personIds));
            }

            if (personTypes != null)
            {
                request.AddQueryParameter("PersonTypes", this.ApiClient.ParameterToString(personTypes));
            }

            if (studios != null)
            {
                request.AddQueryParameter("Studios", this.ApiClient.ParameterToString(studios));
            }

            if (studioIds != null)
            {
                request.AddQueryParameter("StudioIds", this.ApiClient.ParameterToString(studioIds));
            }

            if (artists != null)
            {
                request.AddQueryParameter("Artists", this.ApiClient.ParameterToString(artists));
            }

            if (artistIds != null)
            {
                request.AddQueryParameter("ArtistIds", this.ApiClient.ParameterToString(artistIds));
            }

            if (albums != null)
            {
                request.AddQueryParameter("Albums", this.ApiClient.ParameterToString(albums));
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            if (videoTypes != null)
            {
                request.AddQueryParameter("VideoTypes", this.ApiClient.ParameterToString(videoTypes));
            }

            if (containers != null)
            {
                request.AddQueryParameter("Containers", this.ApiClient.ParameterToString(containers));
            }

            if (audioCodecs != null)
            {
                request.AddQueryParameter("AudioCodecs", this.ApiClient.ParameterToString(audioCodecs));
            }

            if (audioLayouts != null)
            {
                request.AddQueryParameter("AudioLayouts", this.ApiClient.ParameterToString(audioLayouts));
            }

            if (videoCodecs != null)
            {
                request.AddQueryParameter("VideoCodecs", this.ApiClient.ParameterToString(videoCodecs));
            }

            if (extendedVideoTypes != null)
            {
                request.AddQueryParameter("ExtendedVideoTypes", this.ApiClient.ParameterToString(extendedVideoTypes));
            }

            if (subtitleCodecs != null)
            {
                request.AddQueryParameter("SubtitleCodecs", this.ApiClient.ParameterToString(subtitleCodecs));
            }

            if (path != null)
            {
                request.AddQueryParameter("Path", this.ApiClient.ParameterToString(path));
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (minOfficialRating != null)
            {
                request.AddQueryParameter("MinOfficialRating", this.ApiClient.ParameterToString(minOfficialRating));
            }

            if (isLocked != null)
            {
                request.AddQueryParameter("IsLocked", this.ApiClient.ParameterToString(isLocked));
            }

            if (isPlaceHolder != null)
            {
                request.AddQueryParameter("IsPlaceHolder", this.ApiClient.ParameterToString(isPlaceHolder));
            }

            if (hasOfficialRating != null)
            {
                request.AddQueryParameter("HasOfficialRating", this.ApiClient.ParameterToString(hasOfficialRating));
            }

            if (groupItemsIntoCollections != null)
            {
                request.AddQueryParameter("GroupItemsIntoCollections", this.ApiClient.ParameterToString(groupItemsIntoCollections));
            }

            if (is3D != null)
            {
                request.AddQueryParameter("Is3D", this.ApiClient.ParameterToString(is3D));
            }

            if (seriesStatus != null)
            {
                request.AddQueryParameter("SeriesStatus", this.ApiClient.ParameterToString(seriesStatus));
            }

            if (nameStartsWithOrGreater != null)
            {
                request.AddQueryParameter("NameStartsWithOrGreater", this.ApiClient.ParameterToString(nameStartsWithOrGreater));
            }

            if (artistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("ArtistStartsWithOrGreater", this.ApiClient.ParameterToString(artistStartsWithOrGreater));
            }

            if (albumArtistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("AlbumArtistStartsWithOrGreater", this.ApiClient.ParameterToString(albumArtistStartsWithOrGreater));
            }

            if (nameStartsWith != null)
            {
                request.AddQueryParameter("NameStartsWith", this.ApiClient.ParameterToString(nameStartsWith));
            }

            if (nameLessThan != null)
            {
                request.AddQueryParameter("NameLessThan", this.ApiClient.ParameterToString(nameLessThan));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultBaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a live tv channel
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Channel Id</param>
        /// <param name="userId">Optional attach user data. (optional)</param>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        public async Task<RestResponse<BaseItemDto>> GetLivetvChannelsById (string id, string userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->GetLivetvChannelsById");
            }
            
            var request = new RestRequest("/LiveTv/Channels/{Id}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<BaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets live tv channel tags
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async Task<RestResponse<QueryResultBaseItemDto>> GetLivetvChanneltags (string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, string adjacentTo, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            var request = new RestRequest("/LiveTv/ChannelTags", Method.Get);

            if (artistType != null)
            {
                request.AddQueryParameter("ArtistType", this.ApiClient.ParameterToString(artistType));
            }

            if (maxOfficialRating != null)
            {
                request.AddQueryParameter("MaxOfficialRating", this.ApiClient.ParameterToString(maxOfficialRating));
            }

            if (hasThemeSong != null)
            {
                request.AddQueryParameter("HasThemeSong", this.ApiClient.ParameterToString(hasThemeSong));
            }

            if (hasThemeVideo != null)
            {
                request.AddQueryParameter("HasThemeVideo", this.ApiClient.ParameterToString(hasThemeVideo));
            }

            if (hasSubtitles != null)
            {
                request.AddQueryParameter("HasSubtitles", this.ApiClient.ParameterToString(hasSubtitles));
            }

            if (hasSpecialFeature != null)
            {
                request.AddQueryParameter("HasSpecialFeature", this.ApiClient.ParameterToString(hasSpecialFeature));
            }

            if (hasTrailer != null)
            {
                request.AddQueryParameter("HasTrailer", this.ApiClient.ParameterToString(hasTrailer));
            }

            if (adjacentTo != null)
            {
                request.AddQueryParameter("AdjacentTo", this.ApiClient.ParameterToString(adjacentTo));
            }

            if (minIndexNumber != null)
            {
                request.AddQueryParameter("MinIndexNumber", this.ApiClient.ParameterToString(minIndexNumber));
            }

            if (minStartDate != null)
            {
                request.AddQueryParameter("MinStartDate", this.ApiClient.ParameterToString(minStartDate));
            }

            if (maxStartDate != null)
            {
                request.AddQueryParameter("MaxStartDate", this.ApiClient.ParameterToString(maxStartDate));
            }

            if (minEndDate != null)
            {
                request.AddQueryParameter("MinEndDate", this.ApiClient.ParameterToString(minEndDate));
            }

            if (maxEndDate != null)
            {
                request.AddQueryParameter("MaxEndDate", this.ApiClient.ParameterToString(maxEndDate));
            }

            if (minPlayers != null)
            {
                request.AddQueryParameter("MinPlayers", this.ApiClient.ParameterToString(minPlayers));
            }

            if (maxPlayers != null)
            {
                request.AddQueryParameter("MaxPlayers", this.ApiClient.ParameterToString(maxPlayers));
            }

            if (parentIndexNumber != null)
            {
                request.AddQueryParameter("ParentIndexNumber", this.ApiClient.ParameterToString(parentIndexNumber));
            }

            if (hasParentalRating != null)
            {
                request.AddQueryParameter("HasParentalRating", this.ApiClient.ParameterToString(hasParentalRating));
            }

            if (isHD != null)
            {
                request.AddQueryParameter("IsHD", this.ApiClient.ParameterToString(isHD));
            }

            if (isUnaired != null)
            {
                request.AddQueryParameter("IsUnaired", this.ApiClient.ParameterToString(isUnaired));
            }

            if (minCommunityRating != null)
            {
                request.AddQueryParameter("MinCommunityRating", this.ApiClient.ParameterToString(minCommunityRating));
            }

            if (minCriticRating != null)
            {
                request.AddQueryParameter("MinCriticRating", this.ApiClient.ParameterToString(minCriticRating));
            }

            if (airedDuringSeason != null)
            {
                request.AddQueryParameter("AiredDuringSeason", this.ApiClient.ParameterToString(airedDuringSeason));
            }

            if (minPremiereDate != null)
            {
                request.AddQueryParameter("MinPremiereDate", this.ApiClient.ParameterToString(minPremiereDate));
            }

            if (minDateLastSaved != null)
            {
                request.AddQueryParameter("MinDateLastSaved", this.ApiClient.ParameterToString(minDateLastSaved));
            }

            if (minDateLastSavedForUser != null)
            {
                request.AddQueryParameter("MinDateLastSavedForUser", this.ApiClient.ParameterToString(minDateLastSavedForUser));
            }

            if (maxPremiereDate != null)
            {
                request.AddQueryParameter("MaxPremiereDate", this.ApiClient.ParameterToString(maxPremiereDate));
            }

            if (hasOverview != null)
            {
                request.AddQueryParameter("HasOverview", this.ApiClient.ParameterToString(hasOverview));
            }

            if (hasImdbId != null)
            {
                request.AddQueryParameter("HasImdbId", this.ApiClient.ParameterToString(hasImdbId));
            }

            if (hasTmdbId != null)
            {
                request.AddQueryParameter("HasTmdbId", this.ApiClient.ParameterToString(hasTmdbId));
            }

            if (hasTvdbId != null)
            {
                request.AddQueryParameter("HasTvdbId", this.ApiClient.ParameterToString(hasTvdbId));
            }

            if (excludeItemIds != null)
            {
                request.AddQueryParameter("ExcludeItemIds", this.ApiClient.ParameterToString(excludeItemIds));
            }

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (recursive != null)
            {
                request.AddQueryParameter("Recursive", this.ApiClient.ParameterToString(recursive));
            }

            if (searchTerm != null)
            {
                request.AddQueryParameter("SearchTerm", this.ApiClient.ParameterToString(searchTerm));
            }

            if (sortOrder != null)
            {
                request.AddQueryParameter("SortOrder", this.ApiClient.ParameterToString(sortOrder));
            }

            if (parentId != null)
            {
                request.AddQueryParameter("ParentId", this.ApiClient.ParameterToString(parentId));
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (excludeItemTypes != null)
            {
                request.AddQueryParameter("ExcludeItemTypes", this.ApiClient.ParameterToString(excludeItemTypes));
            }

            if (includeItemTypes != null)
            {
                request.AddQueryParameter("IncludeItemTypes", this.ApiClient.ParameterToString(includeItemTypes));
            }

            if (anyProviderIdEquals != null)
            {
                request.AddQueryParameter("AnyProviderIdEquals", this.ApiClient.ParameterToString(anyProviderIdEquals));
            }

            if (filters != null)
            {
                request.AddQueryParameter("Filters", this.ApiClient.ParameterToString(filters));
            }

            if (isFavorite != null)
            {
                request.AddQueryParameter("IsFavorite", this.ApiClient.ParameterToString(isFavorite));
            }

            if (isMovie != null)
            {
                request.AddQueryParameter("IsMovie", this.ApiClient.ParameterToString(isMovie));
            }

            if (isSeries != null)
            {
                request.AddQueryParameter("IsSeries", this.ApiClient.ParameterToString(isSeries));
            }

            if (isFolder != null)
            {
                request.AddQueryParameter("IsFolder", this.ApiClient.ParameterToString(isFolder));
            }

            if (isNews != null)
            {
                request.AddQueryParameter("IsNews", this.ApiClient.ParameterToString(isNews));
            }

            if (isKids != null)
            {
                request.AddQueryParameter("IsKids", this.ApiClient.ParameterToString(isKids));
            }

            if (isSports != null)
            {
                request.AddQueryParameter("IsSports", this.ApiClient.ParameterToString(isSports));
            }

            if (isNew != null)
            {
                request.AddQueryParameter("IsNew", this.ApiClient.ParameterToString(isNew));
            }

            if (isPremiere != null)
            {
                request.AddQueryParameter("IsPremiere", this.ApiClient.ParameterToString(isPremiere));
            }

            if (isNewOrPremiere != null)
            {
                request.AddQueryParameter("IsNewOrPremiere", this.ApiClient.ParameterToString(isNewOrPremiere));
            }

            if (isRepeat != null)
            {
                request.AddQueryParameter("IsRepeat", this.ApiClient.ParameterToString(isRepeat));
            }

            if (projectToMedia != null)
            {
                request.AddQueryParameter("ProjectToMedia", this.ApiClient.ParameterToString(projectToMedia));
            }

            if (mediaTypes != null)
            {
                request.AddQueryParameter("MediaTypes", this.ApiClient.ParameterToString(mediaTypes));
            }

            if (imageTypes != null)
            {
                request.AddQueryParameter("ImageTypes", this.ApiClient.ParameterToString(imageTypes));
            }

            if (sortBy != null)
            {
                request.AddQueryParameter("SortBy", this.ApiClient.ParameterToString(sortBy));
            }

            if (isPlayed != null)
            {
                request.AddQueryParameter("IsPlayed", this.ApiClient.ParameterToString(isPlayed));
            }

            if (genres != null)
            {
                request.AddQueryParameter("Genres", this.ApiClient.ParameterToString(genres));
            }

            if (officialRatings != null)
            {
                request.AddQueryParameter("OfficialRatings", this.ApiClient.ParameterToString(officialRatings));
            }

            if (tags != null)
            {
                request.AddQueryParameter("Tags", this.ApiClient.ParameterToString(tags));
            }

            if (excludeTags != null)
            {
                request.AddQueryParameter("ExcludeTags", this.ApiClient.ParameterToString(excludeTags));
            }

            if (years != null)
            {
                request.AddQueryParameter("Years", this.ApiClient.ParameterToString(years));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (person != null)
            {
                request.AddQueryParameter("Person", this.ApiClient.ParameterToString(person));
            }

            if (personIds != null)
            {
                request.AddQueryParameter("PersonIds", this.ApiClient.ParameterToString(personIds));
            }

            if (personTypes != null)
            {
                request.AddQueryParameter("PersonTypes", this.ApiClient.ParameterToString(personTypes));
            }

            if (studios != null)
            {
                request.AddQueryParameter("Studios", this.ApiClient.ParameterToString(studios));
            }

            if (studioIds != null)
            {
                request.AddQueryParameter("StudioIds", this.ApiClient.ParameterToString(studioIds));
            }

            if (artists != null)
            {
                request.AddQueryParameter("Artists", this.ApiClient.ParameterToString(artists));
            }

            if (artistIds != null)
            {
                request.AddQueryParameter("ArtistIds", this.ApiClient.ParameterToString(artistIds));
            }

            if (albums != null)
            {
                request.AddQueryParameter("Albums", this.ApiClient.ParameterToString(albums));
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            if (videoTypes != null)
            {
                request.AddQueryParameter("VideoTypes", this.ApiClient.ParameterToString(videoTypes));
            }

            if (containers != null)
            {
                request.AddQueryParameter("Containers", this.ApiClient.ParameterToString(containers));
            }

            if (audioCodecs != null)
            {
                request.AddQueryParameter("AudioCodecs", this.ApiClient.ParameterToString(audioCodecs));
            }

            if (audioLayouts != null)
            {
                request.AddQueryParameter("AudioLayouts", this.ApiClient.ParameterToString(audioLayouts));
            }

            if (videoCodecs != null)
            {
                request.AddQueryParameter("VideoCodecs", this.ApiClient.ParameterToString(videoCodecs));
            }

            if (extendedVideoTypes != null)
            {
                request.AddQueryParameter("ExtendedVideoTypes", this.ApiClient.ParameterToString(extendedVideoTypes));
            }

            if (subtitleCodecs != null)
            {
                request.AddQueryParameter("SubtitleCodecs", this.ApiClient.ParameterToString(subtitleCodecs));
            }

            if (path != null)
            {
                request.AddQueryParameter("Path", this.ApiClient.ParameterToString(path));
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (minOfficialRating != null)
            {
                request.AddQueryParameter("MinOfficialRating", this.ApiClient.ParameterToString(minOfficialRating));
            }

            if (isLocked != null)
            {
                request.AddQueryParameter("IsLocked", this.ApiClient.ParameterToString(isLocked));
            }

            if (isPlaceHolder != null)
            {
                request.AddQueryParameter("IsPlaceHolder", this.ApiClient.ParameterToString(isPlaceHolder));
            }

            if (hasOfficialRating != null)
            {
                request.AddQueryParameter("HasOfficialRating", this.ApiClient.ParameterToString(hasOfficialRating));
            }

            if (groupItemsIntoCollections != null)
            {
                request.AddQueryParameter("GroupItemsIntoCollections", this.ApiClient.ParameterToString(groupItemsIntoCollections));
            }

            if (is3D != null)
            {
                request.AddQueryParameter("Is3D", this.ApiClient.ParameterToString(is3D));
            }

            if (seriesStatus != null)
            {
                request.AddQueryParameter("SeriesStatus", this.ApiClient.ParameterToString(seriesStatus));
            }

            if (nameStartsWithOrGreater != null)
            {
                request.AddQueryParameter("NameStartsWithOrGreater", this.ApiClient.ParameterToString(nameStartsWithOrGreater));
            }

            if (artistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("ArtistStartsWithOrGreater", this.ApiClient.ParameterToString(artistStartsWithOrGreater));
            }

            if (albumArtistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("AlbumArtistStartsWithOrGreater", this.ApiClient.ParameterToString(albumArtistStartsWithOrGreater));
            }

            if (nameStartsWith != null)
            {
                request.AddQueryParameter("NameStartsWith", this.ApiClient.ParameterToString(nameStartsWith));
            }

            if (nameLessThan != null)
            {
                request.AddQueryParameter("NameLessThan", this.ApiClient.ParameterToString(nameLessThan));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultBaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets live tv channel tag prefixes
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ApiTagItem&gt;)</returns>
        public async Task<RestResponse<List<ApiTagItem>>> GetLivetvChanneltagsPrefixes (string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, string adjacentTo, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            var request = new RestRequest("/LiveTv/ChannelTags/Prefixes", Method.Get);

            if (artistType != null)
            {
                request.AddQueryParameter("ArtistType", this.ApiClient.ParameterToString(artistType));
            }

            if (maxOfficialRating != null)
            {
                request.AddQueryParameter("MaxOfficialRating", this.ApiClient.ParameterToString(maxOfficialRating));
            }

            if (hasThemeSong != null)
            {
                request.AddQueryParameter("HasThemeSong", this.ApiClient.ParameterToString(hasThemeSong));
            }

            if (hasThemeVideo != null)
            {
                request.AddQueryParameter("HasThemeVideo", this.ApiClient.ParameterToString(hasThemeVideo));
            }

            if (hasSubtitles != null)
            {
                request.AddQueryParameter("HasSubtitles", this.ApiClient.ParameterToString(hasSubtitles));
            }

            if (hasSpecialFeature != null)
            {
                request.AddQueryParameter("HasSpecialFeature", this.ApiClient.ParameterToString(hasSpecialFeature));
            }

            if (hasTrailer != null)
            {
                request.AddQueryParameter("HasTrailer", this.ApiClient.ParameterToString(hasTrailer));
            }

            if (adjacentTo != null)
            {
                request.AddQueryParameter("AdjacentTo", this.ApiClient.ParameterToString(adjacentTo));
            }

            if (minIndexNumber != null)
            {
                request.AddQueryParameter("MinIndexNumber", this.ApiClient.ParameterToString(minIndexNumber));
            }

            if (minStartDate != null)
            {
                request.AddQueryParameter("MinStartDate", this.ApiClient.ParameterToString(minStartDate));
            }

            if (maxStartDate != null)
            {
                request.AddQueryParameter("MaxStartDate", this.ApiClient.ParameterToString(maxStartDate));
            }

            if (minEndDate != null)
            {
                request.AddQueryParameter("MinEndDate", this.ApiClient.ParameterToString(minEndDate));
            }

            if (maxEndDate != null)
            {
                request.AddQueryParameter("MaxEndDate", this.ApiClient.ParameterToString(maxEndDate));
            }

            if (minPlayers != null)
            {
                request.AddQueryParameter("MinPlayers", this.ApiClient.ParameterToString(minPlayers));
            }

            if (maxPlayers != null)
            {
                request.AddQueryParameter("MaxPlayers", this.ApiClient.ParameterToString(maxPlayers));
            }

            if (parentIndexNumber != null)
            {
                request.AddQueryParameter("ParentIndexNumber", this.ApiClient.ParameterToString(parentIndexNumber));
            }

            if (hasParentalRating != null)
            {
                request.AddQueryParameter("HasParentalRating", this.ApiClient.ParameterToString(hasParentalRating));
            }

            if (isHD != null)
            {
                request.AddQueryParameter("IsHD", this.ApiClient.ParameterToString(isHD));
            }

            if (isUnaired != null)
            {
                request.AddQueryParameter("IsUnaired", this.ApiClient.ParameterToString(isUnaired));
            }

            if (minCommunityRating != null)
            {
                request.AddQueryParameter("MinCommunityRating", this.ApiClient.ParameterToString(minCommunityRating));
            }

            if (minCriticRating != null)
            {
                request.AddQueryParameter("MinCriticRating", this.ApiClient.ParameterToString(minCriticRating));
            }

            if (airedDuringSeason != null)
            {
                request.AddQueryParameter("AiredDuringSeason", this.ApiClient.ParameterToString(airedDuringSeason));
            }

            if (minPremiereDate != null)
            {
                request.AddQueryParameter("MinPremiereDate", this.ApiClient.ParameterToString(minPremiereDate));
            }

            if (minDateLastSaved != null)
            {
                request.AddQueryParameter("MinDateLastSaved", this.ApiClient.ParameterToString(minDateLastSaved));
            }

            if (minDateLastSavedForUser != null)
            {
                request.AddQueryParameter("MinDateLastSavedForUser", this.ApiClient.ParameterToString(minDateLastSavedForUser));
            }

            if (maxPremiereDate != null)
            {
                request.AddQueryParameter("MaxPremiereDate", this.ApiClient.ParameterToString(maxPremiereDate));
            }

            if (hasOverview != null)
            {
                request.AddQueryParameter("HasOverview", this.ApiClient.ParameterToString(hasOverview));
            }

            if (hasImdbId != null)
            {
                request.AddQueryParameter("HasImdbId", this.ApiClient.ParameterToString(hasImdbId));
            }

            if (hasTmdbId != null)
            {
                request.AddQueryParameter("HasTmdbId", this.ApiClient.ParameterToString(hasTmdbId));
            }

            if (hasTvdbId != null)
            {
                request.AddQueryParameter("HasTvdbId", this.ApiClient.ParameterToString(hasTvdbId));
            }

            if (excludeItemIds != null)
            {
                request.AddQueryParameter("ExcludeItemIds", this.ApiClient.ParameterToString(excludeItemIds));
            }

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (recursive != null)
            {
                request.AddQueryParameter("Recursive", this.ApiClient.ParameterToString(recursive));
            }

            if (searchTerm != null)
            {
                request.AddQueryParameter("SearchTerm", this.ApiClient.ParameterToString(searchTerm));
            }

            if (sortOrder != null)
            {
                request.AddQueryParameter("SortOrder", this.ApiClient.ParameterToString(sortOrder));
            }

            if (parentId != null)
            {
                request.AddQueryParameter("ParentId", this.ApiClient.ParameterToString(parentId));
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (excludeItemTypes != null)
            {
                request.AddQueryParameter("ExcludeItemTypes", this.ApiClient.ParameterToString(excludeItemTypes));
            }

            if (includeItemTypes != null)
            {
                request.AddQueryParameter("IncludeItemTypes", this.ApiClient.ParameterToString(includeItemTypes));
            }

            if (anyProviderIdEquals != null)
            {
                request.AddQueryParameter("AnyProviderIdEquals", this.ApiClient.ParameterToString(anyProviderIdEquals));
            }

            if (filters != null)
            {
                request.AddQueryParameter("Filters", this.ApiClient.ParameterToString(filters));
            }

            if (isFavorite != null)
            {
                request.AddQueryParameter("IsFavorite", this.ApiClient.ParameterToString(isFavorite));
            }

            if (isMovie != null)
            {
                request.AddQueryParameter("IsMovie", this.ApiClient.ParameterToString(isMovie));
            }

            if (isSeries != null)
            {
                request.AddQueryParameter("IsSeries", this.ApiClient.ParameterToString(isSeries));
            }

            if (isFolder != null)
            {
                request.AddQueryParameter("IsFolder", this.ApiClient.ParameterToString(isFolder));
            }

            if (isNews != null)
            {
                request.AddQueryParameter("IsNews", this.ApiClient.ParameterToString(isNews));
            }

            if (isKids != null)
            {
                request.AddQueryParameter("IsKids", this.ApiClient.ParameterToString(isKids));
            }

            if (isSports != null)
            {
                request.AddQueryParameter("IsSports", this.ApiClient.ParameterToString(isSports));
            }

            if (isNew != null)
            {
                request.AddQueryParameter("IsNew", this.ApiClient.ParameterToString(isNew));
            }

            if (isPremiere != null)
            {
                request.AddQueryParameter("IsPremiere", this.ApiClient.ParameterToString(isPremiere));
            }

            if (isNewOrPremiere != null)
            {
                request.AddQueryParameter("IsNewOrPremiere", this.ApiClient.ParameterToString(isNewOrPremiere));
            }

            if (isRepeat != null)
            {
                request.AddQueryParameter("IsRepeat", this.ApiClient.ParameterToString(isRepeat));
            }

            if (projectToMedia != null)
            {
                request.AddQueryParameter("ProjectToMedia", this.ApiClient.ParameterToString(projectToMedia));
            }

            if (mediaTypes != null)
            {
                request.AddQueryParameter("MediaTypes", this.ApiClient.ParameterToString(mediaTypes));
            }

            if (imageTypes != null)
            {
                request.AddQueryParameter("ImageTypes", this.ApiClient.ParameterToString(imageTypes));
            }

            if (sortBy != null)
            {
                request.AddQueryParameter("SortBy", this.ApiClient.ParameterToString(sortBy));
            }

            if (isPlayed != null)
            {
                request.AddQueryParameter("IsPlayed", this.ApiClient.ParameterToString(isPlayed));
            }

            if (genres != null)
            {
                request.AddQueryParameter("Genres", this.ApiClient.ParameterToString(genres));
            }

            if (officialRatings != null)
            {
                request.AddQueryParameter("OfficialRatings", this.ApiClient.ParameterToString(officialRatings));
            }

            if (tags != null)
            {
                request.AddQueryParameter("Tags", this.ApiClient.ParameterToString(tags));
            }

            if (excludeTags != null)
            {
                request.AddQueryParameter("ExcludeTags", this.ApiClient.ParameterToString(excludeTags));
            }

            if (years != null)
            {
                request.AddQueryParameter("Years", this.ApiClient.ParameterToString(years));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (person != null)
            {
                request.AddQueryParameter("Person", this.ApiClient.ParameterToString(person));
            }

            if (personIds != null)
            {
                request.AddQueryParameter("PersonIds", this.ApiClient.ParameterToString(personIds));
            }

            if (personTypes != null)
            {
                request.AddQueryParameter("PersonTypes", this.ApiClient.ParameterToString(personTypes));
            }

            if (studios != null)
            {
                request.AddQueryParameter("Studios", this.ApiClient.ParameterToString(studios));
            }

            if (studioIds != null)
            {
                request.AddQueryParameter("StudioIds", this.ApiClient.ParameterToString(studioIds));
            }

            if (artists != null)
            {
                request.AddQueryParameter("Artists", this.ApiClient.ParameterToString(artists));
            }

            if (artistIds != null)
            {
                request.AddQueryParameter("ArtistIds", this.ApiClient.ParameterToString(artistIds));
            }

            if (albums != null)
            {
                request.AddQueryParameter("Albums", this.ApiClient.ParameterToString(albums));
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            if (videoTypes != null)
            {
                request.AddQueryParameter("VideoTypes", this.ApiClient.ParameterToString(videoTypes));
            }

            if (containers != null)
            {
                request.AddQueryParameter("Containers", this.ApiClient.ParameterToString(containers));
            }

            if (audioCodecs != null)
            {
                request.AddQueryParameter("AudioCodecs", this.ApiClient.ParameterToString(audioCodecs));
            }

            if (audioLayouts != null)
            {
                request.AddQueryParameter("AudioLayouts", this.ApiClient.ParameterToString(audioLayouts));
            }

            if (videoCodecs != null)
            {
                request.AddQueryParameter("VideoCodecs", this.ApiClient.ParameterToString(videoCodecs));
            }

            if (extendedVideoTypes != null)
            {
                request.AddQueryParameter("ExtendedVideoTypes", this.ApiClient.ParameterToString(extendedVideoTypes));
            }

            if (subtitleCodecs != null)
            {
                request.AddQueryParameter("SubtitleCodecs", this.ApiClient.ParameterToString(subtitleCodecs));
            }

            if (path != null)
            {
                request.AddQueryParameter("Path", this.ApiClient.ParameterToString(path));
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (minOfficialRating != null)
            {
                request.AddQueryParameter("MinOfficialRating", this.ApiClient.ParameterToString(minOfficialRating));
            }

            if (isLocked != null)
            {
                request.AddQueryParameter("IsLocked", this.ApiClient.ParameterToString(isLocked));
            }

            if (isPlaceHolder != null)
            {
                request.AddQueryParameter("IsPlaceHolder", this.ApiClient.ParameterToString(isPlaceHolder));
            }

            if (hasOfficialRating != null)
            {
                request.AddQueryParameter("HasOfficialRating", this.ApiClient.ParameterToString(hasOfficialRating));
            }

            if (groupItemsIntoCollections != null)
            {
                request.AddQueryParameter("GroupItemsIntoCollections", this.ApiClient.ParameterToString(groupItemsIntoCollections));
            }

            if (is3D != null)
            {
                request.AddQueryParameter("Is3D", this.ApiClient.ParameterToString(is3D));
            }

            if (seriesStatus != null)
            {
                request.AddQueryParameter("SeriesStatus", this.ApiClient.ParameterToString(seriesStatus));
            }

            if (nameStartsWithOrGreater != null)
            {
                request.AddQueryParameter("NameStartsWithOrGreater", this.ApiClient.ParameterToString(nameStartsWithOrGreater));
            }

            if (artistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("ArtistStartsWithOrGreater", this.ApiClient.ParameterToString(artistStartsWithOrGreater));
            }

            if (albumArtistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("AlbumArtistStartsWithOrGreater", this.ApiClient.ParameterToString(albumArtistStartsWithOrGreater));
            }

            if (nameStartsWith != null)
            {
                request.AddQueryParameter("NameStartsWith", this.ApiClient.ParameterToString(nameStartsWith));
            }

            if (nameLessThan != null)
            {
                request.AddQueryParameter("NameLessThan", this.ApiClient.ParameterToString(nameLessThan));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<ApiTagItem>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets the epg.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="type">Optional filter by channel type. (optional)</param>
        /// <param name="isLiked">Filter by channels that are liked, or not. (optional)</param>
        /// <param name="isDisliked">Filter by channels that are disliked, or not. (optional)</param>
        /// <param name="enableFavoriteSorting">Incorporate favorite and like status into channel sorting. (optional)</param>
        /// <param name="addCurrentProgram">Optional. Adds current program info to each channel (optional)</param>
        /// <param name="channelIds">The channels to return guide information for. (optional)</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultApiEpgRow)</returns>
        public async Task<RestResponse<QueryResultApiEpgRow>> GetLivetvEPG (LiveTvChannelType type, bool? isLiked, bool? isDisliked, bool? enableFavoriteSorting, bool? addCurrentProgram, string channelIds, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, string adjacentTo, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            var request = new RestRequest("/LiveTv/EPG", Method.Get);

            if (type != null)
            {
                request.AddQueryParameter("Type", this.ApiClient.ParameterToString(type));
            }

            if (isLiked != null)
            {
                request.AddQueryParameter("IsLiked", this.ApiClient.ParameterToString(isLiked));
            }

            if (isDisliked != null)
            {
                request.AddQueryParameter("IsDisliked", this.ApiClient.ParameterToString(isDisliked));
            }

            if (enableFavoriteSorting != null)
            {
                request.AddQueryParameter("EnableFavoriteSorting", this.ApiClient.ParameterToString(enableFavoriteSorting));
            }

            if (addCurrentProgram != null)
            {
                request.AddQueryParameter("AddCurrentProgram", this.ApiClient.ParameterToString(addCurrentProgram));
            }

            if (channelIds != null)
            {
                request.AddQueryParameter("ChannelIds", this.ApiClient.ParameterToString(channelIds));
            }

            if (artistType != null)
            {
                request.AddQueryParameter("ArtistType", this.ApiClient.ParameterToString(artistType));
            }

            if (maxOfficialRating != null)
            {
                request.AddQueryParameter("MaxOfficialRating", this.ApiClient.ParameterToString(maxOfficialRating));
            }

            if (hasThemeSong != null)
            {
                request.AddQueryParameter("HasThemeSong", this.ApiClient.ParameterToString(hasThemeSong));
            }

            if (hasThemeVideo != null)
            {
                request.AddQueryParameter("HasThemeVideo", this.ApiClient.ParameterToString(hasThemeVideo));
            }

            if (hasSubtitles != null)
            {
                request.AddQueryParameter("HasSubtitles", this.ApiClient.ParameterToString(hasSubtitles));
            }

            if (hasSpecialFeature != null)
            {
                request.AddQueryParameter("HasSpecialFeature", this.ApiClient.ParameterToString(hasSpecialFeature));
            }

            if (hasTrailer != null)
            {
                request.AddQueryParameter("HasTrailer", this.ApiClient.ParameterToString(hasTrailer));
            }

            if (adjacentTo != null)
            {
                request.AddQueryParameter("AdjacentTo", this.ApiClient.ParameterToString(adjacentTo));
            }

            if (minIndexNumber != null)
            {
                request.AddQueryParameter("MinIndexNumber", this.ApiClient.ParameterToString(minIndexNumber));
            }

            if (minStartDate != null)
            {
                request.AddQueryParameter("MinStartDate", this.ApiClient.ParameterToString(minStartDate));
            }

            if (maxStartDate != null)
            {
                request.AddQueryParameter("MaxStartDate", this.ApiClient.ParameterToString(maxStartDate));
            }

            if (minEndDate != null)
            {
                request.AddQueryParameter("MinEndDate", this.ApiClient.ParameterToString(minEndDate));
            }

            if (maxEndDate != null)
            {
                request.AddQueryParameter("MaxEndDate", this.ApiClient.ParameterToString(maxEndDate));
            }

            if (minPlayers != null)
            {
                request.AddQueryParameter("MinPlayers", this.ApiClient.ParameterToString(minPlayers));
            }

            if (maxPlayers != null)
            {
                request.AddQueryParameter("MaxPlayers", this.ApiClient.ParameterToString(maxPlayers));
            }

            if (parentIndexNumber != null)
            {
                request.AddQueryParameter("ParentIndexNumber", this.ApiClient.ParameterToString(parentIndexNumber));
            }

            if (hasParentalRating != null)
            {
                request.AddQueryParameter("HasParentalRating", this.ApiClient.ParameterToString(hasParentalRating));
            }

            if (isHD != null)
            {
                request.AddQueryParameter("IsHD", this.ApiClient.ParameterToString(isHD));
            }

            if (isUnaired != null)
            {
                request.AddQueryParameter("IsUnaired", this.ApiClient.ParameterToString(isUnaired));
            }

            if (minCommunityRating != null)
            {
                request.AddQueryParameter("MinCommunityRating", this.ApiClient.ParameterToString(minCommunityRating));
            }

            if (minCriticRating != null)
            {
                request.AddQueryParameter("MinCriticRating", this.ApiClient.ParameterToString(minCriticRating));
            }

            if (airedDuringSeason != null)
            {
                request.AddQueryParameter("AiredDuringSeason", this.ApiClient.ParameterToString(airedDuringSeason));
            }

            if (minPremiereDate != null)
            {
                request.AddQueryParameter("MinPremiereDate", this.ApiClient.ParameterToString(minPremiereDate));
            }

            if (minDateLastSaved != null)
            {
                request.AddQueryParameter("MinDateLastSaved", this.ApiClient.ParameterToString(minDateLastSaved));
            }

            if (minDateLastSavedForUser != null)
            {
                request.AddQueryParameter("MinDateLastSavedForUser", this.ApiClient.ParameterToString(minDateLastSavedForUser));
            }

            if (maxPremiereDate != null)
            {
                request.AddQueryParameter("MaxPremiereDate", this.ApiClient.ParameterToString(maxPremiereDate));
            }

            if (hasOverview != null)
            {
                request.AddQueryParameter("HasOverview", this.ApiClient.ParameterToString(hasOverview));
            }

            if (hasImdbId != null)
            {
                request.AddQueryParameter("HasImdbId", this.ApiClient.ParameterToString(hasImdbId));
            }

            if (hasTmdbId != null)
            {
                request.AddQueryParameter("HasTmdbId", this.ApiClient.ParameterToString(hasTmdbId));
            }

            if (hasTvdbId != null)
            {
                request.AddQueryParameter("HasTvdbId", this.ApiClient.ParameterToString(hasTvdbId));
            }

            if (excludeItemIds != null)
            {
                request.AddQueryParameter("ExcludeItemIds", this.ApiClient.ParameterToString(excludeItemIds));
            }

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (recursive != null)
            {
                request.AddQueryParameter("Recursive", this.ApiClient.ParameterToString(recursive));
            }

            if (searchTerm != null)
            {
                request.AddQueryParameter("SearchTerm", this.ApiClient.ParameterToString(searchTerm));
            }

            if (sortOrder != null)
            {
                request.AddQueryParameter("SortOrder", this.ApiClient.ParameterToString(sortOrder));
            }

            if (parentId != null)
            {
                request.AddQueryParameter("ParentId", this.ApiClient.ParameterToString(parentId));
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (excludeItemTypes != null)
            {
                request.AddQueryParameter("ExcludeItemTypes", this.ApiClient.ParameterToString(excludeItemTypes));
            }

            if (includeItemTypes != null)
            {
                request.AddQueryParameter("IncludeItemTypes", this.ApiClient.ParameterToString(includeItemTypes));
            }

            if (anyProviderIdEquals != null)
            {
                request.AddQueryParameter("AnyProviderIdEquals", this.ApiClient.ParameterToString(anyProviderIdEquals));
            }

            if (filters != null)
            {
                request.AddQueryParameter("Filters", this.ApiClient.ParameterToString(filters));
            }

            if (isFavorite != null)
            {
                request.AddQueryParameter("IsFavorite", this.ApiClient.ParameterToString(isFavorite));
            }

            if (isMovie != null)
            {
                request.AddQueryParameter("IsMovie", this.ApiClient.ParameterToString(isMovie));
            }

            if (isSeries != null)
            {
                request.AddQueryParameter("IsSeries", this.ApiClient.ParameterToString(isSeries));
            }

            if (isFolder != null)
            {
                request.AddQueryParameter("IsFolder", this.ApiClient.ParameterToString(isFolder));
            }

            if (isNews != null)
            {
                request.AddQueryParameter("IsNews", this.ApiClient.ParameterToString(isNews));
            }

            if (isKids != null)
            {
                request.AddQueryParameter("IsKids", this.ApiClient.ParameterToString(isKids));
            }

            if (isSports != null)
            {
                request.AddQueryParameter("IsSports", this.ApiClient.ParameterToString(isSports));
            }

            if (isNew != null)
            {
                request.AddQueryParameter("IsNew", this.ApiClient.ParameterToString(isNew));
            }

            if (isPremiere != null)
            {
                request.AddQueryParameter("IsPremiere", this.ApiClient.ParameterToString(isPremiere));
            }

            if (isNewOrPremiere != null)
            {
                request.AddQueryParameter("IsNewOrPremiere", this.ApiClient.ParameterToString(isNewOrPremiere));
            }

            if (isRepeat != null)
            {
                request.AddQueryParameter("IsRepeat", this.ApiClient.ParameterToString(isRepeat));
            }

            if (projectToMedia != null)
            {
                request.AddQueryParameter("ProjectToMedia", this.ApiClient.ParameterToString(projectToMedia));
            }

            if (mediaTypes != null)
            {
                request.AddQueryParameter("MediaTypes", this.ApiClient.ParameterToString(mediaTypes));
            }

            if (imageTypes != null)
            {
                request.AddQueryParameter("ImageTypes", this.ApiClient.ParameterToString(imageTypes));
            }

            if (sortBy != null)
            {
                request.AddQueryParameter("SortBy", this.ApiClient.ParameterToString(sortBy));
            }

            if (isPlayed != null)
            {
                request.AddQueryParameter("IsPlayed", this.ApiClient.ParameterToString(isPlayed));
            }

            if (genres != null)
            {
                request.AddQueryParameter("Genres", this.ApiClient.ParameterToString(genres));
            }

            if (officialRatings != null)
            {
                request.AddQueryParameter("OfficialRatings", this.ApiClient.ParameterToString(officialRatings));
            }

            if (tags != null)
            {
                request.AddQueryParameter("Tags", this.ApiClient.ParameterToString(tags));
            }

            if (excludeTags != null)
            {
                request.AddQueryParameter("ExcludeTags", this.ApiClient.ParameterToString(excludeTags));
            }

            if (years != null)
            {
                request.AddQueryParameter("Years", this.ApiClient.ParameterToString(years));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (person != null)
            {
                request.AddQueryParameter("Person", this.ApiClient.ParameterToString(person));
            }

            if (personIds != null)
            {
                request.AddQueryParameter("PersonIds", this.ApiClient.ParameterToString(personIds));
            }

            if (personTypes != null)
            {
                request.AddQueryParameter("PersonTypes", this.ApiClient.ParameterToString(personTypes));
            }

            if (studios != null)
            {
                request.AddQueryParameter("Studios", this.ApiClient.ParameterToString(studios));
            }

            if (studioIds != null)
            {
                request.AddQueryParameter("StudioIds", this.ApiClient.ParameterToString(studioIds));
            }

            if (artists != null)
            {
                request.AddQueryParameter("Artists", this.ApiClient.ParameterToString(artists));
            }

            if (artistIds != null)
            {
                request.AddQueryParameter("ArtistIds", this.ApiClient.ParameterToString(artistIds));
            }

            if (albums != null)
            {
                request.AddQueryParameter("Albums", this.ApiClient.ParameterToString(albums));
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            if (videoTypes != null)
            {
                request.AddQueryParameter("VideoTypes", this.ApiClient.ParameterToString(videoTypes));
            }

            if (containers != null)
            {
                request.AddQueryParameter("Containers", this.ApiClient.ParameterToString(containers));
            }

            if (audioCodecs != null)
            {
                request.AddQueryParameter("AudioCodecs", this.ApiClient.ParameterToString(audioCodecs));
            }

            if (audioLayouts != null)
            {
                request.AddQueryParameter("AudioLayouts", this.ApiClient.ParameterToString(audioLayouts));
            }

            if (videoCodecs != null)
            {
                request.AddQueryParameter("VideoCodecs", this.ApiClient.ParameterToString(videoCodecs));
            }

            if (extendedVideoTypes != null)
            {
                request.AddQueryParameter("ExtendedVideoTypes", this.ApiClient.ParameterToString(extendedVideoTypes));
            }

            if (subtitleCodecs != null)
            {
                request.AddQueryParameter("SubtitleCodecs", this.ApiClient.ParameterToString(subtitleCodecs));
            }

            if (path != null)
            {
                request.AddQueryParameter("Path", this.ApiClient.ParameterToString(path));
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (minOfficialRating != null)
            {
                request.AddQueryParameter("MinOfficialRating", this.ApiClient.ParameterToString(minOfficialRating));
            }

            if (isLocked != null)
            {
                request.AddQueryParameter("IsLocked", this.ApiClient.ParameterToString(isLocked));
            }

            if (isPlaceHolder != null)
            {
                request.AddQueryParameter("IsPlaceHolder", this.ApiClient.ParameterToString(isPlaceHolder));
            }

            if (hasOfficialRating != null)
            {
                request.AddQueryParameter("HasOfficialRating", this.ApiClient.ParameterToString(hasOfficialRating));
            }

            if (groupItemsIntoCollections != null)
            {
                request.AddQueryParameter("GroupItemsIntoCollections", this.ApiClient.ParameterToString(groupItemsIntoCollections));
            }

            if (is3D != null)
            {
                request.AddQueryParameter("Is3D", this.ApiClient.ParameterToString(is3D));
            }

            if (seriesStatus != null)
            {
                request.AddQueryParameter("SeriesStatus", this.ApiClient.ParameterToString(seriesStatus));
            }

            if (nameStartsWithOrGreater != null)
            {
                request.AddQueryParameter("NameStartsWithOrGreater", this.ApiClient.ParameterToString(nameStartsWithOrGreater));
            }

            if (artistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("ArtistStartsWithOrGreater", this.ApiClient.ParameterToString(artistStartsWithOrGreater));
            }

            if (albumArtistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("AlbumArtistStartsWithOrGreater", this.ApiClient.ParameterToString(albumArtistStartsWithOrGreater));
            }

            if (nameStartsWith != null)
            {
                request.AddQueryParameter("NameStartsWith", this.ApiClient.ParameterToString(nameStartsWith));
            }

            if (nameLessThan != null)
            {
                request.AddQueryParameter("NameLessThan", this.ApiClient.ParameterToString(nameLessThan));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultApiEpgRow>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets the top level live tv folder
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        public async Task<RestResponse<BaseItemDto>> GetLivetvFolder ()
        {
            var request = new RestRequest("/LiveTv/Folder", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<BaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets guide info
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (LiveTvGuideInfo)</returns>
        public async Task<RestResponse<LiveTvGuideInfo>> GetLivetvGuideinfo ()
        {
            var request = new RestRequest("/LiveTv/GuideInfo", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<LiveTvGuideInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets available live tv services.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (LiveTvLiveTvInfo)</returns>
        public async Task<RestResponse<LiveTvLiveTvInfo>> GetLivetvInfo ()
        {
            var request = new RestRequest("/LiveTv/Info", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<LiveTvLiveTvInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets current listing providers
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="channelId">Channel id</param>
        /// <returns>Task of ApiResponse (List&lt;LiveTvListingsProviderInfo&gt;)</returns>
        public async Task<RestResponse<List<LiveTvListingsProviderInfo>>> GetLivetvListingproviders (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
            {
                throw new ApiException("Missing required parameter 'channelId' when calling LiveTvServiceApi->GetLivetvListingproviders");
            }
            
            var request = new RestRequest("/LiveTv/ListingProviders", Method.Get);

            if (channelId != null)
            {
                request.AddQueryParameter("ChannelId", this.ApiClient.ParameterToString(channelId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<LiveTvListingsProviderInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets listing provider
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <returns>Task of ApiResponse (List&lt;ApiListingProviderTypeInfo&gt;)</returns>
        public async Task<RestResponse<List<ApiListingProviderTypeInfo>>> GetLivetvListingprovidersAvailable ()
        {
            var request = new RestRequest("/LiveTv/ListingProviders/Available", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<ApiListingProviderTypeInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (LiveTvListingsProviderInfo)</returns>
        public async Task<RestResponse<LiveTvListingsProviderInfo>> GetLivetvListingprovidersDefault ()
        {
            var request = new RestRequest("/LiveTv/ListingProviders/Default", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<LiveTvListingsProviderInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets available lineups
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Provider id (optional)</param>
        /// <param name="type">Provider Type (optional)</param>
        /// <param name="location">Location (optional)</param>
        /// <param name="country">Country (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NameIdPair&gt;)</returns>
        public async Task<RestResponse<List<NameIdPair>>> GetLivetvListingprovidersLineups (string id, string type, string location, string country)
        {
            var request = new RestRequest("/LiveTv/ListingProviders/Lineups", Method.Get);

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            if (type != null)
            {
                request.AddQueryParameter("Type", this.ApiClient.ParameterToString(type));
            }

            if (location != null)
            {
                request.AddQueryParameter("Location", this.ApiClient.ParameterToString(location));
            }

            if (country != null)
            {
                request.AddQueryParameter("Country", this.ApiClient.ParameterToString(country));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<NameIdPair>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets available lineups
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetLivetvListingprovidersSchedulesdirectCountries ()
        {
            var request = new RestRequest("/LiveTv/ListingProviders/SchedulesDirect/Countries", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets the channel management list
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Name, StartDate (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultChannelManagementInfo)</returns>
        public async Task<RestResponse<QueryResultChannelManagementInfo>> GetLivetvManageChannels (int? startIndex, int? limit, string sortBy, string sortOrder)
        {
            var request = new RestRequest("/LiveTv/Manage/Channels", Method.Get);

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (sortBy != null)
            {
                request.AddQueryParameter("SortBy", this.ApiClient.ParameterToString(sortBy));
            }

            if (sortOrder != null)
            {
                request.AddQueryParameter("SortOrder", this.ApiClient.ParameterToString(sortOrder));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultChannelManagementInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets available live tv epgs..
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="channelIds">The channels to return guide information for. (optional)</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetLivetvPrograms (string channelIds, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, string adjacentTo, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            var request = new RestRequest("/LiveTv/Programs", Method.Get);

            if (channelIds != null)
            {
                request.AddQueryParameter("ChannelIds", this.ApiClient.ParameterToString(channelIds));
            }

            if (artistType != null)
            {
                request.AddQueryParameter("ArtistType", this.ApiClient.ParameterToString(artistType));
            }

            if (maxOfficialRating != null)
            {
                request.AddQueryParameter("MaxOfficialRating", this.ApiClient.ParameterToString(maxOfficialRating));
            }

            if (hasThemeSong != null)
            {
                request.AddQueryParameter("HasThemeSong", this.ApiClient.ParameterToString(hasThemeSong));
            }

            if (hasThemeVideo != null)
            {
                request.AddQueryParameter("HasThemeVideo", this.ApiClient.ParameterToString(hasThemeVideo));
            }

            if (hasSubtitles != null)
            {
                request.AddQueryParameter("HasSubtitles", this.ApiClient.ParameterToString(hasSubtitles));
            }

            if (hasSpecialFeature != null)
            {
                request.AddQueryParameter("HasSpecialFeature", this.ApiClient.ParameterToString(hasSpecialFeature));
            }

            if (hasTrailer != null)
            {
                request.AddQueryParameter("HasTrailer", this.ApiClient.ParameterToString(hasTrailer));
            }

            if (adjacentTo != null)
            {
                request.AddQueryParameter("AdjacentTo", this.ApiClient.ParameterToString(adjacentTo));
            }

            if (minIndexNumber != null)
            {
                request.AddQueryParameter("MinIndexNumber", this.ApiClient.ParameterToString(minIndexNumber));
            }

            if (minStartDate != null)
            {
                request.AddQueryParameter("MinStartDate", this.ApiClient.ParameterToString(minStartDate));
            }

            if (maxStartDate != null)
            {
                request.AddQueryParameter("MaxStartDate", this.ApiClient.ParameterToString(maxStartDate));
            }

            if (minEndDate != null)
            {
                request.AddQueryParameter("MinEndDate", this.ApiClient.ParameterToString(minEndDate));
            }

            if (maxEndDate != null)
            {
                request.AddQueryParameter("MaxEndDate", this.ApiClient.ParameterToString(maxEndDate));
            }

            if (minPlayers != null)
            {
                request.AddQueryParameter("MinPlayers", this.ApiClient.ParameterToString(minPlayers));
            }

            if (maxPlayers != null)
            {
                request.AddQueryParameter("MaxPlayers", this.ApiClient.ParameterToString(maxPlayers));
            }

            if (parentIndexNumber != null)
            {
                request.AddQueryParameter("ParentIndexNumber", this.ApiClient.ParameterToString(parentIndexNumber));
            }

            if (hasParentalRating != null)
            {
                request.AddQueryParameter("HasParentalRating", this.ApiClient.ParameterToString(hasParentalRating));
            }

            if (isHD != null)
            {
                request.AddQueryParameter("IsHD", this.ApiClient.ParameterToString(isHD));
            }

            if (isUnaired != null)
            {
                request.AddQueryParameter("IsUnaired", this.ApiClient.ParameterToString(isUnaired));
            }

            if (minCommunityRating != null)
            {
                request.AddQueryParameter("MinCommunityRating", this.ApiClient.ParameterToString(minCommunityRating));
            }

            if (minCriticRating != null)
            {
                request.AddQueryParameter("MinCriticRating", this.ApiClient.ParameterToString(minCriticRating));
            }

            if (airedDuringSeason != null)
            {
                request.AddQueryParameter("AiredDuringSeason", this.ApiClient.ParameterToString(airedDuringSeason));
            }

            if (minPremiereDate != null)
            {
                request.AddQueryParameter("MinPremiereDate", this.ApiClient.ParameterToString(minPremiereDate));
            }

            if (minDateLastSaved != null)
            {
                request.AddQueryParameter("MinDateLastSaved", this.ApiClient.ParameterToString(minDateLastSaved));
            }

            if (minDateLastSavedForUser != null)
            {
                request.AddQueryParameter("MinDateLastSavedForUser", this.ApiClient.ParameterToString(minDateLastSavedForUser));
            }

            if (maxPremiereDate != null)
            {
                request.AddQueryParameter("MaxPremiereDate", this.ApiClient.ParameterToString(maxPremiereDate));
            }

            if (hasOverview != null)
            {
                request.AddQueryParameter("HasOverview", this.ApiClient.ParameterToString(hasOverview));
            }

            if (hasImdbId != null)
            {
                request.AddQueryParameter("HasImdbId", this.ApiClient.ParameterToString(hasImdbId));
            }

            if (hasTmdbId != null)
            {
                request.AddQueryParameter("HasTmdbId", this.ApiClient.ParameterToString(hasTmdbId));
            }

            if (hasTvdbId != null)
            {
                request.AddQueryParameter("HasTvdbId", this.ApiClient.ParameterToString(hasTvdbId));
            }

            if (excludeItemIds != null)
            {
                request.AddQueryParameter("ExcludeItemIds", this.ApiClient.ParameterToString(excludeItemIds));
            }

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (recursive != null)
            {
                request.AddQueryParameter("Recursive", this.ApiClient.ParameterToString(recursive));
            }

            if (searchTerm != null)
            {
                request.AddQueryParameter("SearchTerm", this.ApiClient.ParameterToString(searchTerm));
            }

            if (sortOrder != null)
            {
                request.AddQueryParameter("SortOrder", this.ApiClient.ParameterToString(sortOrder));
            }

            if (parentId != null)
            {
                request.AddQueryParameter("ParentId", this.ApiClient.ParameterToString(parentId));
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (excludeItemTypes != null)
            {
                request.AddQueryParameter("ExcludeItemTypes", this.ApiClient.ParameterToString(excludeItemTypes));
            }

            if (includeItemTypes != null)
            {
                request.AddQueryParameter("IncludeItemTypes", this.ApiClient.ParameterToString(includeItemTypes));
            }

            if (anyProviderIdEquals != null)
            {
                request.AddQueryParameter("AnyProviderIdEquals", this.ApiClient.ParameterToString(anyProviderIdEquals));
            }

            if (filters != null)
            {
                request.AddQueryParameter("Filters", this.ApiClient.ParameterToString(filters));
            }

            if (isFavorite != null)
            {
                request.AddQueryParameter("IsFavorite", this.ApiClient.ParameterToString(isFavorite));
            }

            if (isMovie != null)
            {
                request.AddQueryParameter("IsMovie", this.ApiClient.ParameterToString(isMovie));
            }

            if (isSeries != null)
            {
                request.AddQueryParameter("IsSeries", this.ApiClient.ParameterToString(isSeries));
            }

            if (isFolder != null)
            {
                request.AddQueryParameter("IsFolder", this.ApiClient.ParameterToString(isFolder));
            }

            if (isNews != null)
            {
                request.AddQueryParameter("IsNews", this.ApiClient.ParameterToString(isNews));
            }

            if (isKids != null)
            {
                request.AddQueryParameter("IsKids", this.ApiClient.ParameterToString(isKids));
            }

            if (isSports != null)
            {
                request.AddQueryParameter("IsSports", this.ApiClient.ParameterToString(isSports));
            }

            if (isNew != null)
            {
                request.AddQueryParameter("IsNew", this.ApiClient.ParameterToString(isNew));
            }

            if (isPremiere != null)
            {
                request.AddQueryParameter("IsPremiere", this.ApiClient.ParameterToString(isPremiere));
            }

            if (isNewOrPremiere != null)
            {
                request.AddQueryParameter("IsNewOrPremiere", this.ApiClient.ParameterToString(isNewOrPremiere));
            }

            if (isRepeat != null)
            {
                request.AddQueryParameter("IsRepeat", this.ApiClient.ParameterToString(isRepeat));
            }

            if (projectToMedia != null)
            {
                request.AddQueryParameter("ProjectToMedia", this.ApiClient.ParameterToString(projectToMedia));
            }

            if (mediaTypes != null)
            {
                request.AddQueryParameter("MediaTypes", this.ApiClient.ParameterToString(mediaTypes));
            }

            if (imageTypes != null)
            {
                request.AddQueryParameter("ImageTypes", this.ApiClient.ParameterToString(imageTypes));
            }

            if (sortBy != null)
            {
                request.AddQueryParameter("SortBy", this.ApiClient.ParameterToString(sortBy));
            }

            if (isPlayed != null)
            {
                request.AddQueryParameter("IsPlayed", this.ApiClient.ParameterToString(isPlayed));
            }

            if (genres != null)
            {
                request.AddQueryParameter("Genres", this.ApiClient.ParameterToString(genres));
            }

            if (officialRatings != null)
            {
                request.AddQueryParameter("OfficialRatings", this.ApiClient.ParameterToString(officialRatings));
            }

            if (tags != null)
            {
                request.AddQueryParameter("Tags", this.ApiClient.ParameterToString(tags));
            }

            if (excludeTags != null)
            {
                request.AddQueryParameter("ExcludeTags", this.ApiClient.ParameterToString(excludeTags));
            }

            if (years != null)
            {
                request.AddQueryParameter("Years", this.ApiClient.ParameterToString(years));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (person != null)
            {
                request.AddQueryParameter("Person", this.ApiClient.ParameterToString(person));
            }

            if (personIds != null)
            {
                request.AddQueryParameter("PersonIds", this.ApiClient.ParameterToString(personIds));
            }

            if (personTypes != null)
            {
                request.AddQueryParameter("PersonTypes", this.ApiClient.ParameterToString(personTypes));
            }

            if (studios != null)
            {
                request.AddQueryParameter("Studios", this.ApiClient.ParameterToString(studios));
            }

            if (studioIds != null)
            {
                request.AddQueryParameter("StudioIds", this.ApiClient.ParameterToString(studioIds));
            }

            if (artists != null)
            {
                request.AddQueryParameter("Artists", this.ApiClient.ParameterToString(artists));
            }

            if (artistIds != null)
            {
                request.AddQueryParameter("ArtistIds", this.ApiClient.ParameterToString(artistIds));
            }

            if (albums != null)
            {
                request.AddQueryParameter("Albums", this.ApiClient.ParameterToString(albums));
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            if (videoTypes != null)
            {
                request.AddQueryParameter("VideoTypes", this.ApiClient.ParameterToString(videoTypes));
            }

            if (containers != null)
            {
                request.AddQueryParameter("Containers", this.ApiClient.ParameterToString(containers));
            }

            if (audioCodecs != null)
            {
                request.AddQueryParameter("AudioCodecs", this.ApiClient.ParameterToString(audioCodecs));
            }

            if (audioLayouts != null)
            {
                request.AddQueryParameter("AudioLayouts", this.ApiClient.ParameterToString(audioLayouts));
            }

            if (videoCodecs != null)
            {
                request.AddQueryParameter("VideoCodecs", this.ApiClient.ParameterToString(videoCodecs));
            }

            if (extendedVideoTypes != null)
            {
                request.AddQueryParameter("ExtendedVideoTypes", this.ApiClient.ParameterToString(extendedVideoTypes));
            }

            if (subtitleCodecs != null)
            {
                request.AddQueryParameter("SubtitleCodecs", this.ApiClient.ParameterToString(subtitleCodecs));
            }

            if (path != null)
            {
                request.AddQueryParameter("Path", this.ApiClient.ParameterToString(path));
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (minOfficialRating != null)
            {
                request.AddQueryParameter("MinOfficialRating", this.ApiClient.ParameterToString(minOfficialRating));
            }

            if (isLocked != null)
            {
                request.AddQueryParameter("IsLocked", this.ApiClient.ParameterToString(isLocked));
            }

            if (isPlaceHolder != null)
            {
                request.AddQueryParameter("IsPlaceHolder", this.ApiClient.ParameterToString(isPlaceHolder));
            }

            if (hasOfficialRating != null)
            {
                request.AddQueryParameter("HasOfficialRating", this.ApiClient.ParameterToString(hasOfficialRating));
            }

            if (groupItemsIntoCollections != null)
            {
                request.AddQueryParameter("GroupItemsIntoCollections", this.ApiClient.ParameterToString(groupItemsIntoCollections));
            }

            if (is3D != null)
            {
                request.AddQueryParameter("Is3D", this.ApiClient.ParameterToString(is3D));
            }

            if (seriesStatus != null)
            {
                request.AddQueryParameter("SeriesStatus", this.ApiClient.ParameterToString(seriesStatus));
            }

            if (nameStartsWithOrGreater != null)
            {
                request.AddQueryParameter("NameStartsWithOrGreater", this.ApiClient.ParameterToString(nameStartsWithOrGreater));
            }

            if (artistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("ArtistStartsWithOrGreater", this.ApiClient.ParameterToString(artistStartsWithOrGreater));
            }

            if (albumArtistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("AlbumArtistStartsWithOrGreater", this.ApiClient.ParameterToString(albumArtistStartsWithOrGreater));
            }

            if (nameStartsWith != null)
            {
                request.AddQueryParameter("NameStartsWith", this.ApiClient.ParameterToString(nameStartsWith));
            }

            if (nameLessThan != null)
            {
                request.AddQueryParameter("NameLessThan", this.ApiClient.ParameterToString(nameLessThan));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets available live tv epgs..
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">Optional filter by user id. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="isAiring">Optional. Filter by programs that are currently airing, or not. (optional)</param>
        /// <param name="hasAired">Optional. Filter by programs that have completed airing, or not. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="genreIds">The genres to return guide information for. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async Task<RestResponse<QueryResultBaseItemDto>> GetLivetvProgramsRecommended (string userId, int? limit, bool? isAiring, bool? hasAired, bool? isSeries, bool? isMovie, bool? isNews, bool? isKids, bool? isSports, bool? enableImages, int? imageTypeLimit, string enableImageTypes, string genreIds, string fields, bool? enableUserData)
        {
            var request = new RestRequest("/LiveTv/Programs/Recommended", Method.Get);

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (isAiring != null)
            {
                request.AddQueryParameter("IsAiring", this.ApiClient.ParameterToString(isAiring));
            }

            if (hasAired != null)
            {
                request.AddQueryParameter("HasAired", this.ApiClient.ParameterToString(hasAired));
            }

            if (isSeries != null)
            {
                request.AddQueryParameter("IsSeries", this.ApiClient.ParameterToString(isSeries));
            }

            if (isMovie != null)
            {
                request.AddQueryParameter("IsMovie", this.ApiClient.ParameterToString(isMovie));
            }

            if (isNews != null)
            {
                request.AddQueryParameter("IsNews", this.ApiClient.ParameterToString(isNews));
            }

            if (isKids != null)
            {
                request.AddQueryParameter("IsKids", this.ApiClient.ParameterToString(isKids));
            }

            if (isSports != null)
            {
                request.AddQueryParameter("IsSports", this.ApiClient.ParameterToString(isSports));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (genreIds != null)
            {
                request.AddQueryParameter("GenreIds", this.ApiClient.ParameterToString(genreIds));
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultBaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets live tv recordings
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="channelId">Optional filter by channel id. (optional)</param>
        /// <param name="status">Optional filter by recording status. (optional)</param>
        /// <param name="isInProgress">Optional filter by recordings that are in progress, or not. (optional)</param>
        /// <param name="seriesTimerId">Optional filter by recordings belonging to a series timer (optional)</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetLivetvRecordings (string channelId, LiveTvRecordingStatus status, bool? isInProgress, string seriesTimerId, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, string adjacentTo, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            var request = new RestRequest("/LiveTv/Recordings", Method.Get);

            if (channelId != null)
            {
                request.AddQueryParameter("ChannelId", this.ApiClient.ParameterToString(channelId));
            }

            if (status != null)
            {
                request.AddQueryParameter("Status", this.ApiClient.ParameterToString(status));
            }

            if (isInProgress != null)
            {
                request.AddQueryParameter("IsInProgress", this.ApiClient.ParameterToString(isInProgress));
            }

            if (seriesTimerId != null)
            {
                request.AddQueryParameter("SeriesTimerId", this.ApiClient.ParameterToString(seriesTimerId));
            }

            if (artistType != null)
            {
                request.AddQueryParameter("ArtistType", this.ApiClient.ParameterToString(artistType));
            }

            if (maxOfficialRating != null)
            {
                request.AddQueryParameter("MaxOfficialRating", this.ApiClient.ParameterToString(maxOfficialRating));
            }

            if (hasThemeSong != null)
            {
                request.AddQueryParameter("HasThemeSong", this.ApiClient.ParameterToString(hasThemeSong));
            }

            if (hasThemeVideo != null)
            {
                request.AddQueryParameter("HasThemeVideo", this.ApiClient.ParameterToString(hasThemeVideo));
            }

            if (hasSubtitles != null)
            {
                request.AddQueryParameter("HasSubtitles", this.ApiClient.ParameterToString(hasSubtitles));
            }

            if (hasSpecialFeature != null)
            {
                request.AddQueryParameter("HasSpecialFeature", this.ApiClient.ParameterToString(hasSpecialFeature));
            }

            if (hasTrailer != null)
            {
                request.AddQueryParameter("HasTrailer", this.ApiClient.ParameterToString(hasTrailer));
            }

            if (adjacentTo != null)
            {
                request.AddQueryParameter("AdjacentTo", this.ApiClient.ParameterToString(adjacentTo));
            }

            if (minIndexNumber != null)
            {
                request.AddQueryParameter("MinIndexNumber", this.ApiClient.ParameterToString(minIndexNumber));
            }

            if (minStartDate != null)
            {
                request.AddQueryParameter("MinStartDate", this.ApiClient.ParameterToString(minStartDate));
            }

            if (maxStartDate != null)
            {
                request.AddQueryParameter("MaxStartDate", this.ApiClient.ParameterToString(maxStartDate));
            }

            if (minEndDate != null)
            {
                request.AddQueryParameter("MinEndDate", this.ApiClient.ParameterToString(minEndDate));
            }

            if (maxEndDate != null)
            {
                request.AddQueryParameter("MaxEndDate", this.ApiClient.ParameterToString(maxEndDate));
            }

            if (minPlayers != null)
            {
                request.AddQueryParameter("MinPlayers", this.ApiClient.ParameterToString(minPlayers));
            }

            if (maxPlayers != null)
            {
                request.AddQueryParameter("MaxPlayers", this.ApiClient.ParameterToString(maxPlayers));
            }

            if (parentIndexNumber != null)
            {
                request.AddQueryParameter("ParentIndexNumber", this.ApiClient.ParameterToString(parentIndexNumber));
            }

            if (hasParentalRating != null)
            {
                request.AddQueryParameter("HasParentalRating", this.ApiClient.ParameterToString(hasParentalRating));
            }

            if (isHD != null)
            {
                request.AddQueryParameter("IsHD", this.ApiClient.ParameterToString(isHD));
            }

            if (isUnaired != null)
            {
                request.AddQueryParameter("IsUnaired", this.ApiClient.ParameterToString(isUnaired));
            }

            if (minCommunityRating != null)
            {
                request.AddQueryParameter("MinCommunityRating", this.ApiClient.ParameterToString(minCommunityRating));
            }

            if (minCriticRating != null)
            {
                request.AddQueryParameter("MinCriticRating", this.ApiClient.ParameterToString(minCriticRating));
            }

            if (airedDuringSeason != null)
            {
                request.AddQueryParameter("AiredDuringSeason", this.ApiClient.ParameterToString(airedDuringSeason));
            }

            if (minPremiereDate != null)
            {
                request.AddQueryParameter("MinPremiereDate", this.ApiClient.ParameterToString(minPremiereDate));
            }

            if (minDateLastSaved != null)
            {
                request.AddQueryParameter("MinDateLastSaved", this.ApiClient.ParameterToString(minDateLastSaved));
            }

            if (minDateLastSavedForUser != null)
            {
                request.AddQueryParameter("MinDateLastSavedForUser", this.ApiClient.ParameterToString(minDateLastSavedForUser));
            }

            if (maxPremiereDate != null)
            {
                request.AddQueryParameter("MaxPremiereDate", this.ApiClient.ParameterToString(maxPremiereDate));
            }

            if (hasOverview != null)
            {
                request.AddQueryParameter("HasOverview", this.ApiClient.ParameterToString(hasOverview));
            }

            if (hasImdbId != null)
            {
                request.AddQueryParameter("HasImdbId", this.ApiClient.ParameterToString(hasImdbId));
            }

            if (hasTmdbId != null)
            {
                request.AddQueryParameter("HasTmdbId", this.ApiClient.ParameterToString(hasTmdbId));
            }

            if (hasTvdbId != null)
            {
                request.AddQueryParameter("HasTvdbId", this.ApiClient.ParameterToString(hasTvdbId));
            }

            if (excludeItemIds != null)
            {
                request.AddQueryParameter("ExcludeItemIds", this.ApiClient.ParameterToString(excludeItemIds));
            }

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (recursive != null)
            {
                request.AddQueryParameter("Recursive", this.ApiClient.ParameterToString(recursive));
            }

            if (searchTerm != null)
            {
                request.AddQueryParameter("SearchTerm", this.ApiClient.ParameterToString(searchTerm));
            }

            if (sortOrder != null)
            {
                request.AddQueryParameter("SortOrder", this.ApiClient.ParameterToString(sortOrder));
            }

            if (parentId != null)
            {
                request.AddQueryParameter("ParentId", this.ApiClient.ParameterToString(parentId));
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (excludeItemTypes != null)
            {
                request.AddQueryParameter("ExcludeItemTypes", this.ApiClient.ParameterToString(excludeItemTypes));
            }

            if (includeItemTypes != null)
            {
                request.AddQueryParameter("IncludeItemTypes", this.ApiClient.ParameterToString(includeItemTypes));
            }

            if (anyProviderIdEquals != null)
            {
                request.AddQueryParameter("AnyProviderIdEquals", this.ApiClient.ParameterToString(anyProviderIdEquals));
            }

            if (filters != null)
            {
                request.AddQueryParameter("Filters", this.ApiClient.ParameterToString(filters));
            }

            if (isFavorite != null)
            {
                request.AddQueryParameter("IsFavorite", this.ApiClient.ParameterToString(isFavorite));
            }

            if (isMovie != null)
            {
                request.AddQueryParameter("IsMovie", this.ApiClient.ParameterToString(isMovie));
            }

            if (isSeries != null)
            {
                request.AddQueryParameter("IsSeries", this.ApiClient.ParameterToString(isSeries));
            }

            if (isFolder != null)
            {
                request.AddQueryParameter("IsFolder", this.ApiClient.ParameterToString(isFolder));
            }

            if (isNews != null)
            {
                request.AddQueryParameter("IsNews", this.ApiClient.ParameterToString(isNews));
            }

            if (isKids != null)
            {
                request.AddQueryParameter("IsKids", this.ApiClient.ParameterToString(isKids));
            }

            if (isSports != null)
            {
                request.AddQueryParameter("IsSports", this.ApiClient.ParameterToString(isSports));
            }

            if (isNew != null)
            {
                request.AddQueryParameter("IsNew", this.ApiClient.ParameterToString(isNew));
            }

            if (isPremiere != null)
            {
                request.AddQueryParameter("IsPremiere", this.ApiClient.ParameterToString(isPremiere));
            }

            if (isNewOrPremiere != null)
            {
                request.AddQueryParameter("IsNewOrPremiere", this.ApiClient.ParameterToString(isNewOrPremiere));
            }

            if (isRepeat != null)
            {
                request.AddQueryParameter("IsRepeat", this.ApiClient.ParameterToString(isRepeat));
            }

            if (projectToMedia != null)
            {
                request.AddQueryParameter("ProjectToMedia", this.ApiClient.ParameterToString(projectToMedia));
            }

            if (mediaTypes != null)
            {
                request.AddQueryParameter("MediaTypes", this.ApiClient.ParameterToString(mediaTypes));
            }

            if (imageTypes != null)
            {
                request.AddQueryParameter("ImageTypes", this.ApiClient.ParameterToString(imageTypes));
            }

            if (sortBy != null)
            {
                request.AddQueryParameter("SortBy", this.ApiClient.ParameterToString(sortBy));
            }

            if (isPlayed != null)
            {
                request.AddQueryParameter("IsPlayed", this.ApiClient.ParameterToString(isPlayed));
            }

            if (genres != null)
            {
                request.AddQueryParameter("Genres", this.ApiClient.ParameterToString(genres));
            }

            if (officialRatings != null)
            {
                request.AddQueryParameter("OfficialRatings", this.ApiClient.ParameterToString(officialRatings));
            }

            if (tags != null)
            {
                request.AddQueryParameter("Tags", this.ApiClient.ParameterToString(tags));
            }

            if (excludeTags != null)
            {
                request.AddQueryParameter("ExcludeTags", this.ApiClient.ParameterToString(excludeTags));
            }

            if (years != null)
            {
                request.AddQueryParameter("Years", this.ApiClient.ParameterToString(years));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (person != null)
            {
                request.AddQueryParameter("Person", this.ApiClient.ParameterToString(person));
            }

            if (personIds != null)
            {
                request.AddQueryParameter("PersonIds", this.ApiClient.ParameterToString(personIds));
            }

            if (personTypes != null)
            {
                request.AddQueryParameter("PersonTypes", this.ApiClient.ParameterToString(personTypes));
            }

            if (studios != null)
            {
                request.AddQueryParameter("Studios", this.ApiClient.ParameterToString(studios));
            }

            if (studioIds != null)
            {
                request.AddQueryParameter("StudioIds", this.ApiClient.ParameterToString(studioIds));
            }

            if (artists != null)
            {
                request.AddQueryParameter("Artists", this.ApiClient.ParameterToString(artists));
            }

            if (artistIds != null)
            {
                request.AddQueryParameter("ArtistIds", this.ApiClient.ParameterToString(artistIds));
            }

            if (albums != null)
            {
                request.AddQueryParameter("Albums", this.ApiClient.ParameterToString(albums));
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            if (videoTypes != null)
            {
                request.AddQueryParameter("VideoTypes", this.ApiClient.ParameterToString(videoTypes));
            }

            if (containers != null)
            {
                request.AddQueryParameter("Containers", this.ApiClient.ParameterToString(containers));
            }

            if (audioCodecs != null)
            {
                request.AddQueryParameter("AudioCodecs", this.ApiClient.ParameterToString(audioCodecs));
            }

            if (audioLayouts != null)
            {
                request.AddQueryParameter("AudioLayouts", this.ApiClient.ParameterToString(audioLayouts));
            }

            if (videoCodecs != null)
            {
                request.AddQueryParameter("VideoCodecs", this.ApiClient.ParameterToString(videoCodecs));
            }

            if (extendedVideoTypes != null)
            {
                request.AddQueryParameter("ExtendedVideoTypes", this.ApiClient.ParameterToString(extendedVideoTypes));
            }

            if (subtitleCodecs != null)
            {
                request.AddQueryParameter("SubtitleCodecs", this.ApiClient.ParameterToString(subtitleCodecs));
            }

            if (path != null)
            {
                request.AddQueryParameter("Path", this.ApiClient.ParameterToString(path));
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (minOfficialRating != null)
            {
                request.AddQueryParameter("MinOfficialRating", this.ApiClient.ParameterToString(minOfficialRating));
            }

            if (isLocked != null)
            {
                request.AddQueryParameter("IsLocked", this.ApiClient.ParameterToString(isLocked));
            }

            if (isPlaceHolder != null)
            {
                request.AddQueryParameter("IsPlaceHolder", this.ApiClient.ParameterToString(isPlaceHolder));
            }

            if (hasOfficialRating != null)
            {
                request.AddQueryParameter("HasOfficialRating", this.ApiClient.ParameterToString(hasOfficialRating));
            }

            if (groupItemsIntoCollections != null)
            {
                request.AddQueryParameter("GroupItemsIntoCollections", this.ApiClient.ParameterToString(groupItemsIntoCollections));
            }

            if (is3D != null)
            {
                request.AddQueryParameter("Is3D", this.ApiClient.ParameterToString(is3D));
            }

            if (seriesStatus != null)
            {
                request.AddQueryParameter("SeriesStatus", this.ApiClient.ParameterToString(seriesStatus));
            }

            if (nameStartsWithOrGreater != null)
            {
                request.AddQueryParameter("NameStartsWithOrGreater", this.ApiClient.ParameterToString(nameStartsWithOrGreater));
            }

            if (artistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("ArtistStartsWithOrGreater", this.ApiClient.ParameterToString(artistStartsWithOrGreater));
            }

            if (albumArtistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("AlbumArtistStartsWithOrGreater", this.ApiClient.ParameterToString(albumArtistStartsWithOrGreater));
            }

            if (nameStartsWith != null)
            {
                request.AddQueryParameter("NameStartsWith", this.ApiClient.ParameterToString(nameStartsWith));
            }

            if (nameLessThan != null)
            {
                request.AddQueryParameter("NameLessThan", this.ApiClient.ParameterToString(nameLessThan));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a live tv recording
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Recording Id</param>
        /// <param name="userId">Optional attach user data. (optional)</param>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        public async Task<RestResponse<BaseItemDto>> GetLivetvRecordingsById (string id, string userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->GetLivetvRecordingsById");
            }
            
            var request = new RestRequest("/LiveTv/Recordings/{Id}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<BaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets recording folders
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">Optional filter by user and attach user data. (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BaseItemDto&gt;)</returns>
        public async Task<RestResponse<List<BaseItemDto>>> GetLivetvRecordingsFolders (string userId, string fields, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData)
        {
            var request = new RestRequest("/LiveTv/Recordings/Folders", Method.Get);

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<BaseItemDto>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets live tv recording groups
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async Task<RestResponse<QueryResultBaseItemDto>> GetLivetvRecordingsGroups ()
        {
            var request = new RestRequest("/LiveTv/Recordings/Groups", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultBaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets live tv recordings
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async Task<RestResponse<QueryResultBaseItemDto>> GetLivetvRecordingsSeries ()
        {
            var request = new RestRequest("/LiveTv/Recordings/Series", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultBaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets live tv series timers
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="sortBy">Optional. Sort by SortName or Priority (optional)</param>
        /// <param name="sortOrder">Optional. Sort in Ascending or Descending order (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultLiveTvSeriesTimerInfoDto)</returns>
        public async Task<RestResponse<QueryResultLiveTvSeriesTimerInfoDto>> GetLivetvSeriestimers (string sortBy, SortOrder sortOrder, int? startIndex, int? limit)
        {
            var request = new RestRequest("/LiveTv/SeriesTimers", Method.Get);

            if (sortBy != null)
            {
                request.AddQueryParameter("SortBy", this.ApiClient.ParameterToString(sortBy));
            }

            if (sortOrder != null)
            {
                request.AddQueryParameter("SortOrder", this.ApiClient.ParameterToString(sortOrder));
            }

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultLiveTvSeriesTimerInfoDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a live tv series timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Timer Id</param>
        /// <returns>Task of ApiResponse (LiveTvTimerInfoDto)</returns>
        public async Task<RestResponse<LiveTvTimerInfoDto>> GetLivetvSeriestimersById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->GetLivetvSeriestimersById");
            }
            
            var request = new RestRequest("/LiveTv/SeriesTimers/{Id}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<LiveTvTimerInfoDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets live tv timers
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="channelId">Optional filter by channel id. (optional)</param>
        /// <param name="seriesTimerId">Optional filter by timers belonging to a series timer (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultLiveTvTimerInfoDto)</returns>
        public async Task<RestResponse<QueryResultLiveTvTimerInfoDto>> GetLivetvTimers (string channelId, string seriesTimerId)
        {
            var request = new RestRequest("/LiveTv/Timers", Method.Get);

            if (channelId != null)
            {
                request.AddQueryParameter("ChannelId", this.ApiClient.ParameterToString(channelId));
            }

            if (seriesTimerId != null)
            {
                request.AddQueryParameter("SeriesTimerId", this.ApiClient.ParameterToString(seriesTimerId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultLiveTvTimerInfoDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a live tv timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Timer Id</param>
        /// <returns>Task of ApiResponse (LiveTvTimerInfoDto)</returns>
        public async Task<RestResponse<LiveTvTimerInfoDto>> GetLivetvTimersById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->GetLivetvTimersById");
            }
            
            var request = new RestRequest("/LiveTv/Timers/{Id}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<LiveTvTimerInfoDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets default values for a new timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="programId">Optional, to attach default values based on a program. (optional)</param>
        /// <returns>Task of ApiResponse (LiveTvSeriesTimerInfoDto)</returns>
        public async Task<RestResponse<LiveTvSeriesTimerInfoDto>> GetLivetvTimersDefaults (string programId)
        {
            var request = new RestRequest("/LiveTv/Timers/Defaults", Method.Get);

            if (programId != null)
            {
                request.AddQueryParameter("ProgramId", this.ApiClient.ParameterToString(programId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<LiveTvSeriesTimerInfoDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets tuner hosts
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <returns>Task of ApiResponse (List&lt;LiveTvTunerHostInfo&gt;)</returns>
        public async Task<RestResponse<List<LiveTvTunerHostInfo>>> GetLivetvTunerhosts ()
        {
            var request = new RestRequest("/LiveTv/TunerHosts", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<LiveTvTunerHostInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets tuner hosts
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="type">Type</param>
        /// <returns>Task of ApiResponse (LiveTvTunerHostInfo)</returns>
        public async Task<RestResponse<LiveTvTunerHostInfo>> GetLivetvTunerhostsDefaultByType (string type)
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling LiveTvServiceApi->GetLivetvTunerhostsDefaultByType");
            }
            
            var request = new RestRequest("/LiveTv/TunerHosts/Default/{Type}", Method.Get);

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<LiveTvTunerHostInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (List&lt;NameIdPair&gt;)</returns>
        public async Task<RestResponse<List<NameIdPair>>> GetLivetvTunerhostsTypes ()
        {
            var request = new RestRequest("/LiveTv/TunerHosts/Types", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<NameIdPair>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (List&lt;LiveTvTunerHostInfo&gt;)</returns>
        public async Task<RestResponse<List<LiveTvTunerHostInfo>>> GetLivetvTunersDiscvover ()
        {
            var request = new RestRequest("/LiveTv/Tuners/Discvover", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<LiveTvTunerHostInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="providerId">Provider id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadLivetvChannelmappingoptions (string providerId)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new ApiException("Missing required parameter 'providerId' when calling LiveTvServiceApi->HeadLivetvChannelmappingoptions");
            }
            
            var request = new RestRequest("/LiveTv/ChannelMappingOptions", Method.Head);

            if (providerId != null)
            {
                request.AddQueryParameter("ProviderId", this.ApiClient.ParameterToString(providerId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="providerId">Provider id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadLivetvChannelmappings (string providerId)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new ApiException("Missing required parameter 'providerId' when calling LiveTvServiceApi->HeadLivetvChannelmappings");
            }
            
            var request = new RestRequest("/LiveTv/ChannelMappings", Method.Head);

            if (providerId != null)
            {
                request.AddQueryParameter("ProviderId", this.ApiClient.ParameterToString(providerId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="providerId">Provider id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivetvChannelmappingoptions (string providerId)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new ApiException("Missing required parameter 'providerId' when calling LiveTvServiceApi->PostLivetvChannelmappingoptions");
            }
            
            var request = new RestRequest("/LiveTv/ChannelMappingOptions", Method.Post);

            if (providerId != null)
            {
                request.AddQueryParameter("ProviderId", this.ApiClient.ParameterToString(providerId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">SetChannelMapping</param>
        /// <param name="providerId">Provider id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivetvChannelmappings (ApiSetChannelMapping body, string providerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LiveTvServiceApi->PostLivetvChannelmappings");
            }
            
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new ApiException("Missing required parameter 'providerId' when calling LiveTvServiceApi->PostLivetvChannelmappings");
            }
            
            var request = new RestRequest("/LiveTv/ChannelMappings", Method.Post);

            if (providerId != null)
            {
                request.AddQueryParameter("ProviderId", this.ApiClient.ParameterToString(providerId));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Adds a listing provider
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">ListingsProviderInfo: </param>
        /// <returns>Task of ApiResponse (LiveTvListingsProviderInfo)</returns>
        public async Task<RestResponse<LiveTvListingsProviderInfo>> PostLivetvListingproviders (LiveTvListingsProviderInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LiveTvServiceApi->PostLivetvListingproviders");
            }
            
            var request = new RestRequest("/LiveTv/ListingProviders", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<LiveTvListingsProviderInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Deletes a listing provider
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Provider id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivetvListingprovidersDelete (string id)
        {
            var request = new RestRequest("/LiveTv/ListingProviders/Delete", Method.Post);

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Sets a channel disabled or not
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">SetChannelDisabled</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (QueryResultChannelManagementInfo)</returns>
        public async Task<RestResponse<QueryResultChannelManagementInfo>> PostLivetvManageChannelsByIdDisabled (ApiSetChannelDisabled body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LiveTvServiceApi->PostLivetvManageChannelsByIdDisabled");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->PostLivetvManageChannelsByIdDisabled");
            }
            
            var request = new RestRequest("/LiveTv/Manage/Channels/{Id}/Disabled", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultChannelManagementInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Sets a channel sort index
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">SetChannelSortIndex</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (QueryResultChannelManagementInfo)</returns>
        public async Task<RestResponse<QueryResultChannelManagementInfo>> PostLivetvManageChannelsByIdSortindex (ApiSetChannelSortIndex body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LiveTvServiceApi->PostLivetvManageChannelsByIdSortindex");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->PostLivetvManageChannelsByIdSortindex");
            }
            
            var request = new RestRequest("/LiveTv/Manage/Channels/{Id}/SortIndex", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultChannelManagementInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets available live tv epgs..
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">BaseItemsRequest: </param>
        /// <param name="channelIds">The channels to return guide information for. (optional)</param>
        /// <param name="artistType">Artist or AlbumArtist (optional)</param>
        /// <param name="maxOfficialRating">Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="hasThemeSong">Optional filter by items with theme songs. (optional)</param>
        /// <param name="hasThemeVideo">Optional filter by items with theme videos. (optional)</param>
        /// <param name="hasSubtitles">Optional filter by items with subtitles. (optional)</param>
        /// <param name="hasSpecialFeature">Optional filter by items with special features. (optional)</param>
        /// <param name="hasTrailer">Optional filter by items with trailers. (optional)</param>
        /// <param name="adjacentTo">Optional. Return items that are siblings of a supplied item. (optional)</param>
        /// <param name="minIndexNumber">Optional filter by minimum index number. (optional)</param>
        /// <param name="minStartDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxStartDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minEndDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxEndDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minPlayers">Optional filter by minimum number of game players. (optional)</param>
        /// <param name="maxPlayers">Optional filter by maximum number of game players. (optional)</param>
        /// <param name="parentIndexNumber">Optional filter by parent index number. (optional)</param>
        /// <param name="hasParentalRating">Optional filter by items that have or do not have a parental rating (optional)</param>
        /// <param name="isHD">Optional filter by items that are HD or not. (optional)</param>
        /// <param name="isUnaired">Optional filter by items that are unaired episodes or not. (optional)</param>
        /// <param name="minCommunityRating">Optional filter by minimum community rating. (optional)</param>
        /// <param name="minCriticRating">Optional filter by minimum critic rating. (optional)</param>
        /// <param name="airedDuringSeason">Gets all episodes that aired during a season, including specials. (optional)</param>
        /// <param name="minPremiereDate">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSaved">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="minDateLastSavedForUser">Optional. The minimum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="maxPremiereDate">Optional. The maximum premiere date. Format &#x3D; ISO (optional)</param>
        /// <param name="hasOverview">Optional filter by items that have an overview or not. (optional)</param>
        /// <param name="hasImdbId">Optional filter by items that have an imdb id or not. (optional)</param>
        /// <param name="hasTmdbId">Optional filter by items that have a tmdb id or not. (optional)</param>
        /// <param name="hasTvdbId">Optional filter by items that have a tvdb id or not. (optional)</param>
        /// <param name="excludeItemIds">Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="recursive">When searching within folders, this determines whether or not the search will be recursive. true/false (optional)</param>
        /// <param name="searchTerm">Enter a search term to perform a search request (optional)</param>
        /// <param name="sortOrder">Sort Order - Ascending,Descending (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="excludeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="anyProviderIdEquals">Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#x27;prov.id&#x27;, e.g. &#x27;imdb.tt123456&#x27;. This allows multiple, comma delimeted value pairs. (optional)</param>
        /// <param name="filters">Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)</param>
        /// <param name="isFavorite">Optional filter by items that are marked as favorite, or not. (optional)</param>
        /// <param name="isMovie">Optional filter for movies. (optional)</param>
        /// <param name="isSeries">Optional filter for series. (optional)</param>
        /// <param name="isFolder">Optional filter for folders. (optional)</param>
        /// <param name="isNews">Optional filter for news. (optional)</param>
        /// <param name="isKids">Optional filter for kids. (optional)</param>
        /// <param name="isSports">Optional filter for sports. (optional)</param>
        /// <param name="isNew">Optional filter for IsNew. (optional)</param>
        /// <param name="isPremiere">Optional filter for IsPremiere. (optional)</param>
        /// <param name="isNewOrPremiere">Optional filter for IsNewOrPremiere. (optional)</param>
        /// <param name="isRepeat">Optional filter for IsRepeat. (optional)</param>
        /// <param name="projectToMedia">ProjectToMedia (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="imageTypes">Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)</param>
        /// <param name="sortBy">Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)</param>
        /// <param name="isPlayed">Optional filter by items that are played, or not. (optional)</param>
        /// <param name="genres">Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="officialRatings">Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="tags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="excludeTags">Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="years">Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="person">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personIds">Optional. If specified, results will be filtered to include only those containing the specified person. (optional)</param>
        /// <param name="personTypes">Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)</param>
        /// <param name="studios">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="studioIds">Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artists">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="artistIds">Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="albums">Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)</param>
        /// <param name="ids">Optional. If specific items are needed, specify a list of item id&#x27;s to retrieve. This allows multiple, comma delimited. (optional)</param>
        /// <param name="videoTypes">Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)</param>
        /// <param name="containers">Optional filter by Container. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioCodecs">Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="audioLayouts">Optional filter by AudioLayout. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="videoCodecs">Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="extendedVideoTypes">Optional filter by ExtendedVideoType. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="subtitleCodecs">Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="path">Optional filter by Path. (optional)</param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="minOfficialRating">Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)</param>
        /// <param name="isLocked">Optional filter by items that are locked. (optional)</param>
        /// <param name="isPlaceHolder">Optional filter by items that are placeholders (optional)</param>
        /// <param name="hasOfficialRating">Optional filter by items that have official ratings (optional)</param>
        /// <param name="groupItemsIntoCollections">Whether or not to hide items behind their boxsets. (optional)</param>
        /// <param name="is3D">Optional filter by items that are 3D, or not. (optional)</param>
        /// <param name="seriesStatus">Optional filter by Series Status. Allows multiple, comma delimeted. (optional)</param>
        /// <param name="nameStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="artistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="albumArtistStartsWithOrGreater">Optional filter by items whose name is sorted equally or greater than a given input string. (optional)</param>
        /// <param name="nameStartsWith">Optional filter by items whose name is sorted equally than a given input string. (optional)</param>
        /// <param name="nameLessThan">Optional filter by items whose name is equally or lesser than a given input string. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivetvPrograms (ApiBaseItemsRequest body, string channelIds, string artistType, string maxOfficialRating, bool? hasThemeSong, bool? hasThemeVideo, bool? hasSubtitles, bool? hasSpecialFeature, bool? hasTrailer, string adjacentTo, int? minIndexNumber, string minStartDate, string maxStartDate, string minEndDate, string maxEndDate, int? minPlayers, int? maxPlayers, int? parentIndexNumber, bool? hasParentalRating, bool? isHD, bool? isUnaired, double? minCommunityRating, double? minCriticRating, int? airedDuringSeason, string minPremiereDate, string minDateLastSaved, string minDateLastSavedForUser, string maxPremiereDate, bool? hasOverview, bool? hasImdbId, bool? hasTmdbId, bool? hasTvdbId, string excludeItemIds, int? startIndex, int? limit, bool? recursive, string searchTerm, string sortOrder, string parentId, string fields, string excludeItemTypes, string includeItemTypes, string anyProviderIdEquals, string filters, bool? isFavorite, bool? isMovie, bool? isSeries, bool? isFolder, bool? isNews, bool? isKids, bool? isSports, bool? isNew, bool? isPremiere, bool? isNewOrPremiere, bool? isRepeat, bool? projectToMedia, string mediaTypes, string imageTypes, string sortBy, bool? isPlayed, string genres, string officialRatings, string tags, string excludeTags, string years, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes, string person, string personIds, string personTypes, string studios, string studioIds, string artists, string artistIds, string albums, string ids, string videoTypes, string containers, string audioCodecs, string audioLayouts, string videoCodecs, string extendedVideoTypes, string subtitleCodecs, string path, string userId, string minOfficialRating, bool? isLocked, bool? isPlaceHolder, bool? hasOfficialRating, bool? groupItemsIntoCollections, bool? is3D, string seriesStatus, string nameStartsWithOrGreater, string artistStartsWithOrGreater, string albumArtistStartsWithOrGreater, string nameStartsWith, string nameLessThan)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LiveTvServiceApi->PostLivetvPrograms");
            }
            
            var request = new RestRequest("/LiveTv/Programs", Method.Post);

            if (channelIds != null)
            {
                request.AddQueryParameter("ChannelIds", this.ApiClient.ParameterToString(channelIds));
            }

            if (artistType != null)
            {
                request.AddQueryParameter("ArtistType", this.ApiClient.ParameterToString(artistType));
            }

            if (maxOfficialRating != null)
            {
                request.AddQueryParameter("MaxOfficialRating", this.ApiClient.ParameterToString(maxOfficialRating));
            }

            if (hasThemeSong != null)
            {
                request.AddQueryParameter("HasThemeSong", this.ApiClient.ParameterToString(hasThemeSong));
            }

            if (hasThemeVideo != null)
            {
                request.AddQueryParameter("HasThemeVideo", this.ApiClient.ParameterToString(hasThemeVideo));
            }

            if (hasSubtitles != null)
            {
                request.AddQueryParameter("HasSubtitles", this.ApiClient.ParameterToString(hasSubtitles));
            }

            if (hasSpecialFeature != null)
            {
                request.AddQueryParameter("HasSpecialFeature", this.ApiClient.ParameterToString(hasSpecialFeature));
            }

            if (hasTrailer != null)
            {
                request.AddQueryParameter("HasTrailer", this.ApiClient.ParameterToString(hasTrailer));
            }

            if (adjacentTo != null)
            {
                request.AddQueryParameter("AdjacentTo", this.ApiClient.ParameterToString(adjacentTo));
            }

            if (minIndexNumber != null)
            {
                request.AddQueryParameter("MinIndexNumber", this.ApiClient.ParameterToString(minIndexNumber));
            }

            if (minStartDate != null)
            {
                request.AddQueryParameter("MinStartDate", this.ApiClient.ParameterToString(minStartDate));
            }

            if (maxStartDate != null)
            {
                request.AddQueryParameter("MaxStartDate", this.ApiClient.ParameterToString(maxStartDate));
            }

            if (minEndDate != null)
            {
                request.AddQueryParameter("MinEndDate", this.ApiClient.ParameterToString(minEndDate));
            }

            if (maxEndDate != null)
            {
                request.AddQueryParameter("MaxEndDate", this.ApiClient.ParameterToString(maxEndDate));
            }

            if (minPlayers != null)
            {
                request.AddQueryParameter("MinPlayers", this.ApiClient.ParameterToString(minPlayers));
            }

            if (maxPlayers != null)
            {
                request.AddQueryParameter("MaxPlayers", this.ApiClient.ParameterToString(maxPlayers));
            }

            if (parentIndexNumber != null)
            {
                request.AddQueryParameter("ParentIndexNumber", this.ApiClient.ParameterToString(parentIndexNumber));
            }

            if (hasParentalRating != null)
            {
                request.AddQueryParameter("HasParentalRating", this.ApiClient.ParameterToString(hasParentalRating));
            }

            if (isHD != null)
            {
                request.AddQueryParameter("IsHD", this.ApiClient.ParameterToString(isHD));
            }

            if (isUnaired != null)
            {
                request.AddQueryParameter("IsUnaired", this.ApiClient.ParameterToString(isUnaired));
            }

            if (minCommunityRating != null)
            {
                request.AddQueryParameter("MinCommunityRating", this.ApiClient.ParameterToString(minCommunityRating));
            }

            if (minCriticRating != null)
            {
                request.AddQueryParameter("MinCriticRating", this.ApiClient.ParameterToString(minCriticRating));
            }

            if (airedDuringSeason != null)
            {
                request.AddQueryParameter("AiredDuringSeason", this.ApiClient.ParameterToString(airedDuringSeason));
            }

            if (minPremiereDate != null)
            {
                request.AddQueryParameter("MinPremiereDate", this.ApiClient.ParameterToString(minPremiereDate));
            }

            if (minDateLastSaved != null)
            {
                request.AddQueryParameter("MinDateLastSaved", this.ApiClient.ParameterToString(minDateLastSaved));
            }

            if (minDateLastSavedForUser != null)
            {
                request.AddQueryParameter("MinDateLastSavedForUser", this.ApiClient.ParameterToString(minDateLastSavedForUser));
            }

            if (maxPremiereDate != null)
            {
                request.AddQueryParameter("MaxPremiereDate", this.ApiClient.ParameterToString(maxPremiereDate));
            }

            if (hasOverview != null)
            {
                request.AddQueryParameter("HasOverview", this.ApiClient.ParameterToString(hasOverview));
            }

            if (hasImdbId != null)
            {
                request.AddQueryParameter("HasImdbId", this.ApiClient.ParameterToString(hasImdbId));
            }

            if (hasTmdbId != null)
            {
                request.AddQueryParameter("HasTmdbId", this.ApiClient.ParameterToString(hasTmdbId));
            }

            if (hasTvdbId != null)
            {
                request.AddQueryParameter("HasTvdbId", this.ApiClient.ParameterToString(hasTvdbId));
            }

            if (excludeItemIds != null)
            {
                request.AddQueryParameter("ExcludeItemIds", this.ApiClient.ParameterToString(excludeItemIds));
            }

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (recursive != null)
            {
                request.AddQueryParameter("Recursive", this.ApiClient.ParameterToString(recursive));
            }

            if (searchTerm != null)
            {
                request.AddQueryParameter("SearchTerm", this.ApiClient.ParameterToString(searchTerm));
            }

            if (sortOrder != null)
            {
                request.AddQueryParameter("SortOrder", this.ApiClient.ParameterToString(sortOrder));
            }

            if (parentId != null)
            {
                request.AddQueryParameter("ParentId", this.ApiClient.ParameterToString(parentId));
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (excludeItemTypes != null)
            {
                request.AddQueryParameter("ExcludeItemTypes", this.ApiClient.ParameterToString(excludeItemTypes));
            }

            if (includeItemTypes != null)
            {
                request.AddQueryParameter("IncludeItemTypes", this.ApiClient.ParameterToString(includeItemTypes));
            }

            if (anyProviderIdEquals != null)
            {
                request.AddQueryParameter("AnyProviderIdEquals", this.ApiClient.ParameterToString(anyProviderIdEquals));
            }

            if (filters != null)
            {
                request.AddQueryParameter("Filters", this.ApiClient.ParameterToString(filters));
            }

            if (isFavorite != null)
            {
                request.AddQueryParameter("IsFavorite", this.ApiClient.ParameterToString(isFavorite));
            }

            if (isMovie != null)
            {
                request.AddQueryParameter("IsMovie", this.ApiClient.ParameterToString(isMovie));
            }

            if (isSeries != null)
            {
                request.AddQueryParameter("IsSeries", this.ApiClient.ParameterToString(isSeries));
            }

            if (isFolder != null)
            {
                request.AddQueryParameter("IsFolder", this.ApiClient.ParameterToString(isFolder));
            }

            if (isNews != null)
            {
                request.AddQueryParameter("IsNews", this.ApiClient.ParameterToString(isNews));
            }

            if (isKids != null)
            {
                request.AddQueryParameter("IsKids", this.ApiClient.ParameterToString(isKids));
            }

            if (isSports != null)
            {
                request.AddQueryParameter("IsSports", this.ApiClient.ParameterToString(isSports));
            }

            if (isNew != null)
            {
                request.AddQueryParameter("IsNew", this.ApiClient.ParameterToString(isNew));
            }

            if (isPremiere != null)
            {
                request.AddQueryParameter("IsPremiere", this.ApiClient.ParameterToString(isPremiere));
            }

            if (isNewOrPremiere != null)
            {
                request.AddQueryParameter("IsNewOrPremiere", this.ApiClient.ParameterToString(isNewOrPremiere));
            }

            if (isRepeat != null)
            {
                request.AddQueryParameter("IsRepeat", this.ApiClient.ParameterToString(isRepeat));
            }

            if (projectToMedia != null)
            {
                request.AddQueryParameter("ProjectToMedia", this.ApiClient.ParameterToString(projectToMedia));
            }

            if (mediaTypes != null)
            {
                request.AddQueryParameter("MediaTypes", this.ApiClient.ParameterToString(mediaTypes));
            }

            if (imageTypes != null)
            {
                request.AddQueryParameter("ImageTypes", this.ApiClient.ParameterToString(imageTypes));
            }

            if (sortBy != null)
            {
                request.AddQueryParameter("SortBy", this.ApiClient.ParameterToString(sortBy));
            }

            if (isPlayed != null)
            {
                request.AddQueryParameter("IsPlayed", this.ApiClient.ParameterToString(isPlayed));
            }

            if (genres != null)
            {
                request.AddQueryParameter("Genres", this.ApiClient.ParameterToString(genres));
            }

            if (officialRatings != null)
            {
                request.AddQueryParameter("OfficialRatings", this.ApiClient.ParameterToString(officialRatings));
            }

            if (tags != null)
            {
                request.AddQueryParameter("Tags", this.ApiClient.ParameterToString(tags));
            }

            if (excludeTags != null)
            {
                request.AddQueryParameter("ExcludeTags", this.ApiClient.ParameterToString(excludeTags));
            }

            if (years != null)
            {
                request.AddQueryParameter("Years", this.ApiClient.ParameterToString(years));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (person != null)
            {
                request.AddQueryParameter("Person", this.ApiClient.ParameterToString(person));
            }

            if (personIds != null)
            {
                request.AddQueryParameter("PersonIds", this.ApiClient.ParameterToString(personIds));
            }

            if (personTypes != null)
            {
                request.AddQueryParameter("PersonTypes", this.ApiClient.ParameterToString(personTypes));
            }

            if (studios != null)
            {
                request.AddQueryParameter("Studios", this.ApiClient.ParameterToString(studios));
            }

            if (studioIds != null)
            {
                request.AddQueryParameter("StudioIds", this.ApiClient.ParameterToString(studioIds));
            }

            if (artists != null)
            {
                request.AddQueryParameter("Artists", this.ApiClient.ParameterToString(artists));
            }

            if (artistIds != null)
            {
                request.AddQueryParameter("ArtistIds", this.ApiClient.ParameterToString(artistIds));
            }

            if (albums != null)
            {
                request.AddQueryParameter("Albums", this.ApiClient.ParameterToString(albums));
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            if (videoTypes != null)
            {
                request.AddQueryParameter("VideoTypes", this.ApiClient.ParameterToString(videoTypes));
            }

            if (containers != null)
            {
                request.AddQueryParameter("Containers", this.ApiClient.ParameterToString(containers));
            }

            if (audioCodecs != null)
            {
                request.AddQueryParameter("AudioCodecs", this.ApiClient.ParameterToString(audioCodecs));
            }

            if (audioLayouts != null)
            {
                request.AddQueryParameter("AudioLayouts", this.ApiClient.ParameterToString(audioLayouts));
            }

            if (videoCodecs != null)
            {
                request.AddQueryParameter("VideoCodecs", this.ApiClient.ParameterToString(videoCodecs));
            }

            if (extendedVideoTypes != null)
            {
                request.AddQueryParameter("ExtendedVideoTypes", this.ApiClient.ParameterToString(extendedVideoTypes));
            }

            if (subtitleCodecs != null)
            {
                request.AddQueryParameter("SubtitleCodecs", this.ApiClient.ParameterToString(subtitleCodecs));
            }

            if (path != null)
            {
                request.AddQueryParameter("Path", this.ApiClient.ParameterToString(path));
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (minOfficialRating != null)
            {
                request.AddQueryParameter("MinOfficialRating", this.ApiClient.ParameterToString(minOfficialRating));
            }

            if (isLocked != null)
            {
                request.AddQueryParameter("IsLocked", this.ApiClient.ParameterToString(isLocked));
            }

            if (isPlaceHolder != null)
            {
                request.AddQueryParameter("IsPlaceHolder", this.ApiClient.ParameterToString(isPlaceHolder));
            }

            if (hasOfficialRating != null)
            {
                request.AddQueryParameter("HasOfficialRating", this.ApiClient.ParameterToString(hasOfficialRating));
            }

            if (groupItemsIntoCollections != null)
            {
                request.AddQueryParameter("GroupItemsIntoCollections", this.ApiClient.ParameterToString(groupItemsIntoCollections));
            }

            if (is3D != null)
            {
                request.AddQueryParameter("Is3D", this.ApiClient.ParameterToString(is3D));
            }

            if (seriesStatus != null)
            {
                request.AddQueryParameter("SeriesStatus", this.ApiClient.ParameterToString(seriesStatus));
            }

            if (nameStartsWithOrGreater != null)
            {
                request.AddQueryParameter("NameStartsWithOrGreater", this.ApiClient.ParameterToString(nameStartsWithOrGreater));
            }

            if (artistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("ArtistStartsWithOrGreater", this.ApiClient.ParameterToString(artistStartsWithOrGreater));
            }

            if (albumArtistStartsWithOrGreater != null)
            {
                request.AddQueryParameter("AlbumArtistStartsWithOrGreater", this.ApiClient.ParameterToString(albumArtistStartsWithOrGreater));
            }

            if (nameStartsWith != null)
            {
                request.AddQueryParameter("NameStartsWith", this.ApiClient.ParameterToString(nameStartsWith));
            }

            if (nameLessThan != null)
            {
                request.AddQueryParameter("NameLessThan", this.ApiClient.ParameterToString(nameLessThan));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Deletes a live tv recording
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Recording Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivetvRecordingsByIdDelete (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->PostLivetvRecordingsByIdDelete");
            }
            
            var request = new RestRequest("/LiveTv/Recordings/{Id}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Creates a live tv series timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">SeriesTimerInfo: </param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivetvSeriestimers (LiveTvSeriesTimerInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LiveTvServiceApi->PostLivetvSeriestimers");
            }
            
            var request = new RestRequest("/LiveTv/SeriesTimers", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates a live tv series timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">SeriesTimerInfo: </param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivetvSeriestimersById (LiveTvSeriesTimerInfo body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LiveTvServiceApi->PostLivetvSeriestimersById");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->PostLivetvSeriestimersById");
            }
            
            var request = new RestRequest("/LiveTv/SeriesTimers/{Id}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Cancels a live tv series timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Timer Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivetvSeriestimersByIdDelete (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->PostLivetvSeriestimersByIdDelete");
            }
            
            var request = new RestRequest("/LiveTv/SeriesTimers/{Id}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Creates a live tv timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">TimerInfoDto: </param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivetvTimers (LiveTvTimerInfoDto body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LiveTvServiceApi->PostLivetvTimers");
            }
            
            var request = new RestRequest("/LiveTv/Timers", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates a live tv timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">TimerInfoDto: </param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivetvTimersById (LiveTvTimerInfoDto body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LiveTvServiceApi->PostLivetvTimersById");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->PostLivetvTimersById");
            }
            
            var request = new RestRequest("/LiveTv/Timers/{Id}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Cancels a live tv timer
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Timer Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivetvTimersByIdDelete (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->PostLivetvTimersByIdDelete");
            }
            
            var request = new RestRequest("/LiveTv/Timers/{Id}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Adds a tuner host
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">TunerHostInfo: </param>
        /// <returns>Task of ApiResponse (LiveTvTunerHostInfo)</returns>
        public async Task<RestResponse<LiveTvTunerHostInfo>> PostLivetvTunerhosts (LiveTvTunerHostInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LiveTvServiceApi->PostLivetvTunerhosts");
            }
            
            var request = new RestRequest("/LiveTv/TunerHosts", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<LiveTvTunerHostInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Deletes a tuner host
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Tuner host id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivetvTunerhostsDelete (string id)
        {
            var request = new RestRequest("/LiveTv/TunerHosts/Delete", Method.Post);

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Resets a tv tuner
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Tuner Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLivetvTunersByIdReset (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling LiveTvServiceApi->PostLivetvTunersByIdReset");
            }
            
            var request = new RestRequest("/LiveTv/Tuners/{Id}/Reset", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="providerId">Provider id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PutLivetvChannelmappingoptions (string providerId)
        {
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new ApiException("Missing required parameter 'providerId' when calling LiveTvServiceApi->PutLivetvChannelmappingoptions");
            }
            
            var request = new RestRequest("/LiveTv/ChannelMappingOptions", Method.Put);

            if (providerId != null)
            {
                request.AddQueryParameter("ProviderId", this.ApiClient.ParameterToString(providerId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">SetChannelMapping</param>
        /// <param name="providerId">Provider id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PutLivetvChannelmappings (ApiSetChannelMapping body, string providerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LiveTvServiceApi->PutLivetvChannelmappings");
            }
            
            // verify the required parameter 'providerId' is set
            if (providerId == null)
            {
                throw new ApiException("Missing required parameter 'providerId' when calling LiveTvServiceApi->PutLivetvChannelmappings");
            }
            
            var request = new RestRequest("/LiveTv/ChannelMappings", Method.Put);

            if (providerId != null)
            {
                request.AddQueryParameter("ProviderId", this.ApiClient.ParameterToString(providerId));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
