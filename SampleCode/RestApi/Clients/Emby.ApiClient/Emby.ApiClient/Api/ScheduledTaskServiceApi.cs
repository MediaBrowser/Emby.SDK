// <copyright file="ScheduledTaskServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class ScheduledTaskServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledTaskServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScheduledTaskServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Stops a scheduled task
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteScheduledtasksRunningById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ScheduledTaskServiceApi->DeleteScheduledtasksRunningById");
            }
            
            var request = new RestRequest("/ScheduledTasks/Running/{Id}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets scheduled tasks
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="isHidden">Optional filter tasks that are hidden, or not. (optional)</param>
        /// <param name="isEnabled">Optional filter tasks that are enabled, or not. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        public async Task<RestResponse<List<TaskInfo>>> GetScheduledtasks (bool? isHidden, bool? isEnabled)
        {
            var request = new RestRequest("/ScheduledTasks", Method.Get);

            if (isHidden != null)
            {
                request.AddQueryParameter("IsHidden", this.ApiClient.ParameterToString(isHidden));
            }

            if (isEnabled != null)
            {
                request.AddQueryParameter("IsEnabled", this.ApiClient.ParameterToString(isEnabled));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<TaskInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a scheduled task, by Id
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async Task<RestResponse<TaskInfo>> GetScheduledtasksById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ScheduledTaskServiceApi->GetScheduledtasksById");
            }
            
            var request = new RestRequest("/ScheduledTasks/{Id}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<TaskInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates the triggers for a scheduled task
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">List&#x60;1: </param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostScheduledtasksByIdTriggers (List<TaskTriggerInfo> body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ScheduledTaskServiceApi->PostScheduledtasksByIdTriggers");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ScheduledTaskServiceApi->PostScheduledtasksByIdTriggers");
            }
            
            var request = new RestRequest("/ScheduledTasks/{Id}/Triggers", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Starts a scheduled task
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostScheduledtasksRunningById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ScheduledTaskServiceApi->PostScheduledtasksRunningById");
            }
            
            var request = new RestRequest("/ScheduledTasks/Running/{Id}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Stops a scheduled task
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostScheduledtasksRunningByIdDelete (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ScheduledTaskServiceApi->PostScheduledtasksRunningByIdDelete");
            }
            
            var request = new RestRequest("/ScheduledTasks/Running/{Id}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
