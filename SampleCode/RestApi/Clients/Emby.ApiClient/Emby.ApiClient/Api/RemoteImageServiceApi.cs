// <copyright file="RemoteImageServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class RemoteImageServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteImageServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RemoteImageServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Gets a remote image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="imageUrl">The image url</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetImagesRemote (string imageUrl)
        {
            // verify the required parameter 'imageUrl' is set
            if (imageUrl == null)
            {
                throw new ApiException("Missing required parameter 'imageUrl' when calling RemoteImageServiceApi->GetImagesRemote");
            }
            
            var request = new RestRequest("/Images/Remote", Method.Get);

            if (imageUrl != null)
            {
                request.AddQueryParameter("ImageUrl", this.ApiClient.ParameterToString(imageUrl));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets available remote images for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="type">The image type (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="providerName">Optional. The image provider to use (optional)</param>
        /// <param name="includeAllLanguages">Optional. (optional)</param>
        /// <returns>Task of ApiResponse (RemoteImageResult)</returns>
        public async Task<RestResponse<RemoteImageResult>> GetItemsByIdRemoteimages (string id, ImageType type, int? startIndex, int? limit, string providerName, bool? includeAllLanguages)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling RemoteImageServiceApi->GetItemsByIdRemoteimages");
            }
            
            var request = new RestRequest("/Items/{Id}/RemoteImages", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddQueryParameter("Type", this.ApiClient.ParameterToString(type));
            }

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (providerName != null)
            {
                request.AddQueryParameter("ProviderName", this.ApiClient.ParameterToString(providerName));
            }

            if (includeAllLanguages != null)
            {
                request.AddQueryParameter("IncludeAllLanguages", this.ApiClient.ParameterToString(includeAllLanguages));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<RemoteImageResult>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets available remote image providers for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (List&lt;ImageProviderInfo&gt;)</returns>
        public async Task<RestResponse<List<ImageProviderInfo>>> GetItemsByIdRemoteimagesProviders (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling RemoteImageServiceApi->GetItemsByIdRemoteimagesProviders");
            }
            
            var request = new RestRequest("/Items/{Id}/RemoteImages/Providers", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<ImageProviderInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Downloads a remote image for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="type">The image type</param>
        /// <param name="providerName">The image provider (optional)</param>
        /// <param name="imageUrl">The image url (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsByIdRemoteimagesDownload (string id, ImageType type, string providerName, string imageUrl)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling RemoteImageServiceApi->PostItemsByIdRemoteimagesDownload");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling RemoteImageServiceApi->PostItemsByIdRemoteimagesDownload");
            }
            
            var request = new RestRequest("/Items/{Id}/RemoteImages/Download", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddQueryParameter("Type", this.ApiClient.ParameterToString(type));
            }

            if (providerName != null)
            {
                request.AddQueryParameter("ProviderName", this.ApiClient.ParameterToString(providerName));
            }

            if (imageUrl != null)
            {
                request.AddQueryParameter("ImageUrl", this.ApiClient.ParameterToString(imageUrl));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
