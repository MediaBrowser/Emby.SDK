// <copyright file="CollectionServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class CollectionServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Removes items from a collection
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="ids">Item id, comma delimited</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteCollectionsByIdItems (string ids, string id)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new ApiException("Missing required parameter 'ids' when calling CollectionServiceApi->DeleteCollectionsByIdItems");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling CollectionServiceApi->DeleteCollectionsByIdItems");
            }
            
            var request = new RestRequest("/Collections/{Id}/Items", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Creates a new collection
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="isLocked">Whether or not to lock the new collection. (optional)</param>
        /// <param name="name">The name of the new collection. (optional)</param>
        /// <param name="parentId">Optional - create the collection within a specific folder (optional)</param>
        /// <param name="ids">Item Ids to add to the collection (optional)</param>
        /// <returns>Task of ApiResponse (CollectionsCollectionCreationResult)</returns>
        public async Task<RestResponse<CollectionsCollectionCreationResult>> PostCollections (bool? isLocked, string name, string parentId, string ids)
        {
            var request = new RestRequest("/Collections", Method.Post);

            if (isLocked != null)
            {
                request.AddQueryParameter("IsLocked", this.ApiClient.ParameterToString(isLocked));
            }

            if (name != null)
            {
                request.AddQueryParameter("Name", this.ApiClient.ParameterToString(name));
            }

            if (parentId != null)
            {
                request.AddQueryParameter("ParentId", this.ApiClient.ParameterToString(parentId));
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<CollectionsCollectionCreationResult>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Adds items to a collection
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="ids">Item id, comma delimited</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostCollectionsByIdItems (string ids, string id)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new ApiException("Missing required parameter 'ids' when calling CollectionServiceApi->PostCollectionsByIdItems");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling CollectionServiceApi->PostCollectionsByIdItems");
            }
            
            var request = new RestRequest("/Collections/{Id}/Items", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Removes items from a collection
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="ids">Item id, comma delimited</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostCollectionsByIdItemsDelete (string ids, string id)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new ApiException("Missing required parameter 'ids' when calling CollectionServiceApi->PostCollectionsByIdItemsDelete");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling CollectionServiceApi->PostCollectionsByIdItemsDelete");
            }
            
            var request = new RestRequest("/Collections/{Id}/Items/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
