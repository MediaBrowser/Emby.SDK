// <copyright file="ItemRefreshServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class ItemRefreshServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemRefreshServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemRefreshServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Refreshes metadata for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="recursive">Indicates if the refresh should occur recursively. (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="metadataRefreshMode">Specifies the metadata refresh mode (optional)</param>
        /// <param name="imageRefreshMode">Specifies the image refresh mode (optional)</param>
        /// <param name="replaceAllMetadata">Determines if metadata should be replaced. Only applicable if mode is FullRefresh (optional)</param>
        /// <param name="replaceAllImages">Determines if images should be replaced. Only applicable if mode is FullRefresh (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsByIdRefresh (bool? recursive, string id, MetadataRefreshMode metadataRefreshMode, MetadataRefreshMode imageRefreshMode, bool? replaceAllMetadata, bool? replaceAllImages)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ItemRefreshServiceApi->PostItemsByIdRefresh");
            }
            
            var request = new RestRequest("/Items/{Id}/Refresh", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (recursive != null)
            {
                request.AddQueryParameter("Recursive", this.ApiClient.ParameterToString(recursive));
            }

            if (metadataRefreshMode != null)
            {
                request.AddQueryParameter("MetadataRefreshMode", this.ApiClient.ParameterToString(metadataRefreshMode));
            }

            if (imageRefreshMode != null)
            {
                request.AddQueryParameter("ImageRefreshMode", this.ApiClient.ParameterToString(imageRefreshMode));
            }

            if (replaceAllMetadata != null)
            {
                request.AddQueryParameter("ReplaceAllMetadata", this.ApiClient.ParameterToString(replaceAllMetadata));
            }

            if (replaceAllImages != null)
            {
                request.AddQueryParameter("ReplaceAllImages", this.ApiClient.ParameterToString(replaceAllImages));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
