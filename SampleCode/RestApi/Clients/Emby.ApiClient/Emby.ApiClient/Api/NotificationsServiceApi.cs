// <copyright file="NotificationsServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class NotificationsServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationsServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Gets notification types
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (List&lt;NotificationCategoryInfo&gt;)</returns>
        public async Task<RestResponse<List<NotificationCategoryInfo>>> GetNotificationsTypes ()
        {
            var request = new RestRequest("/Notifications/Types", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<NotificationCategoryInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Sends a notification to all admin users
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">The notification&#x27;s name</param>
        /// <param name="description">The notification&#x27;s description</param>
        /// <param name="imageUrl">The notification&#x27;s image url (optional)</param>
        /// <param name="url">The notification&#x27;s info url (optional)</param>
        /// <param name="level">The notification level (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostNotificationsAdmin (string name, string description, string imageUrl, string url, string level)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling NotificationsServiceApi->PostNotificationsAdmin");
            }
            
            // verify the required parameter 'description' is set
            if (description == null)
            {
                throw new ApiException("Missing required parameter 'description' when calling NotificationsServiceApi->PostNotificationsAdmin");
            }
            
            var request = new RestRequest("/Notifications/Admin", Method.Post);

            if (name != null)
            {
                request.AddQueryParameter("Name", this.ApiClient.ParameterToString(name));
            }

            if (description != null)
            {
                request.AddQueryParameter("Description", this.ApiClient.ParameterToString(description));
            }

            if (imageUrl != null)
            {
                request.AddQueryParameter("ImageUrl", this.ApiClient.ParameterToString(imageUrl));
            }

            if (url != null)
            {
                request.AddQueryParameter("Url", this.ApiClient.ParameterToString(url));
            }

            if (level != null)
            {
                request.AddQueryParameter("Level", this.ApiClient.ParameterToString(level));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
