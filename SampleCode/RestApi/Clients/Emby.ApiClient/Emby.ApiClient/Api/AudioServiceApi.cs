// <copyright file="AudioServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class AudioServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AudioServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AudioServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="streamFileName"></param>
        /// <param name="id">Item Id</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="container">Container</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100 (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="maxWidth">Optional. The maximum horizontal resolution of the encoded video. (optional)</param>
        /// <param name="maxHeight">Optional. The maximum vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetAudioByIdByStreamfilename (string deviceProfileId, string streamFileName, string id, string deviceId, string container, string audioCodec, bool? enableAutoStreamCopy, int? audioSampleRate, int? audioBitRate, int? audioChannels, int? maxAudioChannels, bool? _static, bool? copyTimestamps, long? startTimeTicks, int? width, int? height, int? maxWidth, int? maxHeight, int? videoBitRate, int? subtitleStreamIndex, SubtitleDeliveryMethod subtitleMethod, int? maxVideoBitDepth, string videoCodec, int? audioStreamIndex, int? videoStreamIndex)
        {
            // verify the required parameter 'streamFileName' is set
            if (streamFileName == null)
            {
                throw new ApiException("Missing required parameter 'streamFileName' when calling AudioServiceApi->GetAudioByIdByStreamfilename");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling AudioServiceApi->GetAudioByIdByStreamfilename");
            }
            
            // verify the required parameter 'container' is set
            if (container == null)
            {
                throw new ApiException("Missing required parameter 'container' when calling AudioServiceApi->GetAudioByIdByStreamfilename");
            }
            
            var request = new RestRequest("/Audio/{Id}/{StreamFileName}", Method.Get);

            if (streamFileName != null)
            {
                request.AddParameter("StreamFileName", this.ApiClient.ParameterToString(streamFileName), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (deviceProfileId != null)
            {
                request.AddQueryParameter("DeviceProfileId", this.ApiClient.ParameterToString(deviceProfileId));
            }

            if (deviceId != null)
            {
                request.AddQueryParameter("DeviceId", this.ApiClient.ParameterToString(deviceId));
            }

            if (container != null)
            {
                request.AddQueryParameter("Container", this.ApiClient.ParameterToString(container));
            }

            if (audioCodec != null)
            {
                request.AddQueryParameter("AudioCodec", this.ApiClient.ParameterToString(audioCodec));
            }

            if (enableAutoStreamCopy != null)
            {
                request.AddQueryParameter("EnableAutoStreamCopy", this.ApiClient.ParameterToString(enableAutoStreamCopy));
            }

            if (audioSampleRate != null)
            {
                request.AddQueryParameter("AudioSampleRate", this.ApiClient.ParameterToString(audioSampleRate));
            }

            if (audioBitRate != null)
            {
                request.AddQueryParameter("AudioBitRate", this.ApiClient.ParameterToString(audioBitRate));
            }

            if (audioChannels != null)
            {
                request.AddQueryParameter("AudioChannels", this.ApiClient.ParameterToString(audioChannels));
            }

            if (maxAudioChannels != null)
            {
                request.AddQueryParameter("MaxAudioChannels", this.ApiClient.ParameterToString(maxAudioChannels));
            }

            if (_static != null)
            {
                request.AddQueryParameter("Static", this.ApiClient.ParameterToString(_static));
            }

            if (copyTimestamps != null)
            {
                request.AddQueryParameter("CopyTimestamps", this.ApiClient.ParameterToString(copyTimestamps));
            }

            if (startTimeTicks != null)
            {
                request.AddQueryParameter("StartTimeTicks", this.ApiClient.ParameterToString(startTimeTicks));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (videoBitRate != null)
            {
                request.AddQueryParameter("VideoBitRate", this.ApiClient.ParameterToString(videoBitRate));
            }

            if (subtitleStreamIndex != null)
            {
                request.AddQueryParameter("SubtitleStreamIndex", this.ApiClient.ParameterToString(subtitleStreamIndex));
            }

            if (subtitleMethod != null)
            {
                request.AddQueryParameter("SubtitleMethod", this.ApiClient.ParameterToString(subtitleMethod));
            }

            if (maxVideoBitDepth != null)
            {
                request.AddQueryParameter("MaxVideoBitDepth", this.ApiClient.ParameterToString(maxVideoBitDepth));
            }

            if (videoCodec != null)
            {
                request.AddQueryParameter("VideoCodec", this.ApiClient.ParameterToString(videoCodec));
            }

            if (audioStreamIndex != null)
            {
                request.AddQueryParameter("AudioStreamIndex", this.ApiClient.ParameterToString(audioStreamIndex));
            }

            if (videoStreamIndex != null)
            {
                request.AddQueryParameter("VideoStreamIndex", this.ApiClient.ParameterToString(videoStreamIndex));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="container">Container</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100 (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="maxWidth">Optional. The maximum horizontal resolution of the encoded video. (optional)</param>
        /// <param name="maxHeight">Optional. The maximum vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetAudioByIdStream (string deviceProfileId, string id, string deviceId, string container, string audioCodec, bool? enableAutoStreamCopy, int? audioSampleRate, int? audioBitRate, int? audioChannels, int? maxAudioChannels, bool? _static, bool? copyTimestamps, long? startTimeTicks, int? width, int? height, int? maxWidth, int? maxHeight, int? videoBitRate, int? subtitleStreamIndex, SubtitleDeliveryMethod subtitleMethod, int? maxVideoBitDepth, string videoCodec, int? audioStreamIndex, int? videoStreamIndex)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling AudioServiceApi->GetAudioByIdStream");
            }
            
            // verify the required parameter 'container' is set
            if (container == null)
            {
                throw new ApiException("Missing required parameter 'container' when calling AudioServiceApi->GetAudioByIdStream");
            }
            
            var request = new RestRequest("/Audio/{Id}/stream", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (deviceProfileId != null)
            {
                request.AddQueryParameter("DeviceProfileId", this.ApiClient.ParameterToString(deviceProfileId));
            }

            if (deviceId != null)
            {
                request.AddQueryParameter("DeviceId", this.ApiClient.ParameterToString(deviceId));
            }

            if (container != null)
            {
                request.AddQueryParameter("Container", this.ApiClient.ParameterToString(container));
            }

            if (audioCodec != null)
            {
                request.AddQueryParameter("AudioCodec", this.ApiClient.ParameterToString(audioCodec));
            }

            if (enableAutoStreamCopy != null)
            {
                request.AddQueryParameter("EnableAutoStreamCopy", this.ApiClient.ParameterToString(enableAutoStreamCopy));
            }

            if (audioSampleRate != null)
            {
                request.AddQueryParameter("AudioSampleRate", this.ApiClient.ParameterToString(audioSampleRate));
            }

            if (audioBitRate != null)
            {
                request.AddQueryParameter("AudioBitRate", this.ApiClient.ParameterToString(audioBitRate));
            }

            if (audioChannels != null)
            {
                request.AddQueryParameter("AudioChannels", this.ApiClient.ParameterToString(audioChannels));
            }

            if (maxAudioChannels != null)
            {
                request.AddQueryParameter("MaxAudioChannels", this.ApiClient.ParameterToString(maxAudioChannels));
            }

            if (_static != null)
            {
                request.AddQueryParameter("Static", this.ApiClient.ParameterToString(_static));
            }

            if (copyTimestamps != null)
            {
                request.AddQueryParameter("CopyTimestamps", this.ApiClient.ParameterToString(copyTimestamps));
            }

            if (startTimeTicks != null)
            {
                request.AddQueryParameter("StartTimeTicks", this.ApiClient.ParameterToString(startTimeTicks));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (videoBitRate != null)
            {
                request.AddQueryParameter("VideoBitRate", this.ApiClient.ParameterToString(videoBitRate));
            }

            if (subtitleStreamIndex != null)
            {
                request.AddQueryParameter("SubtitleStreamIndex", this.ApiClient.ParameterToString(subtitleStreamIndex));
            }

            if (subtitleMethod != null)
            {
                request.AddQueryParameter("SubtitleMethod", this.ApiClient.ParameterToString(subtitleMethod));
            }

            if (maxVideoBitDepth != null)
            {
                request.AddQueryParameter("MaxVideoBitDepth", this.ApiClient.ParameterToString(maxVideoBitDepth));
            }

            if (videoCodec != null)
            {
                request.AddQueryParameter("VideoCodec", this.ApiClient.ParameterToString(videoCodec));
            }

            if (audioStreamIndex != null)
            {
                request.AddQueryParameter("AudioStreamIndex", this.ApiClient.ParameterToString(audioStreamIndex));
            }

            if (videoStreamIndex != null)
            {
                request.AddQueryParameter("VideoStreamIndex", this.ApiClient.ParameterToString(videoStreamIndex));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="container">Container</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100 (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="maxWidth">Optional. The maximum horizontal resolution of the encoded video. (optional)</param>
        /// <param name="maxHeight">Optional. The maximum vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetAudioByIdStreamByContainer (string deviceProfileId, string id, string deviceId, string container, string audioCodec, bool? enableAutoStreamCopy, int? audioSampleRate, int? audioBitRate, int? audioChannels, int? maxAudioChannels, bool? _static, bool? copyTimestamps, long? startTimeTicks, int? width, int? height, int? maxWidth, int? maxHeight, int? videoBitRate, int? subtitleStreamIndex, SubtitleDeliveryMethod subtitleMethod, int? maxVideoBitDepth, string videoCodec, int? audioStreamIndex, int? videoStreamIndex)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling AudioServiceApi->GetAudioByIdStreamByContainer");
            }
            
            // verify the required parameter 'container' is set
            if (container == null)
            {
                throw new ApiException("Missing required parameter 'container' when calling AudioServiceApi->GetAudioByIdStreamByContainer");
            }
            
            var request = new RestRequest("/Audio/{Id}/stream.{Container}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (container != null)
            {
                request.AddParameter("Container", this.ApiClient.ParameterToString(container), ParameterType.UrlSegment);
            }

            if (deviceProfileId != null)
            {
                request.AddQueryParameter("DeviceProfileId", this.ApiClient.ParameterToString(deviceProfileId));
            }

            if (deviceId != null)
            {
                request.AddQueryParameter("DeviceId", this.ApiClient.ParameterToString(deviceId));
            }

            if (audioCodec != null)
            {
                request.AddQueryParameter("AudioCodec", this.ApiClient.ParameterToString(audioCodec));
            }

            if (enableAutoStreamCopy != null)
            {
                request.AddQueryParameter("EnableAutoStreamCopy", this.ApiClient.ParameterToString(enableAutoStreamCopy));
            }

            if (audioSampleRate != null)
            {
                request.AddQueryParameter("AudioSampleRate", this.ApiClient.ParameterToString(audioSampleRate));
            }

            if (audioBitRate != null)
            {
                request.AddQueryParameter("AudioBitRate", this.ApiClient.ParameterToString(audioBitRate));
            }

            if (audioChannels != null)
            {
                request.AddQueryParameter("AudioChannels", this.ApiClient.ParameterToString(audioChannels));
            }

            if (maxAudioChannels != null)
            {
                request.AddQueryParameter("MaxAudioChannels", this.ApiClient.ParameterToString(maxAudioChannels));
            }

            if (_static != null)
            {
                request.AddQueryParameter("Static", this.ApiClient.ParameterToString(_static));
            }

            if (copyTimestamps != null)
            {
                request.AddQueryParameter("CopyTimestamps", this.ApiClient.ParameterToString(copyTimestamps));
            }

            if (startTimeTicks != null)
            {
                request.AddQueryParameter("StartTimeTicks", this.ApiClient.ParameterToString(startTimeTicks));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (videoBitRate != null)
            {
                request.AddQueryParameter("VideoBitRate", this.ApiClient.ParameterToString(videoBitRate));
            }

            if (subtitleStreamIndex != null)
            {
                request.AddQueryParameter("SubtitleStreamIndex", this.ApiClient.ParameterToString(subtitleStreamIndex));
            }

            if (subtitleMethod != null)
            {
                request.AddQueryParameter("SubtitleMethod", this.ApiClient.ParameterToString(subtitleMethod));
            }

            if (maxVideoBitDepth != null)
            {
                request.AddQueryParameter("MaxVideoBitDepth", this.ApiClient.ParameterToString(maxVideoBitDepth));
            }

            if (videoCodec != null)
            {
                request.AddQueryParameter("VideoCodec", this.ApiClient.ParameterToString(videoCodec));
            }

            if (audioStreamIndex != null)
            {
                request.AddQueryParameter("AudioStreamIndex", this.ApiClient.ParameterToString(audioStreamIndex));
            }

            if (videoStreamIndex != null)
            {
                request.AddQueryParameter("VideoStreamIndex", this.ApiClient.ParameterToString(videoStreamIndex));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="streamFileName"></param>
        /// <param name="id">Item Id</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="container">Container</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100 (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="maxWidth">Optional. The maximum horizontal resolution of the encoded video. (optional)</param>
        /// <param name="maxHeight">Optional. The maximum vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadAudioByIdByStreamfilename (string deviceProfileId, string streamFileName, string id, string deviceId, string container, string audioCodec, bool? enableAutoStreamCopy, int? audioSampleRate, int? audioBitRate, int? audioChannels, int? maxAudioChannels, bool? _static, bool? copyTimestamps, long? startTimeTicks, int? width, int? height, int? maxWidth, int? maxHeight, int? videoBitRate, int? subtitleStreamIndex, SubtitleDeliveryMethod subtitleMethod, int? maxVideoBitDepth, string videoCodec, int? audioStreamIndex, int? videoStreamIndex)
        {
            // verify the required parameter 'streamFileName' is set
            if (streamFileName == null)
            {
                throw new ApiException("Missing required parameter 'streamFileName' when calling AudioServiceApi->HeadAudioByIdByStreamfilename");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling AudioServiceApi->HeadAudioByIdByStreamfilename");
            }
            
            // verify the required parameter 'container' is set
            if (container == null)
            {
                throw new ApiException("Missing required parameter 'container' when calling AudioServiceApi->HeadAudioByIdByStreamfilename");
            }
            
            var request = new RestRequest("/Audio/{Id}/{StreamFileName}", Method.Head);

            if (streamFileName != null)
            {
                request.AddParameter("StreamFileName", this.ApiClient.ParameterToString(streamFileName), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (deviceProfileId != null)
            {
                request.AddQueryParameter("DeviceProfileId", this.ApiClient.ParameterToString(deviceProfileId));
            }

            if (deviceId != null)
            {
                request.AddQueryParameter("DeviceId", this.ApiClient.ParameterToString(deviceId));
            }

            if (container != null)
            {
                request.AddQueryParameter("Container", this.ApiClient.ParameterToString(container));
            }

            if (audioCodec != null)
            {
                request.AddQueryParameter("AudioCodec", this.ApiClient.ParameterToString(audioCodec));
            }

            if (enableAutoStreamCopy != null)
            {
                request.AddQueryParameter("EnableAutoStreamCopy", this.ApiClient.ParameterToString(enableAutoStreamCopy));
            }

            if (audioSampleRate != null)
            {
                request.AddQueryParameter("AudioSampleRate", this.ApiClient.ParameterToString(audioSampleRate));
            }

            if (audioBitRate != null)
            {
                request.AddQueryParameter("AudioBitRate", this.ApiClient.ParameterToString(audioBitRate));
            }

            if (audioChannels != null)
            {
                request.AddQueryParameter("AudioChannels", this.ApiClient.ParameterToString(audioChannels));
            }

            if (maxAudioChannels != null)
            {
                request.AddQueryParameter("MaxAudioChannels", this.ApiClient.ParameterToString(maxAudioChannels));
            }

            if (_static != null)
            {
                request.AddQueryParameter("Static", this.ApiClient.ParameterToString(_static));
            }

            if (copyTimestamps != null)
            {
                request.AddQueryParameter("CopyTimestamps", this.ApiClient.ParameterToString(copyTimestamps));
            }

            if (startTimeTicks != null)
            {
                request.AddQueryParameter("StartTimeTicks", this.ApiClient.ParameterToString(startTimeTicks));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (videoBitRate != null)
            {
                request.AddQueryParameter("VideoBitRate", this.ApiClient.ParameterToString(videoBitRate));
            }

            if (subtitleStreamIndex != null)
            {
                request.AddQueryParameter("SubtitleStreamIndex", this.ApiClient.ParameterToString(subtitleStreamIndex));
            }

            if (subtitleMethod != null)
            {
                request.AddQueryParameter("SubtitleMethod", this.ApiClient.ParameterToString(subtitleMethod));
            }

            if (maxVideoBitDepth != null)
            {
                request.AddQueryParameter("MaxVideoBitDepth", this.ApiClient.ParameterToString(maxVideoBitDepth));
            }

            if (videoCodec != null)
            {
                request.AddQueryParameter("VideoCodec", this.ApiClient.ParameterToString(videoCodec));
            }

            if (audioStreamIndex != null)
            {
                request.AddQueryParameter("AudioStreamIndex", this.ApiClient.ParameterToString(audioStreamIndex));
            }

            if (videoStreamIndex != null)
            {
                request.AddQueryParameter("VideoStreamIndex", this.ApiClient.ParameterToString(videoStreamIndex));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="container">Container</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100 (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="maxWidth">Optional. The maximum horizontal resolution of the encoded video. (optional)</param>
        /// <param name="maxHeight">Optional. The maximum vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadAudioByIdStream (string deviceProfileId, string id, string deviceId, string container, string audioCodec, bool? enableAutoStreamCopy, int? audioSampleRate, int? audioBitRate, int? audioChannels, int? maxAudioChannels, bool? _static, bool? copyTimestamps, long? startTimeTicks, int? width, int? height, int? maxWidth, int? maxHeight, int? videoBitRate, int? subtitleStreamIndex, SubtitleDeliveryMethod subtitleMethod, int? maxVideoBitDepth, string videoCodec, int? audioStreamIndex, int? videoStreamIndex)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling AudioServiceApi->HeadAudioByIdStream");
            }
            
            // verify the required parameter 'container' is set
            if (container == null)
            {
                throw new ApiException("Missing required parameter 'container' when calling AudioServiceApi->HeadAudioByIdStream");
            }
            
            var request = new RestRequest("/Audio/{Id}/stream", Method.Head);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (deviceProfileId != null)
            {
                request.AddQueryParameter("DeviceProfileId", this.ApiClient.ParameterToString(deviceProfileId));
            }

            if (deviceId != null)
            {
                request.AddQueryParameter("DeviceId", this.ApiClient.ParameterToString(deviceId));
            }

            if (container != null)
            {
                request.AddQueryParameter("Container", this.ApiClient.ParameterToString(container));
            }

            if (audioCodec != null)
            {
                request.AddQueryParameter("AudioCodec", this.ApiClient.ParameterToString(audioCodec));
            }

            if (enableAutoStreamCopy != null)
            {
                request.AddQueryParameter("EnableAutoStreamCopy", this.ApiClient.ParameterToString(enableAutoStreamCopy));
            }

            if (audioSampleRate != null)
            {
                request.AddQueryParameter("AudioSampleRate", this.ApiClient.ParameterToString(audioSampleRate));
            }

            if (audioBitRate != null)
            {
                request.AddQueryParameter("AudioBitRate", this.ApiClient.ParameterToString(audioBitRate));
            }

            if (audioChannels != null)
            {
                request.AddQueryParameter("AudioChannels", this.ApiClient.ParameterToString(audioChannels));
            }

            if (maxAudioChannels != null)
            {
                request.AddQueryParameter("MaxAudioChannels", this.ApiClient.ParameterToString(maxAudioChannels));
            }

            if (_static != null)
            {
                request.AddQueryParameter("Static", this.ApiClient.ParameterToString(_static));
            }

            if (copyTimestamps != null)
            {
                request.AddQueryParameter("CopyTimestamps", this.ApiClient.ParameterToString(copyTimestamps));
            }

            if (startTimeTicks != null)
            {
                request.AddQueryParameter("StartTimeTicks", this.ApiClient.ParameterToString(startTimeTicks));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (videoBitRate != null)
            {
                request.AddQueryParameter("VideoBitRate", this.ApiClient.ParameterToString(videoBitRate));
            }

            if (subtitleStreamIndex != null)
            {
                request.AddQueryParameter("SubtitleStreamIndex", this.ApiClient.ParameterToString(subtitleStreamIndex));
            }

            if (subtitleMethod != null)
            {
                request.AddQueryParameter("SubtitleMethod", this.ApiClient.ParameterToString(subtitleMethod));
            }

            if (maxVideoBitDepth != null)
            {
                request.AddQueryParameter("MaxVideoBitDepth", this.ApiClient.ParameterToString(maxVideoBitDepth));
            }

            if (videoCodec != null)
            {
                request.AddQueryParameter("VideoCodec", this.ApiClient.ParameterToString(videoCodec));
            }

            if (audioStreamIndex != null)
            {
                request.AddQueryParameter("AudioStreamIndex", this.ApiClient.ParameterToString(audioStreamIndex));
            }

            if (videoStreamIndex != null)
            {
                request.AddQueryParameter("VideoStreamIndex", this.ApiClient.ParameterToString(videoStreamIndex));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize. (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="container">Container</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#x27;s extension. Options: aac, mp3, vorbis, wma. (optional)</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100 (optional)</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2 (optional)</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2 (optional)</param>
        /// <param name="_static">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false (optional)</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video. (optional)</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video. (optional)</param>
        /// <param name="maxWidth">Optional. The maximum horizontal resolution of the encoded video. (optional)</param>
        /// <param name="maxHeight">Optional. The maximum vertical resolution of the encoded video. (optional)</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method. (optional)</param>
        /// <param name="maxVideoBitDepth">Optional. (optional)</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#x27;s extension. Options: h264, mpeg4, theora, vpx, wmv. (optional)</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadAudioByIdStreamByContainer (string deviceProfileId, string id, string deviceId, string container, string audioCodec, bool? enableAutoStreamCopy, int? audioSampleRate, int? audioBitRate, int? audioChannels, int? maxAudioChannels, bool? _static, bool? copyTimestamps, long? startTimeTicks, int? width, int? height, int? maxWidth, int? maxHeight, int? videoBitRate, int? subtitleStreamIndex, SubtitleDeliveryMethod subtitleMethod, int? maxVideoBitDepth, string videoCodec, int? audioStreamIndex, int? videoStreamIndex)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling AudioServiceApi->HeadAudioByIdStreamByContainer");
            }
            
            // verify the required parameter 'container' is set
            if (container == null)
            {
                throw new ApiException("Missing required parameter 'container' when calling AudioServiceApi->HeadAudioByIdStreamByContainer");
            }
            
            var request = new RestRequest("/Audio/{Id}/stream.{Container}", Method.Head);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (container != null)
            {
                request.AddParameter("Container", this.ApiClient.ParameterToString(container), ParameterType.UrlSegment);
            }

            if (deviceProfileId != null)
            {
                request.AddQueryParameter("DeviceProfileId", this.ApiClient.ParameterToString(deviceProfileId));
            }

            if (deviceId != null)
            {
                request.AddQueryParameter("DeviceId", this.ApiClient.ParameterToString(deviceId));
            }

            if (audioCodec != null)
            {
                request.AddQueryParameter("AudioCodec", this.ApiClient.ParameterToString(audioCodec));
            }

            if (enableAutoStreamCopy != null)
            {
                request.AddQueryParameter("EnableAutoStreamCopy", this.ApiClient.ParameterToString(enableAutoStreamCopy));
            }

            if (audioSampleRate != null)
            {
                request.AddQueryParameter("AudioSampleRate", this.ApiClient.ParameterToString(audioSampleRate));
            }

            if (audioBitRate != null)
            {
                request.AddQueryParameter("AudioBitRate", this.ApiClient.ParameterToString(audioBitRate));
            }

            if (audioChannels != null)
            {
                request.AddQueryParameter("AudioChannels", this.ApiClient.ParameterToString(audioChannels));
            }

            if (maxAudioChannels != null)
            {
                request.AddQueryParameter("MaxAudioChannels", this.ApiClient.ParameterToString(maxAudioChannels));
            }

            if (_static != null)
            {
                request.AddQueryParameter("Static", this.ApiClient.ParameterToString(_static));
            }

            if (copyTimestamps != null)
            {
                request.AddQueryParameter("CopyTimestamps", this.ApiClient.ParameterToString(copyTimestamps));
            }

            if (startTimeTicks != null)
            {
                request.AddQueryParameter("StartTimeTicks", this.ApiClient.ParameterToString(startTimeTicks));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (videoBitRate != null)
            {
                request.AddQueryParameter("VideoBitRate", this.ApiClient.ParameterToString(videoBitRate));
            }

            if (subtitleStreamIndex != null)
            {
                request.AddQueryParameter("SubtitleStreamIndex", this.ApiClient.ParameterToString(subtitleStreamIndex));
            }

            if (subtitleMethod != null)
            {
                request.AddQueryParameter("SubtitleMethod", this.ApiClient.ParameterToString(subtitleMethod));
            }

            if (maxVideoBitDepth != null)
            {
                request.AddQueryParameter("MaxVideoBitDepth", this.ApiClient.ParameterToString(maxVideoBitDepth));
            }

            if (videoCodec != null)
            {
                request.AddQueryParameter("VideoCodec", this.ApiClient.ParameterToString(videoCodec));
            }

            if (audioStreamIndex != null)
            {
                request.AddQueryParameter("AudioStreamIndex", this.ApiClient.ParameterToString(audioStreamIndex));
            }

            if (videoStreamIndex != null)
            {
                request.AddQueryParameter("VideoStreamIndex", this.ApiClient.ParameterToString(videoStreamIndex));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
