// <copyright file="PlaylistServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class PlaylistServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaylistServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Removes items from a playlist
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="entryIds"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeletePlaylistsByIdItems (string id, string entryIds)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PlaylistServiceApi->DeletePlaylistsByIdItems");
            }
            
            // verify the required parameter 'entryIds' is set
            if (entryIds == null)
            {
                throw new ApiException("Missing required parameter 'entryIds' when calling PlaylistServiceApi->DeletePlaylistsByIdItems");
            }
            
            var request = new RestRequest("/Playlists/{Id}/Items", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (entryIds != null)
            {
                request.AddQueryParameter("EntryIds", this.ApiClient.ParameterToString(entryIds));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets add to playlist info
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="ids">Item id, comma delimited</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetPlaylistsByIdAddtoplaylistinfo (string userId, string ids, string id)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new ApiException("Missing required parameter 'ids' when calling PlaylistServiceApi->GetPlaylistsByIdAddtoplaylistinfo");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PlaylistServiceApi->GetPlaylistsByIdAddtoplaylistinfo");
            }
            
            var request = new RestRequest("/Playlists/{Id}/AddToPlaylistInfo", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets the original items of a playlist
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async Task<RestResponse<QueryResultBaseItemDto>> GetPlaylistsByIdItems (string id, string userId, int? startIndex, int? limit, string fields, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PlaylistServiceApi->GetPlaylistsByIdItems");
            }
            
            var request = new RestRequest("/Playlists/{Id}/Items", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultBaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Creates a new playlist
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">The name of the new playlist. (optional)</param>
        /// <param name="ids">Item Ids to add to the playlist (optional)</param>
        /// <param name="mediaType">The playlist media type (optional)</param>
        /// <returns>Task of ApiResponse (PlaylistsPlaylistCreationResult)</returns>
        public async Task<RestResponse<PlaylistsPlaylistCreationResult>> PostPlaylists (string name, string ids, string mediaType)
        {
            var request = new RestRequest("/Playlists", Method.Post);

            if (name != null)
            {
                request.AddQueryParameter("Name", this.ApiClient.ParameterToString(name));
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            if (mediaType != null)
            {
                request.AddQueryParameter("MediaType", this.ApiClient.ParameterToString(mediaType));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<PlaylistsPlaylistCreationResult>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Adds items to a playlist
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id (optional)</param>
        /// <param name="ids">Item id, comma delimited</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (PlaylistsAddToPlaylistResult)</returns>
        public async Task<RestResponse<PlaylistsAddToPlaylistResult>> PostPlaylistsByIdItems (string userId, string ids, string id)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new ApiException("Missing required parameter 'ids' when calling PlaylistServiceApi->PostPlaylistsByIdItems");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PlaylistServiceApi->PostPlaylistsByIdItems");
            }
            
            var request = new RestRequest("/Playlists/{Id}/Items", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (ids != null)
            {
                request.AddQueryParameter("Ids", this.ApiClient.ParameterToString(ids));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<PlaylistsAddToPlaylistResult>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Moves a playlist item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="itemId">ItemId</param>
        /// <param name="id"></param>
        /// <param name="newIndex">NewIndex</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostPlaylistsByIdItemsByItemidMoveByNewindex (long? itemId, string id, int? newIndex)
        {
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new ApiException("Missing required parameter 'itemId' when calling PlaylistServiceApi->PostPlaylistsByIdItemsByItemidMoveByNewindex");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PlaylistServiceApi->PostPlaylistsByIdItemsByItemidMoveByNewindex");
            }
            
            // verify the required parameter 'newIndex' is set
            if (newIndex == null)
            {
                throw new ApiException("Missing required parameter 'newIndex' when calling PlaylistServiceApi->PostPlaylistsByIdItemsByItemidMoveByNewindex");
            }
            
            var request = new RestRequest("/Playlists/{Id}/Items/{ItemId}/Move/{NewIndex}", Method.Post);

            if (itemId != null)
            {
                request.AddParameter("ItemId", this.ApiClient.ParameterToString(itemId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (newIndex != null)
            {
                request.AddParameter("NewIndex", this.ApiClient.ParameterToString(newIndex), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Removes items from a playlist
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="entryIds"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostPlaylistsByIdItemsDelete (string id, string entryIds)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PlaylistServiceApi->PostPlaylistsByIdItemsDelete");
            }
            
            // verify the required parameter 'entryIds' is set
            if (entryIds == null)
            {
                throw new ApiException("Missing required parameter 'entryIds' when calling PlaylistServiceApi->PostPlaylistsByIdItemsDelete");
            }
            
            var request = new RestRequest("/Playlists/{Id}/Items/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (entryIds != null)
            {
                request.AddQueryParameter("EntryIds", this.ApiClient.ParameterToString(entryIds));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
