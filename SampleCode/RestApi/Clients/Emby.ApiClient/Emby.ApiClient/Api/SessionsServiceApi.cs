// <copyright file="SessionsServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class SessionsServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionsServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="key">Auth Key</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteAuthKeysByKey (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new ApiException("Missing required parameter 'key' when calling SessionsServiceApi->DeleteAuthKeysByKey");
            }
            
            var request = new RestRequest("/Auth/Keys/{Key}", Method.Delete);

            if (key != null)
            {
                request.AddParameter("Key", this.ApiClient.ParameterToString(key), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Removes an additional user from a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Session Id</param>
        /// <param name="userId">UserId Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteSessionsByIdUsersByUserid (string id, string userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SessionsServiceApi->DeleteSessionsByIdUsersByUserid");
            }
            
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling SessionsServiceApi->DeleteSessionsByIdUsersByUserid");
            }
            
            var request = new RestRequest("/Sessions/{Id}/Users/{UserId}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetAuthKeys (int? startIndex, int? limit)
        {
            var request = new RestRequest("/Auth/Keys", Method.Get);

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <returns>Task of ApiResponse (List&lt;NameIdPair&gt;)</returns>
        public async Task<RestResponse<List<NameIdPair>>> GetAuthProviders ()
        {
            var request = new RestRequest("/Auth/Providers", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<NameIdPair>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of sessions
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="controllableByUserId">Optional. Filter by sessions that a given user is allowed to remote control. (optional)</param>
        /// <param name="deviceId">Optional. Filter by device id. (optional)</param>
        /// <param name="id">Optional. Filter by session id. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SessionSessionInfo&gt;)</returns>
        public async Task<RestResponse<List<SessionSessionInfo>>> GetSessions (string controllableByUserId, string deviceId, string id)
        {
            var request = new RestRequest("/Sessions", Method.Get);

            if (controllableByUserId != null)
            {
                request.AddQueryParameter("ControllableByUserId", this.ApiClient.ParameterToString(controllableByUserId));
            }

            if (deviceId != null)
            {
                request.AddQueryParameter("DeviceId", this.ApiClient.ParameterToString(deviceId));
            }

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<SessionSessionInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a the current play queue from a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Optional. Filter by session id. (optional)</param>
        /// <param name="deviceId">Optional. Filter by device id. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async Task<RestResponse<QueryResultBaseItemDto>> GetSessionsPlayqueue (string id, string deviceId)
        {
            var request = new RestRequest("/Sessions/PlayQueue", Method.Get);

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            if (deviceId != null)
            {
                request.AddQueryParameter("DeviceId", this.ApiClient.ParameterToString(deviceId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultBaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="app">App</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostAuthKeys (string app)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new ApiException("Missing required parameter 'app' when calling SessionsServiceApi->PostAuthKeys");
            }
            
            var request = new RestRequest("/Auth/Keys", Method.Post);

            if (app != null)
            {
                request.AddQueryParameter("App", this.ApiClient.ParameterToString(app));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="key">Auth Key</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostAuthKeysByKeyDelete (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
            {
                throw new ApiException("Missing required parameter 'key' when calling SessionsServiceApi->PostAuthKeysByKeyDelete");
            }
            
            var request = new RestRequest("/Auth/Keys/{Key}/Delete", Method.Post);

            if (key != null)
            {
                request.AddParameter("Key", this.ApiClient.ParameterToString(key), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Issues a system command to a client
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">GeneralCommand: </param>
        /// <param name="id">Session Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsByIdCommand (GeneralCommand body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling SessionsServiceApi->PostSessionsByIdCommand");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SessionsServiceApi->PostSessionsByIdCommand");
            }
            
            var request = new RestRequest("/Sessions/{Id}/Command", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Issues a system command to a client
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Session Id</param>
        /// <param name="command">The command to send.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsByIdCommandByCommand (string id, string command)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SessionsServiceApi->PostSessionsByIdCommandByCommand");
            }
            
            // verify the required parameter 'command' is set
            if (command == null)
            {
                throw new ApiException("Missing required parameter 'command' when calling SessionsServiceApi->PostSessionsByIdCommandByCommand");
            }
            
            var request = new RestRequest("/Sessions/{Id}/Command/{Command}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (command != null)
            {
                request.AddParameter("Command", this.ApiClient.ParameterToString(command), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Issues a command to a client to display a message to the user
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Session Id</param>
        /// <param name="text">The message text.</param>
        /// <param name="header">The message header.</param>
        /// <param name="timeoutMs">The message timeout. If omitted the user will have to confirm viewing the message. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsByIdMessage (string id, string text, string header, long? timeoutMs)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SessionsServiceApi->PostSessionsByIdMessage");
            }
            
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new ApiException("Missing required parameter 'text' when calling SessionsServiceApi->PostSessionsByIdMessage");
            }
            
            // verify the required parameter 'header' is set
            if (header == null)
            {
                throw new ApiException("Missing required parameter 'header' when calling SessionsServiceApi->PostSessionsByIdMessage");
            }
            
            var request = new RestRequest("/Sessions/{Id}/Message", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (text != null)
            {
                request.AddQueryParameter("Text", this.ApiClient.ParameterToString(text));
            }

            if (header != null)
            {
                request.AddQueryParameter("Header", this.ApiClient.ParameterToString(header));
            }

            if (timeoutMs != null)
            {
                request.AddQueryParameter("TimeoutMs", this.ApiClient.ParameterToString(timeoutMs));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Instructs a session to play an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">PlayRequest: </param>
        /// <param name="itemIds">The ids of the items to play, comma delimited</param>
        /// <param name="playCommand">The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.</param>
        /// <param name="id">Session Id</param>
        /// <param name="startPositionTicks">The starting position of the first item. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsByIdPlaying (PlayRequest body, List<long?> itemIds, PlayCommand playCommand, string id, long? startPositionTicks)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling SessionsServiceApi->PostSessionsByIdPlaying");
            }
            
            // verify the required parameter 'itemIds' is set
            if (itemIds == null)
            {
                throw new ApiException("Missing required parameter 'itemIds' when calling SessionsServiceApi->PostSessionsByIdPlaying");
            }
            
            // verify the required parameter 'playCommand' is set
            if (playCommand == null)
            {
                throw new ApiException("Missing required parameter 'playCommand' when calling SessionsServiceApi->PostSessionsByIdPlaying");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SessionsServiceApi->PostSessionsByIdPlaying");
            }
            
            var request = new RestRequest("/Sessions/{Id}/Playing", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (itemIds != null)
            {
                request.AddQueryParameter("ItemIds", this.ApiClient.ParameterToString(itemIds));
            }

            if (startPositionTicks != null)
            {
                request.AddQueryParameter("StartPositionTicks", this.ApiClient.ParameterToString(startPositionTicks));
            }

            if (playCommand != null)
            {
                request.AddQueryParameter("PlayCommand", this.ApiClient.ParameterToString(playCommand));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Issues a playstate command to a client
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">PlaystateRequest: </param>
        /// <param name="id">Session Id</param>
        /// <param name="command"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsByIdPlayingByCommand (PlaystateRequest body, string id, PlaystateCommand command)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling SessionsServiceApi->PostSessionsByIdPlayingByCommand");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SessionsServiceApi->PostSessionsByIdPlayingByCommand");
            }
            
            // verify the required parameter 'command' is set
            if (command == null)
            {
                throw new ApiException("Missing required parameter 'command' when calling SessionsServiceApi->PostSessionsByIdPlayingByCommand");
            }
            
            var request = new RestRequest("/Sessions/{Id}/Playing/{Command}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (command != null)
            {
                request.AddParameter("Command", this.ApiClient.ParameterToString(command), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Issues a system command to a client
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Session Id</param>
        /// <param name="command">The command to send.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsByIdSystemByCommand (string id, string command)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SessionsServiceApi->PostSessionsByIdSystemByCommand");
            }
            
            // verify the required parameter 'command' is set
            if (command == null)
            {
                throw new ApiException("Missing required parameter 'command' when calling SessionsServiceApi->PostSessionsByIdSystemByCommand");
            }
            
            var request = new RestRequest("/Sessions/{Id}/System/{Command}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (command != null)
            {
                request.AddParameter("Command", this.ApiClient.ParameterToString(command), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Adds an additional user to a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Session Id</param>
        /// <param name="userId">UserId Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsByIdUsersByUserid (string id, string userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SessionsServiceApi->PostSessionsByIdUsersByUserid");
            }
            
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling SessionsServiceApi->PostSessionsByIdUsersByUserid");
            }
            
            var request = new RestRequest("/Sessions/{Id}/Users/{UserId}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Removes an additional user from a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Session Id</param>
        /// <param name="userId">UserId Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsByIdUsersByUseridDelete (string id, string userId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SessionsServiceApi->PostSessionsByIdUsersByUseridDelete");
            }
            
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling SessionsServiceApi->PostSessionsByIdUsersByUseridDelete");
            }
            
            var request = new RestRequest("/Sessions/{Id}/Users/{UserId}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Instructs a session to browse to an item or view
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Session Id</param>
        /// <param name="itemType">The type of item to browse to.</param>
        /// <param name="itemId">The Id of the item.</param>
        /// <param name="itemName">The name of the item.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsByIdViewing (string id, string itemType, string itemId, string itemName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SessionsServiceApi->PostSessionsByIdViewing");
            }
            
            // verify the required parameter 'itemType' is set
            if (itemType == null)
            {
                throw new ApiException("Missing required parameter 'itemType' when calling SessionsServiceApi->PostSessionsByIdViewing");
            }
            
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new ApiException("Missing required parameter 'itemId' when calling SessionsServiceApi->PostSessionsByIdViewing");
            }
            
            // verify the required parameter 'itemName' is set
            if (itemName == null)
            {
                throw new ApiException("Missing required parameter 'itemName' when calling SessionsServiceApi->PostSessionsByIdViewing");
            }
            
            var request = new RestRequest("/Sessions/{Id}/Viewing", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (itemType != null)
            {
                request.AddQueryParameter("ItemType", this.ApiClient.ParameterToString(itemType));
            }

            if (itemId != null)
            {
                request.AddQueryParameter("ItemId", this.ApiClient.ParameterToString(itemId));
            }

            if (itemName != null)
            {
                request.AddQueryParameter("ItemName", this.ApiClient.ParameterToString(itemName));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates capabilities for a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Session Id</param>
        /// <param name="playableMediaTypes">A list of playable media types, comma delimited. Audio, Video, Book, Game, Photo. (optional)</param>
        /// <param name="supportedCommands">A list of supported remote control commands, comma delimited (optional)</param>
        /// <param name="supportsMediaControl">Determines whether media can be played remotely. (optional)</param>
        /// <param name="supportsSync">Determines whether sync is supported. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsCapabilities (string id, string playableMediaTypes, string supportedCommands, bool? supportsMediaControl, bool? supportsSync)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SessionsServiceApi->PostSessionsCapabilities");
            }
            
            var request = new RestRequest("/Sessions/Capabilities", Method.Post);

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            if (playableMediaTypes != null)
            {
                request.AddQueryParameter("PlayableMediaTypes", this.ApiClient.ParameterToString(playableMediaTypes));
            }

            if (supportedCommands != null)
            {
                request.AddQueryParameter("SupportedCommands", this.ApiClient.ParameterToString(supportedCommands));
            }

            if (supportsMediaControl != null)
            {
                request.AddQueryParameter("SupportsMediaControl", this.ApiClient.ParameterToString(supportsMediaControl));
            }

            if (supportsSync != null)
            {
                request.AddQueryParameter("SupportsSync", this.ApiClient.ParameterToString(supportsSync));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates capabilities for a device
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">ClientCapabilities: </param>
        /// <param name="id">Session Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsCapabilitiesFull (ClientCapabilities body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling SessionsServiceApi->PostSessionsCapabilitiesFull");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SessionsServiceApi->PostSessionsCapabilitiesFull");
            }
            
            var request = new RestRequest("/Sessions/Capabilities/Full", Method.Post);

            if (id != null)
            {
                request.AddQueryParameter("Id", this.ApiClient.ParameterToString(id));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Reports that a session has ended
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsLogout ()
        {
            var request = new RestRequest("/Sessions/Logout", Method.Post);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
