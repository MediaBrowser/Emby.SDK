// <copyright file="PlaystateServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class PlaystateServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlaystateServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaystateServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Marks an item as unplayed
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        public async Task<RestResponse<UserItemDataDto>> DeleteUsersByUseridPlayeditemsById (string userId, string id)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling PlaystateServiceApi->DeleteUsersByUseridPlayeditemsById");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PlaystateServiceApi->DeleteUsersByUseridPlayeditemsById");
            }
            
            var request = new RestRequest("/Users/{UserId}/PlayedItems/{Id}", Method.Delete);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<UserItemDataDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Reports that a user has stopped playing an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <param name="mediaSourceId">The id of the MediaSource</param>
        /// <param name="nextMediaType">The next media type that will play</param>
        /// <param name="positionTicks">Optional. The position, in ticks, where playback stopped. 1ms &#x3D; 10000 ticks. (optional)</param>
        /// <param name="liveStreamId"> (optional)</param>
        /// <param name="playSessionId"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteUsersByUseridPlayingitemsById (string userId, string id, string mediaSourceId, string nextMediaType, long? positionTicks, string liveStreamId, string playSessionId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling PlaystateServiceApi->DeleteUsersByUseridPlayingitemsById");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PlaystateServiceApi->DeleteUsersByUseridPlayingitemsById");
            }
            
            // verify the required parameter 'mediaSourceId' is set
            if (mediaSourceId == null)
            {
                throw new ApiException("Missing required parameter 'mediaSourceId' when calling PlaystateServiceApi->DeleteUsersByUseridPlayingitemsById");
            }
            
            // verify the required parameter 'nextMediaType' is set
            if (nextMediaType == null)
            {
                throw new ApiException("Missing required parameter 'nextMediaType' when calling PlaystateServiceApi->DeleteUsersByUseridPlayingitemsById");
            }
            
            var request = new RestRequest("/Users/{UserId}/PlayingItems/{Id}", Method.Delete);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (mediaSourceId != null)
            {
                request.AddQueryParameter("MediaSourceId", this.ApiClient.ParameterToString(mediaSourceId));
            }

            if (nextMediaType != null)
            {
                request.AddQueryParameter("NextMediaType", this.ApiClient.ParameterToString(nextMediaType));
            }

            if (positionTicks != null)
            {
                request.AddQueryParameter("PositionTicks", this.ApiClient.ParameterToString(positionTicks));
            }

            if (liveStreamId != null)
            {
                request.AddQueryParameter("LiveStreamId", this.ApiClient.ParameterToString(liveStreamId));
            }

            if (playSessionId != null)
            {
                request.AddQueryParameter("PlaySessionId", this.ApiClient.ParameterToString(playSessionId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Reports playback has started within a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">PlaybackStartInfo: </param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsPlaying (PlaybackStartInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling PlaystateServiceApi->PostSessionsPlaying");
            }
            
            var request = new RestRequest("/Sessions/Playing", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Pings a playback session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="playSessionId"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsPlayingPing (string playSessionId)
        {
            var request = new RestRequest("/Sessions/Playing/Ping", Method.Post);

            if (playSessionId != null)
            {
                request.AddQueryParameter("PlaySessionId", this.ApiClient.ParameterToString(playSessionId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Reports playback progress within a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">PlaybackProgressInfo: </param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsPlayingProgress (PlaybackProgressInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling PlaystateServiceApi->PostSessionsPlayingProgress");
            }
            
            var request = new RestRequest("/Sessions/Playing/Progress", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Reports playback has stopped within a session
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">PlaybackStopInfo: </param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSessionsPlayingStopped (PlaybackStopInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling PlaystateServiceApi->PostSessionsPlayingStopped");
            }
            
            var request = new RestRequest("/Sessions/Playing/Stopped", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates userdata for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">UserItemDataDto: </param>
        /// <param name="userId">User Id</param>
        /// <param name="itemId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByUseridItemsByItemidUserdata (UserItemDataDto body, string userId, string itemId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling PlaystateServiceApi->PostUsersByUseridItemsByItemidUserdata");
            }
            
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling PlaystateServiceApi->PostUsersByUseridItemsByItemidUserdata");
            }
            
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new ApiException("Missing required parameter 'itemId' when calling PlaystateServiceApi->PostUsersByUseridItemsByItemidUserdata");
            }
            
            var request = new RestRequest("/Users/{UserId}/Items/{ItemId}/UserData", Method.Post);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (itemId != null)
            {
                request.AddParameter("ItemId", this.ApiClient.ParameterToString(itemId), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Marks an item as played
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="datePlayed">The date the item was played (if any). Format &#x3D; yyyyMMddHHmmss (optional)</param>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        public async Task<RestResponse<UserItemDataDto>> PostUsersByUseridPlayeditemsById (string userId, string datePlayed, string id)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling PlaystateServiceApi->PostUsersByUseridPlayeditemsById");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PlaystateServiceApi->PostUsersByUseridPlayeditemsById");
            }
            
            var request = new RestRequest("/Users/{UserId}/PlayedItems/{Id}", Method.Post);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (datePlayed != null)
            {
                request.AddQueryParameter("DatePlayed", this.ApiClient.ParameterToString(datePlayed));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<UserItemDataDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Marks an item as unplayed
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        public async Task<RestResponse<UserItemDataDto>> PostUsersByUseridPlayeditemsByIdDelete (string userId, string id)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling PlaystateServiceApi->PostUsersByUseridPlayeditemsByIdDelete");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PlaystateServiceApi->PostUsersByUseridPlayeditemsByIdDelete");
            }
            
            var request = new RestRequest("/Users/{UserId}/PlayedItems/{Id}/Delete", Method.Post);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<UserItemDataDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Reports that a user has begun playing an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <param name="mediaSourceId">The id of the MediaSource</param>
        /// <param name="canSeek">Indicates if the client can seek (optional)</param>
        /// <param name="audioStreamIndex"> (optional)</param>
        /// <param name="subtitleStreamIndex"> (optional)</param>
        /// <param name="playMethod"> (optional)</param>
        /// <param name="liveStreamId"> (optional)</param>
        /// <param name="playSessionId"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByUseridPlayingitemsById (string userId, string id, string mediaSourceId, bool? canSeek, int? audioStreamIndex, int? subtitleStreamIndex, PlayMethod playMethod, string liveStreamId, string playSessionId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling PlaystateServiceApi->PostUsersByUseridPlayingitemsById");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PlaystateServiceApi->PostUsersByUseridPlayingitemsById");
            }
            
            // verify the required parameter 'mediaSourceId' is set
            if (mediaSourceId == null)
            {
                throw new ApiException("Missing required parameter 'mediaSourceId' when calling PlaystateServiceApi->PostUsersByUseridPlayingitemsById");
            }
            
            var request = new RestRequest("/Users/{UserId}/PlayingItems/{Id}", Method.Post);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (mediaSourceId != null)
            {
                request.AddQueryParameter("MediaSourceId", this.ApiClient.ParameterToString(mediaSourceId));
            }

            if (canSeek != null)
            {
                request.AddQueryParameter("CanSeek", this.ApiClient.ParameterToString(canSeek));
            }

            if (audioStreamIndex != null)
            {
                request.AddQueryParameter("AudioStreamIndex", this.ApiClient.ParameterToString(audioStreamIndex));
            }

            if (subtitleStreamIndex != null)
            {
                request.AddQueryParameter("SubtitleStreamIndex", this.ApiClient.ParameterToString(subtitleStreamIndex));
            }

            if (playMethod != null)
            {
                request.AddQueryParameter("PlayMethod", this.ApiClient.ParameterToString(playMethod));
            }

            if (liveStreamId != null)
            {
                request.AddQueryParameter("LiveStreamId", this.ApiClient.ParameterToString(liveStreamId));
            }

            if (playSessionId != null)
            {
                request.AddQueryParameter("PlaySessionId", this.ApiClient.ParameterToString(playSessionId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Reports that a user has stopped playing an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <param name="mediaSourceId">The id of the MediaSource</param>
        /// <param name="nextMediaType">The next media type that will play</param>
        /// <param name="positionTicks">Optional. The position, in ticks, where playback stopped. 1ms &#x3D; 10000 ticks. (optional)</param>
        /// <param name="liveStreamId"> (optional)</param>
        /// <param name="playSessionId"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByUseridPlayingitemsByIdDelete (string userId, string id, string mediaSourceId, string nextMediaType, long? positionTicks, string liveStreamId, string playSessionId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling PlaystateServiceApi->PostUsersByUseridPlayingitemsByIdDelete");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PlaystateServiceApi->PostUsersByUseridPlayingitemsByIdDelete");
            }
            
            // verify the required parameter 'mediaSourceId' is set
            if (mediaSourceId == null)
            {
                throw new ApiException("Missing required parameter 'mediaSourceId' when calling PlaystateServiceApi->PostUsersByUseridPlayingitemsByIdDelete");
            }
            
            // verify the required parameter 'nextMediaType' is set
            if (nextMediaType == null)
            {
                throw new ApiException("Missing required parameter 'nextMediaType' when calling PlaystateServiceApi->PostUsersByUseridPlayingitemsByIdDelete");
            }
            
            var request = new RestRequest("/Users/{UserId}/PlayingItems/{Id}/Delete", Method.Post);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (mediaSourceId != null)
            {
                request.AddQueryParameter("MediaSourceId", this.ApiClient.ParameterToString(mediaSourceId));
            }

            if (nextMediaType != null)
            {
                request.AddQueryParameter("NextMediaType", this.ApiClient.ParameterToString(nextMediaType));
            }

            if (positionTicks != null)
            {
                request.AddQueryParameter("PositionTicks", this.ApiClient.ParameterToString(positionTicks));
            }

            if (liveStreamId != null)
            {
                request.AddQueryParameter("LiveStreamId", this.ApiClient.ParameterToString(liveStreamId));
            }

            if (playSessionId != null)
            {
                request.AddQueryParameter("PlaySessionId", this.ApiClient.ParameterToString(playSessionId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Reports a user&#x27;s playback progress
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">OnPlaybackProgress</param>
        /// <param name="mediaSourceId">The id of the MediaSource</param>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <param name="positionTicks">Optional. The current position, in ticks. 1ms &#x3D; 10000 ticks. (optional)</param>
        /// <param name="isPaused">Indicates if the player is paused. (optional)</param>
        /// <param name="isMuted">Indicates if the player is muted. (optional)</param>
        /// <param name="audioStreamIndex"> (optional)</param>
        /// <param name="subtitleStreamIndex"> (optional)</param>
        /// <param name="volumeLevel">Scale of 0-100 (optional)</param>
        /// <param name="playMethod"> (optional)</param>
        /// <param name="liveStreamId"> (optional)</param>
        /// <param name="playSessionId"> (optional)</param>
        /// <param name="repeatMode"> (optional)</param>
        /// <param name="subtitleOffset"> (optional)</param>
        /// <param name="playbackRate"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByUseridPlayingitemsByIdProgress (ApiOnPlaybackProgress body, string mediaSourceId, string userId, string id, long? positionTicks, bool? isPaused, bool? isMuted, int? audioStreamIndex, int? subtitleStreamIndex, int? volumeLevel, PlayMethod playMethod, string liveStreamId, string playSessionId, RepeatMode repeatMode, int? subtitleOffset, double? playbackRate)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling PlaystateServiceApi->PostUsersByUseridPlayingitemsByIdProgress");
            }
            
            // verify the required parameter 'mediaSourceId' is set
            if (mediaSourceId == null)
            {
                throw new ApiException("Missing required parameter 'mediaSourceId' when calling PlaystateServiceApi->PostUsersByUseridPlayingitemsByIdProgress");
            }
            
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling PlaystateServiceApi->PostUsersByUseridPlayingitemsByIdProgress");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PlaystateServiceApi->PostUsersByUseridPlayingitemsByIdProgress");
            }
            
            var request = new RestRequest("/Users/{UserId}/PlayingItems/{Id}/Progress", Method.Post);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (mediaSourceId != null)
            {
                request.AddQueryParameter("MediaSourceId", this.ApiClient.ParameterToString(mediaSourceId));
            }

            if (positionTicks != null)
            {
                request.AddQueryParameter("PositionTicks", this.ApiClient.ParameterToString(positionTicks));
            }

            if (isPaused != null)
            {
                request.AddQueryParameter("IsPaused", this.ApiClient.ParameterToString(isPaused));
            }

            if (isMuted != null)
            {
                request.AddQueryParameter("IsMuted", this.ApiClient.ParameterToString(isMuted));
            }

            if (audioStreamIndex != null)
            {
                request.AddQueryParameter("AudioStreamIndex", this.ApiClient.ParameterToString(audioStreamIndex));
            }

            if (subtitleStreamIndex != null)
            {
                request.AddQueryParameter("SubtitleStreamIndex", this.ApiClient.ParameterToString(subtitleStreamIndex));
            }

            if (volumeLevel != null)
            {
                request.AddQueryParameter("VolumeLevel", this.ApiClient.ParameterToString(volumeLevel));
            }

            if (playMethod != null)
            {
                request.AddQueryParameter("PlayMethod", this.ApiClient.ParameterToString(playMethod));
            }

            if (liveStreamId != null)
            {
                request.AddQueryParameter("LiveStreamId", this.ApiClient.ParameterToString(liveStreamId));
            }

            if (playSessionId != null)
            {
                request.AddQueryParameter("PlaySessionId", this.ApiClient.ParameterToString(playSessionId));
            }

            if (repeatMode != null)
            {
                request.AddQueryParameter("RepeatMode", this.ApiClient.ParameterToString(repeatMode));
            }

            if (subtitleOffset != null)
            {
                request.AddQueryParameter("SubtitleOffset", this.ApiClient.ParameterToString(subtitleOffset));
            }

            if (playbackRate != null)
            {
                request.AddQueryParameter("PlaybackRate", this.ApiClient.ParameterToString(playbackRate));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
