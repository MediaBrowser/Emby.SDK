// <copyright file="SyncServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class SyncServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SyncServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Cancels items from a sync target
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="targetId">TargetId</param>
        /// <param name="itemIds">ItemIds (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteSyncByTargetidItems (string targetId, string itemIds)
        {
            // verify the required parameter 'targetId' is set
            if (targetId == null)
            {
                throw new ApiException("Missing required parameter 'targetId' when calling SyncServiceApi->DeleteSyncByTargetidItems");
            }
            
            var request = new RestRequest("/Sync/{TargetId}/Items", Method.Delete);

            if (targetId != null)
            {
                request.AddParameter("TargetId", this.ApiClient.ParameterToString(targetId), ParameterType.UrlSegment);
            }

            if (itemIds != null)
            {
                request.AddQueryParameter("ItemIds", this.ApiClient.ParameterToString(itemIds));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Cancels a sync job item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteSyncJobitemsById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SyncServiceApi->DeleteSyncJobitemsById");
            }
            
            var request = new RestRequest("/Sync/JobItems/{Id}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Cancels a sync job.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteSyncJobsById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SyncServiceApi->DeleteSyncJobsById");
            }
            
            var request = new RestRequest("/Sync/Jobs/{Id}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets ready to download sync items.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="targetId">TargetId</param>
        /// <returns>Task of ApiResponse (List&lt;SyncedItem&gt;)</returns>
        public async Task<RestResponse<List<SyncedItem>>> GetSyncItemsReady (string targetId)
        {
            // verify the required parameter 'targetId' is set
            if (targetId == null)
            {
                throw new ApiException("Missing required parameter 'targetId' when calling SyncServiceApi->GetSyncItemsReady");
            }
            
            var request = new RestRequest("/Sync/Items/Ready", Method.Get);

            if (targetId != null)
            {
                request.AddQueryParameter("TargetId", this.ApiClient.ParameterToString(targetId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<SyncedItem>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets sync job items.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="targetId">TargetId</param>
        /// <returns>Task of ApiResponse (QueryResultSyncJobItem)</returns>
        public async Task<RestResponse<QueryResultSyncJobItem>> GetSyncJobitems (string targetId)
        {
            // verify the required parameter 'targetId' is set
            if (targetId == null)
            {
                throw new ApiException("Missing required parameter 'targetId' when calling SyncServiceApi->GetSyncJobitems");
            }
            
            var request = new RestRequest("/Sync/JobItems", Method.Get);

            if (targetId != null)
            {
                request.AddQueryParameter("TargetId", this.ApiClient.ParameterToString(targetId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultSyncJobItem>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a sync job item file
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Id</param>
        /// <param name="name">Name</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetSyncJobitemsByIdAdditionalfiles (string id, string name)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SyncServiceApi->GetSyncJobitemsByIdAdditionalfiles");
            }
            
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling SyncServiceApi->GetSyncJobitemsByIdAdditionalfiles");
            }
            
            var request = new RestRequest("/Sync/JobItems/{Id}/AdditionalFiles", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (name != null)
            {
                request.AddQueryParameter("Name", this.ApiClient.ParameterToString(name));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a sync job item file
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetSyncJobitemsByIdFile (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SyncServiceApi->GetSyncJobitemsByIdFile");
            }
            
            var request = new RestRequest("/Sync/JobItems/{Id}/File", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets sync jobs.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (QueryResultSyncJob)</returns>
        public async Task<RestResponse<QueryResultSyncJob>> GetSyncJobs ()
        {
            var request = new RestRequest("/Sync/Jobs", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultSyncJob>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a sync job.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Id</param>
        /// <returns>Task of ApiResponse (SyncJob)</returns>
        public async Task<RestResponse<SyncJob>> GetSyncJobsById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SyncServiceApi->GetSyncJobsById");
            }
            
            var request = new RestRequest("/Sync/Jobs/{Id}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<SyncJob>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of available sync targets.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">UserId</param>
        /// <param name="itemIds">ItemIds (optional)</param>
        /// <param name="parentId">ParentId (optional)</param>
        /// <param name="targetId">TargetId (optional)</param>
        /// <param name="category">Category (optional)</param>
        /// <returns>Task of ApiResponse (SyncDialogOptions)</returns>
        public async Task<RestResponse<SyncDialogOptions>> GetSyncOptions (string userId, string itemIds, string parentId, string targetId, SyncCategory category)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling SyncServiceApi->GetSyncOptions");
            }
            
            var request = new RestRequest("/Sync/Options", Method.Get);

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (itemIds != null)
            {
                request.AddQueryParameter("ItemIds", this.ApiClient.ParameterToString(itemIds));
            }

            if (parentId != null)
            {
                request.AddQueryParameter("ParentId", this.ApiClient.ParameterToString(parentId));
            }

            if (targetId != null)
            {
                request.AddQueryParameter("TargetId", this.ApiClient.ParameterToString(targetId));
            }

            if (category != null)
            {
                request.AddQueryParameter("Category", this.ApiClient.ParameterToString(category));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<SyncDialogOptions>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of available sync targets.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">UserId</param>
        /// <returns>Task of ApiResponse (List&lt;SyncTarget&gt;)</returns>
        public async Task<RestResponse<List<SyncTarget>>> GetSyncTargets (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling SyncServiceApi->GetSyncTargets");
            }
            
            var request = new RestRequest("/Sync/Targets", Method.Get);

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<SyncTarget>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets sync status for an item.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">SyncedItemProgress: </param>
        /// <param name="itemId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSyncByItemidStatus (SyncedItemProgress body, string itemId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling SyncServiceApi->PostSyncByItemidStatus");
            }
            
            // verify the required parameter 'itemId' is set
            if (itemId == null)
            {
                throw new ApiException("Missing required parameter 'itemId' when calling SyncServiceApi->PostSyncByItemidStatus");
            }
            
            var request = new RestRequest("/Sync/{ItemId}/Status", Method.Post);

            if (itemId != null)
            {
                request.AddParameter("ItemId", this.ApiClient.ParameterToString(itemId), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Cancels items from a sync target
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="targetId">TargetId</param>
        /// <param name="itemIds">ItemIds (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSyncByTargetidItemsDelete (string targetId, string itemIds)
        {
            // verify the required parameter 'targetId' is set
            if (targetId == null)
            {
                throw new ApiException("Missing required parameter 'targetId' when calling SyncServiceApi->PostSyncByTargetidItemsDelete");
            }
            
            var request = new RestRequest("/Sync/{TargetId}/Items/Delete", Method.Post);

            if (targetId != null)
            {
                request.AddParameter("TargetId", this.ApiClient.ParameterToString(targetId), ParameterType.UrlSegment);
            }

            if (itemIds != null)
            {
                request.AddQueryParameter("ItemIds", this.ApiClient.ParameterToString(itemIds));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Syncs data between device and server
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">SyncDataRequest: </param>
        /// <param name="targetId">TargetId</param>
        /// <returns>Task of ApiResponse (SyncDataResponse)</returns>
        public async Task<RestResponse<SyncDataResponse>> PostSyncData (SyncDataRequest body, string targetId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling SyncServiceApi->PostSyncData");
            }
            
            // verify the required parameter 'targetId' is set
            if (targetId == null)
            {
                throw new ApiException("Missing required parameter 'targetId' when calling SyncServiceApi->PostSyncData");
            }
            
            var request = new RestRequest("/Sync/Data", Method.Post);

            if (targetId != null)
            {
                request.AddQueryParameter("TargetId", this.ApiClient.ParameterToString(targetId));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<SyncDataResponse>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Cancels items from a sync target
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="itemIds">ItemIds (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSyncItemsCancel (string itemIds)
        {
            var request = new RestRequest("/Sync/Items/Cancel", Method.Post);

            if (itemIds != null)
            {
                request.AddQueryParameter("ItemIds", this.ApiClient.ParameterToString(itemIds));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Cancels a sync job item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSyncJobitemsByIdDelete (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SyncServiceApi->PostSyncJobitemsByIdDelete");
            }
            
            var request = new RestRequest("/Sync/JobItems/{Id}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Enables a cancelled or queued sync job item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSyncJobitemsByIdEnable (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SyncServiceApi->PostSyncJobitemsByIdEnable");
            }
            
            var request = new RestRequest("/Sync/JobItems/{Id}/Enable", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Marks a job item for removal
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSyncJobitemsByIdMarkforremoval (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SyncServiceApi->PostSyncJobitemsByIdMarkforremoval");
            }
            
            var request = new RestRequest("/Sync/JobItems/{Id}/MarkForRemoval", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Reports that a sync job item has successfully been transferred.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSyncJobitemsByIdTransferred (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SyncServiceApi->PostSyncJobitemsByIdTransferred");
            }
            
            var request = new RestRequest("/Sync/JobItems/{Id}/Transferred", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Unmarks a job item for removal
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSyncJobitemsByIdUnmarkforremoval (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SyncServiceApi->PostSyncJobitemsByIdUnmarkforremoval");
            }
            
            var request = new RestRequest("/Sync/JobItems/{Id}/UnmarkForRemoval", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets sync jobs.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">SyncJobRequest: </param>
        /// <returns>Task of ApiResponse (SyncJobCreationResult)</returns>
        public async Task<RestResponse<SyncJobCreationResult>> PostSyncJobs (SyncJobRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling SyncServiceApi->PostSyncJobs");
            }
            
            var request = new RestRequest("/Sync/Jobs", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<SyncJobCreationResult>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates a sync job.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">SyncJob: </param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSyncJobsById (SyncJob body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling SyncServiceApi->PostSyncJobsById");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SyncServiceApi->PostSyncJobsById");
            }
            
            var request = new RestRequest("/Sync/Jobs/{Id}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Cancels a sync job.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSyncJobsByIdDelete (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling SyncServiceApi->PostSyncJobsByIdDelete");
            }
            
            var request = new RestRequest("/Sync/Jobs/{Id}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Reports an action that occurred while offline.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">List&#x60;1: </param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostSyncOfflineactions (List<UserAction> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling SyncServiceApi->PostSyncOfflineactions");
            }
            
            var request = new RestRequest("/Sync/OfflineActions", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
