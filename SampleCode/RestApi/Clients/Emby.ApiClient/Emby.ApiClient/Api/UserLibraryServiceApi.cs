// <copyright file="UserLibraryServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class UserLibraryServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserLibraryServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserLibraryServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Unmarks an item as a favorite
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        public async Task<RestResponse<UserItemDataDto>> DeleteUsersByUseridFavoriteitemsById (string userId, string id)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserLibraryServiceApi->DeleteUsersByUseridFavoriteitemsById");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->DeleteUsersByUseridFavoriteitemsById");
            }
            
            var request = new RestRequest("/Users/{UserId}/FavoriteItems/{Id}", Method.Delete);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<UserItemDataDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Deletes a user&#x27;s saved personal rating for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        public async Task<RestResponse<UserItemDataDto>> DeleteUsersByUseridItemsByIdRating (string userId, string id)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserLibraryServiceApi->DeleteUsersByUseridItemsByIdRating");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->DeleteUsersByUseridItemsByIdRating");
            }
            
            var request = new RestRequest("/Users/{UserId}/Items/{Id}/Rating", Method.Delete);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<UserItemDataDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a live tv program
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        public async Task<RestResponse<BaseItemDto>> GetLivetvProgramsById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->GetLivetvProgramsById");
            }
            
            var request = new RestRequest("/LiveTv/Programs/{Id}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<BaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets an item from a user&#x27;s library
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        public async Task<RestResponse<BaseItemDto>> GetUsersByUseridItemsById (string userId, string id)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserLibraryServiceApi->GetUsersByUseridItemsById");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->GetUsersByUseridItemsById");
            }
            
            var request = new RestRequest("/Users/{UserId}/Items/{Id}", Method.Get);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<BaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets intros to play before the main media item plays
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async Task<RestResponse<QueryResultBaseItemDto>> GetUsersByUseridItemsByIdIntros (string userId, string fields, string id, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserLibraryServiceApi->GetUsersByUseridItemsByIdIntros");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->GetUsersByUseridItemsByIdIntros");
            }
            
            var request = new RestRequest("/Users/{UserId}/Items/{Id}/Intros", Method.Get);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultBaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets local trailers for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BaseItemDto&gt;)</returns>
        public async Task<RestResponse<List<BaseItemDto>>> GetUsersByUseridItemsByIdLocaltrailers (string userId, string fields, string id, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserLibraryServiceApi->GetUsersByUseridItemsByIdLocaltrailers");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->GetUsersByUseridItemsByIdLocaltrailers");
            }
            
            var request = new RestRequest("/Users/{UserId}/Items/{Id}/LocalTrailers", Method.Get);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<BaseItemDto>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets special features for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <param name="id">Movie Id</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BaseItemDto&gt;)</returns>
        public async Task<RestResponse<List<BaseItemDto>>> GetUsersByUseridItemsByIdSpecialfeatures (string userId, string fields, string id, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserLibraryServiceApi->GetUsersByUseridItemsByIdSpecialfeatures");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->GetUsersByUseridItemsByIdSpecialfeatures");
            }
            
            var request = new RestRequest("/Users/{UserId}/Items/{Id}/SpecialFeatures", Method.Get);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<BaseItemDto>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets latest media
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, SortName, Studios, Taglines (optional)</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)</param>
        /// <param name="mediaTypes">Optional filter by MediaType. Allows multiple, comma delimited. (optional)</param>
        /// <param name="isFolder">Filter by items that are folders, or not. (optional)</param>
        /// <param name="isPlayed">Filter by items that are played, or not. (optional)</param>
        /// <param name="groupItems">Whether or not to group items into a parent container. (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BaseItemDto&gt;)</returns>
        public async Task<RestResponse<List<BaseItemDto>>> GetUsersByUseridItemsLatest (string userId, int? limit, string parentId, string fields, string includeItemTypes, string mediaTypes, bool? isFolder, bool? isPlayed, bool? groupItems, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserLibraryServiceApi->GetUsersByUseridItemsLatest");
            }
            
            var request = new RestRequest("/Users/{UserId}/Items/Latest", Method.Get);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            if (parentId != null)
            {
                request.AddQueryParameter("ParentId", this.ApiClient.ParameterToString(parentId));
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (includeItemTypes != null)
            {
                request.AddQueryParameter("IncludeItemTypes", this.ApiClient.ParameterToString(includeItemTypes));
            }

            if (mediaTypes != null)
            {
                request.AddQueryParameter("MediaTypes", this.ApiClient.ParameterToString(mediaTypes));
            }

            if (isFolder != null)
            {
                request.AddQueryParameter("IsFolder", this.ApiClient.ParameterToString(isFolder));
            }

            if (isPlayed != null)
            {
                request.AddQueryParameter("IsPlayed", this.ApiClient.ParameterToString(isPlayed));
            }

            if (groupItems != null)
            {
                request.AddQueryParameter("GroupItems", this.ApiClient.ParameterToString(groupItems));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<BaseItemDto>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets the root folder from a user&#x27;s library
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <returns>Task of ApiResponse (BaseItemDto)</returns>
        public async Task<RestResponse<BaseItemDto>> GetUsersByUseridItemsRoot (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserLibraryServiceApi->GetUsersByUseridItemsRoot");
            }
            
            var request = new RestRequest("/Users/{UserId}/Items/Root", Method.Get);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<BaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets additional parts for a video.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="fields">Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)</param>
        /// <param name="id">Item Id</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async Task<RestResponse<QueryResultBaseItemDto>> GetVideosByIdAdditionalparts (string userId, string fields, string id, bool? enableImages, int? imageTypeLimit, string enableImageTypes, bool? enableUserData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->GetVideosByIdAdditionalparts");
            }
            
            var request = new RestRequest("/Videos/{Id}/AdditionalParts", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (fields != null)
            {
                request.AddQueryParameter("Fields", this.ApiClient.ParameterToString(fields));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultBaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates user item access
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">UpdateUserItemAccess</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsAccess (UserLibraryUpdateUserItemAccess body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling UserLibraryServiceApi->PostItemsAccess");
            }
            
            var request = new RestRequest("/Items/Access", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Makes an item private
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsByIdMakeprivate (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->PostItemsByIdMakeprivate");
            }
            
            var request = new RestRequest("/Items/{Id}/MakePrivate", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Makes an item public to all users
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsByIdMakepublic (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->PostItemsByIdMakepublic");
            }
            
            var request = new RestRequest("/Items/{Id}/MakePublic", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Leaves a shared item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">LeaveSharedItems</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsSharedLeave (UserLibraryLeaveSharedItems body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling UserLibraryServiceApi->PostItemsSharedLeave");
            }
            
            var request = new RestRequest("/Items/Shared/Leave", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Marks an item as a favorite
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        public async Task<RestResponse<UserItemDataDto>> PostUsersByUseridFavoriteitemsById (string userId, string id)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserLibraryServiceApi->PostUsersByUseridFavoriteitemsById");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->PostUsersByUseridFavoriteitemsById");
            }
            
            var request = new RestRequest("/Users/{UserId}/FavoriteItems/{Id}", Method.Post);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<UserItemDataDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Unmarks an item as a favorite
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        public async Task<RestResponse<UserItemDataDto>> PostUsersByUseridFavoriteitemsByIdDelete (string userId, string id)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserLibraryServiceApi->PostUsersByUseridFavoriteitemsByIdDelete");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->PostUsersByUseridFavoriteitemsByIdDelete");
            }
            
            var request = new RestRequest("/Users/{UserId}/FavoriteItems/{Id}/Delete", Method.Post);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<UserItemDataDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates a user&#x27;s hide from resume for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <param name="hide">Whether the item should be hidden from reusme or not. true/false</param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        public async Task<RestResponse<UserItemDataDto>> PostUsersByUseridItemsByIdHidefromresume (string userId, string id, bool? hide)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserLibraryServiceApi->PostUsersByUseridItemsByIdHidefromresume");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->PostUsersByUseridItemsByIdHidefromresume");
            }
            
            // verify the required parameter 'hide' is set
            if (hide == null)
            {
                throw new ApiException("Missing required parameter 'hide' when calling UserLibraryServiceApi->PostUsersByUseridItemsByIdHidefromresume");
            }
            
            var request = new RestRequest("/Users/{UserId}/Items/{Id}/HideFromResume", Method.Post);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (hide != null)
            {
                request.AddQueryParameter("Hide", this.ApiClient.ParameterToString(hide));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<UserItemDataDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates a user&#x27;s rating for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <param name="likes">Whether the user likes the item or not. true/false</param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        public async Task<RestResponse<UserItemDataDto>> PostUsersByUseridItemsByIdRating (string userId, string id, bool? likes)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserLibraryServiceApi->PostUsersByUseridItemsByIdRating");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->PostUsersByUseridItemsByIdRating");
            }
            
            // verify the required parameter 'likes' is set
            if (likes == null)
            {
                throw new ApiException("Missing required parameter 'likes' when calling UserLibraryServiceApi->PostUsersByUseridItemsByIdRating");
            }
            
            var request = new RestRequest("/Users/{UserId}/Items/{Id}/Rating", Method.Post);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (likes != null)
            {
                request.AddQueryParameter("Likes", this.ApiClient.ParameterToString(likes));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<UserItemDataDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Deletes a user&#x27;s saved personal rating for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (UserItemDataDto)</returns>
        public async Task<RestResponse<UserItemDataDto>> PostUsersByUseridItemsByIdRatingDelete (string userId, string id)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserLibraryServiceApi->PostUsersByUseridItemsByIdRatingDelete");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UserLibraryServiceApi->PostUsersByUseridItemsByIdRatingDelete");
            }
            
            var request = new RestRequest("/Users/{UserId}/Items/{Id}/Rating/Delete", Method.Post);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<UserItemDataDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
