// <copyright file="ItemLookupServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class ItemLookupServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemLookupServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemLookupServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Gets external id infos for an item
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (List&lt;ExternalIdInfo&gt;)</returns>
        public async Task<RestResponse<List<ExternalIdInfo>>> GetItemsByIdExternalidinfos (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ItemLookupServiceApi->GetItemsByIdExternalidinfos");
            }
            
            var request = new RestRequest("/Items/{Id}/ExternalIdInfos", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<ExternalIdInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a remote image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="imageUrl">The image url</param>
        /// <param name="providerName"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetItemsRemotesearchImage (string imageUrl, string providerName)
        {
            // verify the required parameter 'imageUrl' is set
            if (imageUrl == null)
            {
                throw new ApiException("Missing required parameter 'imageUrl' when calling ItemLookupServiceApi->GetItemsRemotesearchImage");
            }
            
            // verify the required parameter 'providerName' is set
            if (providerName == null)
            {
                throw new ApiException("Missing required parameter 'providerName' when calling ItemLookupServiceApi->GetItemsRemotesearchImage");
            }
            
            var request = new RestRequest("/Items/RemoteSearch/Image", Method.Get);

            if (imageUrl != null)
            {
                request.AddQueryParameter("ImageUrl", this.ApiClient.ParameterToString(imageUrl));
            }

            if (providerName != null)
            {
                request.AddQueryParameter("ProviderName", this.ApiClient.ParameterToString(providerName));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Resets metadata for one or more items
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="itemIds">The item ids</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsMetadataReset (string itemIds)
        {
            // verify the required parameter 'itemIds' is set
            if (itemIds == null)
            {
                throw new ApiException("Missing required parameter 'itemIds' when calling ItemLookupServiceApi->PostItemsMetadataReset");
            }
            
            var request = new RestRequest("/Items/Metadata/Reset", Method.Post);

            if (itemIds != null)
            {
                request.AddQueryParameter("ItemIds", this.ApiClient.ParameterToString(itemIds));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Applies search criteria to an item and refreshes metadata
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">RemoteSearchResult: </param>
        /// <param name="id">The item id</param>
        /// <param name="replaceAllImages">Whether or not to replace all images (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsRemotesearchApplyById (RemoteSearchResult body, string id, bool? replaceAllImages)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ItemLookupServiceApi->PostItemsRemotesearchApplyById");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ItemLookupServiceApi->PostItemsRemotesearchApplyById");
            }
            
            var request = new RestRequest("/Items/RemoteSearch/Apply/{Id}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (replaceAllImages != null)
            {
                request.AddQueryParameter("ReplaceAllImages", this.ApiClient.ParameterToString(replaceAllImages));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">RemoteSearchQuery&#x60;1: </param>
        /// <returns>Task of ApiResponse (List&lt;RemoteSearchResult&gt;)</returns>
        public async Task<RestResponse<List<RemoteSearchResult>>> PostItemsRemotesearchBook (RemoteSearchQueryBookInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ItemLookupServiceApi->PostItemsRemotesearchBook");
            }
            
            var request = new RestRequest("/Items/RemoteSearch/Book", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<RemoteSearchResult>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">RemoteSearchQuery&#x60;1: </param>
        /// <returns>Task of ApiResponse (List&lt;RemoteSearchResult&gt;)</returns>
        public async Task<RestResponse<List<RemoteSearchResult>>> PostItemsRemotesearchBoxset (RemoteSearchQueryItemLookupInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ItemLookupServiceApi->PostItemsRemotesearchBoxset");
            }
            
            var request = new RestRequest("/Items/RemoteSearch/BoxSet", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<RemoteSearchResult>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">RemoteSearchQuery&#x60;1: </param>
        /// <returns>Task of ApiResponse (List&lt;RemoteSearchResult&gt;)</returns>
        public async Task<RestResponse<List<RemoteSearchResult>>> PostItemsRemotesearchGame (RemoteSearchQueryGameInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ItemLookupServiceApi->PostItemsRemotesearchGame");
            }
            
            var request = new RestRequest("/Items/RemoteSearch/Game", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<RemoteSearchResult>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">RemoteSearchQuery&#x60;1: </param>
        /// <returns>Task of ApiResponse (List&lt;RemoteSearchResult&gt;)</returns>
        public async Task<RestResponse<List<RemoteSearchResult>>> PostItemsRemotesearchMovie (RemoteSearchQueryMovieInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ItemLookupServiceApi->PostItemsRemotesearchMovie");
            }
            
            var request = new RestRequest("/Items/RemoteSearch/Movie", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<RemoteSearchResult>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">RemoteSearchQuery&#x60;1: </param>
        /// <returns>Task of ApiResponse (List&lt;RemoteSearchResult&gt;)</returns>
        public async Task<RestResponse<List<RemoteSearchResult>>> PostItemsRemotesearchMusicalbum (RemoteSearchQueryAlbumInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ItemLookupServiceApi->PostItemsRemotesearchMusicalbum");
            }
            
            var request = new RestRequest("/Items/RemoteSearch/MusicAlbum", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<RemoteSearchResult>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">RemoteSearchQuery&#x60;1: </param>
        /// <returns>Task of ApiResponse (List&lt;RemoteSearchResult&gt;)</returns>
        public async Task<RestResponse<List<RemoteSearchResult>>> PostItemsRemotesearchMusicartist (RemoteSearchQueryArtistInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ItemLookupServiceApi->PostItemsRemotesearchMusicartist");
            }
            
            var request = new RestRequest("/Items/RemoteSearch/MusicArtist", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<RemoteSearchResult>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">RemoteSearchQuery&#x60;1: </param>
        /// <returns>Task of ApiResponse (List&lt;RemoteSearchResult&gt;)</returns>
        public async Task<RestResponse<List<RemoteSearchResult>>> PostItemsRemotesearchMusicvideo (RemoteSearchQueryMusicVideoInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ItemLookupServiceApi->PostItemsRemotesearchMusicvideo");
            }
            
            var request = new RestRequest("/Items/RemoteSearch/MusicVideo", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<RemoteSearchResult>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">RemoteSearchQuery&#x60;1: </param>
        /// <returns>Task of ApiResponse (List&lt;RemoteSearchResult&gt;)</returns>
        public async Task<RestResponse<List<RemoteSearchResult>>> PostItemsRemotesearchPerson (RemoteSearchQueryPersonLookupInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ItemLookupServiceApi->PostItemsRemotesearchPerson");
            }
            
            var request = new RestRequest("/Items/RemoteSearch/Person", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<RemoteSearchResult>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">RemoteSearchQuery&#x60;1: </param>
        /// <returns>Task of ApiResponse (List&lt;RemoteSearchResult&gt;)</returns>
        public async Task<RestResponse<List<RemoteSearchResult>>> PostItemsRemotesearchSeries (RemoteSearchQuerySeriesInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ItemLookupServiceApi->PostItemsRemotesearchSeries");
            }
            
            var request = new RestRequest("/Items/RemoteSearch/Series", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<RemoteSearchResult>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">RemoteSearchQuery&#x60;1: </param>
        /// <returns>Task of ApiResponse (List&lt;RemoteSearchResult&gt;)</returns>
        public async Task<RestResponse<List<RemoteSearchResult>>> PostItemsRemotesearchTrailer (RemoteSearchQueryTrailerInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ItemLookupServiceApi->PostItemsRemotesearchTrailer");
            }
            
            var request = new RestRequest("/Items/RemoteSearch/Trailer", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<RemoteSearchResult>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
