// <copyright file="EnvironmentServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class EnvironmentServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnvironmentServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Gets the parent path of a given path
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <returns>Task of ApiResponse (DefaultDirectoryBrowserInfo)</returns>
        public async Task<RestResponse<DefaultDirectoryBrowserInfo>> GetEnvironmentDefaultdirectorybrowser ()
        {
            var request = new RestRequest("/Environment/DefaultDirectoryBrowser", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<DefaultDirectoryBrowserInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets the contents of a given directory in the file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="path"></param>
        /// <param name="includeFiles">An optional filter to include or exclude files from the results. true/false (optional)</param>
        /// <param name="includeDirectories">An optional filter to include or exclude folders from the results. true/false (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IOFileSystemEntryInfo&gt;)</returns>
        public async Task<RestResponse<List<IOFileSystemEntryInfo>>> GetEnvironmentDirectorycontents (string path, bool? includeFiles, bool? includeDirectories)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new ApiException("Missing required parameter 'path' when calling EnvironmentServiceApi->GetEnvironmentDirectorycontents");
            }
            
            var request = new RestRequest("/Environment/DirectoryContents", Method.Get);

            if (path != null)
            {
                request.AddQueryParameter("Path", this.ApiClient.ParameterToString(path));
            }

            if (includeFiles != null)
            {
                request.AddQueryParameter("IncludeFiles", this.ApiClient.ParameterToString(includeFiles));
            }

            if (includeDirectories != null)
            {
                request.AddQueryParameter("IncludeDirectories", this.ApiClient.ParameterToString(includeDirectories));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<IOFileSystemEntryInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets available drives from the server&#x27;s file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <returns>Task of ApiResponse (List&lt;IOFileSystemEntryInfo&gt;)</returns>
        public async Task<RestResponse<List<IOFileSystemEntryInfo>>> GetEnvironmentDrives ()
        {
            var request = new RestRequest("/Environment/Drives", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<IOFileSystemEntryInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of devices on the network
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <returns>Task of ApiResponse (List&lt;IOFileSystemEntryInfo&gt;)</returns>
        public async Task<RestResponse<List<IOFileSystemEntryInfo>>> GetEnvironmentNetworkdevices ()
        {
            var request = new RestRequest("/Environment/NetworkDevices", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<IOFileSystemEntryInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets shares from a network device
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="path"></param>
        /// <returns>Task of ApiResponse (List&lt;IOFileSystemEntryInfo&gt;)</returns>
        public async Task<RestResponse<List<IOFileSystemEntryInfo>>> GetEnvironmentNetworkshares (string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new ApiException("Missing required parameter 'path' when calling EnvironmentServiceApi->GetEnvironmentNetworkshares");
            }
            
            var request = new RestRequest("/Environment/NetworkShares", Method.Get);

            if (path != null)
            {
                request.AddQueryParameter("Path", this.ApiClient.ParameterToString(path));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<IOFileSystemEntryInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets the parent path of a given path
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="path"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async Task<RestResponse<string>> GetEnvironmentParentpath (string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new ApiException("Missing required parameter 'path' when calling EnvironmentServiceApi->GetEnvironmentParentpath");
            }
            
            var request = new RestRequest("/Environment/ParentPath", Method.Get);

            if (path != null)
            {
                request.AddQueryParameter("Path", this.ApiClient.ParameterToString(path));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<string>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets the contents of a given directory in the file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">GetDirectoryContents</param>
        /// <param name="path"></param>
        /// <param name="includeFiles">An optional filter to include or exclude files from the results. true/false (optional)</param>
        /// <param name="includeDirectories">An optional filter to include or exclude folders from the results. true/false (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IOFileSystemEntryInfo&gt;)</returns>
        public async Task<RestResponse<List<IOFileSystemEntryInfo>>> PostEnvironmentDirectorycontents (GetDirectoryContents body, string path, bool? includeFiles, bool? includeDirectories)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling EnvironmentServiceApi->PostEnvironmentDirectorycontents");
            }
            
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new ApiException("Missing required parameter 'path' when calling EnvironmentServiceApi->PostEnvironmentDirectorycontents");
            }
            
            var request = new RestRequest("/Environment/DirectoryContents", Method.Post);

            if (path != null)
            {
                request.AddQueryParameter("Path", this.ApiClient.ParameterToString(path));
            }

            if (includeFiles != null)
            {
                request.AddQueryParameter("IncludeFiles", this.ApiClient.ParameterToString(includeFiles));
            }

            if (includeDirectories != null)
            {
                request.AddQueryParameter("IncludeDirectories", this.ApiClient.ParameterToString(includeDirectories));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<IOFileSystemEntryInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets the contents of a given directory in the file system
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">ValidatePath</param>
        /// <param name="path"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostEnvironmentValidatepath (ValidatePath body, string path)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling EnvironmentServiceApi->PostEnvironmentValidatepath");
            }
            
            // verify the required parameter 'path' is set
            if (path == null)
            {
                throw new ApiException("Missing required parameter 'path' when calling EnvironmentServiceApi->PostEnvironmentValidatepath");
            }
            
            var request = new RestRequest("/Environment/ValidatePath", Method.Post);

            if (path != null)
            {
                request.AddQueryParameter("Path", this.ApiClient.ParameterToString(path));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
