// <copyright file="UserViewsServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class UserViewsServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserViewsServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserViewsServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="userId">User Id</param>
        /// <param name="includeExternalContent">Whether or not to include external views such as channels or live tv</param>
        /// <returns>Task of ApiResponse (QueryResultBaseItemDto)</returns>
        public async Task<RestResponse<QueryResultBaseItemDto>> GetUsersByUseridViews (string userId, bool? includeExternalContent)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new ApiException("Missing required parameter 'userId' when calling UserViewsServiceApi->GetUsersByUseridViews");
            }
            
            // verify the required parameter 'includeExternalContent' is set
            if (includeExternalContent == null)
            {
                throw new ApiException("Missing required parameter 'includeExternalContent' when calling UserViewsServiceApi->GetUsersByUseridViews");
            }
            
            var request = new RestRequest("/Users/{UserId}/Views", Method.Get);

            if (userId != null)
            {
                request.AddParameter("UserId", this.ApiClient.ParameterToString(userId), ParameterType.UrlSegment);
            }

            if (includeExternalContent != null)
            {
                request.AddQueryParameter("IncludeExternalContent", this.ApiClient.ParameterToString(includeExternalContent));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultBaseItemDto>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
