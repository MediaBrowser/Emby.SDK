// <copyright file="LibraryStructureServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class LibraryStructureServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryStructureServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LibraryStructureServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteLibraryVirtualfolders ()
        {
            var request = new RestRequest("/Library/VirtualFolders", Method.Delete);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteLibraryVirtualfoldersPaths ()
        {
            var request = new RestRequest("/Library/VirtualFolders/Paths", Method.Delete);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="startIndex">Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)</param>
        /// <param name="limit">Optional. The maximum number of records to return (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultVirtualFolderInfo)</returns>
        public async Task<RestResponse<QueryResultVirtualFolderInfo>> GetLibraryVirtualfoldersQuery (int? startIndex, int? limit)
        {
            var request = new RestRequest("/Library/VirtualFolders/Query", Method.Get);

            if (startIndex != null)
            {
                request.AddQueryParameter("StartIndex", this.ApiClient.ParameterToString(startIndex));
            }

            if (limit != null)
            {
                request.AddQueryParameter("Limit", this.ApiClient.ParameterToString(limit));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<QueryResultVirtualFolderInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">AddVirtualFolder</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLibraryVirtualfolders (LibraryAddVirtualFolder body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LibraryStructureServiceApi->PostLibraryVirtualfolders");
            }
            
            var request = new RestRequest("/Library/VirtualFolders", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">RemoveVirtualFolder</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLibraryVirtualfoldersDelete (LibraryRemoveVirtualFolder body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LibraryStructureServiceApi->PostLibraryVirtualfoldersDelete");
            }
            
            var request = new RestRequest("/Library/VirtualFolders/Delete", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">UpdateLibraryOptions</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLibraryVirtualfoldersLibraryoptions (LibraryUpdateLibraryOptions body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LibraryStructureServiceApi->PostLibraryVirtualfoldersLibraryoptions");
            }
            
            var request = new RestRequest("/Library/VirtualFolders/LibraryOptions", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">RenameVirtualFolder</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLibraryVirtualfoldersName (LibraryRenameVirtualFolder body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LibraryStructureServiceApi->PostLibraryVirtualfoldersName");
            }
            
            var request = new RestRequest("/Library/VirtualFolders/Name", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">AddMediaPath</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLibraryVirtualfoldersPaths (LibraryAddMediaPath body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LibraryStructureServiceApi->PostLibraryVirtualfoldersPaths");
            }
            
            var request = new RestRequest("/Library/VirtualFolders/Paths", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">RemoveMediaPath</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLibraryVirtualfoldersPathsDelete (LibraryRemoveMediaPath body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LibraryStructureServiceApi->PostLibraryVirtualfoldersPathsDelete");
            }
            
            var request = new RestRequest("/Library/VirtualFolders/Paths/Delete", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">UpdateMediaPath</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostLibraryVirtualfoldersPathsUpdate (LibraryUpdateMediaPath body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling LibraryStructureServiceApi->PostLibraryVirtualfoldersPathsUpdate");
            }
            
            var request = new RestRequest("/Library/VirtualFolders/Paths/Update", Method.Post);

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
