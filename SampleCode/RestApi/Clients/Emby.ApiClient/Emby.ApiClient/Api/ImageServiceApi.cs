// <copyright file="ImageServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class ImageServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImageServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteItemsByIdImagesByType (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->DeleteItemsByIdImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->DeleteItemsByIdImagesByType");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteItemsByIdImagesByTypeByIndex (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->DeleteItemsByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->DeleteItemsByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->DeleteItemsByIdImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}/{Index}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteUsersByIdImagesByType (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->DeleteUsersByIdImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->DeleteUsersByIdImagesByType");
            }
            
            var request = new RestRequest("/Users/{Id}/Images/{Type}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeleteUsersByIdImagesByTypeByIndex (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->DeleteUsersByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->DeleteUsersByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->DeleteUsersByIdImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Users/{Id}/Images/{Type}/{Index}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetArtistsByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->GetArtistsByNameImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetArtistsByNameImagesByType");
            }
            
            var request = new RestRequest("/Artists/{Name}/Images/{Type}", Method.Get);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetArtistsByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->GetArtistsByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetArtistsByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->GetArtistsByNameImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Artists/{Name}/Images/{Type}/{Index}", Method.Get);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetGamegenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->GetGamegenresByNameImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetGamegenresByNameImagesByType");
            }
            
            var request = new RestRequest("/GameGenres/{Name}/Images/{Type}", Method.Get);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetGamegenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->GetGamegenresByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetGamegenresByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->GetGamegenresByNameImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/GameGenres/{Name}/Images/{Type}/{Index}", Method.Get);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetGenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->GetGenresByNameImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetGenresByNameImagesByType");
            }
            
            var request = new RestRequest("/Genres/{Name}/Images/{Type}", Method.Get);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetGenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->GetGenresByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetGenresByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->GetGenresByNameImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Genres/{Name}/Images/{Type}/{Index}", Method.Get);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets information about an item&#x27;s images
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <returns>Task of ApiResponse (List&lt;ImageInfo&gt;)</returns>
        public async Task<RestResponse<List<ImageInfo>>> GetItemsByIdImages (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->GetItemsByIdImages");
            }
            
            var request = new RestRequest("/Items/{Id}/Images", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<ImageInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetItemsByIdImagesByType (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->GetItemsByIdImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetItemsByIdImagesByType");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetItemsByIdImagesByTypeByIndex (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}/{Index}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'percentPlayed' is set
            if (percentPlayed == null)
            {
                throw new ApiException("Missing required parameter 'percentPlayed' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'unPlayedCount' is set
            if (unPlayedCount == null)
            {
                throw new ApiException("Missing required parameter 'unPlayedCount' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'maxWidth' is set
            if (maxWidth == null)
            {
                throw new ApiException("Missing required parameter 'maxWidth' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'maxHeight' is set
            if (maxHeight == null)
            {
                throw new ApiException("Missing required parameter 'maxHeight' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new ApiException("Missing required parameter 'tag' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'format' is set
            if (format == null)
            {
                throw new ApiException("Missing required parameter 'format' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}", Method.Get);

            if (percentPlayed != null)
            {
                request.AddParameter("PercentPlayed", this.ApiClient.ParameterToString(percentPlayed), ParameterType.UrlSegment);
            }

            if (unPlayedCount != null)
            {
                request.AddParameter("UnPlayedCount", this.ApiClient.ParameterToString(unPlayedCount), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth), ParameterType.UrlSegment);
            }

            if (maxHeight != null)
            {
                request.AddParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight), ParameterType.UrlSegment);
            }

            if (tag != null)
            {
                request.AddParameter("Tag", this.ApiClient.ParameterToString(tag), ParameterType.UrlSegment);
            }

            if (format != null)
            {
                request.AddParameter("Format", this.ApiClient.ParameterToString(format), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetMusicgenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->GetMusicgenresByNameImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetMusicgenresByNameImagesByType");
            }
            
            var request = new RestRequest("/MusicGenres/{Name}/Images/{Type}", Method.Get);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetMusicgenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->GetMusicgenresByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetMusicgenresByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->GetMusicgenresByNameImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/MusicGenres/{Name}/Images/{Type}/{Index}", Method.Get);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetPersonsByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->GetPersonsByNameImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetPersonsByNameImagesByType");
            }
            
            var request = new RestRequest("/Persons/{Name}/Images/{Type}", Method.Get);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetPersonsByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->GetPersonsByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetPersonsByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->GetPersonsByNameImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Persons/{Name}/Images/{Type}/{Index}", Method.Get);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetStudiosByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->GetStudiosByNameImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetStudiosByNameImagesByType");
            }
            
            var request = new RestRequest("/Studios/{Name}/Images/{Type}", Method.Get);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetStudiosByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->GetStudiosByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetStudiosByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->GetStudiosByNameImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Studios/{Name}/Images/{Type}/{Index}", Method.Get);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetUsersByIdImagesByType (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->GetUsersByIdImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetUsersByIdImagesByType");
            }
            
            var request = new RestRequest("/Users/{Id}/Images/{Type}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetUsersByIdImagesByTypeByIndex (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->GetUsersByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->GetUsersByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->GetUsersByIdImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Users/{Id}/Images/{Type}/{Index}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadArtistsByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->HeadArtistsByNameImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadArtistsByNameImagesByType");
            }
            
            var request = new RestRequest("/Artists/{Name}/Images/{Type}", Method.Head);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadArtistsByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->HeadArtistsByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadArtistsByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->HeadArtistsByNameImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Artists/{Name}/Images/{Type}/{Index}", Method.Head);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadGamegenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->HeadGamegenresByNameImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadGamegenresByNameImagesByType");
            }
            
            var request = new RestRequest("/GameGenres/{Name}/Images/{Type}", Method.Head);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadGamegenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->HeadGamegenresByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadGamegenresByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->HeadGamegenresByNameImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/GameGenres/{Name}/Images/{Type}/{Index}", Method.Head);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadGenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->HeadGenresByNameImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadGenresByNameImagesByType");
            }
            
            var request = new RestRequest("/Genres/{Name}/Images/{Type}", Method.Head);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadGenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->HeadGenresByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadGenresByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->HeadGenresByNameImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Genres/{Name}/Images/{Type}/{Index}", Method.Head);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadItemsByIdImagesByType (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->HeadItemsByIdImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadItemsByIdImagesByType");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}", Method.Head);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadItemsByIdImagesByTypeByIndex (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}/{Index}", Method.Head);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="percentPlayed"></param>
        /// <param name="unPlayedCount"></param>
        /// <param name="id">Item Id</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount (int? percentPlayed, int? unPlayedCount, string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'percentPlayed' is set
            if (percentPlayed == null)
            {
                throw new ApiException("Missing required parameter 'percentPlayed' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'unPlayedCount' is set
            if (unPlayedCount == null)
            {
                throw new ApiException("Missing required parameter 'unPlayedCount' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'maxWidth' is set
            if (maxWidth == null)
            {
                throw new ApiException("Missing required parameter 'maxWidth' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'maxHeight' is set
            if (maxHeight == null)
            {
                throw new ApiException("Missing required parameter 'maxHeight' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new ApiException("Missing required parameter 'tag' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'format' is set
            if (format == null)
            {
                throw new ApiException("Missing required parameter 'format' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}", Method.Head);

            if (percentPlayed != null)
            {
                request.AddParameter("PercentPlayed", this.ApiClient.ParameterToString(percentPlayed), ParameterType.UrlSegment);
            }

            if (unPlayedCount != null)
            {
                request.AddParameter("UnPlayedCount", this.ApiClient.ParameterToString(unPlayedCount), ParameterType.UrlSegment);
            }

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth), ParameterType.UrlSegment);
            }

            if (maxHeight != null)
            {
                request.AddParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight), ParameterType.UrlSegment);
            }

            if (tag != null)
            {
                request.AddParameter("Tag", this.ApiClient.ParameterToString(tag), ParameterType.UrlSegment);
            }

            if (format != null)
            {
                request.AddParameter("Format", this.ApiClient.ParameterToString(format), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadMusicgenresByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->HeadMusicgenresByNameImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadMusicgenresByNameImagesByType");
            }
            
            var request = new RestRequest("/MusicGenres/{Name}/Images/{Type}", Method.Head);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadMusicgenresByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->HeadMusicgenresByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadMusicgenresByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->HeadMusicgenresByNameImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/MusicGenres/{Name}/Images/{Type}/{Index}", Method.Head);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadPersonsByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->HeadPersonsByNameImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadPersonsByNameImagesByType");
            }
            
            var request = new RestRequest("/Persons/{Name}/Images/{Type}", Method.Head);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadPersonsByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->HeadPersonsByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadPersonsByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->HeadPersonsByNameImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Persons/{Name}/Images/{Type}/{Index}", Method.Head);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadStudiosByNameImagesByType (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->HeadStudiosByNameImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadStudiosByNameImagesByType");
            }
            
            var request = new RestRequest("/Studios/{Name}/Images/{Type}", Method.Head);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">Item name</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadStudiosByNameImagesByTypeByIndex (string name, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling ImageServiceApi->HeadStudiosByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadStudiosByNameImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->HeadStudiosByNameImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Studios/{Name}/Images/{Type}/{Index}", Method.Head);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadUsersByIdImagesByType (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->HeadUsersByIdImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadUsersByIdImagesByType");
            }
            
            var request = new RestRequest("/Users/{Id}/Images/{Type}", Method.Head);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">User Id</param>
        /// <param name="maxWidth">The maximum image width to return. (optional)</param>
        /// <param name="maxHeight">The maximum image height to return. (optional)</param>
        /// <param name="width">The fixed image width to return. (optional)</param>
        /// <param name="height">The fixed image height to return. (optional)</param>
        /// <param name="quality">Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)</param>
        /// <param name="cropWhitespace">Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)</param>
        /// <param name="enableImageEnhancers">Enable or disable image enhancers such as cover art. (optional)</param>
        /// <param name="format">Determines the output foramt of the image - original,gif,jpg,png (optional)</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images. (optional)</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image. (optional)</param>
        /// <param name="autoOrient">Set to true to force normalization of orientation in the event the renderer does not support it. (optional)</param>
        /// <param name="keepAnimation">Set to true to retain image animation (when supported). (optional)</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadUsersByIdImagesByTypeByIndex (string id, int? maxWidth, int? maxHeight, int? width, int? height, int? quality, string tag, bool? cropWhitespace, bool? enableImageEnhancers, string format, string backgroundColor, string foregroundLayer, bool? autoOrient, bool? keepAnimation, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->HeadUsersByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->HeadUsersByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->HeadUsersByIdImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Users/{Id}/Images/{Type}/{Index}", Method.Head);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (maxWidth != null)
            {
                request.AddQueryParameter("MaxWidth", this.ApiClient.ParameterToString(maxWidth));
            }

            if (maxHeight != null)
            {
                request.AddQueryParameter("MaxHeight", this.ApiClient.ParameterToString(maxHeight));
            }

            if (width != null)
            {
                request.AddQueryParameter("Width", this.ApiClient.ParameterToString(width));
            }

            if (height != null)
            {
                request.AddQueryParameter("Height", this.ApiClient.ParameterToString(height));
            }

            if (quality != null)
            {
                request.AddQueryParameter("Quality", this.ApiClient.ParameterToString(quality));
            }

            if (tag != null)
            {
                request.AddQueryParameter("Tag", this.ApiClient.ParameterToString(tag));
            }

            if (cropWhitespace != null)
            {
                request.AddQueryParameter("CropWhitespace", this.ApiClient.ParameterToString(cropWhitespace));
            }

            if (enableImageEnhancers != null)
            {
                request.AddQueryParameter("EnableImageEnhancers", this.ApiClient.ParameterToString(enableImageEnhancers));
            }

            if (format != null)
            {
                request.AddQueryParameter("Format", this.ApiClient.ParameterToString(format));
            }

            if (backgroundColor != null)
            {
                request.AddQueryParameter("BackgroundColor", this.ApiClient.ParameterToString(backgroundColor));
            }

            if (foregroundLayer != null)
            {
                request.AddQueryParameter("ForegroundLayer", this.ApiClient.ParameterToString(foregroundLayer));
            }

            if (autoOrient != null)
            {
                request.AddQueryParameter("AutoOrient", this.ApiClient.ParameterToString(autoOrient));
            }

            if (keepAnimation != null)
            {
                request.AddQueryParameter("KeepAnimation", this.ApiClient.ParameterToString(keepAnimation));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsByIdImagesByType (Object body, string id, ImageType type, int? index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ImageServiceApi->PostItemsByIdImagesByType");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByType");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="body">Binary stream</param>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsByIdImagesByTypeByIndex (Object body, string id, ImageType type, int? index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}/{Index}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsByIdImagesByTypeByIndexDelete (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexDelete");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexDelete");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexDelete");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}/{Index}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates the index for an item image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="newIndex">The new image index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsByIdImagesByTypeByIndexIndex (string id, ImageType type, int? index, int? newIndex)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexIndex");
            }
            
            // verify the required parameter 'newIndex' is set
            if (newIndex == null)
            {
                throw new ApiException("Missing required parameter 'newIndex' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexIndex");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}/{Index}/Index", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (newIndex != null)
            {
                request.AddQueryParameter("NewIndex", this.ApiClient.ParameterToString(newIndex));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Updates the index for an item image
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <param name="url">The url for the new image</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsByIdImagesByTypeByIndexUrl (string id, ImageType type, int? index, string url)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexUrl");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexUrl");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexUrl");
            }
            
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new ApiException("Missing required parameter 'url' when calling ImageServiceApi->PostItemsByIdImagesByTypeByIndexUrl");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}/{Index}/Url", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (url != null)
            {
                request.AddQueryParameter("Url", this.ApiClient.ParameterToString(url));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostItemsByIdImagesByTypeDelete (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->PostItemsByIdImagesByTypeDelete");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->PostItemsByIdImagesByTypeDelete");
            }
            
            var request = new RestRequest("/Items/{Id}/Images/{Type}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByIdImagesByType (Object body, string id, ImageType type, int? index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ImageServiceApi->PostUsersByIdImagesByType");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->PostUsersByIdImagesByType");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->PostUsersByIdImagesByType");
            }
            
            var request = new RestRequest("/Users/{Id}/Images/{Type}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Uploads an image for an item, must be base64 encoded.
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="body">Binary stream</param>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByIdImagesByTypeByIndex (Object body, string id, ImageType type, int? index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndex");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndex");
            }
            
            var request = new RestRequest("/Users/{Id}/Images/{Type}/{Index}", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByIdImagesByTypeByIndexDelete (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndexDelete");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndexDelete");
            }
            
            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new ApiException("Missing required parameter 'index' when calling ImageServiceApi->PostUsersByIdImagesByTypeByIndexDelete");
            }
            
            var request = new RestRequest("/Users/{Id}/Images/{Type}/{Index}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddParameter("Index", this.ApiClient.ParameterToString(index), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">User Id</param>
        /// <param name="type">Image Type</param>
        /// <param name="index">Image Index (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostUsersByIdImagesByTypeDelete (string id, ImageType type, int? index)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling ImageServiceApi->PostUsersByIdImagesByTypeDelete");
            }
            
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException("Missing required parameter 'type' when calling ImageServiceApi->PostUsersByIdImagesByTypeDelete");
            }
            
            var request = new RestRequest("/Users/{Id}/Images/{Type}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (type != null)
            {
                request.AddParameter("Type", this.ApiClient.ParameterToString(type), ParameterType.UrlSegment);
            }

            if (index != null)
            {
                request.AddQueryParameter("Index", this.ApiClient.ParameterToString(index));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
