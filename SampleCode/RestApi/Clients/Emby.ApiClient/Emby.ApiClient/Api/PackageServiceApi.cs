// <copyright file="PackageServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class PackageServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PackageServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Cancels a package installation
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Installation Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> DeletePackagesInstallingById (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PackageServiceApi->DeletePackagesInstallingById");
            }
            
            var request = new RestRequest("/Packages/Installing/{Id}", Method.Delete);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets available packages
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="packageType">Optional package type filter (System/UserInstalled) (optional)</param>
        /// <param name="targetSystems">Optional. Filter by target system type. Allows multiple, comma delimited. (optional)</param>
        /// <param name="isPremium">Optional. Filter by premium status (optional)</param>
        /// <param name="isAdult">Optional. Filter by package that contain adult content. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PackageInfo&gt;)</returns>
        public async Task<RestResponse<List<PackageInfo>>> GetPackages (string packageType, string targetSystems, bool? isPremium, bool? isAdult)
        {
            var request = new RestRequest("/Packages", Method.Get);

            if (packageType != null)
            {
                request.AddQueryParameter("PackageType", this.ApiClient.ParameterToString(packageType));
            }

            if (targetSystems != null)
            {
                request.AddQueryParameter("TargetSystems", this.ApiClient.ParameterToString(targetSystems));
            }

            if (isPremium != null)
            {
                request.AddQueryParameter("IsPremium", this.ApiClient.ParameterToString(isPremium));
            }

            if (isAdult != null)
            {
                request.AddQueryParameter("IsAdult", this.ApiClient.ParameterToString(isAdult));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<PackageInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a package, by name or assembly guid
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="name">The name of the package</param>
        /// <param name="assemblyGuid">The guid of the associated assembly (optional)</param>
        /// <returns>Task of ApiResponse (PackageInfo)</returns>
        public async Task<RestResponse<PackageInfo>> GetPackagesByName (string name, string assemblyGuid)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling PackageServiceApi->GetPackagesByName");
            }
            
            var request = new RestRequest("/Packages/{Name}", Method.Get);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (assemblyGuid != null)
            {
                request.AddQueryParameter("AssemblyGuid", this.ApiClient.ParameterToString(assemblyGuid));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<PackageInfo>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets available package updates for currently installed packages
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="packageType">Package type filter (System/UserInstalled)</param>
        /// <returns>Task of ApiResponse (List&lt;PackageVersionInfo&gt;)</returns>
        public async Task<RestResponse<List<PackageVersionInfo>>> GetPackagesUpdates (string packageType)
        {
            // verify the required parameter 'packageType' is set
            if (packageType == null)
            {
                throw new ApiException("Missing required parameter 'packageType' when calling PackageServiceApi->GetPackagesUpdates");
            }
            
            var request = new RestRequest("/Packages/Updates", Method.Get);

            if (packageType != null)
            {
                request.AddQueryParameter("PackageType", this.ApiClient.ParameterToString(packageType));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<PackageVersionInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Installs a package
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="name">Package name</param>
        /// <param name="assemblyGuid">Guid of the associated assembly (optional)</param>
        /// <param name="version">Optional version. Defaults to latest version. (optional)</param>
        /// <param name="updateClass">Optional update class (Dev, Beta, Release). Defaults to Release. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostPackagesInstalledByName (string name, string assemblyGuid, string version, PackageVersionClass updateClass)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException("Missing required parameter 'name' when calling PackageServiceApi->PostPackagesInstalledByName");
            }
            
            var request = new RestRequest("/Packages/Installed/{Name}", Method.Post);

            if (name != null)
            {
                request.AddParameter("Name", this.ApiClient.ParameterToString(name), ParameterType.UrlSegment);
            }

            if (assemblyGuid != null)
            {
                request.AddQueryParameter("AssemblyGuid", this.ApiClient.ParameterToString(assemblyGuid));
            }

            if (version != null)
            {
                request.AddQueryParameter("Version", this.ApiClient.ParameterToString(version));
            }

            if (updateClass != null)
            {
                request.AddQueryParameter("UpdateClass", this.ApiClient.ParameterToString(updateClass));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Cancels a package installation
        /// </summary>
        /// <remarks>
        /// Requires authentication as administrator
        /// </remarks>
        /// <param name="id">Installation Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostPackagesInstallingByIdDelete (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling PackageServiceApi->PostPackagesInstallingByIdDelete");
            }
            
            var request = new RestRequest("/Packages/Installing/{Id}/Delete", Method.Post);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
