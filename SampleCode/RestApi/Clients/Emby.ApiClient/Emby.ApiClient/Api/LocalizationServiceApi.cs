// <copyright file="LocalizationServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class LocalizationServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizationServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocalizationServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Gets known countries
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (List&lt;GlobalizationCountryInfo&gt;)</returns>
        public async Task<RestResponse<List<GlobalizationCountryInfo>>> GetLocalizationCountries ()
        {
            var request = new RestRequest("/Localization/Countries", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<GlobalizationCountryInfo>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets known cultures
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (List&lt;GlobalizationCultureDto&gt;)</returns>
        public async Task<RestResponse<List<GlobalizationCultureDto>>> GetLocalizationCultures ()
        {
            var request = new RestRequest("/Localization/Cultures", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<GlobalizationCultureDto>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets localization options
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (List&lt;GlobalizationLocalizatonOption&gt;)</returns>
        public async Task<RestResponse<List<GlobalizationLocalizatonOption>>> GetLocalizationOptions ()
        {
            var request = new RestRequest("/Localization/Options", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<GlobalizationLocalizatonOption>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets known parental ratings
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <returns>Task of ApiResponse (List&lt;ParentalRating&gt;)</returns>
        public async Task<RestResponse<List<ParentalRating>>> GetLocalizationParentalratings ()
        {
            var request = new RestRequest("/Localization/ParentalRatings", Method.Get);

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<ParentalRating>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
