// <copyright file="DlnaServerServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	
    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class DlnaServerServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DlnaServerServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DlnaServerServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Gets dlna connection manager xml
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name="uuId">Server UuId</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetDlnaByUuidConnectionmanagerConnectionmanager (string uuId)
        {
            // verify the required parameter 'uuId' is set
            if (uuId == null)
            {
                throw new ApiException("Missing required parameter 'uuId' when calling DlnaServerServiceApi->GetDlnaByUuidConnectionmanagerConnectionmanager");
            }
            
            var request = new RestRequest("/Dlna/{UuId}/connectionmanager/connectionmanager", Method.Get);

            if (uuId != null)
            {
                request.AddParameter("UuId", this.ApiClient.ParameterToString(uuId), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets dlna connection manager xml
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name="uuId">Server UuId</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetDlnaByUuidConnectionmanagerConnectionmanagerXml (string uuId)
        {
            // verify the required parameter 'uuId' is set
            if (uuId == null)
            {
                throw new ApiException("Missing required parameter 'uuId' when calling DlnaServerServiceApi->GetDlnaByUuidConnectionmanagerConnectionmanagerXml");
            }
            
            var request = new RestRequest("/Dlna/{UuId}/connectionmanager/connectionmanager.xml", Method.Get);

            if (uuId != null)
            {
                request.AddParameter("UuId", this.ApiClient.ParameterToString(uuId), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets dlna content directory xml
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name="uuId">Server UuId</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetDlnaByUuidContentdirectoryContentdirectory (string uuId)
        {
            // verify the required parameter 'uuId' is set
            if (uuId == null)
            {
                throw new ApiException("Missing required parameter 'uuId' when calling DlnaServerServiceApi->GetDlnaByUuidContentdirectoryContentdirectory");
            }
            
            var request = new RestRequest("/Dlna/{UuId}/contentdirectory/contentdirectory", Method.Get);

            if (uuId != null)
            {
                request.AddParameter("UuId", this.ApiClient.ParameterToString(uuId), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets dlna content directory xml
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name="uuId">Server UuId</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetDlnaByUuidContentdirectoryContentdirectoryXml (string uuId)
        {
            // verify the required parameter 'uuId' is set
            if (uuId == null)
            {
                throw new ApiException("Missing required parameter 'uuId' when calling DlnaServerServiceApi->GetDlnaByUuidContentdirectoryContentdirectoryXml");
            }
            
            var request = new RestRequest("/Dlna/{UuId}/contentdirectory/contentdirectory.xml", Method.Get);

            if (uuId != null)
            {
                request.AddParameter("UuId", this.ApiClient.ParameterToString(uuId), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets dlna server info
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name="uuId">Server UuId</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetDlnaByUuidDescription (string uuId)
        {
            // verify the required parameter 'uuId' is set
            if (uuId == null)
            {
                throw new ApiException("Missing required parameter 'uuId' when calling DlnaServerServiceApi->GetDlnaByUuidDescription");
            }
            
            var request = new RestRequest("/Dlna/{UuId}/description", Method.Get);

            if (uuId != null)
            {
                request.AddParameter("UuId", this.ApiClient.ParameterToString(uuId), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets dlna server info
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name="uuId">Server UuId</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetDlnaByUuidDescriptionXml (string uuId)
        {
            // verify the required parameter 'uuId' is set
            if (uuId == null)
            {
                throw new ApiException("Missing required parameter 'uuId' when calling DlnaServerServiceApi->GetDlnaByUuidDescriptionXml");
            }
            
            var request = new RestRequest("/Dlna/{UuId}/description.xml", Method.Get);

            if (uuId != null)
            {
                request.AddParameter("UuId", this.ApiClient.ParameterToString(uuId), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a server icon
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name="uuId">Server UuId</param>
        /// <param name="filename">The icon filename</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetDlnaByUuidIconsByFilename (string uuId, string filename)
        {
            // verify the required parameter 'uuId' is set
            if (uuId == null)
            {
                throw new ApiException("Missing required parameter 'uuId' when calling DlnaServerServiceApi->GetDlnaByUuidIconsByFilename");
            }
            
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new ApiException("Missing required parameter 'filename' when calling DlnaServerServiceApi->GetDlnaByUuidIconsByFilename");
            }
            
            var request = new RestRequest("/Dlna/{UuId}/icons/{Filename}", Method.Get);

            if (uuId != null)
            {
                request.AddParameter("UuId", this.ApiClient.ParameterToString(uuId), ParameterType.UrlSegment);
            }

            if (filename != null)
            {
                request.AddParameter("Filename", this.ApiClient.ParameterToString(filename), ParameterType.UrlSegment);
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets a server icon
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name="uuId">Server UuId (optional)</param>
        /// <param name="filename">The icon filename</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetDlnaIconsByFilename (string uuId, string filename)
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new ApiException("Missing required parameter 'filename' when calling DlnaServerServiceApi->GetDlnaIconsByFilename");
            }
            
            var request = new RestRequest("/Dlna/icons/{Filename}", Method.Get);

            if (filename != null)
            {
                request.AddParameter("Filename", this.ApiClient.ParameterToString(filename), ParameterType.UrlSegment);
            }

            if (uuId != null)
            {
                request.AddQueryParameter("UuId", this.ApiClient.ParameterToString(uuId));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Processes a control request
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name="body">Binary stream</param>
        /// <param name="uuId">Server UuId</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostDlnaByUuidConnectionmanagerControl (Object body, string uuId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling DlnaServerServiceApi->PostDlnaByUuidConnectionmanagerControl");
            }
            
            // verify the required parameter 'uuId' is set
            if (uuId == null)
            {
                throw new ApiException("Missing required parameter 'uuId' when calling DlnaServerServiceApi->PostDlnaByUuidConnectionmanagerControl");
            }
            
            var request = new RestRequest("/Dlna/{UuId}/connectionmanager/control", Method.Post);

            if (uuId != null)
            {
                request.AddParameter("UuId", this.ApiClient.ParameterToString(uuId), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Processes a control request
        /// </summary>
        /// <remarks>
        /// No authentication required
        /// </remarks>
        /// <param name="body">Binary stream</param>
        /// <param name="uuId">Server UuId</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> PostDlnaByUuidContentdirectoryControl (Object body, string uuId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new ApiException("Missing required parameter 'body' when calling DlnaServerServiceApi->PostDlnaByUuidContentdirectoryControl");
            }
            
            // verify the required parameter 'uuId' is set
            if (uuId == null)
            {
                throw new ApiException("Missing required parameter 'uuId' when calling DlnaServerServiceApi->PostDlnaByUuidContentdirectoryControl");
            }
            
            var request = new RestRequest("/Dlna/{UuId}/contentdirectory/control", Method.Post);

            if (uuId != null)
            {
                request.AddParameter("UuId", this.ApiClient.ParameterToString(uuId), ParameterType.UrlSegment);
            }

            if (body != null)
            {
                request.AddJsonBody(body);
            }
            
            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
