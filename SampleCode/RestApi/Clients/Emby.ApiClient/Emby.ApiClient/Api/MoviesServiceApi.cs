// <copyright file="MoviesServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	using Emby.ApiClient.Model;

    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class MoviesServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoviesServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MoviesServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Gets movie recommendations
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="categoryLimit">The max number of categories to return (optional)</param>
        /// <param name="itemLimit">The max number of items to return per category (optional)</param>
        /// <param name="userId">Optional. Filter by user id, and attach user data (optional)</param>
        /// <param name="parentId">Specify this to localize the search to a specific item or folder. Omit to use the root (optional)</param>
        /// <param name="enableImages">Optional, include image information in output (optional)</param>
        /// <param name="enableUserData">Optional, include user data (optional)</param>
        /// <param name="imageTypeLimit">Optional, the max number of images to return, per image type (optional)</param>
        /// <param name="enableImageTypes">Optional. The image types to include in the output. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RecommendationDto&gt;)</returns>
        public async Task<RestResponse<List<RecommendationDto>>> GetMoviesRecommendations (int? categoryLimit, int? itemLimit, string userId, string parentId, bool? enableImages, bool? enableUserData, int? imageTypeLimit, string enableImageTypes)
        {
            var request = new RestRequest("/Movies/Recommendations", Method.Get);

            if (categoryLimit != null)
            {
                request.AddQueryParameter("CategoryLimit", this.ApiClient.ParameterToString(categoryLimit));
            }

            if (itemLimit != null)
            {
                request.AddQueryParameter("ItemLimit", this.ApiClient.ParameterToString(itemLimit));
            }

            if (userId != null)
            {
                request.AddQueryParameter("UserId", this.ApiClient.ParameterToString(userId));
            }

            if (parentId != null)
            {
                request.AddQueryParameter("ParentId", this.ApiClient.ParameterToString(parentId));
            }

            if (enableImages != null)
            {
                request.AddQueryParameter("EnableImages", this.ApiClient.ParameterToString(enableImages));
            }

            if (enableUserData != null)
            {
                request.AddQueryParameter("EnableUserData", this.ApiClient.ParameterToString(enableUserData));
            }

            if (imageTypeLimit != null)
            {
                request.AddQueryParameter("ImageTypeLimit", this.ApiClient.ParameterToString(imageTypeLimit));
            }

            if (enableImageTypes != null)
            {
                request.AddQueryParameter("EnableImageTypes", this.ApiClient.ParameterToString(enableImageTypes));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<List<RecommendationDto>>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
