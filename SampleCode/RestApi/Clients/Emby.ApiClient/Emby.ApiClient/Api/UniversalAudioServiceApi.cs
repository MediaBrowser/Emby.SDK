// <copyright file="UniversalAudioServiceApi.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Api
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
    using System.Threading.Tasks;
	using RestSharp;
	using Emby.ApiClient.Client;
	
    /// <summary>
    /// Provides a collection of service methods to interact with the API endpoints.
    /// </summary>
    public partial class UniversalAudioServiceApi : IApiAccessor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniversalAudioServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UniversalAudioServiceApi(ApiClient apiClient)
        {
            this.ApiClient = apiClient;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.Options.BaseUrl?.ToString();
        }

        /// <summary>Gets the ApiClient object</summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; }

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetAudioByIdUniversal (string id, string deviceId, long? startTimeTicks)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UniversalAudioServiceApi->GetAudioByIdUniversal");
            }
            
            var request = new RestRequest("/Audio/{Id}/universal", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (deviceId != null)
            {
                request.AddQueryParameter("DeviceId", this.ApiClient.ParameterToString(deviceId));
            }

            if (startTimeTicks != null)
            {
                request.AddQueryParameter("StartTimeTicks", this.ApiClient.ParameterToString(startTimeTicks));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="container"></param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> GetAudioByIdUniversalByContainer (string id, string deviceId, string container, long? startTimeTicks)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UniversalAudioServiceApi->GetAudioByIdUniversalByContainer");
            }
            
            // verify the required parameter 'container' is set
            if (container == null)
            {
                throw new ApiException("Missing required parameter 'container' when calling UniversalAudioServiceApi->GetAudioByIdUniversalByContainer");
            }
            
            var request = new RestRequest("/Audio/{Id}/universal.{Container}", Method.Get);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (container != null)
            {
                request.AddParameter("Container", this.ApiClient.ParameterToString(container), ParameterType.UrlSegment);
            }

            if (deviceId != null)
            {
                request.AddQueryParameter("DeviceId", this.ApiClient.ParameterToString(deviceId));
            }

            if (startTimeTicks != null)
            {
                request.AddQueryParameter("StartTimeTicks", this.ApiClient.ParameterToString(startTimeTicks));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadAudioByIdUniversal (string id, string deviceId, long? startTimeTicks)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UniversalAudioServiceApi->HeadAudioByIdUniversal");
            }
            
            var request = new RestRequest("/Audio/{Id}/universal", Method.Head);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (deviceId != null)
            {
                request.AddQueryParameter("DeviceId", this.ApiClient.ParameterToString(deviceId));
            }

            if (startTimeTicks != null)
            {
                request.AddQueryParameter("StartTimeTicks", this.ApiClient.ParameterToString(startTimeTicks));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

        /// <summary>
        /// Gets an audio stream
        /// </summary>
        /// <remarks>
        /// Requires authentication as user
        /// </remarks>
        /// <param name="id">Item Id</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed. (optional)</param>
        /// <param name="container"></param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<RestResponse<Object>> HeadAudioByIdUniversalByContainer (string id, string deviceId, string container, long? startTimeTicks)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException("Missing required parameter 'id' when calling UniversalAudioServiceApi->HeadAudioByIdUniversalByContainer");
            }
            
            // verify the required parameter 'container' is set
            if (container == null)
            {
                throw new ApiException("Missing required parameter 'container' when calling UniversalAudioServiceApi->HeadAudioByIdUniversalByContainer");
            }
            
            var request = new RestRequest("/Audio/{Id}/universal.{Container}", Method.Head);

            if (id != null)
            {
                request.AddParameter("Id", this.ApiClient.ParameterToString(id), ParameterType.UrlSegment);
            }

            if (container != null)
            {
                request.AddParameter("Container", this.ApiClient.ParameterToString(container), ParameterType.UrlSegment);
            }

            if (deviceId != null)
            {
                request.AddQueryParameter("DeviceId", this.ApiClient.ParameterToString(deviceId));
            }

            if (startTimeTicks != null)
            {
                request.AddQueryParameter("StartTimeTicks", this.ApiClient.ParameterToString(startTimeTicks));
            }

            // make the HTTP request
            var localVarResponse = await this.ApiClient.RestClient.ExecuteAsync<Object>(request).ConfigureAwait(false);
            return localVarResponse;
        }

    }
}
