// <copyright file="LibraryOptions.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// LibraryOptions.
    /// </summary>
    /// <seealso>MediaBrowser.Model.Configuration.LibraryOptions</seealso>
    public partial class LibraryOptions :  IEquatable<LibraryOptions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryOptions" /> class.
        /// </summary>
        public LibraryOptions()
        {
        }
        
        /// <summary>
        /// Gets or Sets EnableArchiveMediaFiles
        /// </summary>
        /// <value>The EnableArchiveMediaFiles.</value>
        public bool? EnableArchiveMediaFiles { get; set; }

        /// <summary>
        /// Gets or Sets EnablePhotos
        /// </summary>
        /// <value>The EnablePhotos.</value>
        public bool? EnablePhotos { get; set; }

        /// <summary>
        /// Gets or Sets EnableRealtimeMonitor
        /// </summary>
        /// <value>The EnableRealtimeMonitor.</value>
        public bool? EnableRealtimeMonitor { get; set; }

        /// <summary>
        /// Gets or Sets EnableMarkerDetection
        /// </summary>
        /// <value>The EnableMarkerDetection.</value>
        public bool? EnableMarkerDetection { get; set; }

        /// <summary>
        /// Gets or Sets EnableMarkerDetectionDuringLibraryScan
        /// </summary>
        /// <value>The EnableMarkerDetectionDuringLibraryScan.</value>
        public bool? EnableMarkerDetectionDuringLibraryScan { get; set; }

        /// <summary>
        /// Gets or Sets IntroDetectionFingerprintLength
        /// </summary>
        /// <value>The IntroDetectionFingerprintLength.</value>
        public int? IntroDetectionFingerprintLength { get; set; }

        /// <summary>
        /// Gets or Sets EnableChapterImageExtraction
        /// </summary>
        /// <value>The EnableChapterImageExtraction.</value>
        public bool? EnableChapterImageExtraction { get; set; }

        /// <summary>
        /// Gets or Sets ExtractChapterImagesDuringLibraryScan
        /// </summary>
        /// <value>The ExtractChapterImagesDuringLibraryScan.</value>
        public bool? ExtractChapterImagesDuringLibraryScan { get; set; }

        /// <summary>
        /// Gets or Sets DownloadImagesInAdvance
        /// </summary>
        /// <value>The DownloadImagesInAdvance.</value>
        public bool? DownloadImagesInAdvance { get; set; }

        /// <summary>
        /// Gets or Sets CacheImages
        /// </summary>
        /// <value>The CacheImages.</value>
        public bool? CacheImages { get; set; }

        /// <summary>
        /// Gets or Sets PathInfos
        /// </summary>
        /// <value>The PathInfos.</value>
        public List<MediaPathInfo> PathInfos { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreHiddenFiles
        /// </summary>
        /// <value>The IgnoreHiddenFiles.</value>
        public bool? IgnoreHiddenFiles { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreFileExtensions
        /// </summary>
        /// <value>The IgnoreFileExtensions.</value>
        public List<string> IgnoreFileExtensions { get; set; }

        /// <summary>
        /// Gets or Sets SaveLocalMetadata
        /// </summary>
        /// <value>The SaveLocalMetadata.</value>
        public bool? SaveLocalMetadata { get; set; }

        /// <summary>
        /// Gets or Sets SaveMetadataHidden
        /// </summary>
        /// <value>The SaveMetadataHidden.</value>
        public bool? SaveMetadataHidden { get; set; }

        /// <summary>
        /// Gets or Sets SaveLocalThumbnailSets
        /// </summary>
        /// <value>The SaveLocalThumbnailSets.</value>
        public bool? SaveLocalThumbnailSets { get; set; }

        /// <summary>
        /// Gets or Sets ImportPlaylists
        /// </summary>
        /// <value>The ImportPlaylists.</value>
        public bool? ImportPlaylists { get; set; }

        /// <summary>
        /// Gets or Sets EnableAutomaticSeriesGrouping
        /// </summary>
        /// <value>The EnableAutomaticSeriesGrouping.</value>
        public bool? EnableAutomaticSeriesGrouping { get; set; }

        /// <summary>
        /// Gets or Sets ShareEmbeddedMusicAlbumImages
        /// </summary>
        /// <value>The ShareEmbeddedMusicAlbumImages.</value>
        public bool? ShareEmbeddedMusicAlbumImages { get; set; }

        /// <summary>
        /// Gets or Sets EnableEmbeddedTitles
        /// </summary>
        /// <value>The EnableEmbeddedTitles.</value>
        public bool? EnableEmbeddedTitles { get; set; }

        /// <summary>
        /// Gets or Sets EnableAudioResume
        /// </summary>
        /// <value>The EnableAudioResume.</value>
        public bool? EnableAudioResume { get; set; }

        /// <summary>
        /// Gets or Sets AutoGenerateChapters
        /// </summary>
        /// <value>The AutoGenerateChapters.</value>
        public bool? AutoGenerateChapters { get; set; }

        /// <summary>
        /// Gets or Sets AutomaticRefreshIntervalDays
        /// </summary>
        /// <value>The AutomaticRefreshIntervalDays.</value>
        public int? AutomaticRefreshIntervalDays { get; set; }

        /// <summary>
        /// Gets or Sets PlaceholderMetadataRefreshIntervalDays
        /// </summary>
        /// <value>The PlaceholderMetadataRefreshIntervalDays.</value>
        public int? PlaceholderMetadataRefreshIntervalDays { get; set; }

        /// <summary>
        /// The preferred metadata language.
        /// </summary>
        /// <value>The PreferredMetadataLanguage.</value>
        public string PreferredMetadataLanguage { get; set; }

        /// <summary>
        /// Gets or Sets PreferredImageLanguage
        /// </summary>
        /// <value>The PreferredImageLanguage.</value>
        public string PreferredImageLanguage { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        /// <value>The ContentType.</value>
        public string ContentType { get; set; }

        /// <summary>
        /// The metadata country code.
        /// </summary>
        /// <value>The MetadataCountryCode.</value>
        public string MetadataCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets MetadataSavers
        /// </summary>
        /// <value>The MetadataSavers.</value>
        public List<string> MetadataSavers { get; set; }

        /// <summary>
        /// Gets or Sets DisabledLocalMetadataReaders
        /// </summary>
        /// <value>The DisabledLocalMetadataReaders.</value>
        public List<string> DisabledLocalMetadataReaders { get; set; }

        /// <summary>
        /// Gets or Sets LocalMetadataReaderOrder
        /// </summary>
        /// <value>The LocalMetadataReaderOrder.</value>
        public List<string> LocalMetadataReaderOrder { get; set; }

        /// <summary>
        /// Gets or Sets DisabledLyricsFetchers
        /// </summary>
        /// <value>The DisabledLyricsFetchers.</value>
        public List<string> DisabledLyricsFetchers { get; set; }

        /// <summary>
        /// Gets or Sets SaveLyricsWithMedia
        /// </summary>
        /// <value>The SaveLyricsWithMedia.</value>
        public bool? SaveLyricsWithMedia { get; set; }

        /// <summary>
        /// Gets or Sets LyricsDownloadMaxAgeDays
        /// </summary>
        /// <value>The LyricsDownloadMaxAgeDays.</value>
        public int? LyricsDownloadMaxAgeDays { get; set; }

        /// <summary>
        /// Gets or Sets LyricsFetcherOrder
        /// </summary>
        /// <value>The LyricsFetcherOrder.</value>
        public List<string> LyricsFetcherOrder { get; set; }

        /// <summary>
        /// Gets or Sets LyricsDownloadLanguages
        /// </summary>
        /// <value>The LyricsDownloadLanguages.</value>
        public List<string> LyricsDownloadLanguages { get; set; }

        /// <summary>
        /// Gets or Sets DisabledSubtitleFetchers
        /// </summary>
        /// <value>The DisabledSubtitleFetchers.</value>
        public List<string> DisabledSubtitleFetchers { get; set; }

        /// <summary>
        /// Gets or Sets SubtitleFetcherOrder
        /// </summary>
        /// <value>The SubtitleFetcherOrder.</value>
        public List<string> SubtitleFetcherOrder { get; set; }

        /// <summary>
        /// Gets or Sets SkipSubtitlesIfEmbeddedSubtitlesPresent
        /// </summary>
        /// <value>The SkipSubtitlesIfEmbeddedSubtitlesPresent.</value>
        public bool? SkipSubtitlesIfEmbeddedSubtitlesPresent { get; set; }

        /// <summary>
        /// Gets or Sets SkipSubtitlesIfAudioTrackMatches
        /// </summary>
        /// <value>The SkipSubtitlesIfAudioTrackMatches.</value>
        public bool? SkipSubtitlesIfAudioTrackMatches { get; set; }

        /// <summary>
        /// Gets or Sets SubtitleDownloadLanguages
        /// </summary>
        /// <value>The SubtitleDownloadLanguages.</value>
        public List<string> SubtitleDownloadLanguages { get; set; }

        /// <summary>
        /// Gets or Sets SubtitleDownloadMaxAgeDays
        /// </summary>
        /// <value>The SubtitleDownloadMaxAgeDays.</value>
        public int? SubtitleDownloadMaxAgeDays { get; set; }

        /// <summary>
        /// Gets or Sets RequirePerfectSubtitleMatch
        /// </summary>
        /// <value>The RequirePerfectSubtitleMatch.</value>
        public bool? RequirePerfectSubtitleMatch { get; set; }

        /// <summary>
        /// Gets or Sets SaveSubtitlesWithMedia
        /// </summary>
        /// <value>The SaveSubtitlesWithMedia.</value>
        public bool? SaveSubtitlesWithMedia { get; set; }

        /// <summary>
        /// Gets or Sets ForcedSubtitlesOnly
        /// </summary>
        /// <value>The ForcedSubtitlesOnly.</value>
        public bool? ForcedSubtitlesOnly { get; set; }

        /// <summary>
        /// Gets or Sets HearingImpairedSubtitlesOnly
        /// </summary>
        /// <value>The HearingImpairedSubtitlesOnly.</value>
        public bool? HearingImpairedSubtitlesOnly { get; set; }

        /// <summary>
        /// Gets or Sets TypeOptions
        /// </summary>
        /// <value>The TypeOptions.</value>
        public List<TypeOptions> TypeOptions { get; set; }

        /// <summary>
        /// Gets or Sets CollapseSingleItemFolders
        /// </summary>
        /// <value>The CollapseSingleItemFolders.</value>
        public bool? CollapseSingleItemFolders { get; set; }

        /// <summary>
        /// Gets or Sets EnableAdultMetadata
        /// </summary>
        /// <value>The EnableAdultMetadata.</value>
        public bool? EnableAdultMetadata { get; set; }

        /// <summary>
        /// Gets or Sets ImportCollections
        /// </summary>
        /// <value>The ImportCollections.</value>
        public bool? ImportCollections { get; set; }

        /// <summary>
        /// Gets or Sets MinCollectionItems
        /// </summary>
        /// <value>The MinCollectionItems.</value>
        public int? MinCollectionItems { get; set; }

        /// <summary>
        /// Gets or Sets MusicFolderStructure
        /// </summary>
        /// <value>The MusicFolderStructure.</value>
        public string MusicFolderStructure { get; set; }

        /// <summary>
        /// The minimum percentage of an item that must be played in order for playstate to be updated.
        /// </summary>
        /// <value>The MinResumePct.</value>
        public int? MinResumePct { get; set; }

        /// <summary>
        /// The maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.
        /// </summary>
        /// <value>The MaxResumePct.</value>
        public int? MaxResumePct { get; set; }

        /// <summary>
        /// The minimum duration that an item must have in order to be eligible for playstate updates..
        /// </summary>
        /// <value>The MinResumeDurationSeconds.</value>
        public int? MinResumeDurationSeconds { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailImagesIntervalSeconds
        /// </summary>
        /// <value>The ThumbnailImagesIntervalSeconds.</value>
        public int? ThumbnailImagesIntervalSeconds { get; set; }

        /// <summary>
        /// Gets or Sets SampleIgnoreSize
        /// </summary>
        /// <value>The SampleIgnoreSize.</value>
        public int? SampleIgnoreSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LibraryOptions {\n");
            sb.Append("  EnableArchiveMediaFiles: ").Append(EnableArchiveMediaFiles).Append("\n");
            sb.Append("  EnablePhotos: ").Append(EnablePhotos).Append("\n");
            sb.Append("  EnableRealtimeMonitor: ").Append(EnableRealtimeMonitor).Append("\n");
            sb.Append("  EnableMarkerDetection: ").Append(EnableMarkerDetection).Append("\n");
            sb.Append("  EnableMarkerDetectionDuringLibraryScan: ").Append(EnableMarkerDetectionDuringLibraryScan).Append("\n");
            sb.Append("  IntroDetectionFingerprintLength: ").Append(IntroDetectionFingerprintLength).Append("\n");
            sb.Append("  EnableChapterImageExtraction: ").Append(EnableChapterImageExtraction).Append("\n");
            sb.Append("  ExtractChapterImagesDuringLibraryScan: ").Append(ExtractChapterImagesDuringLibraryScan).Append("\n");
            sb.Append("  DownloadImagesInAdvance: ").Append(DownloadImagesInAdvance).Append("\n");
            sb.Append("  CacheImages: ").Append(CacheImages).Append("\n");
            sb.Append("  PathInfos: ").Append(PathInfos).Append("\n");
            sb.Append("  IgnoreHiddenFiles: ").Append(IgnoreHiddenFiles).Append("\n");
            sb.Append("  IgnoreFileExtensions: ").Append(IgnoreFileExtensions).Append("\n");
            sb.Append("  SaveLocalMetadata: ").Append(SaveLocalMetadata).Append("\n");
            sb.Append("  SaveMetadataHidden: ").Append(SaveMetadataHidden).Append("\n");
            sb.Append("  SaveLocalThumbnailSets: ").Append(SaveLocalThumbnailSets).Append("\n");
            sb.Append("  ImportPlaylists: ").Append(ImportPlaylists).Append("\n");
            sb.Append("  EnableAutomaticSeriesGrouping: ").Append(EnableAutomaticSeriesGrouping).Append("\n");
            sb.Append("  ShareEmbeddedMusicAlbumImages: ").Append(ShareEmbeddedMusicAlbumImages).Append("\n");
            sb.Append("  EnableEmbeddedTitles: ").Append(EnableEmbeddedTitles).Append("\n");
            sb.Append("  EnableAudioResume: ").Append(EnableAudioResume).Append("\n");
            sb.Append("  AutoGenerateChapters: ").Append(AutoGenerateChapters).Append("\n");
            sb.Append("  AutomaticRefreshIntervalDays: ").Append(AutomaticRefreshIntervalDays).Append("\n");
            sb.Append("  PlaceholderMetadataRefreshIntervalDays: ").Append(PlaceholderMetadataRefreshIntervalDays).Append("\n");
            sb.Append("  PreferredMetadataLanguage: ").Append(PreferredMetadataLanguage).Append("\n");
            sb.Append("  PreferredImageLanguage: ").Append(PreferredImageLanguage).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  MetadataCountryCode: ").Append(MetadataCountryCode).Append("\n");
            sb.Append("  MetadataSavers: ").Append(MetadataSavers).Append("\n");
            sb.Append("  DisabledLocalMetadataReaders: ").Append(DisabledLocalMetadataReaders).Append("\n");
            sb.Append("  LocalMetadataReaderOrder: ").Append(LocalMetadataReaderOrder).Append("\n");
            sb.Append("  DisabledLyricsFetchers: ").Append(DisabledLyricsFetchers).Append("\n");
            sb.Append("  SaveLyricsWithMedia: ").Append(SaveLyricsWithMedia).Append("\n");
            sb.Append("  LyricsDownloadMaxAgeDays: ").Append(LyricsDownloadMaxAgeDays).Append("\n");
            sb.Append("  LyricsFetcherOrder: ").Append(LyricsFetcherOrder).Append("\n");
            sb.Append("  LyricsDownloadLanguages: ").Append(LyricsDownloadLanguages).Append("\n");
            sb.Append("  DisabledSubtitleFetchers: ").Append(DisabledSubtitleFetchers).Append("\n");
            sb.Append("  SubtitleFetcherOrder: ").Append(SubtitleFetcherOrder).Append("\n");
            sb.Append("  SkipSubtitlesIfEmbeddedSubtitlesPresent: ").Append(SkipSubtitlesIfEmbeddedSubtitlesPresent).Append("\n");
            sb.Append("  SkipSubtitlesIfAudioTrackMatches: ").Append(SkipSubtitlesIfAudioTrackMatches).Append("\n");
            sb.Append("  SubtitleDownloadLanguages: ").Append(SubtitleDownloadLanguages).Append("\n");
            sb.Append("  SubtitleDownloadMaxAgeDays: ").Append(SubtitleDownloadMaxAgeDays).Append("\n");
            sb.Append("  RequirePerfectSubtitleMatch: ").Append(RequirePerfectSubtitleMatch).Append("\n");
            sb.Append("  SaveSubtitlesWithMedia: ").Append(SaveSubtitlesWithMedia).Append("\n");
            sb.Append("  ForcedSubtitlesOnly: ").Append(ForcedSubtitlesOnly).Append("\n");
            sb.Append("  HearingImpairedSubtitlesOnly: ").Append(HearingImpairedSubtitlesOnly).Append("\n");
            sb.Append("  TypeOptions: ").Append(TypeOptions).Append("\n");
            sb.Append("  CollapseSingleItemFolders: ").Append(CollapseSingleItemFolders).Append("\n");
            sb.Append("  EnableAdultMetadata: ").Append(EnableAdultMetadata).Append("\n");
            sb.Append("  ImportCollections: ").Append(ImportCollections).Append("\n");
            sb.Append("  MinCollectionItems: ").Append(MinCollectionItems).Append("\n");
            sb.Append("  MusicFolderStructure: ").Append(MusicFolderStructure).Append("\n");
            sb.Append("  MinResumePct: ").Append(MinResumePct).Append("\n");
            sb.Append("  MaxResumePct: ").Append(MaxResumePct).Append("\n");
            sb.Append("  MinResumeDurationSeconds: ").Append(MinResumeDurationSeconds).Append("\n");
            sb.Append("  ThumbnailImagesIntervalSeconds: ").Append(ThumbnailImagesIntervalSeconds).Append("\n");
            sb.Append("  SampleIgnoreSize: ").Append(SampleIgnoreSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LibraryOptions);
        }

        /// <summary>
        /// Returns true if LibraryOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of LibraryOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableArchiveMediaFiles == input.EnableArchiveMediaFiles ||
                    (this.EnableArchiveMediaFiles != null &&
                    this.EnableArchiveMediaFiles.Equals(input.EnableArchiveMediaFiles))
                ) && 
                (
                    this.EnablePhotos == input.EnablePhotos ||
                    (this.EnablePhotos != null &&
                    this.EnablePhotos.Equals(input.EnablePhotos))
                ) && 
                (
                    this.EnableRealtimeMonitor == input.EnableRealtimeMonitor ||
                    (this.EnableRealtimeMonitor != null &&
                    this.EnableRealtimeMonitor.Equals(input.EnableRealtimeMonitor))
                ) && 
                (
                    this.EnableMarkerDetection == input.EnableMarkerDetection ||
                    (this.EnableMarkerDetection != null &&
                    this.EnableMarkerDetection.Equals(input.EnableMarkerDetection))
                ) && 
                (
                    this.EnableMarkerDetectionDuringLibraryScan == input.EnableMarkerDetectionDuringLibraryScan ||
                    (this.EnableMarkerDetectionDuringLibraryScan != null &&
                    this.EnableMarkerDetectionDuringLibraryScan.Equals(input.EnableMarkerDetectionDuringLibraryScan))
                ) && 
                (
                    this.IntroDetectionFingerprintLength == input.IntroDetectionFingerprintLength ||
                    (this.IntroDetectionFingerprintLength != null &&
                    this.IntroDetectionFingerprintLength.Equals(input.IntroDetectionFingerprintLength))
                ) && 
                (
                    this.EnableChapterImageExtraction == input.EnableChapterImageExtraction ||
                    (this.EnableChapterImageExtraction != null &&
                    this.EnableChapterImageExtraction.Equals(input.EnableChapterImageExtraction))
                ) && 
                (
                    this.ExtractChapterImagesDuringLibraryScan == input.ExtractChapterImagesDuringLibraryScan ||
                    (this.ExtractChapterImagesDuringLibraryScan != null &&
                    this.ExtractChapterImagesDuringLibraryScan.Equals(input.ExtractChapterImagesDuringLibraryScan))
                ) && 
                (
                    this.DownloadImagesInAdvance == input.DownloadImagesInAdvance ||
                    (this.DownloadImagesInAdvance != null &&
                    this.DownloadImagesInAdvance.Equals(input.DownloadImagesInAdvance))
                ) && 
                (
                    this.CacheImages == input.CacheImages ||
                    (this.CacheImages != null &&
                    this.CacheImages.Equals(input.CacheImages))
                ) && 
                (
                    this.PathInfos == input.PathInfos ||
                    this.PathInfos != null &&
                    input.PathInfos != null &&
                    this.PathInfos.SequenceEqual(input.PathInfos)
                ) && 
                (
                    this.IgnoreHiddenFiles == input.IgnoreHiddenFiles ||
                    (this.IgnoreHiddenFiles != null &&
                    this.IgnoreHiddenFiles.Equals(input.IgnoreHiddenFiles))
                ) && 
                (
                    this.IgnoreFileExtensions == input.IgnoreFileExtensions ||
                    this.IgnoreFileExtensions != null &&
                    input.IgnoreFileExtensions != null &&
                    this.IgnoreFileExtensions.SequenceEqual(input.IgnoreFileExtensions)
                ) && 
                (
                    this.SaveLocalMetadata == input.SaveLocalMetadata ||
                    (this.SaveLocalMetadata != null &&
                    this.SaveLocalMetadata.Equals(input.SaveLocalMetadata))
                ) && 
                (
                    this.SaveMetadataHidden == input.SaveMetadataHidden ||
                    (this.SaveMetadataHidden != null &&
                    this.SaveMetadataHidden.Equals(input.SaveMetadataHidden))
                ) && 
                (
                    this.SaveLocalThumbnailSets == input.SaveLocalThumbnailSets ||
                    (this.SaveLocalThumbnailSets != null &&
                    this.SaveLocalThumbnailSets.Equals(input.SaveLocalThumbnailSets))
                ) && 
                (
                    this.ImportPlaylists == input.ImportPlaylists ||
                    (this.ImportPlaylists != null &&
                    this.ImportPlaylists.Equals(input.ImportPlaylists))
                ) && 
                (
                    this.EnableAutomaticSeriesGrouping == input.EnableAutomaticSeriesGrouping ||
                    (this.EnableAutomaticSeriesGrouping != null &&
                    this.EnableAutomaticSeriesGrouping.Equals(input.EnableAutomaticSeriesGrouping))
                ) && 
                (
                    this.ShareEmbeddedMusicAlbumImages == input.ShareEmbeddedMusicAlbumImages ||
                    (this.ShareEmbeddedMusicAlbumImages != null &&
                    this.ShareEmbeddedMusicAlbumImages.Equals(input.ShareEmbeddedMusicAlbumImages))
                ) && 
                (
                    this.EnableEmbeddedTitles == input.EnableEmbeddedTitles ||
                    (this.EnableEmbeddedTitles != null &&
                    this.EnableEmbeddedTitles.Equals(input.EnableEmbeddedTitles))
                ) && 
                (
                    this.EnableAudioResume == input.EnableAudioResume ||
                    (this.EnableAudioResume != null &&
                    this.EnableAudioResume.Equals(input.EnableAudioResume))
                ) && 
                (
                    this.AutoGenerateChapters == input.AutoGenerateChapters ||
                    (this.AutoGenerateChapters != null &&
                    this.AutoGenerateChapters.Equals(input.AutoGenerateChapters))
                ) && 
                (
                    this.AutomaticRefreshIntervalDays == input.AutomaticRefreshIntervalDays ||
                    (this.AutomaticRefreshIntervalDays != null &&
                    this.AutomaticRefreshIntervalDays.Equals(input.AutomaticRefreshIntervalDays))
                ) && 
                (
                    this.PlaceholderMetadataRefreshIntervalDays == input.PlaceholderMetadataRefreshIntervalDays ||
                    (this.PlaceholderMetadataRefreshIntervalDays != null &&
                    this.PlaceholderMetadataRefreshIntervalDays.Equals(input.PlaceholderMetadataRefreshIntervalDays))
                ) && 
                (
                    this.PreferredMetadataLanguage == input.PreferredMetadataLanguage ||
                    (this.PreferredMetadataLanguage != null &&
                    this.PreferredMetadataLanguage.Equals(input.PreferredMetadataLanguage))
                ) && 
                (
                    this.PreferredImageLanguage == input.PreferredImageLanguage ||
                    (this.PreferredImageLanguage != null &&
                    this.PreferredImageLanguage.Equals(input.PreferredImageLanguage))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.MetadataCountryCode == input.MetadataCountryCode ||
                    (this.MetadataCountryCode != null &&
                    this.MetadataCountryCode.Equals(input.MetadataCountryCode))
                ) && 
                (
                    this.MetadataSavers == input.MetadataSavers ||
                    this.MetadataSavers != null &&
                    input.MetadataSavers != null &&
                    this.MetadataSavers.SequenceEqual(input.MetadataSavers)
                ) && 
                (
                    this.DisabledLocalMetadataReaders == input.DisabledLocalMetadataReaders ||
                    this.DisabledLocalMetadataReaders != null &&
                    input.DisabledLocalMetadataReaders != null &&
                    this.DisabledLocalMetadataReaders.SequenceEqual(input.DisabledLocalMetadataReaders)
                ) && 
                (
                    this.LocalMetadataReaderOrder == input.LocalMetadataReaderOrder ||
                    this.LocalMetadataReaderOrder != null &&
                    input.LocalMetadataReaderOrder != null &&
                    this.LocalMetadataReaderOrder.SequenceEqual(input.LocalMetadataReaderOrder)
                ) && 
                (
                    this.DisabledLyricsFetchers == input.DisabledLyricsFetchers ||
                    this.DisabledLyricsFetchers != null &&
                    input.DisabledLyricsFetchers != null &&
                    this.DisabledLyricsFetchers.SequenceEqual(input.DisabledLyricsFetchers)
                ) && 
                (
                    this.SaveLyricsWithMedia == input.SaveLyricsWithMedia ||
                    (this.SaveLyricsWithMedia != null &&
                    this.SaveLyricsWithMedia.Equals(input.SaveLyricsWithMedia))
                ) && 
                (
                    this.LyricsDownloadMaxAgeDays == input.LyricsDownloadMaxAgeDays ||
                    (this.LyricsDownloadMaxAgeDays != null &&
                    this.LyricsDownloadMaxAgeDays.Equals(input.LyricsDownloadMaxAgeDays))
                ) && 
                (
                    this.LyricsFetcherOrder == input.LyricsFetcherOrder ||
                    this.LyricsFetcherOrder != null &&
                    input.LyricsFetcherOrder != null &&
                    this.LyricsFetcherOrder.SequenceEqual(input.LyricsFetcherOrder)
                ) && 
                (
                    this.LyricsDownloadLanguages == input.LyricsDownloadLanguages ||
                    this.LyricsDownloadLanguages != null &&
                    input.LyricsDownloadLanguages != null &&
                    this.LyricsDownloadLanguages.SequenceEqual(input.LyricsDownloadLanguages)
                ) && 
                (
                    this.DisabledSubtitleFetchers == input.DisabledSubtitleFetchers ||
                    this.DisabledSubtitleFetchers != null &&
                    input.DisabledSubtitleFetchers != null &&
                    this.DisabledSubtitleFetchers.SequenceEqual(input.DisabledSubtitleFetchers)
                ) && 
                (
                    this.SubtitleFetcherOrder == input.SubtitleFetcherOrder ||
                    this.SubtitleFetcherOrder != null &&
                    input.SubtitleFetcherOrder != null &&
                    this.SubtitleFetcherOrder.SequenceEqual(input.SubtitleFetcherOrder)
                ) && 
                (
                    this.SkipSubtitlesIfEmbeddedSubtitlesPresent == input.SkipSubtitlesIfEmbeddedSubtitlesPresent ||
                    (this.SkipSubtitlesIfEmbeddedSubtitlesPresent != null &&
                    this.SkipSubtitlesIfEmbeddedSubtitlesPresent.Equals(input.SkipSubtitlesIfEmbeddedSubtitlesPresent))
                ) && 
                (
                    this.SkipSubtitlesIfAudioTrackMatches == input.SkipSubtitlesIfAudioTrackMatches ||
                    (this.SkipSubtitlesIfAudioTrackMatches != null &&
                    this.SkipSubtitlesIfAudioTrackMatches.Equals(input.SkipSubtitlesIfAudioTrackMatches))
                ) && 
                (
                    this.SubtitleDownloadLanguages == input.SubtitleDownloadLanguages ||
                    this.SubtitleDownloadLanguages != null &&
                    input.SubtitleDownloadLanguages != null &&
                    this.SubtitleDownloadLanguages.SequenceEqual(input.SubtitleDownloadLanguages)
                ) && 
                (
                    this.SubtitleDownloadMaxAgeDays == input.SubtitleDownloadMaxAgeDays ||
                    (this.SubtitleDownloadMaxAgeDays != null &&
                    this.SubtitleDownloadMaxAgeDays.Equals(input.SubtitleDownloadMaxAgeDays))
                ) && 
                (
                    this.RequirePerfectSubtitleMatch == input.RequirePerfectSubtitleMatch ||
                    (this.RequirePerfectSubtitleMatch != null &&
                    this.RequirePerfectSubtitleMatch.Equals(input.RequirePerfectSubtitleMatch))
                ) && 
                (
                    this.SaveSubtitlesWithMedia == input.SaveSubtitlesWithMedia ||
                    (this.SaveSubtitlesWithMedia != null &&
                    this.SaveSubtitlesWithMedia.Equals(input.SaveSubtitlesWithMedia))
                ) && 
                (
                    this.ForcedSubtitlesOnly == input.ForcedSubtitlesOnly ||
                    (this.ForcedSubtitlesOnly != null &&
                    this.ForcedSubtitlesOnly.Equals(input.ForcedSubtitlesOnly))
                ) && 
                (
                    this.HearingImpairedSubtitlesOnly == input.HearingImpairedSubtitlesOnly ||
                    (this.HearingImpairedSubtitlesOnly != null &&
                    this.HearingImpairedSubtitlesOnly.Equals(input.HearingImpairedSubtitlesOnly))
                ) && 
                (
                    this.TypeOptions == input.TypeOptions ||
                    this.TypeOptions != null &&
                    input.TypeOptions != null &&
                    this.TypeOptions.SequenceEqual(input.TypeOptions)
                ) && 
                (
                    this.CollapseSingleItemFolders == input.CollapseSingleItemFolders ||
                    (this.CollapseSingleItemFolders != null &&
                    this.CollapseSingleItemFolders.Equals(input.CollapseSingleItemFolders))
                ) && 
                (
                    this.EnableAdultMetadata == input.EnableAdultMetadata ||
                    (this.EnableAdultMetadata != null &&
                    this.EnableAdultMetadata.Equals(input.EnableAdultMetadata))
                ) && 
                (
                    this.ImportCollections == input.ImportCollections ||
                    (this.ImportCollections != null &&
                    this.ImportCollections.Equals(input.ImportCollections))
                ) && 
                (
                    this.MinCollectionItems == input.MinCollectionItems ||
                    (this.MinCollectionItems != null &&
                    this.MinCollectionItems.Equals(input.MinCollectionItems))
                ) && 
                (
                    this.MusicFolderStructure == input.MusicFolderStructure ||
                    (this.MusicFolderStructure != null &&
                    this.MusicFolderStructure.Equals(input.MusicFolderStructure))
                ) && 
                (
                    this.MinResumePct == input.MinResumePct ||
                    (this.MinResumePct != null &&
                    this.MinResumePct.Equals(input.MinResumePct))
                ) && 
                (
                    this.MaxResumePct == input.MaxResumePct ||
                    (this.MaxResumePct != null &&
                    this.MaxResumePct.Equals(input.MaxResumePct))
                ) && 
                (
                    this.MinResumeDurationSeconds == input.MinResumeDurationSeconds ||
                    (this.MinResumeDurationSeconds != null &&
                    this.MinResumeDurationSeconds.Equals(input.MinResumeDurationSeconds))
                ) && 
                (
                    this.ThumbnailImagesIntervalSeconds == input.ThumbnailImagesIntervalSeconds ||
                    (this.ThumbnailImagesIntervalSeconds != null &&
                    this.ThumbnailImagesIntervalSeconds.Equals(input.ThumbnailImagesIntervalSeconds))
                ) && 
                (
                    this.SampleIgnoreSize == input.SampleIgnoreSize ||
                    (this.SampleIgnoreSize != null &&
                    this.SampleIgnoreSize.Equals(input.SampleIgnoreSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnableArchiveMediaFiles != null)
                    hashCode = hashCode * 59 + this.EnableArchiveMediaFiles.GetHashCode();
                if (this.EnablePhotos != null)
                    hashCode = hashCode * 59 + this.EnablePhotos.GetHashCode();
                if (this.EnableRealtimeMonitor != null)
                    hashCode = hashCode * 59 + this.EnableRealtimeMonitor.GetHashCode();
                if (this.EnableMarkerDetection != null)
                    hashCode = hashCode * 59 + this.EnableMarkerDetection.GetHashCode();
                if (this.EnableMarkerDetectionDuringLibraryScan != null)
                    hashCode = hashCode * 59 + this.EnableMarkerDetectionDuringLibraryScan.GetHashCode();
                if (this.IntroDetectionFingerprintLength != null)
                    hashCode = hashCode * 59 + this.IntroDetectionFingerprintLength.GetHashCode();
                if (this.EnableChapterImageExtraction != null)
                    hashCode = hashCode * 59 + this.EnableChapterImageExtraction.GetHashCode();
                if (this.ExtractChapterImagesDuringLibraryScan != null)
                    hashCode = hashCode * 59 + this.ExtractChapterImagesDuringLibraryScan.GetHashCode();
                if (this.DownloadImagesInAdvance != null)
                    hashCode = hashCode * 59 + this.DownloadImagesInAdvance.GetHashCode();
                if (this.CacheImages != null)
                    hashCode = hashCode * 59 + this.CacheImages.GetHashCode();
                if (this.PathInfos != null)
                    hashCode = hashCode * 59 + this.PathInfos.GetHashCode();
                if (this.IgnoreHiddenFiles != null)
                    hashCode = hashCode * 59 + this.IgnoreHiddenFiles.GetHashCode();
                if (this.IgnoreFileExtensions != null)
                    hashCode = hashCode * 59 + this.IgnoreFileExtensions.GetHashCode();
                if (this.SaveLocalMetadata != null)
                    hashCode = hashCode * 59 + this.SaveLocalMetadata.GetHashCode();
                if (this.SaveMetadataHidden != null)
                    hashCode = hashCode * 59 + this.SaveMetadataHidden.GetHashCode();
                if (this.SaveLocalThumbnailSets != null)
                    hashCode = hashCode * 59 + this.SaveLocalThumbnailSets.GetHashCode();
                if (this.ImportPlaylists != null)
                    hashCode = hashCode * 59 + this.ImportPlaylists.GetHashCode();
                if (this.EnableAutomaticSeriesGrouping != null)
                    hashCode = hashCode * 59 + this.EnableAutomaticSeriesGrouping.GetHashCode();
                if (this.ShareEmbeddedMusicAlbumImages != null)
                    hashCode = hashCode * 59 + this.ShareEmbeddedMusicAlbumImages.GetHashCode();
                if (this.EnableEmbeddedTitles != null)
                    hashCode = hashCode * 59 + this.EnableEmbeddedTitles.GetHashCode();
                if (this.EnableAudioResume != null)
                    hashCode = hashCode * 59 + this.EnableAudioResume.GetHashCode();
                if (this.AutoGenerateChapters != null)
                    hashCode = hashCode * 59 + this.AutoGenerateChapters.GetHashCode();
                if (this.AutomaticRefreshIntervalDays != null)
                    hashCode = hashCode * 59 + this.AutomaticRefreshIntervalDays.GetHashCode();
                if (this.PlaceholderMetadataRefreshIntervalDays != null)
                    hashCode = hashCode * 59 + this.PlaceholderMetadataRefreshIntervalDays.GetHashCode();
                if (this.PreferredMetadataLanguage != null)
                    hashCode = hashCode * 59 + this.PreferredMetadataLanguage.GetHashCode();
                if (this.PreferredImageLanguage != null)
                    hashCode = hashCode * 59 + this.PreferredImageLanguage.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.MetadataCountryCode != null)
                    hashCode = hashCode * 59 + this.MetadataCountryCode.GetHashCode();
                if (this.MetadataSavers != null)
                    hashCode = hashCode * 59 + this.MetadataSavers.GetHashCode();
                if (this.DisabledLocalMetadataReaders != null)
                    hashCode = hashCode * 59 + this.DisabledLocalMetadataReaders.GetHashCode();
                if (this.LocalMetadataReaderOrder != null)
                    hashCode = hashCode * 59 + this.LocalMetadataReaderOrder.GetHashCode();
                if (this.DisabledLyricsFetchers != null)
                    hashCode = hashCode * 59 + this.DisabledLyricsFetchers.GetHashCode();
                if (this.SaveLyricsWithMedia != null)
                    hashCode = hashCode * 59 + this.SaveLyricsWithMedia.GetHashCode();
                if (this.LyricsDownloadMaxAgeDays != null)
                    hashCode = hashCode * 59 + this.LyricsDownloadMaxAgeDays.GetHashCode();
                if (this.LyricsFetcherOrder != null)
                    hashCode = hashCode * 59 + this.LyricsFetcherOrder.GetHashCode();
                if (this.LyricsDownloadLanguages != null)
                    hashCode = hashCode * 59 + this.LyricsDownloadLanguages.GetHashCode();
                if (this.DisabledSubtitleFetchers != null)
                    hashCode = hashCode * 59 + this.DisabledSubtitleFetchers.GetHashCode();
                if (this.SubtitleFetcherOrder != null)
                    hashCode = hashCode * 59 + this.SubtitleFetcherOrder.GetHashCode();
                if (this.SkipSubtitlesIfEmbeddedSubtitlesPresent != null)
                    hashCode = hashCode * 59 + this.SkipSubtitlesIfEmbeddedSubtitlesPresent.GetHashCode();
                if (this.SkipSubtitlesIfAudioTrackMatches != null)
                    hashCode = hashCode * 59 + this.SkipSubtitlesIfAudioTrackMatches.GetHashCode();
                if (this.SubtitleDownloadLanguages != null)
                    hashCode = hashCode * 59 + this.SubtitleDownloadLanguages.GetHashCode();
                if (this.SubtitleDownloadMaxAgeDays != null)
                    hashCode = hashCode * 59 + this.SubtitleDownloadMaxAgeDays.GetHashCode();
                if (this.RequirePerfectSubtitleMatch != null)
                    hashCode = hashCode * 59 + this.RequirePerfectSubtitleMatch.GetHashCode();
                if (this.SaveSubtitlesWithMedia != null)
                    hashCode = hashCode * 59 + this.SaveSubtitlesWithMedia.GetHashCode();
                if (this.ForcedSubtitlesOnly != null)
                    hashCode = hashCode * 59 + this.ForcedSubtitlesOnly.GetHashCode();
                if (this.HearingImpairedSubtitlesOnly != null)
                    hashCode = hashCode * 59 + this.HearingImpairedSubtitlesOnly.GetHashCode();
                if (this.TypeOptions != null)
                    hashCode = hashCode * 59 + this.TypeOptions.GetHashCode();
                if (this.CollapseSingleItemFolders != null)
                    hashCode = hashCode * 59 + this.CollapseSingleItemFolders.GetHashCode();
                if (this.EnableAdultMetadata != null)
                    hashCode = hashCode * 59 + this.EnableAdultMetadata.GetHashCode();
                if (this.ImportCollections != null)
                    hashCode = hashCode * 59 + this.ImportCollections.GetHashCode();
                if (this.MinCollectionItems != null)
                    hashCode = hashCode * 59 + this.MinCollectionItems.GetHashCode();
                if (this.MusicFolderStructure != null)
                    hashCode = hashCode * 59 + this.MusicFolderStructure.GetHashCode();
                if (this.MinResumePct != null)
                    hashCode = hashCode * 59 + this.MinResumePct.GetHashCode();
                if (this.MaxResumePct != null)
                    hashCode = hashCode * 59 + this.MaxResumePct.GetHashCode();
                if (this.MinResumeDurationSeconds != null)
                    hashCode = hashCode * 59 + this.MinResumeDurationSeconds.GetHashCode();
                if (this.ThumbnailImagesIntervalSeconds != null)
                    hashCode = hashCode * 59 + this.ThumbnailImagesIntervalSeconds.GetHashCode();
                if (this.SampleIgnoreSize != null)
                    hashCode = hashCode * 59 + this.SampleIgnoreSize.GetHashCode();
                return hashCode;
            }
        }
    }
}