// <copyright file="SubtitleProfile.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// SubtitleProfile.
    /// </summary>
    /// <seealso>MediaBrowser.Model.Dlna.SubtitleProfile</seealso>
    public partial class SubtitleProfile :  IEquatable<SubtitleProfile>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubtitleProfile" /> class.
        /// </summary>
        public SubtitleProfile()
        {
        }
        
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        /// <value>The Format.</value>
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        /// <value>The Method.</value>
        public SubtitleDeliveryMethod Method { get; set; }

        /// <summary>
        /// Gets or Sets DidlMode
        /// </summary>
        /// <value>The DidlMode.</value>
        public string DidlMode { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        /// <value>The Language.</value>
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        /// <value>The Container.</value>
        public string Container { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        /// <value>The Protocol.</value>
        public string Protocol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubtitleProfile {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  DidlMode: ").Append(DidlMode).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubtitleProfile);
        }

        /// <summary>
        /// Returns true if SubtitleProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of SubtitleProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubtitleProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.DidlMode == input.DidlMode ||
                    (this.DidlMode != null &&
                    this.DidlMode.Equals(input.DidlMode))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Container == input.Container ||
                    (this.Container != null &&
                    this.Container.Equals(input.Container))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.DidlMode != null)
                    hashCode = hashCode * 59 + this.DidlMode.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Container != null)
                    hashCode = hashCode * 59 + this.Container.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                return hashCode;
            }
        }
    }
}