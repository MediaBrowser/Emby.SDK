// <copyright file="ServerConfiguration.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// Represents the server configuration.  .
    /// </summary>
    /// <seealso>MediaBrowser.Model.Configuration.ServerConfiguration</seealso>
    public partial class ServerConfiguration :  IEquatable<ServerConfiguration>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerConfiguration" /> class.
        /// </summary>
        public ServerConfiguration()
        {
        }
        
        /// <summary>
        /// A value indicating whether \\[enable u pn p\\].
        /// </summary>
        /// <value>The EnableUPnP.</value>
        public bool? EnableUPnP { get; set; }

        /// <summary>
        /// The public mapped port.
        /// </summary>
        /// <value>The PublicPort.</value>
        public int? PublicPort { get; set; }

        /// <summary>
        /// The public HTTPS port.
        /// </summary>
        /// <value>The PublicHttpsPort.</value>
        public int? PublicHttpsPort { get; set; }

        /// <summary>
        /// The HTTP server port number.
        /// </summary>
        /// <value>The HttpServerPortNumber.</value>
        public int? HttpServerPortNumber { get; set; }

        /// <summary>
        /// The HTTPS server port number.
        /// </summary>
        /// <value>The HttpsPortNumber.</value>
        public int? HttpsPortNumber { get; set; }

        /// <summary>
        /// A value indicating whether \\[use HTTPS\\].
        /// </summary>
        /// <value>The EnableHttps.</value>
        public bool? EnableHttps { get; set; }

        /// <summary>
        /// The value pointing to the file system where the ssl certiifcate is located..
        /// </summary>
        /// <value>The CertificatePath.</value>
        public string CertificatePath { get; set; }

        /// <summary>
        /// Gets or Sets CertificatePassword
        /// </summary>
        /// <value>The CertificatePassword.</value>
        public string CertificatePassword { get; set; }

        /// <summary>
        /// A value indicating whether this instance is port authorized.
        /// </summary>
        /// <value>The IsPortAuthorized.</value>
        public bool? IsPortAuthorized { get; set; }

        /// <summary>
        /// Gets or Sets AutoRunWebApp
        /// </summary>
        /// <value>The AutoRunWebApp.</value>
        public bool? AutoRunWebApp { get; set; }

        /// <summary>
        /// Gets or Sets EnableRemoteAccess
        /// </summary>
        /// <value>The EnableRemoteAccess.</value>
        public bool? EnableRemoteAccess { get; set; }

        /// <summary>
        /// Gets or Sets LogAllQueryTimes
        /// </summary>
        /// <value>The LogAllQueryTimes.</value>
        public bool? LogAllQueryTimes { get; set; }

        /// <summary>
        /// A value indicating whether \\[enable case sensitive item ids\\].
        /// </summary>
        /// <value>The EnableCaseSensitiveItemIds.</value>
        public bool? EnableCaseSensitiveItemIds { get; set; }

        /// <summary>
        /// The metadata path.
        /// </summary>
        /// <value>The MetadataPath.</value>
        public string MetadataPath { get; set; }

        /// <summary>
        /// Gets or Sets MetadataNetworkPath
        /// </summary>
        /// <value>The MetadataNetworkPath.</value>
        public string MetadataNetworkPath { get; set; }

        /// <summary>
        /// The preferred metadata language.
        /// </summary>
        /// <value>The PreferredMetadataLanguage.</value>
        public string PreferredMetadataLanguage { get; set; }

        /// <summary>
        /// The metadata country code.
        /// </summary>
        /// <value>The MetadataCountryCode.</value>
        public string MetadataCountryCode { get; set; }

        /// <summary>
        /// Words to be removed from strings to create a sort name
        /// </summary>
        /// <value>The SortRemoveWords.</value>
        public List<string> SortRemoveWords { get; set; }

        /// <summary>
        /// The delay in seconds that we will wait after a file system change to try and discover what has been added/removed Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several different directories and files.
        /// </summary>
        /// <value>The LibraryMonitorDelay.</value>
        public int? LibraryMonitorDelay { get; set; }

        /// <summary>
        /// A value indicating whether \\[enable dashboard response caching\\]. Allows potential contributors without visual studio to modify production dashboard code and test changes.
        /// </summary>
        /// <value>The EnableDashboardResponseCaching.</value>
        public bool? EnableDashboardResponseCaching { get; set; }

        /// <summary>
        /// Allows the dashboard to be served from a custom path.
        /// </summary>
        /// <value>The DashboardSourcePath.</value>
        public string DashboardSourcePath { get; set; }

        /// <summary>
        /// Gets or Sets ImageSavingConvention
        /// </summary>
        /// <value>The ImageSavingConvention.</value>
        public ImageSavingConvention ImageSavingConvention { get; set; }

        /// <summary>
        /// Gets or Sets EnableAutomaticRestart
        /// </summary>
        /// <value>The EnableAutomaticRestart.</value>
        public bool? EnableAutomaticRestart { get; set; }

        /// <summary>
        /// Gets or Sets ServerName
        /// </summary>
        /// <value>The ServerName.</value>
        public string ServerName { get; set; }

        /// <summary>
        /// Gets or Sets PreferredDetectedRemoteAddressFamily
        /// </summary>
        /// <value>The PreferredDetectedRemoteAddressFamily.</value>
        public NetSocketsAddressFamily PreferredDetectedRemoteAddressFamily { get; set; }

        /// <summary>
        /// Gets or Sets WanDdns
        /// </summary>
        /// <value>The WanDdns.</value>
        public string WanDdns { get; set; }

        /// <summary>
        /// Gets or Sets UICulture
        /// </summary>
        /// <value>The UICulture.</value>
        public string UICulture { get; set; }

        /// <summary>
        /// Gets or Sets RemoteClientBitrateLimit
        /// </summary>
        /// <value>The RemoteClientBitrateLimit.</value>
        public int? RemoteClientBitrateLimit { get; set; }

        /// <summary>
        /// Gets or Sets LocalNetworkSubnets
        /// </summary>
        /// <value>The LocalNetworkSubnets.</value>
        public List<string> LocalNetworkSubnets { get; set; }

        /// <summary>
        /// Gets or Sets LocalNetworkAddresses
        /// </summary>
        /// <value>The LocalNetworkAddresses.</value>
        public List<string> LocalNetworkAddresses { get; set; }

        /// <summary>
        /// Gets or Sets EnableExternalContentInSuggestions
        /// </summary>
        /// <value>The EnableExternalContentInSuggestions.</value>
        public bool? EnableExternalContentInSuggestions { get; set; }

        /// <summary>
        /// Gets or Sets RequireHttps
        /// </summary>
        /// <value>The RequireHttps.</value>
        public bool? RequireHttps { get; set; }

        /// <summary>
        /// Gets or Sets IsBehindProxy
        /// </summary>
        /// <value>The IsBehindProxy.</value>
        public bool? IsBehindProxy { get; set; }

        /// <summary>
        /// Gets or Sets RemoteIPFilter
        /// </summary>
        /// <value>The RemoteIPFilter.</value>
        public List<string> RemoteIPFilter { get; set; }

        /// <summary>
        /// Gets or Sets IsRemoteIPFilterBlacklist
        /// </summary>
        /// <value>The IsRemoteIPFilterBlacklist.</value>
        public bool? IsRemoteIPFilterBlacklist { get; set; }

        /// <summary>
        /// Gets or Sets ImageExtractionTimeoutMs
        /// </summary>
        /// <value>The ImageExtractionTimeoutMs.</value>
        public int? ImageExtractionTimeoutMs { get; set; }

        /// <summary>
        /// Gets or Sets PathSubstitutions
        /// </summary>
        /// <value>The PathSubstitutions.</value>
        public List<PathSubstitution> PathSubstitutions { get; set; }

        /// <summary>
        /// Gets or Sets UninstalledPlugins
        /// </summary>
        /// <value>The UninstalledPlugins.</value>
        public List<string> UninstalledPlugins { get; set; }

        /// <summary>
        /// Gets or Sets CollapseVideoFolders
        /// </summary>
        /// <value>The CollapseVideoFolders.</value>
        public bool? CollapseVideoFolders { get; set; }

        /// <summary>
        /// Gets or Sets EnableOriginalTrackTitles
        /// </summary>
        /// <value>The EnableOriginalTrackTitles.</value>
        public bool? EnableOriginalTrackTitles { get; set; }

        /// <summary>
        /// Gets or Sets VacuumDatabaseOnStartup
        /// </summary>
        /// <value>The VacuumDatabaseOnStartup.</value>
        public bool? VacuumDatabaseOnStartup { get; set; }

        /// <summary>
        /// Gets or Sets SimultaneousStreamLimit
        /// </summary>
        /// <value>The SimultaneousStreamLimit.</value>
        public int? SimultaneousStreamLimit { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseCacheSizeMB
        /// </summary>
        /// <value>The DatabaseCacheSizeMB.</value>
        public int? DatabaseCacheSizeMB { get; set; }

        /// <summary>
        /// Gets or Sets EnableSqLiteMmio
        /// </summary>
        /// <value>The EnableSqLiteMmio.</value>
        public bool? EnableSqLiteMmio { get; set; }

        /// <summary>
        /// Gets or Sets PlaylistsUpgradedToM3U
        /// </summary>
        /// <value>The PlaylistsUpgradedToM3U.</value>
        public bool? PlaylistsUpgradedToM3U { get; set; }

        /// <summary>
        /// Gets or Sets ImageExtractorUpgraded1
        /// </summary>
        /// <value>The ImageExtractorUpgraded1.</value>
        public bool? ImageExtractorUpgraded1 { get; set; }

        /// <summary>
        /// Gets or Sets EnablePeopleLetterSubFolders
        /// </summary>
        /// <value>The EnablePeopleLetterSubFolders.</value>
        public bool? EnablePeopleLetterSubFolders { get; set; }

        /// <summary>
        /// Gets or Sets OptimizeDatabaseOnShutdown
        /// </summary>
        /// <value>The OptimizeDatabaseOnShutdown.</value>
        public bool? OptimizeDatabaseOnShutdown { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseAnalysisLimit
        /// </summary>
        /// <value>The DatabaseAnalysisLimit.</value>
        public int? DatabaseAnalysisLimit { get; set; }

        /// <summary>
        /// Gets or Sets DisableAsyncIO
        /// </summary>
        /// <value>The DisableAsyncIO.</value>
        public bool? DisableAsyncIO { get; set; }

        /// <summary>
        /// Gets or Sets MigratedToUserItemShares6
        /// </summary>
        /// <value>The MigratedToUserItemShares6.</value>
        public bool? MigratedToUserItemShares6 { get; set; }

        /// <summary>
        /// Gets or Sets MigratedLibraryOptionsToDb
        /// </summary>
        /// <value>The MigratedLibraryOptionsToDb.</value>
        public bool? MigratedLibraryOptionsToDb { get; set; }

        /// <summary>
        /// Gets or Sets AllowLegacyLocalNetworkPassword
        /// </summary>
        /// <value>The AllowLegacyLocalNetworkPassword.</value>
        public bool? AllowLegacyLocalNetworkPassword { get; set; }

        /// <summary>
        /// Gets or Sets EnableSavedMetadataForPeople
        /// </summary>
        /// <value>The EnableSavedMetadataForPeople.</value>
        public bool? EnableSavedMetadataForPeople { get; set; }

        /// <summary>
        /// Gets or Sets TvChannelsRefreshed
        /// </summary>
        /// <value>The TvChannelsRefreshed.</value>
        public bool? TvChannelsRefreshed { get; set; }

        /// <summary>
        /// Gets or Sets ProxyHeaderMode
        /// </summary>
        /// <value>The ProxyHeaderMode.</value>
        public ProxyHeaderMode ProxyHeaderMode { get; set; }

        /// <summary>
        /// A value indicating whether \\[enable debug level logging\\].
        /// </summary>
        /// <value>The EnableDebugLevelLogging.</value>
        public bool? EnableDebugLevelLogging { get; set; }

        /// <summary>
        /// Gets or Sets RevertDebugLogging
        /// </summary>
        /// <value>The RevertDebugLogging.</value>
        public string RevertDebugLogging { get; set; }

        /// <summary>
        /// Enable automatically and silently updating of the application
        /// </summary>
        /// <value>The EnableAutoUpdate.</value>
        public bool? EnableAutoUpdate { get; set; }

        /// <summary>
        /// The number of days we should retain log files
        /// </summary>
        /// <value>The LogFileRetentionDays.</value>
        public int? LogFileRetentionDays { get; set; }

        /// <summary>
        /// A value indicating whether \\[run at startup\\].
        /// </summary>
        /// <value>The RunAtStartup.</value>
        public bool? RunAtStartup { get; set; }

        /// <summary>
        /// A value indicating whether this instance is first run.
        /// </summary>
        /// <value>The IsStartupWizardCompleted.</value>
        public bool? IsStartupWizardCompleted { get; set; }

        /// <summary>
        /// The cache path.
        /// </summary>
        /// <value>The CachePath.</value>
        public string CachePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServerConfiguration {\n");
            sb.Append("  EnableUPnP: ").Append(EnableUPnP).Append("\n");
            sb.Append("  PublicPort: ").Append(PublicPort).Append("\n");
            sb.Append("  PublicHttpsPort: ").Append(PublicHttpsPort).Append("\n");
            sb.Append("  HttpServerPortNumber: ").Append(HttpServerPortNumber).Append("\n");
            sb.Append("  HttpsPortNumber: ").Append(HttpsPortNumber).Append("\n");
            sb.Append("  EnableHttps: ").Append(EnableHttps).Append("\n");
            sb.Append("  CertificatePath: ").Append(CertificatePath).Append("\n");
            sb.Append("  CertificatePassword: ").Append(CertificatePassword).Append("\n");
            sb.Append("  IsPortAuthorized: ").Append(IsPortAuthorized).Append("\n");
            sb.Append("  AutoRunWebApp: ").Append(AutoRunWebApp).Append("\n");
            sb.Append("  EnableRemoteAccess: ").Append(EnableRemoteAccess).Append("\n");
            sb.Append("  LogAllQueryTimes: ").Append(LogAllQueryTimes).Append("\n");
            sb.Append("  EnableCaseSensitiveItemIds: ").Append(EnableCaseSensitiveItemIds).Append("\n");
            sb.Append("  MetadataPath: ").Append(MetadataPath).Append("\n");
            sb.Append("  MetadataNetworkPath: ").Append(MetadataNetworkPath).Append("\n");
            sb.Append("  PreferredMetadataLanguage: ").Append(PreferredMetadataLanguage).Append("\n");
            sb.Append("  MetadataCountryCode: ").Append(MetadataCountryCode).Append("\n");
            sb.Append("  SortRemoveWords: ").Append(SortRemoveWords).Append("\n");
            sb.Append("  LibraryMonitorDelay: ").Append(LibraryMonitorDelay).Append("\n");
            sb.Append("  EnableDashboardResponseCaching: ").Append(EnableDashboardResponseCaching).Append("\n");
            sb.Append("  DashboardSourcePath: ").Append(DashboardSourcePath).Append("\n");
            sb.Append("  ImageSavingConvention: ").Append(ImageSavingConvention).Append("\n");
            sb.Append("  EnableAutomaticRestart: ").Append(EnableAutomaticRestart).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  PreferredDetectedRemoteAddressFamily: ").Append(PreferredDetectedRemoteAddressFamily).Append("\n");
            sb.Append("  WanDdns: ").Append(WanDdns).Append("\n");
            sb.Append("  UICulture: ").Append(UICulture).Append("\n");
            sb.Append("  RemoteClientBitrateLimit: ").Append(RemoteClientBitrateLimit).Append("\n");
            sb.Append("  LocalNetworkSubnets: ").Append(LocalNetworkSubnets).Append("\n");
            sb.Append("  LocalNetworkAddresses: ").Append(LocalNetworkAddresses).Append("\n");
            sb.Append("  EnableExternalContentInSuggestions: ").Append(EnableExternalContentInSuggestions).Append("\n");
            sb.Append("  RequireHttps: ").Append(RequireHttps).Append("\n");
            sb.Append("  IsBehindProxy: ").Append(IsBehindProxy).Append("\n");
            sb.Append("  RemoteIPFilter: ").Append(RemoteIPFilter).Append("\n");
            sb.Append("  IsRemoteIPFilterBlacklist: ").Append(IsRemoteIPFilterBlacklist).Append("\n");
            sb.Append("  ImageExtractionTimeoutMs: ").Append(ImageExtractionTimeoutMs).Append("\n");
            sb.Append("  PathSubstitutions: ").Append(PathSubstitutions).Append("\n");
            sb.Append("  UninstalledPlugins: ").Append(UninstalledPlugins).Append("\n");
            sb.Append("  CollapseVideoFolders: ").Append(CollapseVideoFolders).Append("\n");
            sb.Append("  EnableOriginalTrackTitles: ").Append(EnableOriginalTrackTitles).Append("\n");
            sb.Append("  VacuumDatabaseOnStartup: ").Append(VacuumDatabaseOnStartup).Append("\n");
            sb.Append("  SimultaneousStreamLimit: ").Append(SimultaneousStreamLimit).Append("\n");
            sb.Append("  DatabaseCacheSizeMB: ").Append(DatabaseCacheSizeMB).Append("\n");
            sb.Append("  EnableSqLiteMmio: ").Append(EnableSqLiteMmio).Append("\n");
            sb.Append("  PlaylistsUpgradedToM3U: ").Append(PlaylistsUpgradedToM3U).Append("\n");
            sb.Append("  ImageExtractorUpgraded1: ").Append(ImageExtractorUpgraded1).Append("\n");
            sb.Append("  EnablePeopleLetterSubFolders: ").Append(EnablePeopleLetterSubFolders).Append("\n");
            sb.Append("  OptimizeDatabaseOnShutdown: ").Append(OptimizeDatabaseOnShutdown).Append("\n");
            sb.Append("  DatabaseAnalysisLimit: ").Append(DatabaseAnalysisLimit).Append("\n");
            sb.Append("  DisableAsyncIO: ").Append(DisableAsyncIO).Append("\n");
            sb.Append("  MigratedToUserItemShares6: ").Append(MigratedToUserItemShares6).Append("\n");
            sb.Append("  MigratedLibraryOptionsToDb: ").Append(MigratedLibraryOptionsToDb).Append("\n");
            sb.Append("  AllowLegacyLocalNetworkPassword: ").Append(AllowLegacyLocalNetworkPassword).Append("\n");
            sb.Append("  EnableSavedMetadataForPeople: ").Append(EnableSavedMetadataForPeople).Append("\n");
            sb.Append("  TvChannelsRefreshed: ").Append(TvChannelsRefreshed).Append("\n");
            sb.Append("  ProxyHeaderMode: ").Append(ProxyHeaderMode).Append("\n");
            sb.Append("  EnableDebugLevelLogging: ").Append(EnableDebugLevelLogging).Append("\n");
            sb.Append("  RevertDebugLogging: ").Append(RevertDebugLogging).Append("\n");
            sb.Append("  EnableAutoUpdate: ").Append(EnableAutoUpdate).Append("\n");
            sb.Append("  LogFileRetentionDays: ").Append(LogFileRetentionDays).Append("\n");
            sb.Append("  RunAtStartup: ").Append(RunAtStartup).Append("\n");
            sb.Append("  IsStartupWizardCompleted: ").Append(IsStartupWizardCompleted).Append("\n");
            sb.Append("  CachePath: ").Append(CachePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServerConfiguration);
        }

        /// <summary>
        /// Returns true if ServerConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ServerConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableUPnP == input.EnableUPnP ||
                    (this.EnableUPnP != null &&
                    this.EnableUPnP.Equals(input.EnableUPnP))
                ) && 
                (
                    this.PublicPort == input.PublicPort ||
                    (this.PublicPort != null &&
                    this.PublicPort.Equals(input.PublicPort))
                ) && 
                (
                    this.PublicHttpsPort == input.PublicHttpsPort ||
                    (this.PublicHttpsPort != null &&
                    this.PublicHttpsPort.Equals(input.PublicHttpsPort))
                ) && 
                (
                    this.HttpServerPortNumber == input.HttpServerPortNumber ||
                    (this.HttpServerPortNumber != null &&
                    this.HttpServerPortNumber.Equals(input.HttpServerPortNumber))
                ) && 
                (
                    this.HttpsPortNumber == input.HttpsPortNumber ||
                    (this.HttpsPortNumber != null &&
                    this.HttpsPortNumber.Equals(input.HttpsPortNumber))
                ) && 
                (
                    this.EnableHttps == input.EnableHttps ||
                    (this.EnableHttps != null &&
                    this.EnableHttps.Equals(input.EnableHttps))
                ) && 
                (
                    this.CertificatePath == input.CertificatePath ||
                    (this.CertificatePath != null &&
                    this.CertificatePath.Equals(input.CertificatePath))
                ) && 
                (
                    this.CertificatePassword == input.CertificatePassword ||
                    (this.CertificatePassword != null &&
                    this.CertificatePassword.Equals(input.CertificatePassword))
                ) && 
                (
                    this.IsPortAuthorized == input.IsPortAuthorized ||
                    (this.IsPortAuthorized != null &&
                    this.IsPortAuthorized.Equals(input.IsPortAuthorized))
                ) && 
                (
                    this.AutoRunWebApp == input.AutoRunWebApp ||
                    (this.AutoRunWebApp != null &&
                    this.AutoRunWebApp.Equals(input.AutoRunWebApp))
                ) && 
                (
                    this.EnableRemoteAccess == input.EnableRemoteAccess ||
                    (this.EnableRemoteAccess != null &&
                    this.EnableRemoteAccess.Equals(input.EnableRemoteAccess))
                ) && 
                (
                    this.LogAllQueryTimes == input.LogAllQueryTimes ||
                    (this.LogAllQueryTimes != null &&
                    this.LogAllQueryTimes.Equals(input.LogAllQueryTimes))
                ) && 
                (
                    this.EnableCaseSensitiveItemIds == input.EnableCaseSensitiveItemIds ||
                    (this.EnableCaseSensitiveItemIds != null &&
                    this.EnableCaseSensitiveItemIds.Equals(input.EnableCaseSensitiveItemIds))
                ) && 
                (
                    this.MetadataPath == input.MetadataPath ||
                    (this.MetadataPath != null &&
                    this.MetadataPath.Equals(input.MetadataPath))
                ) && 
                (
                    this.MetadataNetworkPath == input.MetadataNetworkPath ||
                    (this.MetadataNetworkPath != null &&
                    this.MetadataNetworkPath.Equals(input.MetadataNetworkPath))
                ) && 
                (
                    this.PreferredMetadataLanguage == input.PreferredMetadataLanguage ||
                    (this.PreferredMetadataLanguage != null &&
                    this.PreferredMetadataLanguage.Equals(input.PreferredMetadataLanguage))
                ) && 
                (
                    this.MetadataCountryCode == input.MetadataCountryCode ||
                    (this.MetadataCountryCode != null &&
                    this.MetadataCountryCode.Equals(input.MetadataCountryCode))
                ) && 
                (
                    this.SortRemoveWords == input.SortRemoveWords ||
                    this.SortRemoveWords != null &&
                    input.SortRemoveWords != null &&
                    this.SortRemoveWords.SequenceEqual(input.SortRemoveWords)
                ) && 
                (
                    this.LibraryMonitorDelay == input.LibraryMonitorDelay ||
                    (this.LibraryMonitorDelay != null &&
                    this.LibraryMonitorDelay.Equals(input.LibraryMonitorDelay))
                ) && 
                (
                    this.EnableDashboardResponseCaching == input.EnableDashboardResponseCaching ||
                    (this.EnableDashboardResponseCaching != null &&
                    this.EnableDashboardResponseCaching.Equals(input.EnableDashboardResponseCaching))
                ) && 
                (
                    this.DashboardSourcePath == input.DashboardSourcePath ||
                    (this.DashboardSourcePath != null &&
                    this.DashboardSourcePath.Equals(input.DashboardSourcePath))
                ) && 
                (
                    this.ImageSavingConvention == input.ImageSavingConvention ||
                    (this.ImageSavingConvention != null &&
                    this.ImageSavingConvention.Equals(input.ImageSavingConvention))
                ) && 
                (
                    this.EnableAutomaticRestart == input.EnableAutomaticRestart ||
                    (this.EnableAutomaticRestart != null &&
                    this.EnableAutomaticRestart.Equals(input.EnableAutomaticRestart))
                ) && 
                (
                    this.ServerName == input.ServerName ||
                    (this.ServerName != null &&
                    this.ServerName.Equals(input.ServerName))
                ) && 
                (
                    this.PreferredDetectedRemoteAddressFamily == input.PreferredDetectedRemoteAddressFamily ||
                    (this.PreferredDetectedRemoteAddressFamily != null &&
                    this.PreferredDetectedRemoteAddressFamily.Equals(input.PreferredDetectedRemoteAddressFamily))
                ) && 
                (
                    this.WanDdns == input.WanDdns ||
                    (this.WanDdns != null &&
                    this.WanDdns.Equals(input.WanDdns))
                ) && 
                (
                    this.UICulture == input.UICulture ||
                    (this.UICulture != null &&
                    this.UICulture.Equals(input.UICulture))
                ) && 
                (
                    this.RemoteClientBitrateLimit == input.RemoteClientBitrateLimit ||
                    (this.RemoteClientBitrateLimit != null &&
                    this.RemoteClientBitrateLimit.Equals(input.RemoteClientBitrateLimit))
                ) && 
                (
                    this.LocalNetworkSubnets == input.LocalNetworkSubnets ||
                    this.LocalNetworkSubnets != null &&
                    input.LocalNetworkSubnets != null &&
                    this.LocalNetworkSubnets.SequenceEqual(input.LocalNetworkSubnets)
                ) && 
                (
                    this.LocalNetworkAddresses == input.LocalNetworkAddresses ||
                    this.LocalNetworkAddresses != null &&
                    input.LocalNetworkAddresses != null &&
                    this.LocalNetworkAddresses.SequenceEqual(input.LocalNetworkAddresses)
                ) && 
                (
                    this.EnableExternalContentInSuggestions == input.EnableExternalContentInSuggestions ||
                    (this.EnableExternalContentInSuggestions != null &&
                    this.EnableExternalContentInSuggestions.Equals(input.EnableExternalContentInSuggestions))
                ) && 
                (
                    this.RequireHttps == input.RequireHttps ||
                    (this.RequireHttps != null &&
                    this.RequireHttps.Equals(input.RequireHttps))
                ) && 
                (
                    this.IsBehindProxy == input.IsBehindProxy ||
                    (this.IsBehindProxy != null &&
                    this.IsBehindProxy.Equals(input.IsBehindProxy))
                ) && 
                (
                    this.RemoteIPFilter == input.RemoteIPFilter ||
                    this.RemoteIPFilter != null &&
                    input.RemoteIPFilter != null &&
                    this.RemoteIPFilter.SequenceEqual(input.RemoteIPFilter)
                ) && 
                (
                    this.IsRemoteIPFilterBlacklist == input.IsRemoteIPFilterBlacklist ||
                    (this.IsRemoteIPFilterBlacklist != null &&
                    this.IsRemoteIPFilterBlacklist.Equals(input.IsRemoteIPFilterBlacklist))
                ) && 
                (
                    this.ImageExtractionTimeoutMs == input.ImageExtractionTimeoutMs ||
                    (this.ImageExtractionTimeoutMs != null &&
                    this.ImageExtractionTimeoutMs.Equals(input.ImageExtractionTimeoutMs))
                ) && 
                (
                    this.PathSubstitutions == input.PathSubstitutions ||
                    this.PathSubstitutions != null &&
                    input.PathSubstitutions != null &&
                    this.PathSubstitutions.SequenceEqual(input.PathSubstitutions)
                ) && 
                (
                    this.UninstalledPlugins == input.UninstalledPlugins ||
                    this.UninstalledPlugins != null &&
                    input.UninstalledPlugins != null &&
                    this.UninstalledPlugins.SequenceEqual(input.UninstalledPlugins)
                ) && 
                (
                    this.CollapseVideoFolders == input.CollapseVideoFolders ||
                    (this.CollapseVideoFolders != null &&
                    this.CollapseVideoFolders.Equals(input.CollapseVideoFolders))
                ) && 
                (
                    this.EnableOriginalTrackTitles == input.EnableOriginalTrackTitles ||
                    (this.EnableOriginalTrackTitles != null &&
                    this.EnableOriginalTrackTitles.Equals(input.EnableOriginalTrackTitles))
                ) && 
                (
                    this.VacuumDatabaseOnStartup == input.VacuumDatabaseOnStartup ||
                    (this.VacuumDatabaseOnStartup != null &&
                    this.VacuumDatabaseOnStartup.Equals(input.VacuumDatabaseOnStartup))
                ) && 
                (
                    this.SimultaneousStreamLimit == input.SimultaneousStreamLimit ||
                    (this.SimultaneousStreamLimit != null &&
                    this.SimultaneousStreamLimit.Equals(input.SimultaneousStreamLimit))
                ) && 
                (
                    this.DatabaseCacheSizeMB == input.DatabaseCacheSizeMB ||
                    (this.DatabaseCacheSizeMB != null &&
                    this.DatabaseCacheSizeMB.Equals(input.DatabaseCacheSizeMB))
                ) && 
                (
                    this.EnableSqLiteMmio == input.EnableSqLiteMmio ||
                    (this.EnableSqLiteMmio != null &&
                    this.EnableSqLiteMmio.Equals(input.EnableSqLiteMmio))
                ) && 
                (
                    this.PlaylistsUpgradedToM3U == input.PlaylistsUpgradedToM3U ||
                    (this.PlaylistsUpgradedToM3U != null &&
                    this.PlaylistsUpgradedToM3U.Equals(input.PlaylistsUpgradedToM3U))
                ) && 
                (
                    this.ImageExtractorUpgraded1 == input.ImageExtractorUpgraded1 ||
                    (this.ImageExtractorUpgraded1 != null &&
                    this.ImageExtractorUpgraded1.Equals(input.ImageExtractorUpgraded1))
                ) && 
                (
                    this.EnablePeopleLetterSubFolders == input.EnablePeopleLetterSubFolders ||
                    (this.EnablePeopleLetterSubFolders != null &&
                    this.EnablePeopleLetterSubFolders.Equals(input.EnablePeopleLetterSubFolders))
                ) && 
                (
                    this.OptimizeDatabaseOnShutdown == input.OptimizeDatabaseOnShutdown ||
                    (this.OptimizeDatabaseOnShutdown != null &&
                    this.OptimizeDatabaseOnShutdown.Equals(input.OptimizeDatabaseOnShutdown))
                ) && 
                (
                    this.DatabaseAnalysisLimit == input.DatabaseAnalysisLimit ||
                    (this.DatabaseAnalysisLimit != null &&
                    this.DatabaseAnalysisLimit.Equals(input.DatabaseAnalysisLimit))
                ) && 
                (
                    this.DisableAsyncIO == input.DisableAsyncIO ||
                    (this.DisableAsyncIO != null &&
                    this.DisableAsyncIO.Equals(input.DisableAsyncIO))
                ) && 
                (
                    this.MigratedToUserItemShares6 == input.MigratedToUserItemShares6 ||
                    (this.MigratedToUserItemShares6 != null &&
                    this.MigratedToUserItemShares6.Equals(input.MigratedToUserItemShares6))
                ) && 
                (
                    this.MigratedLibraryOptionsToDb == input.MigratedLibraryOptionsToDb ||
                    (this.MigratedLibraryOptionsToDb != null &&
                    this.MigratedLibraryOptionsToDb.Equals(input.MigratedLibraryOptionsToDb))
                ) && 
                (
                    this.AllowLegacyLocalNetworkPassword == input.AllowLegacyLocalNetworkPassword ||
                    (this.AllowLegacyLocalNetworkPassword != null &&
                    this.AllowLegacyLocalNetworkPassword.Equals(input.AllowLegacyLocalNetworkPassword))
                ) && 
                (
                    this.EnableSavedMetadataForPeople == input.EnableSavedMetadataForPeople ||
                    (this.EnableSavedMetadataForPeople != null &&
                    this.EnableSavedMetadataForPeople.Equals(input.EnableSavedMetadataForPeople))
                ) && 
                (
                    this.TvChannelsRefreshed == input.TvChannelsRefreshed ||
                    (this.TvChannelsRefreshed != null &&
                    this.TvChannelsRefreshed.Equals(input.TvChannelsRefreshed))
                ) && 
                (
                    this.ProxyHeaderMode == input.ProxyHeaderMode ||
                    (this.ProxyHeaderMode != null &&
                    this.ProxyHeaderMode.Equals(input.ProxyHeaderMode))
                ) && 
                (
                    this.EnableDebugLevelLogging == input.EnableDebugLevelLogging ||
                    (this.EnableDebugLevelLogging != null &&
                    this.EnableDebugLevelLogging.Equals(input.EnableDebugLevelLogging))
                ) && 
                (
                    this.RevertDebugLogging == input.RevertDebugLogging ||
                    (this.RevertDebugLogging != null &&
                    this.RevertDebugLogging.Equals(input.RevertDebugLogging))
                ) && 
                (
                    this.EnableAutoUpdate == input.EnableAutoUpdate ||
                    (this.EnableAutoUpdate != null &&
                    this.EnableAutoUpdate.Equals(input.EnableAutoUpdate))
                ) && 
                (
                    this.LogFileRetentionDays == input.LogFileRetentionDays ||
                    (this.LogFileRetentionDays != null &&
                    this.LogFileRetentionDays.Equals(input.LogFileRetentionDays))
                ) && 
                (
                    this.RunAtStartup == input.RunAtStartup ||
                    (this.RunAtStartup != null &&
                    this.RunAtStartup.Equals(input.RunAtStartup))
                ) && 
                (
                    this.IsStartupWizardCompleted == input.IsStartupWizardCompleted ||
                    (this.IsStartupWizardCompleted != null &&
                    this.IsStartupWizardCompleted.Equals(input.IsStartupWizardCompleted))
                ) && 
                (
                    this.CachePath == input.CachePath ||
                    (this.CachePath != null &&
                    this.CachePath.Equals(input.CachePath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnableUPnP != null)
                    hashCode = hashCode * 59 + this.EnableUPnP.GetHashCode();
                if (this.PublicPort != null)
                    hashCode = hashCode * 59 + this.PublicPort.GetHashCode();
                if (this.PublicHttpsPort != null)
                    hashCode = hashCode * 59 + this.PublicHttpsPort.GetHashCode();
                if (this.HttpServerPortNumber != null)
                    hashCode = hashCode * 59 + this.HttpServerPortNumber.GetHashCode();
                if (this.HttpsPortNumber != null)
                    hashCode = hashCode * 59 + this.HttpsPortNumber.GetHashCode();
                if (this.EnableHttps != null)
                    hashCode = hashCode * 59 + this.EnableHttps.GetHashCode();
                if (this.CertificatePath != null)
                    hashCode = hashCode * 59 + this.CertificatePath.GetHashCode();
                if (this.CertificatePassword != null)
                    hashCode = hashCode * 59 + this.CertificatePassword.GetHashCode();
                if (this.IsPortAuthorized != null)
                    hashCode = hashCode * 59 + this.IsPortAuthorized.GetHashCode();
                if (this.AutoRunWebApp != null)
                    hashCode = hashCode * 59 + this.AutoRunWebApp.GetHashCode();
                if (this.EnableRemoteAccess != null)
                    hashCode = hashCode * 59 + this.EnableRemoteAccess.GetHashCode();
                if (this.LogAllQueryTimes != null)
                    hashCode = hashCode * 59 + this.LogAllQueryTimes.GetHashCode();
                if (this.EnableCaseSensitiveItemIds != null)
                    hashCode = hashCode * 59 + this.EnableCaseSensitiveItemIds.GetHashCode();
                if (this.MetadataPath != null)
                    hashCode = hashCode * 59 + this.MetadataPath.GetHashCode();
                if (this.MetadataNetworkPath != null)
                    hashCode = hashCode * 59 + this.MetadataNetworkPath.GetHashCode();
                if (this.PreferredMetadataLanguage != null)
                    hashCode = hashCode * 59 + this.PreferredMetadataLanguage.GetHashCode();
                if (this.MetadataCountryCode != null)
                    hashCode = hashCode * 59 + this.MetadataCountryCode.GetHashCode();
                if (this.SortRemoveWords != null)
                    hashCode = hashCode * 59 + this.SortRemoveWords.GetHashCode();
                if (this.LibraryMonitorDelay != null)
                    hashCode = hashCode * 59 + this.LibraryMonitorDelay.GetHashCode();
                if (this.EnableDashboardResponseCaching != null)
                    hashCode = hashCode * 59 + this.EnableDashboardResponseCaching.GetHashCode();
                if (this.DashboardSourcePath != null)
                    hashCode = hashCode * 59 + this.DashboardSourcePath.GetHashCode();
                if (this.ImageSavingConvention != null)
                    hashCode = hashCode * 59 + this.ImageSavingConvention.GetHashCode();
                if (this.EnableAutomaticRestart != null)
                    hashCode = hashCode * 59 + this.EnableAutomaticRestart.GetHashCode();
                if (this.ServerName != null)
                    hashCode = hashCode * 59 + this.ServerName.GetHashCode();
                if (this.PreferredDetectedRemoteAddressFamily != null)
                    hashCode = hashCode * 59 + this.PreferredDetectedRemoteAddressFamily.GetHashCode();
                if (this.WanDdns != null)
                    hashCode = hashCode * 59 + this.WanDdns.GetHashCode();
                if (this.UICulture != null)
                    hashCode = hashCode * 59 + this.UICulture.GetHashCode();
                if (this.RemoteClientBitrateLimit != null)
                    hashCode = hashCode * 59 + this.RemoteClientBitrateLimit.GetHashCode();
                if (this.LocalNetworkSubnets != null)
                    hashCode = hashCode * 59 + this.LocalNetworkSubnets.GetHashCode();
                if (this.LocalNetworkAddresses != null)
                    hashCode = hashCode * 59 + this.LocalNetworkAddresses.GetHashCode();
                if (this.EnableExternalContentInSuggestions != null)
                    hashCode = hashCode * 59 + this.EnableExternalContentInSuggestions.GetHashCode();
                if (this.RequireHttps != null)
                    hashCode = hashCode * 59 + this.RequireHttps.GetHashCode();
                if (this.IsBehindProxy != null)
                    hashCode = hashCode * 59 + this.IsBehindProxy.GetHashCode();
                if (this.RemoteIPFilter != null)
                    hashCode = hashCode * 59 + this.RemoteIPFilter.GetHashCode();
                if (this.IsRemoteIPFilterBlacklist != null)
                    hashCode = hashCode * 59 + this.IsRemoteIPFilterBlacklist.GetHashCode();
                if (this.ImageExtractionTimeoutMs != null)
                    hashCode = hashCode * 59 + this.ImageExtractionTimeoutMs.GetHashCode();
                if (this.PathSubstitutions != null)
                    hashCode = hashCode * 59 + this.PathSubstitutions.GetHashCode();
                if (this.UninstalledPlugins != null)
                    hashCode = hashCode * 59 + this.UninstalledPlugins.GetHashCode();
                if (this.CollapseVideoFolders != null)
                    hashCode = hashCode * 59 + this.CollapseVideoFolders.GetHashCode();
                if (this.EnableOriginalTrackTitles != null)
                    hashCode = hashCode * 59 + this.EnableOriginalTrackTitles.GetHashCode();
                if (this.VacuumDatabaseOnStartup != null)
                    hashCode = hashCode * 59 + this.VacuumDatabaseOnStartup.GetHashCode();
                if (this.SimultaneousStreamLimit != null)
                    hashCode = hashCode * 59 + this.SimultaneousStreamLimit.GetHashCode();
                if (this.DatabaseCacheSizeMB != null)
                    hashCode = hashCode * 59 + this.DatabaseCacheSizeMB.GetHashCode();
                if (this.EnableSqLiteMmio != null)
                    hashCode = hashCode * 59 + this.EnableSqLiteMmio.GetHashCode();
                if (this.PlaylistsUpgradedToM3U != null)
                    hashCode = hashCode * 59 + this.PlaylistsUpgradedToM3U.GetHashCode();
                if (this.ImageExtractorUpgraded1 != null)
                    hashCode = hashCode * 59 + this.ImageExtractorUpgraded1.GetHashCode();
                if (this.EnablePeopleLetterSubFolders != null)
                    hashCode = hashCode * 59 + this.EnablePeopleLetterSubFolders.GetHashCode();
                if (this.OptimizeDatabaseOnShutdown != null)
                    hashCode = hashCode * 59 + this.OptimizeDatabaseOnShutdown.GetHashCode();
                if (this.DatabaseAnalysisLimit != null)
                    hashCode = hashCode * 59 + this.DatabaseAnalysisLimit.GetHashCode();
                if (this.DisableAsyncIO != null)
                    hashCode = hashCode * 59 + this.DisableAsyncIO.GetHashCode();
                if (this.MigratedToUserItemShares6 != null)
                    hashCode = hashCode * 59 + this.MigratedToUserItemShares6.GetHashCode();
                if (this.MigratedLibraryOptionsToDb != null)
                    hashCode = hashCode * 59 + this.MigratedLibraryOptionsToDb.GetHashCode();
                if (this.AllowLegacyLocalNetworkPassword != null)
                    hashCode = hashCode * 59 + this.AllowLegacyLocalNetworkPassword.GetHashCode();
                if (this.EnableSavedMetadataForPeople != null)
                    hashCode = hashCode * 59 + this.EnableSavedMetadataForPeople.GetHashCode();
                if (this.TvChannelsRefreshed != null)
                    hashCode = hashCode * 59 + this.TvChannelsRefreshed.GetHashCode();
                if (this.ProxyHeaderMode != null)
                    hashCode = hashCode * 59 + this.ProxyHeaderMode.GetHashCode();
                if (this.EnableDebugLevelLogging != null)
                    hashCode = hashCode * 59 + this.EnableDebugLevelLogging.GetHashCode();
                if (this.RevertDebugLogging != null)
                    hashCode = hashCode * 59 + this.RevertDebugLogging.GetHashCode();
                if (this.EnableAutoUpdate != null)
                    hashCode = hashCode * 59 + this.EnableAutoUpdate.GetHashCode();
                if (this.LogFileRetentionDays != null)
                    hashCode = hashCode * 59 + this.LogFileRetentionDays.GetHashCode();
                if (this.RunAtStartup != null)
                    hashCode = hashCode * 59 + this.RunAtStartup.GetHashCode();
                if (this.IsStartupWizardCompleted != null)
                    hashCode = hashCode * 59 + this.IsStartupWizardCompleted.GetHashCode();
                if (this.CachePath != null)
                    hashCode = hashCode * 59 + this.CachePath.GetHashCode();
                return hashCode;
            }
        }
    }
}