// <copyright file="SessionUserInfo.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class SessionUserInfo.  .
    /// </summary>
    /// <seealso>MediaBrowser.Model.Session.SessionUserInfo</seealso>
    public partial class SessionUserInfo :  IEquatable<SessionUserInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionUserInfo" /> class.
        /// </summary>
        public SessionUserInfo()
        {
        }
        
        /// <summary>
        /// The user identifier.
        /// </summary>
        /// <value>The UserId.</value>
        public string UserId { get; set; }

        /// <summary>
        /// The name of the user.
        /// </summary>
        /// <value>The UserName.</value>
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets UserInternalId
        /// </summary>
        /// <value>The UserInternalId.</value>
        public long? UserInternalId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionUserInfo {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UserInternalId: ").Append(UserInternalId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionUserInfo);
        }

        /// <summary>
        /// Returns true if SessionUserInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionUserInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionUserInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.UserInternalId == input.UserInternalId ||
                    (this.UserInternalId != null &&
                    this.UserInternalId.Equals(input.UserInternalId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.UserInternalId != null)
                    hashCode = hashCode * 59 + this.UserInternalId.GetHashCode();
                return hashCode;
            }
        }
    }
}