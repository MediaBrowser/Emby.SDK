// <copyright file="ChapterInfo.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class ChapterInfo  .
    /// </summary>
    /// <seealso>MediaBrowser.Model.Entities.ChapterInfo</seealso>
    public partial class ChapterInfo :  IEquatable<ChapterInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChapterInfo" /> class.
        /// </summary>
        public ChapterInfo()
        {
        }
        
        /// <summary>
        /// The start position ticks.
        /// </summary>
        /// <value>The StartPositionTicks.</value>
        public long? StartPositionTicks { get; set; }

        /// <summary>
        /// The name.
        /// </summary>
        /// <value>The Name.</value>
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ImageTag
        /// </summary>
        /// <value>The ImageTag.</value>
        public string ImageTag { get; set; }

        /// <summary>
        /// Gets or Sets MarkerType
        /// </summary>
        /// <value>The MarkerType.</value>
        public MarkerType MarkerType { get; set; }

        /// <summary>
        /// Gets or Sets ChapterIndex
        /// </summary>
        /// <value>The ChapterIndex.</value>
        public int? ChapterIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChapterInfo {\n");
            sb.Append("  StartPositionTicks: ").Append(StartPositionTicks).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ImageTag: ").Append(ImageTag).Append("\n");
            sb.Append("  MarkerType: ").Append(MarkerType).Append("\n");
            sb.Append("  ChapterIndex: ").Append(ChapterIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChapterInfo);
        }

        /// <summary>
        /// Returns true if ChapterInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ChapterInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChapterInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartPositionTicks == input.StartPositionTicks ||
                    (this.StartPositionTicks != null &&
                    this.StartPositionTicks.Equals(input.StartPositionTicks))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ImageTag == input.ImageTag ||
                    (this.ImageTag != null &&
                    this.ImageTag.Equals(input.ImageTag))
                ) && 
                (
                    this.MarkerType == input.MarkerType ||
                    (this.MarkerType != null &&
                    this.MarkerType.Equals(input.MarkerType))
                ) && 
                (
                    this.ChapterIndex == input.ChapterIndex ||
                    (this.ChapterIndex != null &&
                    this.ChapterIndex.Equals(input.ChapterIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartPositionTicks != null)
                    hashCode = hashCode * 59 + this.StartPositionTicks.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ImageTag != null)
                    hashCode = hashCode * 59 + this.ImageTag.GetHashCode();
                if (this.MarkerType != null)
                    hashCode = hashCode * 59 + this.MarkerType.GetHashCode();
                if (this.ChapterIndex != null)
                    hashCode = hashCode * 59 + this.ChapterIndex.GetHashCode();
                return hashCode;
            }
        }
    }
}