// <copyright file="TypeOptions.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// TypeOptions.
    /// </summary>
    /// <seealso>MediaBrowser.Model.Configuration.TypeOptions</seealso>
    public partial class TypeOptions :  IEquatable<TypeOptions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TypeOptions" /> class.
        /// </summary>
        public TypeOptions()
        {
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /// <value>The Type.</value>
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets MetadataFetchers
        /// </summary>
        /// <value>The MetadataFetchers.</value>
        public List<string> MetadataFetchers { get; set; }

        /// <summary>
        /// Gets or Sets MetadataFetcherOrder
        /// </summary>
        /// <value>The MetadataFetcherOrder.</value>
        public List<string> MetadataFetcherOrder { get; set; }

        /// <summary>
        /// Gets or Sets ImageFetchers
        /// </summary>
        /// <value>The ImageFetchers.</value>
        public List<string> ImageFetchers { get; set; }

        /// <summary>
        /// Gets or Sets ImageFetcherOrder
        /// </summary>
        /// <value>The ImageFetcherOrder.</value>
        public List<string> ImageFetcherOrder { get; set; }

        /// <summary>
        /// Gets or Sets ImageOptions
        /// </summary>
        /// <value>The ImageOptions.</value>
        public List<ImageOption> ImageOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TypeOptions {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MetadataFetchers: ").Append(MetadataFetchers).Append("\n");
            sb.Append("  MetadataFetcherOrder: ").Append(MetadataFetcherOrder).Append("\n");
            sb.Append("  ImageFetchers: ").Append(ImageFetchers).Append("\n");
            sb.Append("  ImageFetcherOrder: ").Append(ImageFetcherOrder).Append("\n");
            sb.Append("  ImageOptions: ").Append(ImageOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TypeOptions);
        }

        /// <summary>
        /// Returns true if TypeOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of TypeOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TypeOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MetadataFetchers == input.MetadataFetchers ||
                    this.MetadataFetchers != null &&
                    input.MetadataFetchers != null &&
                    this.MetadataFetchers.SequenceEqual(input.MetadataFetchers)
                ) && 
                (
                    this.MetadataFetcherOrder == input.MetadataFetcherOrder ||
                    this.MetadataFetcherOrder != null &&
                    input.MetadataFetcherOrder != null &&
                    this.MetadataFetcherOrder.SequenceEqual(input.MetadataFetcherOrder)
                ) && 
                (
                    this.ImageFetchers == input.ImageFetchers ||
                    this.ImageFetchers != null &&
                    input.ImageFetchers != null &&
                    this.ImageFetchers.SequenceEqual(input.ImageFetchers)
                ) && 
                (
                    this.ImageFetcherOrder == input.ImageFetcherOrder ||
                    this.ImageFetcherOrder != null &&
                    input.ImageFetcherOrder != null &&
                    this.ImageFetcherOrder.SequenceEqual(input.ImageFetcherOrder)
                ) && 
                (
                    this.ImageOptions == input.ImageOptions ||
                    this.ImageOptions != null &&
                    input.ImageOptions != null &&
                    this.ImageOptions.SequenceEqual(input.ImageOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MetadataFetchers != null)
                    hashCode = hashCode * 59 + this.MetadataFetchers.GetHashCode();
                if (this.MetadataFetcherOrder != null)
                    hashCode = hashCode * 59 + this.MetadataFetcherOrder.GetHashCode();
                if (this.ImageFetchers != null)
                    hashCode = hashCode * 59 + this.ImageFetchers.GetHashCode();
                if (this.ImageFetcherOrder != null)
                    hashCode = hashCode * 59 + this.ImageFetcherOrder.GetHashCode();
                if (this.ImageOptions != null)
                    hashCode = hashCode * 59 + this.ImageOptions.GetHashCode();
                return hashCode;
            }
        }
    }
}