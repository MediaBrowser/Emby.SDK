// <copyright file="ResponseProfile.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// ResponseProfile.
    /// </summary>
    /// <seealso>MediaBrowser.Model.Dlna.ResponseProfile</seealso>
    public partial class ResponseProfile :  IEquatable<ResponseProfile>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseProfile" /> class.
        /// </summary>
        public ResponseProfile()
        {
        }
        
        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        /// <value>The Container.</value>
        public string Container { get; set; }

        /// <summary>
        /// Gets or Sets AudioCodec
        /// </summary>
        /// <value>The AudioCodec.</value>
        public string AudioCodec { get; set; }

        /// <summary>
        /// Gets or Sets VideoCodec
        /// </summary>
        /// <value>The VideoCodec.</value>
        public string VideoCodec { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /// <value>The Type.</value>
        public DlnaProfileType Type { get; set; }

        /// <summary>
        /// Gets or Sets OrgPn
        /// </summary>
        /// <value>The OrgPn.</value>
        public string OrgPn { get; set; }

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        /// <value>The MimeType.</value>
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        /// <value>The Conditions.</value>
        public List<ProfileCondition> Conditions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseProfile {\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  AudioCodec: ").Append(AudioCodec).Append("\n");
            sb.Append("  VideoCodec: ").Append(VideoCodec).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OrgPn: ").Append(OrgPn).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseProfile);
        }

        /// <summary>
        /// Returns true if ResponseProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Container == input.Container ||
                    (this.Container != null &&
                    this.Container.Equals(input.Container))
                ) && 
                (
                    this.AudioCodec == input.AudioCodec ||
                    (this.AudioCodec != null &&
                    this.AudioCodec.Equals(input.AudioCodec))
                ) && 
                (
                    this.VideoCodec == input.VideoCodec ||
                    (this.VideoCodec != null &&
                    this.VideoCodec.Equals(input.VideoCodec))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.OrgPn == input.OrgPn ||
                    (this.OrgPn != null &&
                    this.OrgPn.Equals(input.OrgPn))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    this.Conditions != null &&
                    input.Conditions != null &&
                    this.Conditions.SequenceEqual(input.Conditions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Container != null)
                    hashCode = hashCode * 59 + this.Container.GetHashCode();
                if (this.AudioCodec != null)
                    hashCode = hashCode * 59 + this.AudioCodec.GetHashCode();
                if (this.VideoCodec != null)
                    hashCode = hashCode * 59 + this.VideoCodec.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.OrgPn != null)
                    hashCode = hashCode * 59 + this.OrgPn.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.Conditions != null)
                    hashCode = hashCode * 59 + this.Conditions.GetHashCode();
                return hashCode;
            }
        }
    }
}