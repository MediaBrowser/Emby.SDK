// <copyright file="ProfileCondition.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// ProfileCondition.
    /// </summary>
    /// <seealso>MediaBrowser.Model.Dlna.ProfileCondition</seealso>
    public partial class ProfileCondition :  IEquatable<ProfileCondition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileCondition" /> class.
        /// </summary>
        public ProfileCondition()
        {
        }
        
        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        /// <value>The Condition.</value>
        public ProfileConditionType Condition { get; set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        /// <value>The Property.</value>
        public ProfileConditionValue Property { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        /// <value>The Value.</value>
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        /// <value>The IsRequired.</value>
        public bool? IsRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfileCondition {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileCondition);
        }

        /// <summary>
        /// Returns true if ProfileCondition instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileCondition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.Property != null)
                    hashCode = hashCode * 59 + this.Property.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                return hashCode;
            }
        }
    }
}