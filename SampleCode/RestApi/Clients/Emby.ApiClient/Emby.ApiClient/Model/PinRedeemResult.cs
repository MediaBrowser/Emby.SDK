// <copyright file="PinRedeemResult.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// PinRedeemResult.
    /// </summary>
    /// <seealso>MediaBrowser.Model.Users.PinRedeemResult</seealso>
    public partial class PinRedeemResult :  IEquatable<PinRedeemResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PinRedeemResult" /> class.
        /// </summary>
        public PinRedeemResult()
        {
        }
        
        /// <summary>
        /// A value indicating whether this `MediaBrowser.Model.Users.PinRedeemResult` is success.
        /// </summary>
        /// <value>The Success.</value>
        public bool? Success { get; set; }

        /// <summary>
        /// The users reset.
        /// </summary>
        /// <value>The UsersReset.</value>
        public List<string> UsersReset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PinRedeemResult {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  UsersReset: ").Append(UsersReset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PinRedeemResult);
        }

        /// <summary>
        /// Returns true if PinRedeemResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PinRedeemResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PinRedeemResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.UsersReset == input.UsersReset ||
                    this.UsersReset != null &&
                    input.UsersReset != null &&
                    this.UsersReset.SequenceEqual(input.UsersReset)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.UsersReset != null)
                    hashCode = hashCode * 59 + this.UsersReset.GetHashCode();
                return hashCode;
            }
        }
    }
}