// <copyright file="CommonInterfacesICodecDeviceInfo.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// CommonInterfacesICodecDeviceInfo.
    /// </summary>
    /// <seealso>Emby.Server.MediaEncoding.Codecs.Common.Interfaces.ICodecDeviceInfo</seealso>
    public partial class CommonInterfacesICodecDeviceInfo :  IEquatable<CommonInterfacesICodecDeviceInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonInterfacesICodecDeviceInfo" /> class.
        /// </summary>
        public CommonInterfacesICodecDeviceInfo()
        {
        }
        
        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        /// <value>The Capabilities.</value>
        public CommonInterfacesICodecDeviceCapabilities Capabilities { get; set; }

        /// <summary>
        /// Gets or Sets Adapter
        /// </summary>
        /// <value>The Adapter.</value>
        public int? Adapter { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /// <value>The Name.</value>
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Desription
        /// </summary>
        /// <value>The Desription.</value>
        public string Desription { get; set; }

        /// <summary>
        /// Gets or Sets Driver
        /// </summary>
        /// <value>The Driver.</value>
        public string Driver { get; set; }

        /// <summary>
        /// Gets or Sets DriverVersion
        /// </summary>
        /// <value>The DriverVersion.</value>
        public Version DriverVersion { get; set; }

        /// <summary>
        /// Gets or Sets ApiVersion
        /// </summary>
        /// <value>The ApiVersion.</value>
        public Version ApiVersion { get; set; }

        /// <summary>
        /// Gets or Sets VendorId
        /// </summary>
        /// <value>The VendorId.</value>
        public int? VendorId { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        /// <value>The DeviceId.</value>
        public int? DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets DeviceIdentifier
        /// </summary>
        /// <value>The DeviceIdentifier.</value>
        public string DeviceIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets HardwareContextFramework
        /// </summary>
        /// <value>The HardwareContextFramework.</value>
        public SecondaryFrameworks HardwareContextFramework { get; set; }

        /// <summary>
        /// Gets or Sets DevPath
        /// </summary>
        /// <value>The DevPath.</value>
        public string DevPath { get; set; }

        /// <summary>
        /// Gets or Sets DrmNode
        /// </summary>
        /// <value>The DrmNode.</value>
        public string DrmNode { get; set; }

        /// <summary>
        /// Gets or Sets VendorName
        /// </summary>
        /// <value>The VendorName.</value>
        public string VendorName { get; set; }

        /// <summary>
        /// Gets or Sets DeviceName
        /// </summary>
        /// <value>The DeviceName.</value>
        public string DeviceName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonInterfacesICodecDeviceInfo {\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  Adapter: ").Append(Adapter).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Desription: ").Append(Desription).Append("\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  DriverVersion: ").Append(DriverVersion).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  VendorId: ").Append(VendorId).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  DeviceIdentifier: ").Append(DeviceIdentifier).Append("\n");
            sb.Append("  HardwareContextFramework: ").Append(HardwareContextFramework).Append("\n");
            sb.Append("  DevPath: ").Append(DevPath).Append("\n");
            sb.Append("  DrmNode: ").Append(DrmNode).Append("\n");
            sb.Append("  VendorName: ").Append(VendorName).Append("\n");
            sb.Append("  DeviceName: ").Append(DeviceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonInterfacesICodecDeviceInfo);
        }

        /// <summary>
        /// Returns true if CommonInterfacesICodecDeviceInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonInterfacesICodecDeviceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonInterfacesICodecDeviceInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Capabilities == input.Capabilities ||
                    (this.Capabilities != null &&
                    this.Capabilities.Equals(input.Capabilities))
                ) && 
                (
                    this.Adapter == input.Adapter ||
                    (this.Adapter != null &&
                    this.Adapter.Equals(input.Adapter))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Desription == input.Desription ||
                    (this.Desription != null &&
                    this.Desription.Equals(input.Desription))
                ) && 
                (
                    this.Driver == input.Driver ||
                    (this.Driver != null &&
                    this.Driver.Equals(input.Driver))
                ) && 
                (
                    this.DriverVersion == input.DriverVersion ||
                    (this.DriverVersion != null &&
                    this.DriverVersion.Equals(input.DriverVersion))
                ) && 
                (
                    this.ApiVersion == input.ApiVersion ||
                    (this.ApiVersion != null &&
                    this.ApiVersion.Equals(input.ApiVersion))
                ) && 
                (
                    this.VendorId == input.VendorId ||
                    (this.VendorId != null &&
                    this.VendorId.Equals(input.VendorId))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.DeviceIdentifier == input.DeviceIdentifier ||
                    (this.DeviceIdentifier != null &&
                    this.DeviceIdentifier.Equals(input.DeviceIdentifier))
                ) && 
                (
                    this.HardwareContextFramework == input.HardwareContextFramework ||
                    (this.HardwareContextFramework != null &&
                    this.HardwareContextFramework.Equals(input.HardwareContextFramework))
                ) && 
                (
                    this.DevPath == input.DevPath ||
                    (this.DevPath != null &&
                    this.DevPath.Equals(input.DevPath))
                ) && 
                (
                    this.DrmNode == input.DrmNode ||
                    (this.DrmNode != null &&
                    this.DrmNode.Equals(input.DrmNode))
                ) && 
                (
                    this.VendorName == input.VendorName ||
                    (this.VendorName != null &&
                    this.VendorName.Equals(input.VendorName))
                ) && 
                (
                    this.DeviceName == input.DeviceName ||
                    (this.DeviceName != null &&
                    this.DeviceName.Equals(input.DeviceName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Capabilities != null)
                    hashCode = hashCode * 59 + this.Capabilities.GetHashCode();
                if (this.Adapter != null)
                    hashCode = hashCode * 59 + this.Adapter.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Desription != null)
                    hashCode = hashCode * 59 + this.Desription.GetHashCode();
                if (this.Driver != null)
                    hashCode = hashCode * 59 + this.Driver.GetHashCode();
                if (this.DriverVersion != null)
                    hashCode = hashCode * 59 + this.DriverVersion.GetHashCode();
                if (this.ApiVersion != null)
                    hashCode = hashCode * 59 + this.ApiVersion.GetHashCode();
                if (this.VendorId != null)
                    hashCode = hashCode * 59 + this.VendorId.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.DeviceIdentifier != null)
                    hashCode = hashCode * 59 + this.DeviceIdentifier.GetHashCode();
                if (this.HardwareContextFramework != null)
                    hashCode = hashCode * 59 + this.HardwareContextFramework.GetHashCode();
                if (this.DevPath != null)
                    hashCode = hashCode * 59 + this.DevPath.GetHashCode();
                if (this.DrmNode != null)
                    hashCode = hashCode * 59 + this.DrmNode.GetHashCode();
                if (this.VendorName != null)
                    hashCode = hashCode * 59 + this.VendorName.GetHashCode();
                if (this.DeviceName != null)
                    hashCode = hashCode * 59 + this.DeviceName.GetHashCode();
                return hashCode;
            }
        }
    }
}