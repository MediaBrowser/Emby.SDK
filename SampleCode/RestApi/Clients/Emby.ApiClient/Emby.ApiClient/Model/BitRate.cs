// <copyright file="BitRate.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// A type for handling bit rates.      The purpose of this type is to avoid manual calculations and conversions in code,             unified handling and conversion as well as presentation through its various To\\*\\*\\*String methods.      `System.IComparable`      `System.IEquatable`1`  .
    /// </summary>
    /// <seealso>Emby.Media.Model.Types.BitRate</seealso>
    public partial class BitRate :  IEquatable<BitRate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BitRate" /> class.
        /// </summary>
        public BitRate()
        {
        }
        
        /// <summary>
        /// Gets or Sets bps
        /// </summary>
        /// <value>The bps.</value>
        public long? bps { get; set; }

        /// <summary>
        /// Gets or Sets kbps
        /// </summary>
        /// <value>The kbps.</value>
        public double? kbps { get; set; }

        /// <summary>
        /// Gets or Sets Mbps
        /// </summary>
        /// <value>The Mbps.</value>
        public double? Mbps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BitRate {\n");
            sb.Append("  bps: ").Append(bps).Append("\n");
            sb.Append("  kbps: ").Append(kbps).Append("\n");
            sb.Append("  Mbps: ").Append(Mbps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BitRate);
        }

        /// <summary>
        /// Returns true if BitRate instances are equal
        /// </summary>
        /// <param name="input">Instance of BitRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BitRate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.bps == input.bps ||
                    (this.bps != null &&
                    this.bps.Equals(input.bps))
                ) && 
                (
                    this.kbps == input.kbps ||
                    (this.kbps != null &&
                    this.kbps.Equals(input.kbps))
                ) && 
                (
                    this.Mbps == input.Mbps ||
                    (this.Mbps != null &&
                    this.Mbps.Equals(input.Mbps))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.bps != null)
                    hashCode = hashCode * 59 + this.bps.GetHashCode();
                if (this.kbps != null)
                    hashCode = hashCode * 59 + this.kbps.GetHashCode();
                if (this.Mbps != null)
                    hashCode = hashCode * 59 + this.Mbps.GetHashCode();
                return hashCode;
            }
        }
    }
}