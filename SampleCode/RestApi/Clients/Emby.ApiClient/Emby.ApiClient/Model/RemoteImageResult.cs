// <copyright file="RemoteImageResult.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class RemoteImageResult.  .
    /// </summary>
    /// <seealso>MediaBrowser.Model.Providers.RemoteImageResult</seealso>
    public partial class RemoteImageResult :  IEquatable<RemoteImageResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteImageResult" /> class.
        /// </summary>
        public RemoteImageResult()
        {
        }
        
        /// <summary>
        /// The images.
        /// </summary>
        /// <value>The Images.</value>
        public List<RemoteImageInfo> Images { get; set; }

        /// <summary>
        /// The total record count.
        /// </summary>
        /// <value>The TotalRecordCount.</value>
        public int? TotalRecordCount { get; set; }

        /// <summary>
        /// The providers.
        /// </summary>
        /// <value>The Providers.</value>
        public List<string> Providers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteImageResult {\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  TotalRecordCount: ").Append(TotalRecordCount).Append("\n");
            sb.Append("  Providers: ").Append(Providers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemoteImageResult);
        }

        /// <summary>
        /// Returns true if RemoteImageResult instances are equal
        /// </summary>
        /// <param name="input">Instance of RemoteImageResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteImageResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.TotalRecordCount == input.TotalRecordCount ||
                    (this.TotalRecordCount != null &&
                    this.TotalRecordCount.Equals(input.TotalRecordCount))
                ) && 
                (
                    this.Providers == input.Providers ||
                    this.Providers != null &&
                    input.Providers != null &&
                    this.Providers.SequenceEqual(input.Providers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.TotalRecordCount != null)
                    hashCode = hashCode * 59 + this.TotalRecordCount.GetHashCode();
                if (this.Providers != null)
                    hashCode = hashCode * 59 + this.Providers.GetHashCode();
                return hashCode;
            }
        }
    }
}