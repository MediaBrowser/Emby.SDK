// <copyright file="MediaStream.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// MediaStream information.      MediaStream itens are typically included in a `MediaBrowser.Model.Dto.MediaSourceInfo` object.      `MediaBrowser.Model.Dto.MediaSourceInfo.MediaStreams`  .
    /// </summary>
    /// <seealso>MediaBrowser.Model.Entities.MediaStream</seealso>
    public partial class MediaStream :  IEquatable<MediaStream>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaStream" /> class.
        /// </summary>
        public MediaStream()
        {
        }
        
        /// <summary>
        /// The codec.    Probe Field: `codec_name`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`    Related Enums: `T:Emby.Media.Model.Enums.VideoMediaTypes`, `Emby.Media.Model.Enums.AudioMediaTypes`, `Emby.Media.Model.Enums.SubtitleMediaTypes`.
        /// </summary>
        /// <value>The Codec.</value>
        public string Codec { get; set; }

        /// <summary>
        /// The codec tag.    Probe Field: `codec_tag`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
        /// </summary>
        /// <value>The CodecTag.</value>
        public string CodecTag { get; set; }

        /// <summary>
        /// The language.    Probe Field: `tags[\"language\"]`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
        /// </summary>
        /// <value>The Language.</value>
        public string Language { get; set; }

        /// <summary>
        /// The color transfer characteristics.    Probe Field: `color_transfer`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`    Related Enum: `Emby.Media.Model.Enums.ColorTransfers`.
        /// </summary>
        /// <value>The ColorTransfer.</value>
        public string ColorTransfer { get; set; }

        /// <summary>
        /// The chromaticity coordinates of the source primaries.    Probe Field: `color_primaries`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`    Related Enum: `Emby.Media.Model.Enums.ColorPrimaries`.
        /// </summary>
        /// <value>The ColorPrimaries.</value>
        public string ColorPrimaries { get; set; }

        /// <summary>
        /// The YUV colorspace type.    Probe Field: `color_space`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`    Related Enum: `Emby.Media.Model.Enums.ColorSpaces`.
        /// </summary>
        /// <value>The ColorSpace.</value>
        public string ColorSpace { get; set; }

        /// <summary>
        /// The comment.    Probe Field: `tags[\"comment\"]`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
        /// </summary>
        /// <value>The Comment.</value>
        public string Comment { get; set; }

        /// <summary>
        /// The start time of the stream.    Probe Field: `start_time`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.    Actual type: `System.TimeSpan`.
        /// </summary>
        /// <value>The StreamStartTimeTicks.</value>
        public long? StreamStartTimeTicks { get; set; }

        /// <summary>
        /// The time\\-base.    Probe Field: `time_base`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.    Actual type: `Emby.Media.Model.Types.Rational`.
        /// </summary>
        /// <value>The TimeBase.</value>
        public string TimeBase { get; set; }

        /// <summary>
        /// The title.    Probe Field: `tags[\"title\"]`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
        /// </summary>
        /// <value>The Title.</value>
        public string Title { get; set; }

        /// <summary>
        /// The extradata.    Probe Field: `extradata`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.    Currently, this value is only parsed for subtitle streams with codec `Emby.Media.Model.Enums.SubtitleMediaTypes.dvb_teletext`.
        /// </summary>
        /// <value>The Extradata.</value>
        public string Extradata { get; set; }

        /// <summary>
        /// Gets or Sets VideoRange
        /// </summary>
        /// <value>The VideoRange.</value>
        public string VideoRange { get; set; }

        /// <summary>
        /// The display title.    Custom property set by the application.
        /// </summary>
        /// <value>The DisplayTitle.</value>
        public string DisplayTitle { get; set; }

        /// <summary>
        /// The display language.    Custom property set by the application.
        /// </summary>
        /// <value>The DisplayLanguage.</value>
        public string DisplayLanguage { get; set; }

        /// <summary>
        /// The nal length size.    Probe Field: `nal_length_size`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video` of type `Emby.Media.Model.Enums.VideoMediaTypes.h264`.    Actual type: `System.Int32`.
        /// </summary>
        /// <value>The NalLengthSize.</value>
        public string NalLengthSize { get; set; }

        /// <summary>
        /// A value indicating whether this instance is interlaced.    Probe Field: `field_order` \\!\\= `progressive`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.
        /// </summary>
        /// <value>The IsInterlaced.</value>
        public bool? IsInterlaced { get; set; }

        /// <summary>
        /// Gets or Sets IsAVC
        /// </summary>
        /// <value>The IsAVC.</value>
        public bool? IsAVC { get; set; }

        /// <summary>
        /// The channel layout.    Probe Field: `channel_layout`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`    Related Enum: `MediaBrowser.Model.Entities.MediaStream.ChannelLayout`.
        /// </summary>
        /// <value>The ChannelLayout.</value>
        public string ChannelLayout { get; set; }

        /// <summary>
        /// The bit rate.    Probe Field: `bit_rate`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`.    THIS VALUE IS PROCESSED BY CUSTOM LOGIC AND DOES NOT NECESSARILY MATCH FFPROBE RESULTS\\!
        /// </summary>
        /// <value>The BitRate.</value>
        public int? BitRate { get; set; }

        /// <summary>
        /// The bit depth.    Probe Field: `bits_per_sample` or `bits_per_raw_sample`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`.
        /// </summary>
        /// <value>The BitDepth.</value>
        public int? BitDepth { get; set; }

        /// <summary>
        /// The reference frames.    Probe Field: `refs`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.
        /// </summary>
        /// <value>The RefFrames.</value>
        public int? RefFrames { get; set; }

        /// <summary>
        /// Gets or Sets Rotation
        /// </summary>
        /// <value>The Rotation.</value>
        public int? Rotation { get; set; }

        /// <summary>
        /// The audio channel count.    Probe Field: `channels`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`.
        /// </summary>
        /// <value>The Channels.</value>
        public int? Channels { get; set; }

        /// <summary>
        /// The sample rate.    Probe Field: `sample_rate`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`    Related Enum: `Emby.Media.Model.Enums.SampleRates`.
        /// </summary>
        /// <value>The SampleRate.</value>
        public int? SampleRate { get; set; }

        /// <summary>
        /// A value indicating whether this instance is default.    Probe Field: `disposition[\"default\"]`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
        /// </summary>
        /// <value>The IsDefault.</value>
        public bool? IsDefault { get; set; }

        /// <summary>
        /// A value indicating whether this instance is forced.    Probe Field: `disposition[\"forced\"]`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
        /// </summary>
        /// <value>The IsForced.</value>
        public bool? IsForced { get; set; }

        /// <summary>
        /// Gets or Sets IsHearingImpaired
        /// </summary>
        /// <value>The IsHearingImpaired.</value>
        public bool? IsHearingImpaired { get; set; }

        /// <summary>
        /// The height.    Probe Field: `height`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.
        /// </summary>
        /// <value>The Height.</value>
        public int? Height { get; set; }

        /// <summary>
        /// The width.    Probe Field: `width`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.
        /// </summary>
        /// <value>The Width.</value>
        public int? Width { get; set; }

        /// <summary>
        /// The average frame rate..    Probe Field: `avg_frame_rate`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.    Actual type: `Emby.Media.Model.Types.Rational`.
        /// </summary>
        /// <value>The AverageFrameRate.</value>
        public float? AverageFrameRate { get; set; }

        /// <summary>
        /// The real frame rate..    Probe Field: `r_frame_rate`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.    Actual type: `Emby.Media.Model.Types.Rational`.
        /// </summary>
        /// <value>The RealFrameRate.</value>
        public float? RealFrameRate { get; set; }

        /// <summary>
        /// The profile.    Probe Field: `profile`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`    Related Enums: `Emby.Media.Model.Enums.AacProfiles`, `Emby.Media.Model.Enums.AvcProfiles`, `Emby.Media.Model.Enums.H263Profiles`, `Emby.Media.Model.Enums.HevcProfiles`, `Emby.Media.Model.Enums.Mpeg2Profiles`,`Emby.Media.Model.Enums.Vc1Profiles`, `Emby.Media.Model.Enums.Mpeg4Profiles`, `Emby.Media.Model.Enums.Vp8Profiles`, `Emby.Media.Model.Enums.Vp9Profiles`.
        /// </summary>
        /// <value>The Profile.</value>
        public string Profile { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /// <value>The Type.</value>
        public MediaStreamType Type { get; set; }

        /// <summary>
        /// The aspect ratio.    Probe Field: `display_aspect_ratio`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.    Actual type: `Emby.Media.Model.Types.Rational`.
        /// </summary>
        /// <value>The AspectRatio.</value>
        public string AspectRatio { get; set; }

        /// <summary>
        /// The index of the stream inside its container.    Probe Field: `index`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
        /// </summary>
        /// <value>The Index.</value>
        public int? Index { get; set; }

        /// <summary>
        /// A value indicating whether this instance is external.    Custom property set by the application.
        /// </summary>
        /// <value>The IsExternal.</value>
        public bool? IsExternal { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryMethod
        /// </summary>
        /// <value>The DeliveryMethod.</value>
        public SubtitleDeliveryMethod DeliveryMethod { get; set; }

        /// <summary>
        /// The delivery URL.    Custom property set by the application.
        /// </summary>
        /// <value>The DeliveryUrl.</value>
        public string DeliveryUrl { get; set; }

        /// <summary>
        /// A value indicating whether this instance is external URL.    Custom property set by the application.
        /// </summary>
        /// <value>The IsExternalUrl.</value>
        public bool? IsExternalUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsTextSubtitleStream
        /// </summary>
        /// <value>The IsTextSubtitleStream.</value>
        public bool? IsTextSubtitleStream { get; set; }

        /// <summary>
        /// A value indicating whether \\[supports external stream\\].
        /// </summary>
        /// <value>The SupportsExternalStream.</value>
        public bool? SupportsExternalStream { get; set; }

        /// <summary>
        /// The filename.
        /// </summary>
        /// <value>The Path.</value>
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        /// <value>The Protocol.</value>
        public MediaProtocol Protocol { get; set; }

        /// <summary>
        /// The pixel format.    Probe Field: `pix_fmt`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.    Actual type: `MediaBrowser.Model.Entities.MediaStream.PixelFormat`.
        /// </summary>
        /// <value>The PixelFormat.</value>
        public string PixelFormat { get; set; }

        /// <summary>
        /// The codec level.    Probe Field: `level`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`    Related Enums: `Emby.Media.Model.Enums.AvcLevels`, `Emby.Media.Model.Enums.H263Levels`, `Emby.Media.Model.Enums.HevcLevels`, `Emby.Media.Model.Enums.Mpeg2Levels`,`Emby.Media.Model.Enums.Vc1Levels`, `Emby.Media.Model.Enums.Mpeg4Levels`, `Emby.Media.Model.Enums.Vp8Levels`, `Emby.Media.Model.Enums.Vp9Levels`.
        /// </summary>
        /// <value>The Level.</value>
        public double? Level { get; set; }

        /// <summary>
        /// A value indicating whether this instance is anamorphic.
        /// </summary>
        /// <value>The IsAnamorphic.</value>
        public bool? IsAnamorphic { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedVideoType
        /// </summary>
        /// <value>The ExtendedVideoType.</value>
        public ExtendedVideoTypes ExtendedVideoType { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedVideoSubType
        /// </summary>
        /// <value>The ExtendedVideoSubType.</value>
        public ExtendedVideoSubTypes ExtendedVideoSubType { get; set; }

        /// <summary>
        /// The extended video sub\\-type description.
        /// </summary>
        /// <value>The ExtendedVideoSubTypeDescription.</value>
        public string ExtendedVideoSubTypeDescription { get; set; }

        /// <summary>
        /// Used only by our Windows app. Not used by Emby Server.
        /// </summary>
        /// <value>The ItemId.</value>
        public string ItemId { get; set; }

        /// <summary>
        /// Used only by our Windows app. Not used by Emby Server.
        /// </summary>
        /// <value>The ServerId.</value>
        public string ServerId { get; set; }

        /// <summary>
        /// The size of the attachment.
        /// </summary>
        /// <value>The AttachmentSize.</value>
        public int? AttachmentSize { get; set; }

        /// <summary>
        /// The type of the MIME.
        /// </summary>
        /// <value>The MimeType.</value>
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or Sets SubtitleLocationType
        /// </summary>
        /// <value>The SubtitleLocationType.</value>
        public SubtitleLocationType SubtitleLocationType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaStream {\n");
            sb.Append("  Codec: ").Append(Codec).Append("\n");
            sb.Append("  CodecTag: ").Append(CodecTag).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ColorTransfer: ").Append(ColorTransfer).Append("\n");
            sb.Append("  ColorPrimaries: ").Append(ColorPrimaries).Append("\n");
            sb.Append("  ColorSpace: ").Append(ColorSpace).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  StreamStartTimeTicks: ").Append(StreamStartTimeTicks).Append("\n");
            sb.Append("  TimeBase: ").Append(TimeBase).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Extradata: ").Append(Extradata).Append("\n");
            sb.Append("  VideoRange: ").Append(VideoRange).Append("\n");
            sb.Append("  DisplayTitle: ").Append(DisplayTitle).Append("\n");
            sb.Append("  DisplayLanguage: ").Append(DisplayLanguage).Append("\n");
            sb.Append("  NalLengthSize: ").Append(NalLengthSize).Append("\n");
            sb.Append("  IsInterlaced: ").Append(IsInterlaced).Append("\n");
            sb.Append("  IsAVC: ").Append(IsAVC).Append("\n");
            sb.Append("  ChannelLayout: ").Append(ChannelLayout).Append("\n");
            sb.Append("  BitRate: ").Append(BitRate).Append("\n");
            sb.Append("  BitDepth: ").Append(BitDepth).Append("\n");
            sb.Append("  RefFrames: ").Append(RefFrames).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  SampleRate: ").Append(SampleRate).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  IsForced: ").Append(IsForced).Append("\n");
            sb.Append("  IsHearingImpaired: ").Append(IsHearingImpaired).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  AverageFrameRate: ").Append(AverageFrameRate).Append("\n");
            sb.Append("  RealFrameRate: ").Append(RealFrameRate).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  IsExternal: ").Append(IsExternal).Append("\n");
            sb.Append("  DeliveryMethod: ").Append(DeliveryMethod).Append("\n");
            sb.Append("  DeliveryUrl: ").Append(DeliveryUrl).Append("\n");
            sb.Append("  IsExternalUrl: ").Append(IsExternalUrl).Append("\n");
            sb.Append("  IsTextSubtitleStream: ").Append(IsTextSubtitleStream).Append("\n");
            sb.Append("  SupportsExternalStream: ").Append(SupportsExternalStream).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  PixelFormat: ").Append(PixelFormat).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  IsAnamorphic: ").Append(IsAnamorphic).Append("\n");
            sb.Append("  ExtendedVideoType: ").Append(ExtendedVideoType).Append("\n");
            sb.Append("  ExtendedVideoSubType: ").Append(ExtendedVideoSubType).Append("\n");
            sb.Append("  ExtendedVideoSubTypeDescription: ").Append(ExtendedVideoSubTypeDescription).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ServerId: ").Append(ServerId).Append("\n");
            sb.Append("  AttachmentSize: ").Append(AttachmentSize).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  SubtitleLocationType: ").Append(SubtitleLocationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaStream);
        }

        /// <summary>
        /// Returns true if MediaStream instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaStream to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaStream input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Codec == input.Codec ||
                    (this.Codec != null &&
                    this.Codec.Equals(input.Codec))
                ) && 
                (
                    this.CodecTag == input.CodecTag ||
                    (this.CodecTag != null &&
                    this.CodecTag.Equals(input.CodecTag))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.ColorTransfer == input.ColorTransfer ||
                    (this.ColorTransfer != null &&
                    this.ColorTransfer.Equals(input.ColorTransfer))
                ) && 
                (
                    this.ColorPrimaries == input.ColorPrimaries ||
                    (this.ColorPrimaries != null &&
                    this.ColorPrimaries.Equals(input.ColorPrimaries))
                ) && 
                (
                    this.ColorSpace == input.ColorSpace ||
                    (this.ColorSpace != null &&
                    this.ColorSpace.Equals(input.ColorSpace))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.StreamStartTimeTicks == input.StreamStartTimeTicks ||
                    (this.StreamStartTimeTicks != null &&
                    this.StreamStartTimeTicks.Equals(input.StreamStartTimeTicks))
                ) && 
                (
                    this.TimeBase == input.TimeBase ||
                    (this.TimeBase != null &&
                    this.TimeBase.Equals(input.TimeBase))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Extradata == input.Extradata ||
                    (this.Extradata != null &&
                    this.Extradata.Equals(input.Extradata))
                ) && 
                (
                    this.VideoRange == input.VideoRange ||
                    (this.VideoRange != null &&
                    this.VideoRange.Equals(input.VideoRange))
                ) && 
                (
                    this.DisplayTitle == input.DisplayTitle ||
                    (this.DisplayTitle != null &&
                    this.DisplayTitle.Equals(input.DisplayTitle))
                ) && 
                (
                    this.DisplayLanguage == input.DisplayLanguage ||
                    (this.DisplayLanguage != null &&
                    this.DisplayLanguage.Equals(input.DisplayLanguage))
                ) && 
                (
                    this.NalLengthSize == input.NalLengthSize ||
                    (this.NalLengthSize != null &&
                    this.NalLengthSize.Equals(input.NalLengthSize))
                ) && 
                (
                    this.IsInterlaced == input.IsInterlaced ||
                    (this.IsInterlaced != null &&
                    this.IsInterlaced.Equals(input.IsInterlaced))
                ) && 
                (
                    this.IsAVC == input.IsAVC ||
                    (this.IsAVC != null &&
                    this.IsAVC.Equals(input.IsAVC))
                ) && 
                (
                    this.ChannelLayout == input.ChannelLayout ||
                    (this.ChannelLayout != null &&
                    this.ChannelLayout.Equals(input.ChannelLayout))
                ) && 
                (
                    this.BitRate == input.BitRate ||
                    (this.BitRate != null &&
                    this.BitRate.Equals(input.BitRate))
                ) && 
                (
                    this.BitDepth == input.BitDepth ||
                    (this.BitDepth != null &&
                    this.BitDepth.Equals(input.BitDepth))
                ) && 
                (
                    this.RefFrames == input.RefFrames ||
                    (this.RefFrames != null &&
                    this.RefFrames.Equals(input.RefFrames))
                ) && 
                (
                    this.Rotation == input.Rotation ||
                    (this.Rotation != null &&
                    this.Rotation.Equals(input.Rotation))
                ) && 
                (
                    this.Channels == input.Channels ||
                    (this.Channels != null &&
                    this.Channels.Equals(input.Channels))
                ) && 
                (
                    this.SampleRate == input.SampleRate ||
                    (this.SampleRate != null &&
                    this.SampleRate.Equals(input.SampleRate))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    (this.IsDefault != null &&
                    this.IsDefault.Equals(input.IsDefault))
                ) && 
                (
                    this.IsForced == input.IsForced ||
                    (this.IsForced != null &&
                    this.IsForced.Equals(input.IsForced))
                ) && 
                (
                    this.IsHearingImpaired == input.IsHearingImpaired ||
                    (this.IsHearingImpaired != null &&
                    this.IsHearingImpaired.Equals(input.IsHearingImpaired))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.AverageFrameRate == input.AverageFrameRate ||
                    (this.AverageFrameRate != null &&
                    this.AverageFrameRate.Equals(input.AverageFrameRate))
                ) && 
                (
                    this.RealFrameRate == input.RealFrameRate ||
                    (this.RealFrameRate != null &&
                    this.RealFrameRate.Equals(input.RealFrameRate))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AspectRatio == input.AspectRatio ||
                    (this.AspectRatio != null &&
                    this.AspectRatio.Equals(input.AspectRatio))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.IsExternal == input.IsExternal ||
                    (this.IsExternal != null &&
                    this.IsExternal.Equals(input.IsExternal))
                ) && 
                (
                    this.DeliveryMethod == input.DeliveryMethod ||
                    (this.DeliveryMethod != null &&
                    this.DeliveryMethod.Equals(input.DeliveryMethod))
                ) && 
                (
                    this.DeliveryUrl == input.DeliveryUrl ||
                    (this.DeliveryUrl != null &&
                    this.DeliveryUrl.Equals(input.DeliveryUrl))
                ) && 
                (
                    this.IsExternalUrl == input.IsExternalUrl ||
                    (this.IsExternalUrl != null &&
                    this.IsExternalUrl.Equals(input.IsExternalUrl))
                ) && 
                (
                    this.IsTextSubtitleStream == input.IsTextSubtitleStream ||
                    (this.IsTextSubtitleStream != null &&
                    this.IsTextSubtitleStream.Equals(input.IsTextSubtitleStream))
                ) && 
                (
                    this.SupportsExternalStream == input.SupportsExternalStream ||
                    (this.SupportsExternalStream != null &&
                    this.SupportsExternalStream.Equals(input.SupportsExternalStream))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.PixelFormat == input.PixelFormat ||
                    (this.PixelFormat != null &&
                    this.PixelFormat.Equals(input.PixelFormat))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.IsAnamorphic == input.IsAnamorphic ||
                    (this.IsAnamorphic != null &&
                    this.IsAnamorphic.Equals(input.IsAnamorphic))
                ) && 
                (
                    this.ExtendedVideoType == input.ExtendedVideoType ||
                    (this.ExtendedVideoType != null &&
                    this.ExtendedVideoType.Equals(input.ExtendedVideoType))
                ) && 
                (
                    this.ExtendedVideoSubType == input.ExtendedVideoSubType ||
                    (this.ExtendedVideoSubType != null &&
                    this.ExtendedVideoSubType.Equals(input.ExtendedVideoSubType))
                ) && 
                (
                    this.ExtendedVideoSubTypeDescription == input.ExtendedVideoSubTypeDescription ||
                    (this.ExtendedVideoSubTypeDescription != null &&
                    this.ExtendedVideoSubTypeDescription.Equals(input.ExtendedVideoSubTypeDescription))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.ServerId == input.ServerId ||
                    (this.ServerId != null &&
                    this.ServerId.Equals(input.ServerId))
                ) && 
                (
                    this.AttachmentSize == input.AttachmentSize ||
                    (this.AttachmentSize != null &&
                    this.AttachmentSize.Equals(input.AttachmentSize))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.SubtitleLocationType == input.SubtitleLocationType ||
                    (this.SubtitleLocationType != null &&
                    this.SubtitleLocationType.Equals(input.SubtitleLocationType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Codec != null)
                    hashCode = hashCode * 59 + this.Codec.GetHashCode();
                if (this.CodecTag != null)
                    hashCode = hashCode * 59 + this.CodecTag.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.ColorTransfer != null)
                    hashCode = hashCode * 59 + this.ColorTransfer.GetHashCode();
                if (this.ColorPrimaries != null)
                    hashCode = hashCode * 59 + this.ColorPrimaries.GetHashCode();
                if (this.ColorSpace != null)
                    hashCode = hashCode * 59 + this.ColorSpace.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.StreamStartTimeTicks != null)
                    hashCode = hashCode * 59 + this.StreamStartTimeTicks.GetHashCode();
                if (this.TimeBase != null)
                    hashCode = hashCode * 59 + this.TimeBase.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Extradata != null)
                    hashCode = hashCode * 59 + this.Extradata.GetHashCode();
                if (this.VideoRange != null)
                    hashCode = hashCode * 59 + this.VideoRange.GetHashCode();
                if (this.DisplayTitle != null)
                    hashCode = hashCode * 59 + this.DisplayTitle.GetHashCode();
                if (this.DisplayLanguage != null)
                    hashCode = hashCode * 59 + this.DisplayLanguage.GetHashCode();
                if (this.NalLengthSize != null)
                    hashCode = hashCode * 59 + this.NalLengthSize.GetHashCode();
                if (this.IsInterlaced != null)
                    hashCode = hashCode * 59 + this.IsInterlaced.GetHashCode();
                if (this.IsAVC != null)
                    hashCode = hashCode * 59 + this.IsAVC.GetHashCode();
                if (this.ChannelLayout != null)
                    hashCode = hashCode * 59 + this.ChannelLayout.GetHashCode();
                if (this.BitRate != null)
                    hashCode = hashCode * 59 + this.BitRate.GetHashCode();
                if (this.BitDepth != null)
                    hashCode = hashCode * 59 + this.BitDepth.GetHashCode();
                if (this.RefFrames != null)
                    hashCode = hashCode * 59 + this.RefFrames.GetHashCode();
                if (this.Rotation != null)
                    hashCode = hashCode * 59 + this.Rotation.GetHashCode();
                if (this.Channels != null)
                    hashCode = hashCode * 59 + this.Channels.GetHashCode();
                if (this.SampleRate != null)
                    hashCode = hashCode * 59 + this.SampleRate.GetHashCode();
                if (this.IsDefault != null)
                    hashCode = hashCode * 59 + this.IsDefault.GetHashCode();
                if (this.IsForced != null)
                    hashCode = hashCode * 59 + this.IsForced.GetHashCode();
                if (this.IsHearingImpaired != null)
                    hashCode = hashCode * 59 + this.IsHearingImpaired.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.AverageFrameRate != null)
                    hashCode = hashCode * 59 + this.AverageFrameRate.GetHashCode();
                if (this.RealFrameRate != null)
                    hashCode = hashCode * 59 + this.RealFrameRate.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AspectRatio != null)
                    hashCode = hashCode * 59 + this.AspectRatio.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.IsExternal != null)
                    hashCode = hashCode * 59 + this.IsExternal.GetHashCode();
                if (this.DeliveryMethod != null)
                    hashCode = hashCode * 59 + this.DeliveryMethod.GetHashCode();
                if (this.DeliveryUrl != null)
                    hashCode = hashCode * 59 + this.DeliveryUrl.GetHashCode();
                if (this.IsExternalUrl != null)
                    hashCode = hashCode * 59 + this.IsExternalUrl.GetHashCode();
                if (this.IsTextSubtitleStream != null)
                    hashCode = hashCode * 59 + this.IsTextSubtitleStream.GetHashCode();
                if (this.SupportsExternalStream != null)
                    hashCode = hashCode * 59 + this.SupportsExternalStream.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.PixelFormat != null)
                    hashCode = hashCode * 59 + this.PixelFormat.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.IsAnamorphic != null)
                    hashCode = hashCode * 59 + this.IsAnamorphic.GetHashCode();
                if (this.ExtendedVideoType != null)
                    hashCode = hashCode * 59 + this.ExtendedVideoType.GetHashCode();
                if (this.ExtendedVideoSubType != null)
                    hashCode = hashCode * 59 + this.ExtendedVideoSubType.GetHashCode();
                if (this.ExtendedVideoSubTypeDescription != null)
                    hashCode = hashCode * 59 + this.ExtendedVideoSubTypeDescription.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.ServerId != null)
                    hashCode = hashCode * 59 + this.ServerId.GetHashCode();
                if (this.AttachmentSize != null)
                    hashCode = hashCode * 59 + this.AttachmentSize.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.SubtitleLocationType != null)
                    hashCode = hashCode * 59 + this.SubtitleLocationType.GetHashCode();
                return hashCode;
            }
        }
    }
}