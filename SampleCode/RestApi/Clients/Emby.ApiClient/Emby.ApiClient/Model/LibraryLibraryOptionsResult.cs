// <copyright file="LibraryLibraryOptionsResult.cs" company="Emby LLC">
// Emby.ApiClient. Autogenerated Code. No license applied. 
// </copyright>
// <autogenerated />
namespace Emby.ApiClient.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;

    /// <summary>
    /// LibraryLibraryOptionsResult.
    /// </summary>
    /// <seealso>Emby.Api.Library.LibraryOptionsResult</seealso>
    public partial class LibraryLibraryOptionsResult :  IEquatable<LibraryLibraryOptionsResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryLibraryOptionsResult" /> class.
        /// </summary>
        public LibraryLibraryOptionsResult()
        {
        }
        
        /// <summary>
        /// Gets or Sets MetadataSavers
        /// </summary>
        /// <value>The MetadataSavers.</value>
        public List<LibraryLibraryOptionInfo> MetadataSavers { get; set; }

        /// <summary>
        /// Gets or Sets MetadataReaders
        /// </summary>
        /// <value>The MetadataReaders.</value>
        public List<LibraryLibraryOptionInfo> MetadataReaders { get; set; }

        /// <summary>
        /// Gets or Sets SubtitleFetchers
        /// </summary>
        /// <value>The SubtitleFetchers.</value>
        public List<LibraryLibraryOptionInfo> SubtitleFetchers { get; set; }

        /// <summary>
        /// Gets or Sets LyricsFetchers
        /// </summary>
        /// <value>The LyricsFetchers.</value>
        public List<LibraryLibraryOptionInfo> LyricsFetchers { get; set; }

        /// <summary>
        /// Gets or Sets TypeOptions
        /// </summary>
        /// <value>The TypeOptions.</value>
        public List<LibraryLibraryTypeOptions> TypeOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LibraryLibraryOptionsResult {\n");
            sb.Append("  MetadataSavers: ").Append(MetadataSavers).Append("\n");
            sb.Append("  MetadataReaders: ").Append(MetadataReaders).Append("\n");
            sb.Append("  SubtitleFetchers: ").Append(SubtitleFetchers).Append("\n");
            sb.Append("  LyricsFetchers: ").Append(LyricsFetchers).Append("\n");
            sb.Append("  TypeOptions: ").Append(TypeOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LibraryLibraryOptionsResult);
        }

        /// <summary>
        /// Returns true if LibraryLibraryOptionsResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LibraryLibraryOptionsResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryLibraryOptionsResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MetadataSavers == input.MetadataSavers ||
                    this.MetadataSavers != null &&
                    input.MetadataSavers != null &&
                    this.MetadataSavers.SequenceEqual(input.MetadataSavers)
                ) && 
                (
                    this.MetadataReaders == input.MetadataReaders ||
                    this.MetadataReaders != null &&
                    input.MetadataReaders != null &&
                    this.MetadataReaders.SequenceEqual(input.MetadataReaders)
                ) && 
                (
                    this.SubtitleFetchers == input.SubtitleFetchers ||
                    this.SubtitleFetchers != null &&
                    input.SubtitleFetchers != null &&
                    this.SubtitleFetchers.SequenceEqual(input.SubtitleFetchers)
                ) && 
                (
                    this.LyricsFetchers == input.LyricsFetchers ||
                    this.LyricsFetchers != null &&
                    input.LyricsFetchers != null &&
                    this.LyricsFetchers.SequenceEqual(input.LyricsFetchers)
                ) && 
                (
                    this.TypeOptions == input.TypeOptions ||
                    this.TypeOptions != null &&
                    input.TypeOptions != null &&
                    this.TypeOptions.SequenceEqual(input.TypeOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MetadataSavers != null)
                    hashCode = hashCode * 59 + this.MetadataSavers.GetHashCode();
                if (this.MetadataReaders != null)
                    hashCode = hashCode * 59 + this.MetadataReaders.GetHashCode();
                if (this.SubtitleFetchers != null)
                    hashCode = hashCode * 59 + this.SubtitleFetchers.GetHashCode();
                if (this.LyricsFetchers != null)
                    hashCode = hashCode * 59 + this.LyricsFetchers.GetHashCode();
                if (this.TypeOptions != null)
                    hashCode = hashCode * 59 + this.TypeOptions.GetHashCode();
                return hashCode;
            }
        }
    }
}