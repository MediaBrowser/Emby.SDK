# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class DeviceProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'supported_media_types': 'str',
        'max_streaming_bitrate': 'int',
        'music_streaming_transcoding_bitrate': 'int',
        'max_static_music_bitrate': 'int',
        'direct_play_profiles': 'list[DirectPlayProfile]',
        'transcoding_profiles': 'list[TranscodingProfile]',
        'container_profiles': 'list[ContainerProfile]',
        'codec_profiles': 'list[CodecProfile]',
        'response_profiles': 'list[ResponseProfile]',
        'subtitle_profiles': 'list[SubtitleProfile]'
    }

    attribute_map = {
        'name': 'Name',
        'id': 'Id',
        'supported_media_types': 'SupportedMediaTypes',
        'max_streaming_bitrate': 'MaxStreamingBitrate',
        'music_streaming_transcoding_bitrate': 'MusicStreamingTranscodingBitrate',
        'max_static_music_bitrate': 'MaxStaticMusicBitrate',
        'direct_play_profiles': 'DirectPlayProfiles',
        'transcoding_profiles': 'TranscodingProfiles',
        'container_profiles': 'ContainerProfiles',
        'codec_profiles': 'CodecProfiles',
        'response_profiles': 'ResponseProfiles',
        'subtitle_profiles': 'SubtitleProfiles'
    }

    def __init__(self, name=None, id=None, supported_media_types=None, max_streaming_bitrate=None, music_streaming_transcoding_bitrate=None, max_static_music_bitrate=None, direct_play_profiles=None, transcoding_profiles=None, container_profiles=None, codec_profiles=None, response_profiles=None, subtitle_profiles=None):  # noqa: E501
        """DeviceProfile - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._id = None
        self._supported_media_types = None
        self._max_streaming_bitrate = None
        self._music_streaming_transcoding_bitrate = None
        self._max_static_music_bitrate = None
        self._direct_play_profiles = None
        self._transcoding_profiles = None
        self._container_profiles = None
        self._codec_profiles = None
        self._response_profiles = None
        self._subtitle_profiles = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if supported_media_types is not None:
            self.supported_media_types = supported_media_types
        if max_streaming_bitrate is not None:
            self.max_streaming_bitrate = max_streaming_bitrate
        if music_streaming_transcoding_bitrate is not None:
            self.music_streaming_transcoding_bitrate = music_streaming_transcoding_bitrate
        if max_static_music_bitrate is not None:
            self.max_static_music_bitrate = max_static_music_bitrate
        if direct_play_profiles is not None:
            self.direct_play_profiles = direct_play_profiles
        if transcoding_profiles is not None:
            self.transcoding_profiles = transcoding_profiles
        if container_profiles is not None:
            self.container_profiles = container_profiles
        if codec_profiles is not None:
            self.codec_profiles = codec_profiles
        if response_profiles is not None:
            self.response_profiles = response_profiles
        if subtitle_profiles is not None:
            self.subtitle_profiles = subtitle_profiles

    @property
    def name(self):
        """Gets the name of this DeviceProfile.  # noqa: E501

        The name.  # noqa: E501

        :return: The name of this DeviceProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceProfile.

        The name.  # noqa: E501

        :param name: The name of this DeviceProfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this DeviceProfile.  # noqa: E501


        :return: The id of this DeviceProfile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceProfile.


        :param id: The id of this DeviceProfile.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def supported_media_types(self):
        """Gets the supported_media_types of this DeviceProfile.  # noqa: E501


        :return: The supported_media_types of this DeviceProfile.  # noqa: E501
        :rtype: str
        """
        return self._supported_media_types

    @supported_media_types.setter
    def supported_media_types(self, supported_media_types):
        """Sets the supported_media_types of this DeviceProfile.


        :param supported_media_types: The supported_media_types of this DeviceProfile.  # noqa: E501
        :type: str
        """

        self._supported_media_types = supported_media_types

    @property
    def max_streaming_bitrate(self):
        """Gets the max_streaming_bitrate of this DeviceProfile.  # noqa: E501


        :return: The max_streaming_bitrate of this DeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._max_streaming_bitrate

    @max_streaming_bitrate.setter
    def max_streaming_bitrate(self, max_streaming_bitrate):
        """Sets the max_streaming_bitrate of this DeviceProfile.


        :param max_streaming_bitrate: The max_streaming_bitrate of this DeviceProfile.  # noqa: E501
        :type: int
        """

        self._max_streaming_bitrate = max_streaming_bitrate

    @property
    def music_streaming_transcoding_bitrate(self):
        """Gets the music_streaming_transcoding_bitrate of this DeviceProfile.  # noqa: E501


        :return: The music_streaming_transcoding_bitrate of this DeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._music_streaming_transcoding_bitrate

    @music_streaming_transcoding_bitrate.setter
    def music_streaming_transcoding_bitrate(self, music_streaming_transcoding_bitrate):
        """Sets the music_streaming_transcoding_bitrate of this DeviceProfile.


        :param music_streaming_transcoding_bitrate: The music_streaming_transcoding_bitrate of this DeviceProfile.  # noqa: E501
        :type: int
        """

        self._music_streaming_transcoding_bitrate = music_streaming_transcoding_bitrate

    @property
    def max_static_music_bitrate(self):
        """Gets the max_static_music_bitrate of this DeviceProfile.  # noqa: E501


        :return: The max_static_music_bitrate of this DeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._max_static_music_bitrate

    @max_static_music_bitrate.setter
    def max_static_music_bitrate(self, max_static_music_bitrate):
        """Sets the max_static_music_bitrate of this DeviceProfile.


        :param max_static_music_bitrate: The max_static_music_bitrate of this DeviceProfile.  # noqa: E501
        :type: int
        """

        self._max_static_music_bitrate = max_static_music_bitrate

    @property
    def direct_play_profiles(self):
        """Gets the direct_play_profiles of this DeviceProfile.  # noqa: E501

        The direct play profiles.  # noqa: E501

        :return: The direct_play_profiles of this DeviceProfile.  # noqa: E501
        :rtype: list[DirectPlayProfile]
        """
        return self._direct_play_profiles

    @direct_play_profiles.setter
    def direct_play_profiles(self, direct_play_profiles):
        """Sets the direct_play_profiles of this DeviceProfile.

        The direct play profiles.  # noqa: E501

        :param direct_play_profiles: The direct_play_profiles of this DeviceProfile.  # noqa: E501
        :type: list[DirectPlayProfile]
        """

        self._direct_play_profiles = direct_play_profiles

    @property
    def transcoding_profiles(self):
        """Gets the transcoding_profiles of this DeviceProfile.  # noqa: E501

        The transcoding profiles.  # noqa: E501

        :return: The transcoding_profiles of this DeviceProfile.  # noqa: E501
        :rtype: list[TranscodingProfile]
        """
        return self._transcoding_profiles

    @transcoding_profiles.setter
    def transcoding_profiles(self, transcoding_profiles):
        """Sets the transcoding_profiles of this DeviceProfile.

        The transcoding profiles.  # noqa: E501

        :param transcoding_profiles: The transcoding_profiles of this DeviceProfile.  # noqa: E501
        :type: list[TranscodingProfile]
        """

        self._transcoding_profiles = transcoding_profiles

    @property
    def container_profiles(self):
        """Gets the container_profiles of this DeviceProfile.  # noqa: E501


        :return: The container_profiles of this DeviceProfile.  # noqa: E501
        :rtype: list[ContainerProfile]
        """
        return self._container_profiles

    @container_profiles.setter
    def container_profiles(self, container_profiles):
        """Sets the container_profiles of this DeviceProfile.


        :param container_profiles: The container_profiles of this DeviceProfile.  # noqa: E501
        :type: list[ContainerProfile]
        """

        self._container_profiles = container_profiles

    @property
    def codec_profiles(self):
        """Gets the codec_profiles of this DeviceProfile.  # noqa: E501


        :return: The codec_profiles of this DeviceProfile.  # noqa: E501
        :rtype: list[CodecProfile]
        """
        return self._codec_profiles

    @codec_profiles.setter
    def codec_profiles(self, codec_profiles):
        """Sets the codec_profiles of this DeviceProfile.


        :param codec_profiles: The codec_profiles of this DeviceProfile.  # noqa: E501
        :type: list[CodecProfile]
        """

        self._codec_profiles = codec_profiles

    @property
    def response_profiles(self):
        """Gets the response_profiles of this DeviceProfile.  # noqa: E501


        :return: The response_profiles of this DeviceProfile.  # noqa: E501
        :rtype: list[ResponseProfile]
        """
        return self._response_profiles

    @response_profiles.setter
    def response_profiles(self, response_profiles):
        """Sets the response_profiles of this DeviceProfile.


        :param response_profiles: The response_profiles of this DeviceProfile.  # noqa: E501
        :type: list[ResponseProfile]
        """

        self._response_profiles = response_profiles

    @property
    def subtitle_profiles(self):
        """Gets the subtitle_profiles of this DeviceProfile.  # noqa: E501


        :return: The subtitle_profiles of this DeviceProfile.  # noqa: E501
        :rtype: list[SubtitleProfile]
        """
        return self._subtitle_profiles

    @subtitle_profiles.setter
    def subtitle_profiles(self, subtitle_profiles):
        """Sets the subtitle_profiles of this DeviceProfile.


        :param subtitle_profiles: The subtitle_profiles of this DeviceProfile.  # noqa: E501
        :type: list[SubtitleProfile]
        """

        self._subtitle_profiles = subtitle_profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
