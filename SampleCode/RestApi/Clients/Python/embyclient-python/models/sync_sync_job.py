# coding: utf-8

"""
    Emby REST API
"""

import pprint
import re  # noqa: F401

import six

class SyncSyncJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'target_id': 'str',
        'target_name': 'str',
        'quality': 'str',
        'bitrate': 'int',
        'container': 'str',
        'video_codec': 'str',
        'audio_codec': 'str',
        'profile': 'str',
        'category': 'SyncSyncCategory',
        'parent_id': 'int',
        'progress': 'float',
        'name': 'str',
        'status': 'SyncSyncJobStatus',
        'user_id': 'int',
        'unwatched_only': 'bool',
        'sync_new_content': 'bool',
        'item_limit': 'int',
        'requested_item_ids': 'list[int]',
        'date_created': 'datetime',
        'date_last_modified': 'datetime',
        'item_count': 'int',
        'parent_name': 'str',
        'primary_image_item_id': 'str',
        'primary_image_tag': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'target_id': 'TargetId',
        'target_name': 'TargetName',
        'quality': 'Quality',
        'bitrate': 'Bitrate',
        'container': 'Container',
        'video_codec': 'VideoCodec',
        'audio_codec': 'AudioCodec',
        'profile': 'Profile',
        'category': 'Category',
        'parent_id': 'ParentId',
        'progress': 'Progress',
        'name': 'Name',
        'status': 'Status',
        'user_id': 'UserId',
        'unwatched_only': 'UnwatchedOnly',
        'sync_new_content': 'SyncNewContent',
        'item_limit': 'ItemLimit',
        'requested_item_ids': 'RequestedItemIds',
        'date_created': 'DateCreated',
        'date_last_modified': 'DateLastModified',
        'item_count': 'ItemCount',
        'parent_name': 'ParentName',
        'primary_image_item_id': 'PrimaryImageItemId',
        'primary_image_tag': 'PrimaryImageTag'
    }

    def __init__(self, id=None, target_id=None, target_name=None, quality=None, bitrate=None, container=None, video_codec=None, audio_codec=None, profile=None, category=None, parent_id=None, progress=None, name=None, status=None, user_id=None, unwatched_only=None, sync_new_content=None, item_limit=None, requested_item_ids=None, date_created=None, date_last_modified=None, item_count=None, parent_name=None, primary_image_item_id=None, primary_image_tag=None):  # noqa: E501
        """SyncSyncJob - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._target_id = None
        self._target_name = None
        self._quality = None
        self._bitrate = None
        self._container = None
        self._video_codec = None
        self._audio_codec = None
        self._profile = None
        self._category = None
        self._parent_id = None
        self._progress = None
        self._name = None
        self._status = None
        self._user_id = None
        self._unwatched_only = None
        self._sync_new_content = None
        self._item_limit = None
        self._requested_item_ids = None
        self._date_created = None
        self._date_last_modified = None
        self._item_count = None
        self._parent_name = None
        self._primary_image_item_id = None
        self._primary_image_tag = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if target_id is not None:
            self.target_id = target_id
        if target_name is not None:
            self.target_name = target_name
        if quality is not None:
            self.quality = quality
        if bitrate is not None:
            self.bitrate = bitrate
        if container is not None:
            self.container = container
        if video_codec is not None:
            self.video_codec = video_codec
        if audio_codec is not None:
            self.audio_codec = audio_codec
        if profile is not None:
            self.profile = profile
        if category is not None:
            self.category = category
        if parent_id is not None:
            self.parent_id = parent_id
        if progress is not None:
            self.progress = progress
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if user_id is not None:
            self.user_id = user_id
        if unwatched_only is not None:
            self.unwatched_only = unwatched_only
        if sync_new_content is not None:
            self.sync_new_content = sync_new_content
        if item_limit is not None:
            self.item_limit = item_limit
        if requested_item_ids is not None:
            self.requested_item_ids = requested_item_ids
        if date_created is not None:
            self.date_created = date_created
        if date_last_modified is not None:
            self.date_last_modified = date_last_modified
        if item_count is not None:
            self.item_count = item_count
        if parent_name is not None:
            self.parent_name = parent_name
        if primary_image_item_id is not None:
            self.primary_image_item_id = primary_image_item_id
        if primary_image_tag is not None:
            self.primary_image_tag = primary_image_tag

    @property
    def id(self):
        """Gets the id of this SyncSyncJob.  # noqa: E501


        :return: The id of this SyncSyncJob.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SyncSyncJob.


        :param id: The id of this SyncSyncJob.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def target_id(self):
        """Gets the target_id of this SyncSyncJob.  # noqa: E501


        :return: The target_id of this SyncSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this SyncSyncJob.


        :param target_id: The target_id of this SyncSyncJob.  # noqa: E501
        :type: str
        """

        self._target_id = target_id

    @property
    def target_name(self):
        """Gets the target_name of this SyncSyncJob.  # noqa: E501


        :return: The target_name of this SyncSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this SyncSyncJob.


        :param target_name: The target_name of this SyncSyncJob.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def quality(self):
        """Gets the quality of this SyncSyncJob.  # noqa: E501


        :return: The quality of this SyncSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this SyncSyncJob.


        :param quality: The quality of this SyncSyncJob.  # noqa: E501
        :type: str
        """

        self._quality = quality

    @property
    def bitrate(self):
        """Gets the bitrate of this SyncSyncJob.  # noqa: E501


        :return: The bitrate of this SyncSyncJob.  # noqa: E501
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this SyncSyncJob.


        :param bitrate: The bitrate of this SyncSyncJob.  # noqa: E501
        :type: int
        """

        self._bitrate = bitrate

    @property
    def container(self):
        """Gets the container of this SyncSyncJob.  # noqa: E501


        :return: The container of this SyncSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this SyncSyncJob.


        :param container: The container of this SyncSyncJob.  # noqa: E501
        :type: str
        """

        self._container = container

    @property
    def video_codec(self):
        """Gets the video_codec of this SyncSyncJob.  # noqa: E501


        :return: The video_codec of this SyncSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._video_codec

    @video_codec.setter
    def video_codec(self, video_codec):
        """Sets the video_codec of this SyncSyncJob.


        :param video_codec: The video_codec of this SyncSyncJob.  # noqa: E501
        :type: str
        """

        self._video_codec = video_codec

    @property
    def audio_codec(self):
        """Gets the audio_codec of this SyncSyncJob.  # noqa: E501


        :return: The audio_codec of this SyncSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._audio_codec

    @audio_codec.setter
    def audio_codec(self, audio_codec):
        """Sets the audio_codec of this SyncSyncJob.


        :param audio_codec: The audio_codec of this SyncSyncJob.  # noqa: E501
        :type: str
        """

        self._audio_codec = audio_codec

    @property
    def profile(self):
        """Gets the profile of this SyncSyncJob.  # noqa: E501


        :return: The profile of this SyncSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this SyncSyncJob.


        :param profile: The profile of this SyncSyncJob.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def category(self):
        """Gets the category of this SyncSyncJob.  # noqa: E501


        :return: The category of this SyncSyncJob.  # noqa: E501
        :rtype: SyncSyncCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SyncSyncJob.


        :param category: The category of this SyncSyncJob.  # noqa: E501
        :type: SyncSyncCategory
        """

        self._category = category

    @property
    def parent_id(self):
        """Gets the parent_id of this SyncSyncJob.  # noqa: E501


        :return: The parent_id of this SyncSyncJob.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this SyncSyncJob.


        :param parent_id: The parent_id of this SyncSyncJob.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def progress(self):
        """Gets the progress of this SyncSyncJob.  # noqa: E501


        :return: The progress of this SyncSyncJob.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this SyncSyncJob.


        :param progress: The progress of this SyncSyncJob.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def name(self):
        """Gets the name of this SyncSyncJob.  # noqa: E501


        :return: The name of this SyncSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SyncSyncJob.


        :param name: The name of this SyncSyncJob.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this SyncSyncJob.  # noqa: E501


        :return: The status of this SyncSyncJob.  # noqa: E501
        :rtype: SyncSyncJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SyncSyncJob.


        :param status: The status of this SyncSyncJob.  # noqa: E501
        :type: SyncSyncJobStatus
        """

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this SyncSyncJob.  # noqa: E501


        :return: The user_id of this SyncSyncJob.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SyncSyncJob.


        :param user_id: The user_id of this SyncSyncJob.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def unwatched_only(self):
        """Gets the unwatched_only of this SyncSyncJob.  # noqa: E501


        :return: The unwatched_only of this SyncSyncJob.  # noqa: E501
        :rtype: bool
        """
        return self._unwatched_only

    @unwatched_only.setter
    def unwatched_only(self, unwatched_only):
        """Sets the unwatched_only of this SyncSyncJob.


        :param unwatched_only: The unwatched_only of this SyncSyncJob.  # noqa: E501
        :type: bool
        """

        self._unwatched_only = unwatched_only

    @property
    def sync_new_content(self):
        """Gets the sync_new_content of this SyncSyncJob.  # noqa: E501


        :return: The sync_new_content of this SyncSyncJob.  # noqa: E501
        :rtype: bool
        """
        return self._sync_new_content

    @sync_new_content.setter
    def sync_new_content(self, sync_new_content):
        """Sets the sync_new_content of this SyncSyncJob.


        :param sync_new_content: The sync_new_content of this SyncSyncJob.  # noqa: E501
        :type: bool
        """

        self._sync_new_content = sync_new_content

    @property
    def item_limit(self):
        """Gets the item_limit of this SyncSyncJob.  # noqa: E501


        :return: The item_limit of this SyncSyncJob.  # noqa: E501
        :rtype: int
        """
        return self._item_limit

    @item_limit.setter
    def item_limit(self, item_limit):
        """Sets the item_limit of this SyncSyncJob.


        :param item_limit: The item_limit of this SyncSyncJob.  # noqa: E501
        :type: int
        """

        self._item_limit = item_limit

    @property
    def requested_item_ids(self):
        """Gets the requested_item_ids of this SyncSyncJob.  # noqa: E501


        :return: The requested_item_ids of this SyncSyncJob.  # noqa: E501
        :rtype: list[int]
        """
        return self._requested_item_ids

    @requested_item_ids.setter
    def requested_item_ids(self, requested_item_ids):
        """Sets the requested_item_ids of this SyncSyncJob.


        :param requested_item_ids: The requested_item_ids of this SyncSyncJob.  # noqa: E501
        :type: list[int]
        """

        self._requested_item_ids = requested_item_ids

    @property
    def date_created(self):
        """Gets the date_created of this SyncSyncJob.  # noqa: E501


        :return: The date_created of this SyncSyncJob.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this SyncSyncJob.


        :param date_created: The date_created of this SyncSyncJob.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_last_modified(self):
        """Gets the date_last_modified of this SyncSyncJob.  # noqa: E501


        :return: The date_last_modified of this SyncSyncJob.  # noqa: E501
        :rtype: datetime
        """
        return self._date_last_modified

    @date_last_modified.setter
    def date_last_modified(self, date_last_modified):
        """Sets the date_last_modified of this SyncSyncJob.


        :param date_last_modified: The date_last_modified of this SyncSyncJob.  # noqa: E501
        :type: datetime
        """

        self._date_last_modified = date_last_modified

    @property
    def item_count(self):
        """Gets the item_count of this SyncSyncJob.  # noqa: E501


        :return: The item_count of this SyncSyncJob.  # noqa: E501
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this SyncSyncJob.


        :param item_count: The item_count of this SyncSyncJob.  # noqa: E501
        :type: int
        """

        self._item_count = item_count

    @property
    def parent_name(self):
        """Gets the parent_name of this SyncSyncJob.  # noqa: E501


        :return: The parent_name of this SyncSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this SyncSyncJob.


        :param parent_name: The parent_name of this SyncSyncJob.  # noqa: E501
        :type: str
        """

        self._parent_name = parent_name

    @property
    def primary_image_item_id(self):
        """Gets the primary_image_item_id of this SyncSyncJob.  # noqa: E501


        :return: The primary_image_item_id of this SyncSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._primary_image_item_id

    @primary_image_item_id.setter
    def primary_image_item_id(self, primary_image_item_id):
        """Sets the primary_image_item_id of this SyncSyncJob.


        :param primary_image_item_id: The primary_image_item_id of this SyncSyncJob.  # noqa: E501
        :type: str
        """

        self._primary_image_item_id = primary_image_item_id

    @property
    def primary_image_tag(self):
        """Gets the primary_image_tag of this SyncSyncJob.  # noqa: E501


        :return: The primary_image_tag of this SyncSyncJob.  # noqa: E501
        :rtype: str
        """
        return self._primary_image_tag

    @primary_image_tag.setter
    def primary_image_tag(self, primary_image_tag):
        """Sets the primary_image_tag of this SyncSyncJob.


        :param primary_image_tag: The primary_image_tag of this SyncSyncJob.  # noqa: E501
        :type: str
        """

        self._primary_image_tag = primary_image_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncSyncJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncSyncJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
