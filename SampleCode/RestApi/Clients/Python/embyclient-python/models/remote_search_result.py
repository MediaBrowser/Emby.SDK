# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class RemoteSearchResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'provider_ids': 'ProviderIdDictionary',
        'production_year': 'int',
        'index_number': 'int',
        'index_number_end': 'int',
        'parent_index_number': 'int',
        'sort_index_number': 'int',
        'sort_parent_index_number': 'int',
        'premiere_date': 'datetime',
        'image_url': 'str',
        'search_provider_name': 'str',
        'game_system': 'str',
        'overview': 'str',
        'disambiguation_comment': 'str',
        'album_artist': 'RemoteSearchResult',
        'artists': 'list[RemoteSearchResult]'
    }

    attribute_map = {
        'name': 'Name',
        'provider_ids': 'ProviderIds',
        'production_year': 'ProductionYear',
        'index_number': 'IndexNumber',
        'index_number_end': 'IndexNumberEnd',
        'parent_index_number': 'ParentIndexNumber',
        'sort_index_number': 'SortIndexNumber',
        'sort_parent_index_number': 'SortParentIndexNumber',
        'premiere_date': 'PremiereDate',
        'image_url': 'ImageUrl',
        'search_provider_name': 'SearchProviderName',
        'game_system': 'GameSystem',
        'overview': 'Overview',
        'disambiguation_comment': 'DisambiguationComment',
        'album_artist': 'AlbumArtist',
        'artists': 'Artists'
    }

    def __init__(self, name=None, provider_ids=None, production_year=None, index_number=None, index_number_end=None, parent_index_number=None, sort_index_number=None, sort_parent_index_number=None, premiere_date=None, image_url=None, search_provider_name=None, game_system=None, overview=None, disambiguation_comment=None, album_artist=None, artists=None):  # noqa: E501
        """RemoteSearchResult - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._provider_ids = None
        self._production_year = None
        self._index_number = None
        self._index_number_end = None
        self._parent_index_number = None
        self._sort_index_number = None
        self._sort_parent_index_number = None
        self._premiere_date = None
        self._image_url = None
        self._search_provider_name = None
        self._game_system = None
        self._overview = None
        self._disambiguation_comment = None
        self._album_artist = None
        self._artists = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if provider_ids is not None:
            self.provider_ids = provider_ids
        if production_year is not None:
            self.production_year = production_year
        if index_number is not None:
            self.index_number = index_number
        if index_number_end is not None:
            self.index_number_end = index_number_end
        if parent_index_number is not None:
            self.parent_index_number = parent_index_number
        if sort_index_number is not None:
            self.sort_index_number = sort_index_number
        if sort_parent_index_number is not None:
            self.sort_parent_index_number = sort_parent_index_number
        if premiere_date is not None:
            self.premiere_date = premiere_date
        if image_url is not None:
            self.image_url = image_url
        if search_provider_name is not None:
            self.search_provider_name = search_provider_name
        if game_system is not None:
            self.game_system = game_system
        if overview is not None:
            self.overview = overview
        if disambiguation_comment is not None:
            self.disambiguation_comment = disambiguation_comment
        if album_artist is not None:
            self.album_artist = album_artist
        if artists is not None:
            self.artists = artists

    @property
    def name(self):
        """Gets the name of this RemoteSearchResult.  # noqa: E501

        The name.  # noqa: E501

        :return: The name of this RemoteSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RemoteSearchResult.

        The name.  # noqa: E501

        :param name: The name of this RemoteSearchResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def provider_ids(self):
        """Gets the provider_ids of this RemoteSearchResult.  # noqa: E501


        :return: The provider_ids of this RemoteSearchResult.  # noqa: E501
        :rtype: ProviderIdDictionary
        """
        return self._provider_ids

    @provider_ids.setter
    def provider_ids(self, provider_ids):
        """Sets the provider_ids of this RemoteSearchResult.


        :param provider_ids: The provider_ids of this RemoteSearchResult.  # noqa: E501
        :type: ProviderIdDictionary
        """

        self._provider_ids = provider_ids

    @property
    def production_year(self):
        """Gets the production_year of this RemoteSearchResult.  # noqa: E501

        The year.  # noqa: E501

        :return: The production_year of this RemoteSearchResult.  # noqa: E501
        :rtype: int
        """
        return self._production_year

    @production_year.setter
    def production_year(self, production_year):
        """Sets the production_year of this RemoteSearchResult.

        The year.  # noqa: E501

        :param production_year: The production_year of this RemoteSearchResult.  # noqa: E501
        :type: int
        """

        self._production_year = production_year

    @property
    def index_number(self):
        """Gets the index_number of this RemoteSearchResult.  # noqa: E501


        :return: The index_number of this RemoteSearchResult.  # noqa: E501
        :rtype: int
        """
        return self._index_number

    @index_number.setter
    def index_number(self, index_number):
        """Sets the index_number of this RemoteSearchResult.


        :param index_number: The index_number of this RemoteSearchResult.  # noqa: E501
        :type: int
        """

        self._index_number = index_number

    @property
    def index_number_end(self):
        """Gets the index_number_end of this RemoteSearchResult.  # noqa: E501


        :return: The index_number_end of this RemoteSearchResult.  # noqa: E501
        :rtype: int
        """
        return self._index_number_end

    @index_number_end.setter
    def index_number_end(self, index_number_end):
        """Sets the index_number_end of this RemoteSearchResult.


        :param index_number_end: The index_number_end of this RemoteSearchResult.  # noqa: E501
        :type: int
        """

        self._index_number_end = index_number_end

    @property
    def parent_index_number(self):
        """Gets the parent_index_number of this RemoteSearchResult.  # noqa: E501


        :return: The parent_index_number of this RemoteSearchResult.  # noqa: E501
        :rtype: int
        """
        return self._parent_index_number

    @parent_index_number.setter
    def parent_index_number(self, parent_index_number):
        """Sets the parent_index_number of this RemoteSearchResult.


        :param parent_index_number: The parent_index_number of this RemoteSearchResult.  # noqa: E501
        :type: int
        """

        self._parent_index_number = parent_index_number

    @property
    def sort_index_number(self):
        """Gets the sort_index_number of this RemoteSearchResult.  # noqa: E501


        :return: The sort_index_number of this RemoteSearchResult.  # noqa: E501
        :rtype: int
        """
        return self._sort_index_number

    @sort_index_number.setter
    def sort_index_number(self, sort_index_number):
        """Sets the sort_index_number of this RemoteSearchResult.


        :param sort_index_number: The sort_index_number of this RemoteSearchResult.  # noqa: E501
        :type: int
        """

        self._sort_index_number = sort_index_number

    @property
    def sort_parent_index_number(self):
        """Gets the sort_parent_index_number of this RemoteSearchResult.  # noqa: E501


        :return: The sort_parent_index_number of this RemoteSearchResult.  # noqa: E501
        :rtype: int
        """
        return self._sort_parent_index_number

    @sort_parent_index_number.setter
    def sort_parent_index_number(self, sort_parent_index_number):
        """Sets the sort_parent_index_number of this RemoteSearchResult.


        :param sort_parent_index_number: The sort_parent_index_number of this RemoteSearchResult.  # noqa: E501
        :type: int
        """

        self._sort_parent_index_number = sort_parent_index_number

    @property
    def premiere_date(self):
        """Gets the premiere_date of this RemoteSearchResult.  # noqa: E501


        :return: The premiere_date of this RemoteSearchResult.  # noqa: E501
        :rtype: datetime
        """
        return self._premiere_date

    @premiere_date.setter
    def premiere_date(self, premiere_date):
        """Sets the premiere_date of this RemoteSearchResult.


        :param premiere_date: The premiere_date of this RemoteSearchResult.  # noqa: E501
        :type: datetime
        """

        self._premiere_date = premiere_date

    @property
    def image_url(self):
        """Gets the image_url of this RemoteSearchResult.  # noqa: E501


        :return: The image_url of this RemoteSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this RemoteSearchResult.


        :param image_url: The image_url of this RemoteSearchResult.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def search_provider_name(self):
        """Gets the search_provider_name of this RemoteSearchResult.  # noqa: E501


        :return: The search_provider_name of this RemoteSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._search_provider_name

    @search_provider_name.setter
    def search_provider_name(self, search_provider_name):
        """Sets the search_provider_name of this RemoteSearchResult.


        :param search_provider_name: The search_provider_name of this RemoteSearchResult.  # noqa: E501
        :type: str
        """

        self._search_provider_name = search_provider_name

    @property
    def game_system(self):
        """Gets the game_system of this RemoteSearchResult.  # noqa: E501


        :return: The game_system of this RemoteSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._game_system

    @game_system.setter
    def game_system(self, game_system):
        """Sets the game_system of this RemoteSearchResult.


        :param game_system: The game_system of this RemoteSearchResult.  # noqa: E501
        :type: str
        """

        self._game_system = game_system

    @property
    def overview(self):
        """Gets the overview of this RemoteSearchResult.  # noqa: E501


        :return: The overview of this RemoteSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this RemoteSearchResult.


        :param overview: The overview of this RemoteSearchResult.  # noqa: E501
        :type: str
        """

        self._overview = overview

    @property
    def disambiguation_comment(self):
        """Gets the disambiguation_comment of this RemoteSearchResult.  # noqa: E501


        :return: The disambiguation_comment of this RemoteSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._disambiguation_comment

    @disambiguation_comment.setter
    def disambiguation_comment(self, disambiguation_comment):
        """Sets the disambiguation_comment of this RemoteSearchResult.


        :param disambiguation_comment: The disambiguation_comment of this RemoteSearchResult.  # noqa: E501
        :type: str
        """

        self._disambiguation_comment = disambiguation_comment

    @property
    def album_artist(self):
        """Gets the album_artist of this RemoteSearchResult.  # noqa: E501


        :return: The album_artist of this RemoteSearchResult.  # noqa: E501
        :rtype: RemoteSearchResult
        """
        return self._album_artist

    @album_artist.setter
    def album_artist(self, album_artist):
        """Sets the album_artist of this RemoteSearchResult.


        :param album_artist: The album_artist of this RemoteSearchResult.  # noqa: E501
        :type: RemoteSearchResult
        """

        self._album_artist = album_artist

    @property
    def artists(self):
        """Gets the artists of this RemoteSearchResult.  # noqa: E501


        :return: The artists of this RemoteSearchResult.  # noqa: E501
        :rtype: list[RemoteSearchResult]
        """
        return self._artists

    @artists.setter
    def artists(self, artists):
        """Sets the artists of this RemoteSearchResult.


        :param artists: The artists of this RemoteSearchResult.  # noqa: E501
        :type: list[RemoteSearchResult]
        """

        self._artists = artists

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemoteSearchResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteSearchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
