# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class RemoteImageResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'images': 'list[RemoteImageInfo]',
        'total_record_count': 'int',
        'providers': 'list[str]'
    }

    attribute_map = {
        'images': 'Images',
        'total_record_count': 'TotalRecordCount',
        'providers': 'Providers'
    }

    def __init__(self, images=None, total_record_count=None, providers=None):  # noqa: E501
        """RemoteImageResult - a model defined in Swagger"""  # noqa: E501
        self._images = None
        self._total_record_count = None
        self._providers = None
        self.discriminator = None
        if images is not None:
            self.images = images
        if total_record_count is not None:
            self.total_record_count = total_record_count
        if providers is not None:
            self.providers = providers

    @property
    def images(self):
        """Gets the images of this RemoteImageResult.  # noqa: E501

        The images.  # noqa: E501

        :return: The images of this RemoteImageResult.  # noqa: E501
        :rtype: list[RemoteImageInfo]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this RemoteImageResult.

        The images.  # noqa: E501

        :param images: The images of this RemoteImageResult.  # noqa: E501
        :type: list[RemoteImageInfo]
        """

        self._images = images

    @property
    def total_record_count(self):
        """Gets the total_record_count of this RemoteImageResult.  # noqa: E501

        The total record count.  # noqa: E501

        :return: The total_record_count of this RemoteImageResult.  # noqa: E501
        :rtype: int
        """
        return self._total_record_count

    @total_record_count.setter
    def total_record_count(self, total_record_count):
        """Sets the total_record_count of this RemoteImageResult.

        The total record count.  # noqa: E501

        :param total_record_count: The total_record_count of this RemoteImageResult.  # noqa: E501
        :type: int
        """

        self._total_record_count = total_record_count

    @property
    def providers(self):
        """Gets the providers of this RemoteImageResult.  # noqa: E501

        The providers.  # noqa: E501

        :return: The providers of this RemoteImageResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this RemoteImageResult.

        The providers.  # noqa: E501

        :param providers: The providers of this RemoteImageResult.  # noqa: E501
        :type: list[str]
        """

        self._providers = providers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemoteImageResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteImageResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
