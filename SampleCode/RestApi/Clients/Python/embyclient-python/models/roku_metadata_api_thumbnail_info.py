# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class RokuMetadataApiThumbnailInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position_ticks': 'int',
        'image_tag': 'str'
    }

    attribute_map = {
        'position_ticks': 'PositionTicks',
        'image_tag': 'ImageTag'
    }

    def __init__(self, position_ticks=None, image_tag=None):  # noqa: E501
        """RokuMetadataApiThumbnailInfo - a model defined in Swagger"""  # noqa: E501
        self._position_ticks = None
        self._image_tag = None
        self.discriminator = None
        if position_ticks is not None:
            self.position_ticks = position_ticks
        if image_tag is not None:
            self.image_tag = image_tag

    @property
    def position_ticks(self):
        """Gets the position_ticks of this RokuMetadataApiThumbnailInfo.  # noqa: E501


        :return: The position_ticks of this RokuMetadataApiThumbnailInfo.  # noqa: E501
        :rtype: int
        """
        return self._position_ticks

    @position_ticks.setter
    def position_ticks(self, position_ticks):
        """Sets the position_ticks of this RokuMetadataApiThumbnailInfo.


        :param position_ticks: The position_ticks of this RokuMetadataApiThumbnailInfo.  # noqa: E501
        :type: int
        """

        self._position_ticks = position_ticks

    @property
    def image_tag(self):
        """Gets the image_tag of this RokuMetadataApiThumbnailInfo.  # noqa: E501


        :return: The image_tag of this RokuMetadataApiThumbnailInfo.  # noqa: E501
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this RokuMetadataApiThumbnailInfo.


        :param image_tag: The image_tag of this RokuMetadataApiThumbnailInfo.  # noqa: E501
        :type: str
        """

        self._image_tag = image_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RokuMetadataApiThumbnailInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RokuMetadataApiThumbnailInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
