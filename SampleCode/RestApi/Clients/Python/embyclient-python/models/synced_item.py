# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class SyncedItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_id': 'str',
        'sync_job_id': 'int',
        'sync_job_name': 'str',
        'sync_job_date_created': 'datetime',
        'sync_job_item_id': 'int',
        'original_file_name': 'str',
        'item': 'BaseItemDto',
        'user_id': 'str',
        'additional_files': 'list[ItemFileInfo]'
    }

    attribute_map = {
        'server_id': 'ServerId',
        'sync_job_id': 'SyncJobId',
        'sync_job_name': 'SyncJobName',
        'sync_job_date_created': 'SyncJobDateCreated',
        'sync_job_item_id': 'SyncJobItemId',
        'original_file_name': 'OriginalFileName',
        'item': 'Item',
        'user_id': 'UserId',
        'additional_files': 'AdditionalFiles'
    }

    def __init__(self, server_id=None, sync_job_id=None, sync_job_name=None, sync_job_date_created=None, sync_job_item_id=None, original_file_name=None, item=None, user_id=None, additional_files=None):  # noqa: E501
        """SyncedItem - a model defined in Swagger"""  # noqa: E501
        self._server_id = None
        self._sync_job_id = None
        self._sync_job_name = None
        self._sync_job_date_created = None
        self._sync_job_item_id = None
        self._original_file_name = None
        self._item = None
        self._user_id = None
        self._additional_files = None
        self.discriminator = None
        if server_id is not None:
            self.server_id = server_id
        if sync_job_id is not None:
            self.sync_job_id = sync_job_id
        if sync_job_name is not None:
            self.sync_job_name = sync_job_name
        if sync_job_date_created is not None:
            self.sync_job_date_created = sync_job_date_created
        if sync_job_item_id is not None:
            self.sync_job_item_id = sync_job_item_id
        if original_file_name is not None:
            self.original_file_name = original_file_name
        if item is not None:
            self.item = item
        if user_id is not None:
            self.user_id = user_id
        if additional_files is not None:
            self.additional_files = additional_files

    @property
    def server_id(self):
        """Gets the server_id of this SyncedItem.  # noqa: E501


        :return: The server_id of this SyncedItem.  # noqa: E501
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this SyncedItem.


        :param server_id: The server_id of this SyncedItem.  # noqa: E501
        :type: str
        """

        self._server_id = server_id

    @property
    def sync_job_id(self):
        """Gets the sync_job_id of this SyncedItem.  # noqa: E501


        :return: The sync_job_id of this SyncedItem.  # noqa: E501
        :rtype: int
        """
        return self._sync_job_id

    @sync_job_id.setter
    def sync_job_id(self, sync_job_id):
        """Sets the sync_job_id of this SyncedItem.


        :param sync_job_id: The sync_job_id of this SyncedItem.  # noqa: E501
        :type: int
        """

        self._sync_job_id = sync_job_id

    @property
    def sync_job_name(self):
        """Gets the sync_job_name of this SyncedItem.  # noqa: E501


        :return: The sync_job_name of this SyncedItem.  # noqa: E501
        :rtype: str
        """
        return self._sync_job_name

    @sync_job_name.setter
    def sync_job_name(self, sync_job_name):
        """Sets the sync_job_name of this SyncedItem.


        :param sync_job_name: The sync_job_name of this SyncedItem.  # noqa: E501
        :type: str
        """

        self._sync_job_name = sync_job_name

    @property
    def sync_job_date_created(self):
        """Gets the sync_job_date_created of this SyncedItem.  # noqa: E501


        :return: The sync_job_date_created of this SyncedItem.  # noqa: E501
        :rtype: datetime
        """
        return self._sync_job_date_created

    @sync_job_date_created.setter
    def sync_job_date_created(self, sync_job_date_created):
        """Sets the sync_job_date_created of this SyncedItem.


        :param sync_job_date_created: The sync_job_date_created of this SyncedItem.  # noqa: E501
        :type: datetime
        """

        self._sync_job_date_created = sync_job_date_created

    @property
    def sync_job_item_id(self):
        """Gets the sync_job_item_id of this SyncedItem.  # noqa: E501


        :return: The sync_job_item_id of this SyncedItem.  # noqa: E501
        :rtype: int
        """
        return self._sync_job_item_id

    @sync_job_item_id.setter
    def sync_job_item_id(self, sync_job_item_id):
        """Sets the sync_job_item_id of this SyncedItem.


        :param sync_job_item_id: The sync_job_item_id of this SyncedItem.  # noqa: E501
        :type: int
        """

        self._sync_job_item_id = sync_job_item_id

    @property
    def original_file_name(self):
        """Gets the original_file_name of this SyncedItem.  # noqa: E501


        :return: The original_file_name of this SyncedItem.  # noqa: E501
        :rtype: str
        """
        return self._original_file_name

    @original_file_name.setter
    def original_file_name(self, original_file_name):
        """Sets the original_file_name of this SyncedItem.


        :param original_file_name: The original_file_name of this SyncedItem.  # noqa: E501
        :type: str
        """

        self._original_file_name = original_file_name

    @property
    def item(self):
        """Gets the item of this SyncedItem.  # noqa: E501


        :return: The item of this SyncedItem.  # noqa: E501
        :rtype: BaseItemDto
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this SyncedItem.


        :param item: The item of this SyncedItem.  # noqa: E501
        :type: BaseItemDto
        """

        self._item = item

    @property
    def user_id(self):
        """Gets the user_id of this SyncedItem.  # noqa: E501


        :return: The user_id of this SyncedItem.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SyncedItem.


        :param user_id: The user_id of this SyncedItem.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def additional_files(self):
        """Gets the additional_files of this SyncedItem.  # noqa: E501


        :return: The additional_files of this SyncedItem.  # noqa: E501
        :rtype: list[ItemFileInfo]
        """
        return self._additional_files

    @additional_files.setter
    def additional_files(self, additional_files):
        """Sets the additional_files of this SyncedItem.


        :param additional_files: The additional_files of this SyncedItem.  # noqa: E501
        :type: list[ItemFileInfo]
        """

        self._additional_files = additional_files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncedItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncedItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
