# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class ForgotPasswordResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'ForgotPasswordAction',
        'pin_file': 'str',
        'pin_expiration_date': 'datetime'
    }

    attribute_map = {
        'action': 'Action',
        'pin_file': 'PinFile',
        'pin_expiration_date': 'PinExpirationDate'
    }

    def __init__(self, action=None, pin_file=None, pin_expiration_date=None):  # noqa: E501
        """ForgotPasswordResult - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._pin_file = None
        self._pin_expiration_date = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if pin_file is not None:
            self.pin_file = pin_file
        if pin_expiration_date is not None:
            self.pin_expiration_date = pin_expiration_date

    @property
    def action(self):
        """Gets the action of this ForgotPasswordResult.  # noqa: E501


        :return: The action of this ForgotPasswordResult.  # noqa: E501
        :rtype: ForgotPasswordAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ForgotPasswordResult.


        :param action: The action of this ForgotPasswordResult.  # noqa: E501
        :type: ForgotPasswordAction
        """

        self._action = action

    @property
    def pin_file(self):
        """Gets the pin_file of this ForgotPasswordResult.  # noqa: E501

        The pin file.  # noqa: E501

        :return: The pin_file of this ForgotPasswordResult.  # noqa: E501
        :rtype: str
        """
        return self._pin_file

    @pin_file.setter
    def pin_file(self, pin_file):
        """Sets the pin_file of this ForgotPasswordResult.

        The pin file.  # noqa: E501

        :param pin_file: The pin_file of this ForgotPasswordResult.  # noqa: E501
        :type: str
        """

        self._pin_file = pin_file

    @property
    def pin_expiration_date(self):
        """Gets the pin_expiration_date of this ForgotPasswordResult.  # noqa: E501

        The pin expiration date.  # noqa: E501

        :return: The pin_expiration_date of this ForgotPasswordResult.  # noqa: E501
        :rtype: datetime
        """
        return self._pin_expiration_date

    @pin_expiration_date.setter
    def pin_expiration_date(self, pin_expiration_date):
        """Sets the pin_expiration_date of this ForgotPasswordResult.

        The pin expiration date.  # noqa: E501

        :param pin_expiration_date: The pin_expiration_date of this ForgotPasswordResult.  # noqa: E501
        :type: datetime
        """

        self._pin_expiration_date = pin_expiration_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ForgotPasswordResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForgotPasswordResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
