# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class ConditionsPropertyCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_property_id': 'str',
        'condition_type': 'ConditionsPropertyConditionType',
        'target_property_id': 'str',
        'simple_condition': 'AttributesSimpleCondition',
        'value_condition': 'AttributesValueCondition',
        'value': 'object'
    }

    attribute_map = {
        'affected_property_id': 'AffectedPropertyId',
        'condition_type': 'ConditionType',
        'target_property_id': 'TargetPropertyId',
        'simple_condition': 'SimpleCondition',
        'value_condition': 'ValueCondition',
        'value': 'Value'
    }

    def __init__(self, affected_property_id=None, condition_type=None, target_property_id=None, simple_condition=None, value_condition=None, value=None):  # noqa: E501
        """ConditionsPropertyCondition - a model defined in Swagger"""  # noqa: E501
        self._affected_property_id = None
        self._condition_type = None
        self._target_property_id = None
        self._simple_condition = None
        self._value_condition = None
        self._value = None
        self.discriminator = None
        if affected_property_id is not None:
            self.affected_property_id = affected_property_id
        if condition_type is not None:
            self.condition_type = condition_type
        if target_property_id is not None:
            self.target_property_id = target_property_id
        if simple_condition is not None:
            self.simple_condition = simple_condition
        if value_condition is not None:
            self.value_condition = value_condition
        if value is not None:
            self.value = value

    @property
    def affected_property_id(self):
        """Gets the affected_property_id of this ConditionsPropertyCondition.  # noqa: E501


        :return: The affected_property_id of this ConditionsPropertyCondition.  # noqa: E501
        :rtype: str
        """
        return self._affected_property_id

    @affected_property_id.setter
    def affected_property_id(self, affected_property_id):
        """Sets the affected_property_id of this ConditionsPropertyCondition.


        :param affected_property_id: The affected_property_id of this ConditionsPropertyCondition.  # noqa: E501
        :type: str
        """

        self._affected_property_id = affected_property_id

    @property
    def condition_type(self):
        """Gets the condition_type of this ConditionsPropertyCondition.  # noqa: E501


        :return: The condition_type of this ConditionsPropertyCondition.  # noqa: E501
        :rtype: ConditionsPropertyConditionType
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """Sets the condition_type of this ConditionsPropertyCondition.


        :param condition_type: The condition_type of this ConditionsPropertyCondition.  # noqa: E501
        :type: ConditionsPropertyConditionType
        """

        self._condition_type = condition_type

    @property
    def target_property_id(self):
        """Gets the target_property_id of this ConditionsPropertyCondition.  # noqa: E501

        The target property name or path.  # noqa: E501

        :return: The target_property_id of this ConditionsPropertyCondition.  # noqa: E501
        :rtype: str
        """
        return self._target_property_id

    @target_property_id.setter
    def target_property_id(self, target_property_id):
        """Sets the target_property_id of this ConditionsPropertyCondition.

        The target property name or path.  # noqa: E501

        :param target_property_id: The target_property_id of this ConditionsPropertyCondition.  # noqa: E501
        :type: str
        """

        self._target_property_id = target_property_id

    @property
    def simple_condition(self):
        """Gets the simple_condition of this ConditionsPropertyCondition.  # noqa: E501


        :return: The simple_condition of this ConditionsPropertyCondition.  # noqa: E501
        :rtype: AttributesSimpleCondition
        """
        return self._simple_condition

    @simple_condition.setter
    def simple_condition(self, simple_condition):
        """Sets the simple_condition of this ConditionsPropertyCondition.


        :param simple_condition: The simple_condition of this ConditionsPropertyCondition.  # noqa: E501
        :type: AttributesSimpleCondition
        """

        self._simple_condition = simple_condition

    @property
    def value_condition(self):
        """Gets the value_condition of this ConditionsPropertyCondition.  # noqa: E501


        :return: The value_condition of this ConditionsPropertyCondition.  # noqa: E501
        :rtype: AttributesValueCondition
        """
        return self._value_condition

    @value_condition.setter
    def value_condition(self, value_condition):
        """Sets the value_condition of this ConditionsPropertyCondition.


        :param value_condition: The value_condition of this ConditionsPropertyCondition.  # noqa: E501
        :type: AttributesValueCondition
        """

        self._value_condition = value_condition

    @property
    def value(self):
        """Gets the value of this ConditionsPropertyCondition.  # noqa: E501

        The value.  # noqa: E501

        :return: The value of this ConditionsPropertyCondition.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ConditionsPropertyCondition.

        The value.  # noqa: E501

        :param value: The value of this ConditionsPropertyCondition.  # noqa: E501
        :type: object
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConditionsPropertyCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConditionsPropertyCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
