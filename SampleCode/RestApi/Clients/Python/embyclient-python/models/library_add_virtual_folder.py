# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class LibraryAddVirtualFolder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'collection_type': 'str',
        'refresh_library': 'bool',
        'paths': 'list[str]',
        'library_options': 'LibraryOptions'
    }

    attribute_map = {
        'name': 'Name',
        'collection_type': 'CollectionType',
        'refresh_library': 'RefreshLibrary',
        'paths': 'Paths',
        'library_options': 'LibraryOptions'
    }

    def __init__(self, name=None, collection_type=None, refresh_library=None, paths=None, library_options=None):  # noqa: E501
        """LibraryAddVirtualFolder - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._collection_type = None
        self._refresh_library = None
        self._paths = None
        self._library_options = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if collection_type is not None:
            self.collection_type = collection_type
        if refresh_library is not None:
            self.refresh_library = refresh_library
        if paths is not None:
            self.paths = paths
        if library_options is not None:
            self.library_options = library_options

    @property
    def name(self):
        """Gets the name of this LibraryAddVirtualFolder.  # noqa: E501


        :return: The name of this LibraryAddVirtualFolder.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LibraryAddVirtualFolder.


        :param name: The name of this LibraryAddVirtualFolder.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def collection_type(self):
        """Gets the collection_type of this LibraryAddVirtualFolder.  # noqa: E501


        :return: The collection_type of this LibraryAddVirtualFolder.  # noqa: E501
        :rtype: str
        """
        return self._collection_type

    @collection_type.setter
    def collection_type(self, collection_type):
        """Sets the collection_type of this LibraryAddVirtualFolder.


        :param collection_type: The collection_type of this LibraryAddVirtualFolder.  # noqa: E501
        :type: str
        """

        self._collection_type = collection_type

    @property
    def refresh_library(self):
        """Gets the refresh_library of this LibraryAddVirtualFolder.  # noqa: E501


        :return: The refresh_library of this LibraryAddVirtualFolder.  # noqa: E501
        :rtype: bool
        """
        return self._refresh_library

    @refresh_library.setter
    def refresh_library(self, refresh_library):
        """Sets the refresh_library of this LibraryAddVirtualFolder.


        :param refresh_library: The refresh_library of this LibraryAddVirtualFolder.  # noqa: E501
        :type: bool
        """

        self._refresh_library = refresh_library

    @property
    def paths(self):
        """Gets the paths of this LibraryAddVirtualFolder.  # noqa: E501


        :return: The paths of this LibraryAddVirtualFolder.  # noqa: E501
        :rtype: list[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this LibraryAddVirtualFolder.


        :param paths: The paths of this LibraryAddVirtualFolder.  # noqa: E501
        :type: list[str]
        """

        self._paths = paths

    @property
    def library_options(self):
        """Gets the library_options of this LibraryAddVirtualFolder.  # noqa: E501


        :return: The library_options of this LibraryAddVirtualFolder.  # noqa: E501
        :rtype: LibraryOptions
        """
        return self._library_options

    @library_options.setter
    def library_options(self, library_options):
        """Sets the library_options of this LibraryAddVirtualFolder.


        :param library_options: The library_options of this LibraryAddVirtualFolder.  # noqa: E501
        :type: LibraryOptions
        """

        self._library_options = library_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryAddVirtualFolder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryAddVirtualFolder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
