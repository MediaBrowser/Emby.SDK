# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class ImageInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_type': 'ImageType',
        'image_index': 'int',
        'path': 'str',
        'filename': 'str',
        'height': 'int',
        'width': 'int',
        'size': 'int'
    }

    attribute_map = {
        'image_type': 'ImageType',
        'image_index': 'ImageIndex',
        'path': 'Path',
        'filename': 'Filename',
        'height': 'Height',
        'width': 'Width',
        'size': 'Size'
    }

    def __init__(self, image_type=None, image_index=None, path=None, filename=None, height=None, width=None, size=None):  # noqa: E501
        """ImageInfo - a model defined in Swagger"""  # noqa: E501
        self._image_type = None
        self._image_index = None
        self._path = None
        self._filename = None
        self._height = None
        self._width = None
        self._size = None
        self.discriminator = None
        if image_type is not None:
            self.image_type = image_type
        if image_index is not None:
            self.image_index = image_index
        if path is not None:
            self.path = path
        if filename is not None:
            self.filename = filename
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if size is not None:
            self.size = size

    @property
    def image_type(self):
        """Gets the image_type of this ImageInfo.  # noqa: E501


        :return: The image_type of this ImageInfo.  # noqa: E501
        :rtype: ImageType
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this ImageInfo.


        :param image_type: The image_type of this ImageInfo.  # noqa: E501
        :type: ImageType
        """

        self._image_type = image_type

    @property
    def image_index(self):
        """Gets the image_index of this ImageInfo.  # noqa: E501

        The index of the image.  # noqa: E501

        :return: The image_index of this ImageInfo.  # noqa: E501
        :rtype: int
        """
        return self._image_index

    @image_index.setter
    def image_index(self, image_index):
        """Sets the image_index of this ImageInfo.

        The index of the image.  # noqa: E501

        :param image_index: The image_index of this ImageInfo.  # noqa: E501
        :type: int
        """

        self._image_index = image_index

    @property
    def path(self):
        """Gets the path of this ImageInfo.  # noqa: E501

        The path.  # noqa: E501

        :return: The path of this ImageInfo.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ImageInfo.

        The path.  # noqa: E501

        :param path: The path of this ImageInfo.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def filename(self):
        """Gets the filename of this ImageInfo.  # noqa: E501


        :return: The filename of this ImageInfo.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ImageInfo.


        :param filename: The filename of this ImageInfo.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def height(self):
        """Gets the height of this ImageInfo.  # noqa: E501

        The height.  # noqa: E501

        :return: The height of this ImageInfo.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ImageInfo.

        The height.  # noqa: E501

        :param height: The height of this ImageInfo.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def width(self):
        """Gets the width of this ImageInfo.  # noqa: E501

        The width.  # noqa: E501

        :return: The width of this ImageInfo.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ImageInfo.

        The width.  # noqa: E501

        :param width: The width of this ImageInfo.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def size(self):
        """Gets the size of this ImageInfo.  # noqa: E501

        The size.  # noqa: E501

        :return: The size of this ImageInfo.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ImageInfo.

        The size.  # noqa: E501

        :param size: The size of this ImageInfo.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
