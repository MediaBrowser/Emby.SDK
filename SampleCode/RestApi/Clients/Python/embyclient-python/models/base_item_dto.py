# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class BaseItemDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'original_title': 'str',
        'server_id': 'str',
        'id': 'str',
        'guid': 'str',
        'etag': 'str',
        'prefix': 'str',
        'playlist_item_id': 'str',
        'date_created': 'datetime',
        'extra_type': 'str',
        'sort_index_number': 'int',
        'sort_parent_index_number': 'int',
        'can_delete': 'bool',
        'can_download': 'bool',
        'can_edit_items': 'bool',
        'supports_resume': 'bool',
        'presentation_unique_key': 'str',
        'preferred_metadata_language': 'str',
        'preferred_metadata_country_code': 'str',
        'supports_sync': 'bool',
        'sync_status': 'SyncJobItemStatus',
        'can_manage_access': 'bool',
        'can_leave_content': 'bool',
        'can_make_public': 'bool',
        'container': 'str',
        'sort_name': 'str',
        'forced_sort_name': 'str',
        'video3_d_format': 'Video3DFormat',
        'premiere_date': 'datetime',
        'external_urls': 'list[ExternalUrl]',
        'media_sources': 'list[MediaSourceInfo]',
        'critic_rating': 'float',
        'game_system_id': 'int',
        'as_series': 'bool',
        'game_system': 'str',
        'production_locations': 'list[str]',
        'path': 'str',
        'official_rating': 'str',
        'custom_rating': 'str',
        'channel_id': 'str',
        'channel_name': 'str',
        'overview': 'str',
        'taglines': 'list[str]',
        'genres': 'list[str]',
        'community_rating': 'float',
        'run_time_ticks': 'int',
        'size': 'int',
        'file_name': 'str',
        'bitrate': 'int',
        'production_year': 'int',
        'number': 'str',
        'channel_number': 'str',
        'index_number': 'int',
        'index_number_end': 'int',
        'parent_index_number': 'int',
        'remote_trailers': 'list[MediaUrl]',
        'provider_ids': 'ProviderIdDictionary',
        'is_folder': 'bool',
        'parent_id': 'str',
        'type': 'str',
        'people': 'list[BaseItemPerson]',
        'studios': 'list[NameLongIdPair]',
        'genre_items': 'list[NameLongIdPair]',
        'tag_items': 'list[NameLongIdPair]',
        'parent_logo_item_id': 'str',
        'parent_backdrop_item_id': 'str',
        'parent_backdrop_image_tags': 'list[str]',
        'local_trailer_count': 'int',
        'user_data': 'UserItemDataDto',
        'recursive_item_count': 'int',
        'child_count': 'int',
        'series_name': 'str',
        'series_id': 'str',
        'season_id': 'str',
        'special_feature_count': 'int',
        'display_preferences_id': 'str',
        'status': 'str',
        'air_days': 'list[DayOfWeek]',
        'tags': 'list[str]',
        'primary_image_aspect_ratio': 'float',
        'artists': 'list[str]',
        'artist_items': 'list[NameIdPair]',
        'composers': 'list[NameIdPair]',
        'album': 'str',
        'collection_type': 'str',
        'display_order': 'str',
        'album_id': 'str',
        'album_primary_image_tag': 'str',
        'series_primary_image_tag': 'str',
        'album_artist': 'str',
        'album_artists': 'list[NameIdPair]',
        'season_name': 'str',
        'media_streams': 'list[MediaStream]',
        'part_count': 'int',
        'image_tags': 'dict(str, str)',
        'backdrop_image_tags': 'list[str]',
        'parent_logo_image_tag': 'str',
        'series_studio': 'str',
        'primary_image_item_id': 'str',
        'primary_image_tag': 'str',
        'parent_thumb_item_id': 'str',
        'parent_thumb_image_tag': 'str',
        'chapters': 'list[ChapterInfo]',
        'location_type': 'LocationType',
        'media_type': 'str',
        'end_date': 'datetime',
        'locked_fields': 'list[MetadataFields]',
        'lock_data': 'bool',
        'width': 'int',
        'height': 'int',
        'camera_make': 'str',
        'camera_model': 'str',
        'software': 'str',
        'exposure_time': 'float',
        'focal_length': 'float',
        'image_orientation': 'DrawingImageOrientation',
        'aperture': 'float',
        'shutter_speed': 'float',
        'latitude': 'float',
        'longitude': 'float',
        'altitude': 'float',
        'iso_speed_rating': 'int',
        'series_timer_id': 'str',
        'channel_primary_image_tag': 'str',
        'start_date': 'datetime',
        'completion_percentage': 'float',
        'is_repeat': 'bool',
        'is_new': 'bool',
        'episode_title': 'str',
        'is_movie': 'bool',
        'is_sports': 'bool',
        'is_series': 'bool',
        'is_live': 'bool',
        'is_news': 'bool',
        'is_kids': 'bool',
        'is_premiere': 'bool',
        'timer_type': 'LiveTvTimerType',
        'disabled': 'bool',
        'management_id': 'str',
        'timer_id': 'str',
        'current_program': 'BaseItemDto',
        'movie_count': 'int',
        'series_count': 'int',
        'album_count': 'int',
        'song_count': 'int',
        'music_video_count': 'int',
        'subviews': 'list[str]',
        'listings_provider_id': 'str',
        'listings_channel_id': 'str',
        'listings_path': 'str',
        'listings_id': 'str',
        'listings_channel_name': 'str',
        'listings_channel_number': 'str',
        'affiliate_call_sign': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'original_title': 'OriginalTitle',
        'server_id': 'ServerId',
        'id': 'Id',
        'guid': 'Guid',
        'etag': 'Etag',
        'prefix': 'Prefix',
        'playlist_item_id': 'PlaylistItemId',
        'date_created': 'DateCreated',
        'extra_type': 'ExtraType',
        'sort_index_number': 'SortIndexNumber',
        'sort_parent_index_number': 'SortParentIndexNumber',
        'can_delete': 'CanDelete',
        'can_download': 'CanDownload',
        'can_edit_items': 'CanEditItems',
        'supports_resume': 'SupportsResume',
        'presentation_unique_key': 'PresentationUniqueKey',
        'preferred_metadata_language': 'PreferredMetadataLanguage',
        'preferred_metadata_country_code': 'PreferredMetadataCountryCode',
        'supports_sync': 'SupportsSync',
        'sync_status': 'SyncStatus',
        'can_manage_access': 'CanManageAccess',
        'can_leave_content': 'CanLeaveContent',
        'can_make_public': 'CanMakePublic',
        'container': 'Container',
        'sort_name': 'SortName',
        'forced_sort_name': 'ForcedSortName',
        'video3_d_format': 'Video3DFormat',
        'premiere_date': 'PremiereDate',
        'external_urls': 'ExternalUrls',
        'media_sources': 'MediaSources',
        'critic_rating': 'CriticRating',
        'game_system_id': 'GameSystemId',
        'as_series': 'AsSeries',
        'game_system': 'GameSystem',
        'production_locations': 'ProductionLocations',
        'path': 'Path',
        'official_rating': 'OfficialRating',
        'custom_rating': 'CustomRating',
        'channel_id': 'ChannelId',
        'channel_name': 'ChannelName',
        'overview': 'Overview',
        'taglines': 'Taglines',
        'genres': 'Genres',
        'community_rating': 'CommunityRating',
        'run_time_ticks': 'RunTimeTicks',
        'size': 'Size',
        'file_name': 'FileName',
        'bitrate': 'Bitrate',
        'production_year': 'ProductionYear',
        'number': 'Number',
        'channel_number': 'ChannelNumber',
        'index_number': 'IndexNumber',
        'index_number_end': 'IndexNumberEnd',
        'parent_index_number': 'ParentIndexNumber',
        'remote_trailers': 'RemoteTrailers',
        'provider_ids': 'ProviderIds',
        'is_folder': 'IsFolder',
        'parent_id': 'ParentId',
        'type': 'Type',
        'people': 'People',
        'studios': 'Studios',
        'genre_items': 'GenreItems',
        'tag_items': 'TagItems',
        'parent_logo_item_id': 'ParentLogoItemId',
        'parent_backdrop_item_id': 'ParentBackdropItemId',
        'parent_backdrop_image_tags': 'ParentBackdropImageTags',
        'local_trailer_count': 'LocalTrailerCount',
        'user_data': 'UserData',
        'recursive_item_count': 'RecursiveItemCount',
        'child_count': 'ChildCount',
        'series_name': 'SeriesName',
        'series_id': 'SeriesId',
        'season_id': 'SeasonId',
        'special_feature_count': 'SpecialFeatureCount',
        'display_preferences_id': 'DisplayPreferencesId',
        'status': 'Status',
        'air_days': 'AirDays',
        'tags': 'Tags',
        'primary_image_aspect_ratio': 'PrimaryImageAspectRatio',
        'artists': 'Artists',
        'artist_items': 'ArtistItems',
        'composers': 'Composers',
        'album': 'Album',
        'collection_type': 'CollectionType',
        'display_order': 'DisplayOrder',
        'album_id': 'AlbumId',
        'album_primary_image_tag': 'AlbumPrimaryImageTag',
        'series_primary_image_tag': 'SeriesPrimaryImageTag',
        'album_artist': 'AlbumArtist',
        'album_artists': 'AlbumArtists',
        'season_name': 'SeasonName',
        'media_streams': 'MediaStreams',
        'part_count': 'PartCount',
        'image_tags': 'ImageTags',
        'backdrop_image_tags': 'BackdropImageTags',
        'parent_logo_image_tag': 'ParentLogoImageTag',
        'series_studio': 'SeriesStudio',
        'primary_image_item_id': 'PrimaryImageItemId',
        'primary_image_tag': 'PrimaryImageTag',
        'parent_thumb_item_id': 'ParentThumbItemId',
        'parent_thumb_image_tag': 'ParentThumbImageTag',
        'chapters': 'Chapters',
        'location_type': 'LocationType',
        'media_type': 'MediaType',
        'end_date': 'EndDate',
        'locked_fields': 'LockedFields',
        'lock_data': 'LockData',
        'width': 'Width',
        'height': 'Height',
        'camera_make': 'CameraMake',
        'camera_model': 'CameraModel',
        'software': 'Software',
        'exposure_time': 'ExposureTime',
        'focal_length': 'FocalLength',
        'image_orientation': 'ImageOrientation',
        'aperture': 'Aperture',
        'shutter_speed': 'ShutterSpeed',
        'latitude': 'Latitude',
        'longitude': 'Longitude',
        'altitude': 'Altitude',
        'iso_speed_rating': 'IsoSpeedRating',
        'series_timer_id': 'SeriesTimerId',
        'channel_primary_image_tag': 'ChannelPrimaryImageTag',
        'start_date': 'StartDate',
        'completion_percentage': 'CompletionPercentage',
        'is_repeat': 'IsRepeat',
        'is_new': 'IsNew',
        'episode_title': 'EpisodeTitle',
        'is_movie': 'IsMovie',
        'is_sports': 'IsSports',
        'is_series': 'IsSeries',
        'is_live': 'IsLive',
        'is_news': 'IsNews',
        'is_kids': 'IsKids',
        'is_premiere': 'IsPremiere',
        'timer_type': 'TimerType',
        'disabled': 'Disabled',
        'management_id': 'ManagementId',
        'timer_id': 'TimerId',
        'current_program': 'CurrentProgram',
        'movie_count': 'MovieCount',
        'series_count': 'SeriesCount',
        'album_count': 'AlbumCount',
        'song_count': 'SongCount',
        'music_video_count': 'MusicVideoCount',
        'subviews': 'Subviews',
        'listings_provider_id': 'ListingsProviderId',
        'listings_channel_id': 'ListingsChannelId',
        'listings_path': 'ListingsPath',
        'listings_id': 'ListingsId',
        'listings_channel_name': 'ListingsChannelName',
        'listings_channel_number': 'ListingsChannelNumber',
        'affiliate_call_sign': 'AffiliateCallSign'
    }

    def __init__(self, name=None, original_title=None, server_id=None, id=None, guid=None, etag=None, prefix=None, playlist_item_id=None, date_created=None, extra_type=None, sort_index_number=None, sort_parent_index_number=None, can_delete=None, can_download=None, can_edit_items=None, supports_resume=None, presentation_unique_key=None, preferred_metadata_language=None, preferred_metadata_country_code=None, supports_sync=None, sync_status=None, can_manage_access=None, can_leave_content=None, can_make_public=None, container=None, sort_name=None, forced_sort_name=None, video3_d_format=None, premiere_date=None, external_urls=None, media_sources=None, critic_rating=None, game_system_id=None, as_series=None, game_system=None, production_locations=None, path=None, official_rating=None, custom_rating=None, channel_id=None, channel_name=None, overview=None, taglines=None, genres=None, community_rating=None, run_time_ticks=None, size=None, file_name=None, bitrate=None, production_year=None, number=None, channel_number=None, index_number=None, index_number_end=None, parent_index_number=None, remote_trailers=None, provider_ids=None, is_folder=None, parent_id=None, type=None, people=None, studios=None, genre_items=None, tag_items=None, parent_logo_item_id=None, parent_backdrop_item_id=None, parent_backdrop_image_tags=None, local_trailer_count=None, user_data=None, recursive_item_count=None, child_count=None, series_name=None, series_id=None, season_id=None, special_feature_count=None, display_preferences_id=None, status=None, air_days=None, tags=None, primary_image_aspect_ratio=None, artists=None, artist_items=None, composers=None, album=None, collection_type=None, display_order=None, album_id=None, album_primary_image_tag=None, series_primary_image_tag=None, album_artist=None, album_artists=None, season_name=None, media_streams=None, part_count=None, image_tags=None, backdrop_image_tags=None, parent_logo_image_tag=None, series_studio=None, primary_image_item_id=None, primary_image_tag=None, parent_thumb_item_id=None, parent_thumb_image_tag=None, chapters=None, location_type=None, media_type=None, end_date=None, locked_fields=None, lock_data=None, width=None, height=None, camera_make=None, camera_model=None, software=None, exposure_time=None, focal_length=None, image_orientation=None, aperture=None, shutter_speed=None, latitude=None, longitude=None, altitude=None, iso_speed_rating=None, series_timer_id=None, channel_primary_image_tag=None, start_date=None, completion_percentage=None, is_repeat=None, is_new=None, episode_title=None, is_movie=None, is_sports=None, is_series=None, is_live=None, is_news=None, is_kids=None, is_premiere=None, timer_type=None, disabled=None, management_id=None, timer_id=None, current_program=None, movie_count=None, series_count=None, album_count=None, song_count=None, music_video_count=None, subviews=None, listings_provider_id=None, listings_channel_id=None, listings_path=None, listings_id=None, listings_channel_name=None, listings_channel_number=None, affiliate_call_sign=None):  # noqa: E501
        """BaseItemDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._original_title = None
        self._server_id = None
        self._id = None
        self._guid = None
        self._etag = None
        self._prefix = None
        self._playlist_item_id = None
        self._date_created = None
        self._extra_type = None
        self._sort_index_number = None
        self._sort_parent_index_number = None
        self._can_delete = None
        self._can_download = None
        self._can_edit_items = None
        self._supports_resume = None
        self._presentation_unique_key = None
        self._preferred_metadata_language = None
        self._preferred_metadata_country_code = None
        self._supports_sync = None
        self._sync_status = None
        self._can_manage_access = None
        self._can_leave_content = None
        self._can_make_public = None
        self._container = None
        self._sort_name = None
        self._forced_sort_name = None
        self._video3_d_format = None
        self._premiere_date = None
        self._external_urls = None
        self._media_sources = None
        self._critic_rating = None
        self._game_system_id = None
        self._as_series = None
        self._game_system = None
        self._production_locations = None
        self._path = None
        self._official_rating = None
        self._custom_rating = None
        self._channel_id = None
        self._channel_name = None
        self._overview = None
        self._taglines = None
        self._genres = None
        self._community_rating = None
        self._run_time_ticks = None
        self._size = None
        self._file_name = None
        self._bitrate = None
        self._production_year = None
        self._number = None
        self._channel_number = None
        self._index_number = None
        self._index_number_end = None
        self._parent_index_number = None
        self._remote_trailers = None
        self._provider_ids = None
        self._is_folder = None
        self._parent_id = None
        self._type = None
        self._people = None
        self._studios = None
        self._genre_items = None
        self._tag_items = None
        self._parent_logo_item_id = None
        self._parent_backdrop_item_id = None
        self._parent_backdrop_image_tags = None
        self._local_trailer_count = None
        self._user_data = None
        self._recursive_item_count = None
        self._child_count = None
        self._series_name = None
        self._series_id = None
        self._season_id = None
        self._special_feature_count = None
        self._display_preferences_id = None
        self._status = None
        self._air_days = None
        self._tags = None
        self._primary_image_aspect_ratio = None
        self._artists = None
        self._artist_items = None
        self._composers = None
        self._album = None
        self._collection_type = None
        self._display_order = None
        self._album_id = None
        self._album_primary_image_tag = None
        self._series_primary_image_tag = None
        self._album_artist = None
        self._album_artists = None
        self._season_name = None
        self._media_streams = None
        self._part_count = None
        self._image_tags = None
        self._backdrop_image_tags = None
        self._parent_logo_image_tag = None
        self._series_studio = None
        self._primary_image_item_id = None
        self._primary_image_tag = None
        self._parent_thumb_item_id = None
        self._parent_thumb_image_tag = None
        self._chapters = None
        self._location_type = None
        self._media_type = None
        self._end_date = None
        self._locked_fields = None
        self._lock_data = None
        self._width = None
        self._height = None
        self._camera_make = None
        self._camera_model = None
        self._software = None
        self._exposure_time = None
        self._focal_length = None
        self._image_orientation = None
        self._aperture = None
        self._shutter_speed = None
        self._latitude = None
        self._longitude = None
        self._altitude = None
        self._iso_speed_rating = None
        self._series_timer_id = None
        self._channel_primary_image_tag = None
        self._start_date = None
        self._completion_percentage = None
        self._is_repeat = None
        self._is_new = None
        self._episode_title = None
        self._is_movie = None
        self._is_sports = None
        self._is_series = None
        self._is_live = None
        self._is_news = None
        self._is_kids = None
        self._is_premiere = None
        self._timer_type = None
        self._disabled = None
        self._management_id = None
        self._timer_id = None
        self._current_program = None
        self._movie_count = None
        self._series_count = None
        self._album_count = None
        self._song_count = None
        self._music_video_count = None
        self._subviews = None
        self._listings_provider_id = None
        self._listings_channel_id = None
        self._listings_path = None
        self._listings_id = None
        self._listings_channel_name = None
        self._listings_channel_number = None
        self._affiliate_call_sign = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if original_title is not None:
            self.original_title = original_title
        if server_id is not None:
            self.server_id = server_id
        if id is not None:
            self.id = id
        if guid is not None:
            self.guid = guid
        if etag is not None:
            self.etag = etag
        if prefix is not None:
            self.prefix = prefix
        if playlist_item_id is not None:
            self.playlist_item_id = playlist_item_id
        if date_created is not None:
            self.date_created = date_created
        if extra_type is not None:
            self.extra_type = extra_type
        if sort_index_number is not None:
            self.sort_index_number = sort_index_number
        if sort_parent_index_number is not None:
            self.sort_parent_index_number = sort_parent_index_number
        if can_delete is not None:
            self.can_delete = can_delete
        if can_download is not None:
            self.can_download = can_download
        if can_edit_items is not None:
            self.can_edit_items = can_edit_items
        if supports_resume is not None:
            self.supports_resume = supports_resume
        if presentation_unique_key is not None:
            self.presentation_unique_key = presentation_unique_key
        if preferred_metadata_language is not None:
            self.preferred_metadata_language = preferred_metadata_language
        if preferred_metadata_country_code is not None:
            self.preferred_metadata_country_code = preferred_metadata_country_code
        if supports_sync is not None:
            self.supports_sync = supports_sync
        if sync_status is not None:
            self.sync_status = sync_status
        if can_manage_access is not None:
            self.can_manage_access = can_manage_access
        if can_leave_content is not None:
            self.can_leave_content = can_leave_content
        if can_make_public is not None:
            self.can_make_public = can_make_public
        if container is not None:
            self.container = container
        if sort_name is not None:
            self.sort_name = sort_name
        if forced_sort_name is not None:
            self.forced_sort_name = forced_sort_name
        if video3_d_format is not None:
            self.video3_d_format = video3_d_format
        if premiere_date is not None:
            self.premiere_date = premiere_date
        if external_urls is not None:
            self.external_urls = external_urls
        if media_sources is not None:
            self.media_sources = media_sources
        if critic_rating is not None:
            self.critic_rating = critic_rating
        if game_system_id is not None:
            self.game_system_id = game_system_id
        if as_series is not None:
            self.as_series = as_series
        if game_system is not None:
            self.game_system = game_system
        if production_locations is not None:
            self.production_locations = production_locations
        if path is not None:
            self.path = path
        if official_rating is not None:
            self.official_rating = official_rating
        if custom_rating is not None:
            self.custom_rating = custom_rating
        if channel_id is not None:
            self.channel_id = channel_id
        if channel_name is not None:
            self.channel_name = channel_name
        if overview is not None:
            self.overview = overview
        if taglines is not None:
            self.taglines = taglines
        if genres is not None:
            self.genres = genres
        if community_rating is not None:
            self.community_rating = community_rating
        if run_time_ticks is not None:
            self.run_time_ticks = run_time_ticks
        if size is not None:
            self.size = size
        if file_name is not None:
            self.file_name = file_name
        if bitrate is not None:
            self.bitrate = bitrate
        if production_year is not None:
            self.production_year = production_year
        if number is not None:
            self.number = number
        if channel_number is not None:
            self.channel_number = channel_number
        if index_number is not None:
            self.index_number = index_number
        if index_number_end is not None:
            self.index_number_end = index_number_end
        if parent_index_number is not None:
            self.parent_index_number = parent_index_number
        if remote_trailers is not None:
            self.remote_trailers = remote_trailers
        if provider_ids is not None:
            self.provider_ids = provider_ids
        if is_folder is not None:
            self.is_folder = is_folder
        if parent_id is not None:
            self.parent_id = parent_id
        if type is not None:
            self.type = type
        if people is not None:
            self.people = people
        if studios is not None:
            self.studios = studios
        if genre_items is not None:
            self.genre_items = genre_items
        if tag_items is not None:
            self.tag_items = tag_items
        if parent_logo_item_id is not None:
            self.parent_logo_item_id = parent_logo_item_id
        if parent_backdrop_item_id is not None:
            self.parent_backdrop_item_id = parent_backdrop_item_id
        if parent_backdrop_image_tags is not None:
            self.parent_backdrop_image_tags = parent_backdrop_image_tags
        if local_trailer_count is not None:
            self.local_trailer_count = local_trailer_count
        if user_data is not None:
            self.user_data = user_data
        if recursive_item_count is not None:
            self.recursive_item_count = recursive_item_count
        if child_count is not None:
            self.child_count = child_count
        if series_name is not None:
            self.series_name = series_name
        if series_id is not None:
            self.series_id = series_id
        if season_id is not None:
            self.season_id = season_id
        if special_feature_count is not None:
            self.special_feature_count = special_feature_count
        if display_preferences_id is not None:
            self.display_preferences_id = display_preferences_id
        if status is not None:
            self.status = status
        if air_days is not None:
            self.air_days = air_days
        if tags is not None:
            self.tags = tags
        if primary_image_aspect_ratio is not None:
            self.primary_image_aspect_ratio = primary_image_aspect_ratio
        if artists is not None:
            self.artists = artists
        if artist_items is not None:
            self.artist_items = artist_items
        if composers is not None:
            self.composers = composers
        if album is not None:
            self.album = album
        if collection_type is not None:
            self.collection_type = collection_type
        if display_order is not None:
            self.display_order = display_order
        if album_id is not None:
            self.album_id = album_id
        if album_primary_image_tag is not None:
            self.album_primary_image_tag = album_primary_image_tag
        if series_primary_image_tag is not None:
            self.series_primary_image_tag = series_primary_image_tag
        if album_artist is not None:
            self.album_artist = album_artist
        if album_artists is not None:
            self.album_artists = album_artists
        if season_name is not None:
            self.season_name = season_name
        if media_streams is not None:
            self.media_streams = media_streams
        if part_count is not None:
            self.part_count = part_count
        if image_tags is not None:
            self.image_tags = image_tags
        if backdrop_image_tags is not None:
            self.backdrop_image_tags = backdrop_image_tags
        if parent_logo_image_tag is not None:
            self.parent_logo_image_tag = parent_logo_image_tag
        if series_studio is not None:
            self.series_studio = series_studio
        if primary_image_item_id is not None:
            self.primary_image_item_id = primary_image_item_id
        if primary_image_tag is not None:
            self.primary_image_tag = primary_image_tag
        if parent_thumb_item_id is not None:
            self.parent_thumb_item_id = parent_thumb_item_id
        if parent_thumb_image_tag is not None:
            self.parent_thumb_image_tag = parent_thumb_image_tag
        if chapters is not None:
            self.chapters = chapters
        if location_type is not None:
            self.location_type = location_type
        if media_type is not None:
            self.media_type = media_type
        if end_date is not None:
            self.end_date = end_date
        if locked_fields is not None:
            self.locked_fields = locked_fields
        if lock_data is not None:
            self.lock_data = lock_data
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if camera_make is not None:
            self.camera_make = camera_make
        if camera_model is not None:
            self.camera_model = camera_model
        if software is not None:
            self.software = software
        if exposure_time is not None:
            self.exposure_time = exposure_time
        if focal_length is not None:
            self.focal_length = focal_length
        if image_orientation is not None:
            self.image_orientation = image_orientation
        if aperture is not None:
            self.aperture = aperture
        if shutter_speed is not None:
            self.shutter_speed = shutter_speed
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if altitude is not None:
            self.altitude = altitude
        if iso_speed_rating is not None:
            self.iso_speed_rating = iso_speed_rating
        if series_timer_id is not None:
            self.series_timer_id = series_timer_id
        if channel_primary_image_tag is not None:
            self.channel_primary_image_tag = channel_primary_image_tag
        if start_date is not None:
            self.start_date = start_date
        if completion_percentage is not None:
            self.completion_percentage = completion_percentage
        if is_repeat is not None:
            self.is_repeat = is_repeat
        if is_new is not None:
            self.is_new = is_new
        if episode_title is not None:
            self.episode_title = episode_title
        if is_movie is not None:
            self.is_movie = is_movie
        if is_sports is not None:
            self.is_sports = is_sports
        if is_series is not None:
            self.is_series = is_series
        if is_live is not None:
            self.is_live = is_live
        if is_news is not None:
            self.is_news = is_news
        if is_kids is not None:
            self.is_kids = is_kids
        if is_premiere is not None:
            self.is_premiere = is_premiere
        if timer_type is not None:
            self.timer_type = timer_type
        if disabled is not None:
            self.disabled = disabled
        if management_id is not None:
            self.management_id = management_id
        if timer_id is not None:
            self.timer_id = timer_id
        if current_program is not None:
            self.current_program = current_program
        if movie_count is not None:
            self.movie_count = movie_count
        if series_count is not None:
            self.series_count = series_count
        if album_count is not None:
            self.album_count = album_count
        if song_count is not None:
            self.song_count = song_count
        if music_video_count is not None:
            self.music_video_count = music_video_count
        if subviews is not None:
            self.subviews = subviews
        if listings_provider_id is not None:
            self.listings_provider_id = listings_provider_id
        if listings_channel_id is not None:
            self.listings_channel_id = listings_channel_id
        if listings_path is not None:
            self.listings_path = listings_path
        if listings_id is not None:
            self.listings_id = listings_id
        if listings_channel_name is not None:
            self.listings_channel_name = listings_channel_name
        if listings_channel_number is not None:
            self.listings_channel_number = listings_channel_number
        if affiliate_call_sign is not None:
            self.affiliate_call_sign = affiliate_call_sign

    @property
    def name(self):
        """Gets the name of this BaseItemDto.  # noqa: E501

        The name.  # noqa: E501

        :return: The name of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseItemDto.

        The name.  # noqa: E501

        :param name: The name of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def original_title(self):
        """Gets the original_title of this BaseItemDto.  # noqa: E501


        :return: The original_title of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._original_title

    @original_title.setter
    def original_title(self, original_title):
        """Sets the original_title of this BaseItemDto.


        :param original_title: The original_title of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._original_title = original_title

    @property
    def server_id(self):
        """Gets the server_id of this BaseItemDto.  # noqa: E501

        The server identifier.  # noqa: E501

        :return: The server_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this BaseItemDto.

        The server identifier.  # noqa: E501

        :param server_id: The server_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._server_id = server_id

    @property
    def id(self):
        """Gets the id of this BaseItemDto.  # noqa: E501

        The id.  # noqa: E501

        :return: The id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseItemDto.

        The id.  # noqa: E501

        :param id: The id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def guid(self):
        """Gets the guid of this BaseItemDto.  # noqa: E501


        :return: The guid of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this BaseItemDto.


        :param guid: The guid of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def etag(self):
        """Gets the etag of this BaseItemDto.  # noqa: E501

        The etag.  # noqa: E501

        :return: The etag of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this BaseItemDto.

        The etag.  # noqa: E501

        :param etag: The etag of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def prefix(self):
        """Gets the prefix of this BaseItemDto.  # noqa: E501

        The Prefix.  # noqa: E501

        :return: The prefix of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this BaseItemDto.

        The Prefix.  # noqa: E501

        :param prefix: The prefix of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def playlist_item_id(self):
        """Gets the playlist_item_id of this BaseItemDto.  # noqa: E501

        The playlist item identifier.  # noqa: E501

        :return: The playlist_item_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._playlist_item_id

    @playlist_item_id.setter
    def playlist_item_id(self, playlist_item_id):
        """Sets the playlist_item_id of this BaseItemDto.

        The playlist item identifier.  # noqa: E501

        :param playlist_item_id: The playlist_item_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._playlist_item_id = playlist_item_id

    @property
    def date_created(self):
        """Gets the date_created of this BaseItemDto.  # noqa: E501

        The date created.  # noqa: E501

        :return: The date_created of this BaseItemDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this BaseItemDto.

        The date created.  # noqa: E501

        :param date_created: The date_created of this BaseItemDto.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def extra_type(self):
        """Gets the extra_type of this BaseItemDto.  # noqa: E501


        :return: The extra_type of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._extra_type

    @extra_type.setter
    def extra_type(self, extra_type):
        """Sets the extra_type of this BaseItemDto.


        :param extra_type: The extra_type of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._extra_type = extra_type

    @property
    def sort_index_number(self):
        """Gets the sort_index_number of this BaseItemDto.  # noqa: E501


        :return: The sort_index_number of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._sort_index_number

    @sort_index_number.setter
    def sort_index_number(self, sort_index_number):
        """Sets the sort_index_number of this BaseItemDto.


        :param sort_index_number: The sort_index_number of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._sort_index_number = sort_index_number

    @property
    def sort_parent_index_number(self):
        """Gets the sort_parent_index_number of this BaseItemDto.  # noqa: E501


        :return: The sort_parent_index_number of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._sort_parent_index_number

    @sort_parent_index_number.setter
    def sort_parent_index_number(self, sort_parent_index_number):
        """Sets the sort_parent_index_number of this BaseItemDto.


        :param sort_parent_index_number: The sort_parent_index_number of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._sort_parent_index_number = sort_parent_index_number

    @property
    def can_delete(self):
        """Gets the can_delete of this BaseItemDto.  # noqa: E501


        :return: The can_delete of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this BaseItemDto.


        :param can_delete: The can_delete of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    @property
    def can_download(self):
        """Gets the can_download of this BaseItemDto.  # noqa: E501


        :return: The can_download of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._can_download

    @can_download.setter
    def can_download(self, can_download):
        """Sets the can_download of this BaseItemDto.


        :param can_download: The can_download of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._can_download = can_download

    @property
    def can_edit_items(self):
        """Gets the can_edit_items of this BaseItemDto.  # noqa: E501


        :return: The can_edit_items of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_items

    @can_edit_items.setter
    def can_edit_items(self, can_edit_items):
        """Sets the can_edit_items of this BaseItemDto.


        :param can_edit_items: The can_edit_items of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._can_edit_items = can_edit_items

    @property
    def supports_resume(self):
        """Gets the supports_resume of this BaseItemDto.  # noqa: E501


        :return: The supports_resume of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._supports_resume

    @supports_resume.setter
    def supports_resume(self, supports_resume):
        """Sets the supports_resume of this BaseItemDto.


        :param supports_resume: The supports_resume of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._supports_resume = supports_resume

    @property
    def presentation_unique_key(self):
        """Gets the presentation_unique_key of this BaseItemDto.  # noqa: E501


        :return: The presentation_unique_key of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._presentation_unique_key

    @presentation_unique_key.setter
    def presentation_unique_key(self, presentation_unique_key):
        """Sets the presentation_unique_key of this BaseItemDto.


        :param presentation_unique_key: The presentation_unique_key of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._presentation_unique_key = presentation_unique_key

    @property
    def preferred_metadata_language(self):
        """Gets the preferred_metadata_language of this BaseItemDto.  # noqa: E501


        :return: The preferred_metadata_language of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._preferred_metadata_language

    @preferred_metadata_language.setter
    def preferred_metadata_language(self, preferred_metadata_language):
        """Sets the preferred_metadata_language of this BaseItemDto.


        :param preferred_metadata_language: The preferred_metadata_language of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._preferred_metadata_language = preferred_metadata_language

    @property
    def preferred_metadata_country_code(self):
        """Gets the preferred_metadata_country_code of this BaseItemDto.  # noqa: E501


        :return: The preferred_metadata_country_code of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._preferred_metadata_country_code

    @preferred_metadata_country_code.setter
    def preferred_metadata_country_code(self, preferred_metadata_country_code):
        """Sets the preferred_metadata_country_code of this BaseItemDto.


        :param preferred_metadata_country_code: The preferred_metadata_country_code of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._preferred_metadata_country_code = preferred_metadata_country_code

    @property
    def supports_sync(self):
        """Gets the supports_sync of this BaseItemDto.  # noqa: E501

        A value indicating whether \\[supports synchronize\\].  # noqa: E501

        :return: The supports_sync of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._supports_sync

    @supports_sync.setter
    def supports_sync(self, supports_sync):
        """Sets the supports_sync of this BaseItemDto.

        A value indicating whether \\[supports synchronize\\].  # noqa: E501

        :param supports_sync: The supports_sync of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._supports_sync = supports_sync

    @property
    def sync_status(self):
        """Gets the sync_status of this BaseItemDto.  # noqa: E501


        :return: The sync_status of this BaseItemDto.  # noqa: E501
        :rtype: SyncJobItemStatus
        """
        return self._sync_status

    @sync_status.setter
    def sync_status(self, sync_status):
        """Sets the sync_status of this BaseItemDto.


        :param sync_status: The sync_status of this BaseItemDto.  # noqa: E501
        :type: SyncJobItemStatus
        """

        self._sync_status = sync_status

    @property
    def can_manage_access(self):
        """Gets the can_manage_access of this BaseItemDto.  # noqa: E501


        :return: The can_manage_access of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._can_manage_access

    @can_manage_access.setter
    def can_manage_access(self, can_manage_access):
        """Sets the can_manage_access of this BaseItemDto.


        :param can_manage_access: The can_manage_access of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._can_manage_access = can_manage_access

    @property
    def can_leave_content(self):
        """Gets the can_leave_content of this BaseItemDto.  # noqa: E501


        :return: The can_leave_content of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._can_leave_content

    @can_leave_content.setter
    def can_leave_content(self, can_leave_content):
        """Sets the can_leave_content of this BaseItemDto.


        :param can_leave_content: The can_leave_content of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._can_leave_content = can_leave_content

    @property
    def can_make_public(self):
        """Gets the can_make_public of this BaseItemDto.  # noqa: E501


        :return: The can_make_public of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._can_make_public

    @can_make_public.setter
    def can_make_public(self, can_make_public):
        """Sets the can_make_public of this BaseItemDto.


        :param can_make_public: The can_make_public of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._can_make_public = can_make_public

    @property
    def container(self):
        """Gets the container of this BaseItemDto.  # noqa: E501


        :return: The container of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this BaseItemDto.


        :param container: The container of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._container = container

    @property
    def sort_name(self):
        """Gets the sort_name of this BaseItemDto.  # noqa: E501

        The name of the sort.  # noqa: E501

        :return: The sort_name of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._sort_name

    @sort_name.setter
    def sort_name(self, sort_name):
        """Sets the sort_name of this BaseItemDto.

        The name of the sort.  # noqa: E501

        :param sort_name: The sort_name of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._sort_name = sort_name

    @property
    def forced_sort_name(self):
        """Gets the forced_sort_name of this BaseItemDto.  # noqa: E501


        :return: The forced_sort_name of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._forced_sort_name

    @forced_sort_name.setter
    def forced_sort_name(self, forced_sort_name):
        """Sets the forced_sort_name of this BaseItemDto.


        :param forced_sort_name: The forced_sort_name of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._forced_sort_name = forced_sort_name

    @property
    def video3_d_format(self):
        """Gets the video3_d_format of this BaseItemDto.  # noqa: E501


        :return: The video3_d_format of this BaseItemDto.  # noqa: E501
        :rtype: Video3DFormat
        """
        return self._video3_d_format

    @video3_d_format.setter
    def video3_d_format(self, video3_d_format):
        """Sets the video3_d_format of this BaseItemDto.


        :param video3_d_format: The video3_d_format of this BaseItemDto.  # noqa: E501
        :type: Video3DFormat
        """

        self._video3_d_format = video3_d_format

    @property
    def premiere_date(self):
        """Gets the premiere_date of this BaseItemDto.  # noqa: E501

        The premiere date.  # noqa: E501

        :return: The premiere_date of this BaseItemDto.  # noqa: E501
        :rtype: datetime
        """
        return self._premiere_date

    @premiere_date.setter
    def premiere_date(self, premiere_date):
        """Sets the premiere_date of this BaseItemDto.

        The premiere date.  # noqa: E501

        :param premiere_date: The premiere_date of this BaseItemDto.  # noqa: E501
        :type: datetime
        """

        self._premiere_date = premiere_date

    @property
    def external_urls(self):
        """Gets the external_urls of this BaseItemDto.  # noqa: E501

        The external urls.  # noqa: E501

        :return: The external_urls of this BaseItemDto.  # noqa: E501
        :rtype: list[ExternalUrl]
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this BaseItemDto.

        The external urls.  # noqa: E501

        :param external_urls: The external_urls of this BaseItemDto.  # noqa: E501
        :type: list[ExternalUrl]
        """

        self._external_urls = external_urls

    @property
    def media_sources(self):
        """Gets the media_sources of this BaseItemDto.  # noqa: E501

        The media versions.  # noqa: E501

        :return: The media_sources of this BaseItemDto.  # noqa: E501
        :rtype: list[MediaSourceInfo]
        """
        return self._media_sources

    @media_sources.setter
    def media_sources(self, media_sources):
        """Sets the media_sources of this BaseItemDto.

        The media versions.  # noqa: E501

        :param media_sources: The media_sources of this BaseItemDto.  # noqa: E501
        :type: list[MediaSourceInfo]
        """

        self._media_sources = media_sources

    @property
    def critic_rating(self):
        """Gets the critic_rating of this BaseItemDto.  # noqa: E501

        The critic rating.  # noqa: E501

        :return: The critic_rating of this BaseItemDto.  # noqa: E501
        :rtype: float
        """
        return self._critic_rating

    @critic_rating.setter
    def critic_rating(self, critic_rating):
        """Sets the critic_rating of this BaseItemDto.

        The critic rating.  # noqa: E501

        :param critic_rating: The critic_rating of this BaseItemDto.  # noqa: E501
        :type: float
        """

        self._critic_rating = critic_rating

    @property
    def game_system_id(self):
        """Gets the game_system_id of this BaseItemDto.  # noqa: E501


        :return: The game_system_id of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._game_system_id

    @game_system_id.setter
    def game_system_id(self, game_system_id):
        """Sets the game_system_id of this BaseItemDto.


        :param game_system_id: The game_system_id of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._game_system_id = game_system_id

    @property
    def as_series(self):
        """Gets the as_series of this BaseItemDto.  # noqa: E501


        :return: The as_series of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._as_series

    @as_series.setter
    def as_series(self, as_series):
        """Sets the as_series of this BaseItemDto.


        :param as_series: The as_series of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._as_series = as_series

    @property
    def game_system(self):
        """Gets the game_system of this BaseItemDto.  # noqa: E501

        The game system.  # noqa: E501

        :return: The game_system of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._game_system

    @game_system.setter
    def game_system(self, game_system):
        """Sets the game_system of this BaseItemDto.

        The game system.  # noqa: E501

        :param game_system: The game_system of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._game_system = game_system

    @property
    def production_locations(self):
        """Gets the production_locations of this BaseItemDto.  # noqa: E501


        :return: The production_locations of this BaseItemDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._production_locations

    @production_locations.setter
    def production_locations(self, production_locations):
        """Sets the production_locations of this BaseItemDto.


        :param production_locations: The production_locations of this BaseItemDto.  # noqa: E501
        :type: list[str]
        """

        self._production_locations = production_locations

    @property
    def path(self):
        """Gets the path of this BaseItemDto.  # noqa: E501

        The path.  # noqa: E501

        :return: The path of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BaseItemDto.

        The path.  # noqa: E501

        :param path: The path of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def official_rating(self):
        """Gets the official_rating of this BaseItemDto.  # noqa: E501

        The official rating.  # noqa: E501

        :return: The official_rating of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._official_rating

    @official_rating.setter
    def official_rating(self, official_rating):
        """Sets the official_rating of this BaseItemDto.

        The official rating.  # noqa: E501

        :param official_rating: The official_rating of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._official_rating = official_rating

    @property
    def custom_rating(self):
        """Gets the custom_rating of this BaseItemDto.  # noqa: E501

        The custom rating.  # noqa: E501

        :return: The custom_rating of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._custom_rating

    @custom_rating.setter
    def custom_rating(self, custom_rating):
        """Sets the custom_rating of this BaseItemDto.

        The custom rating.  # noqa: E501

        :param custom_rating: The custom_rating of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._custom_rating = custom_rating

    @property
    def channel_id(self):
        """Gets the channel_id of this BaseItemDto.  # noqa: E501

        The channel identifier.  # noqa: E501

        :return: The channel_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this BaseItemDto.

        The channel identifier.  # noqa: E501

        :param channel_id: The channel_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._channel_id = channel_id

    @property
    def channel_name(self):
        """Gets the channel_name of this BaseItemDto.  # noqa: E501


        :return: The channel_name of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this BaseItemDto.


        :param channel_name: The channel_name of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._channel_name = channel_name

    @property
    def overview(self):
        """Gets the overview of this BaseItemDto.  # noqa: E501

        The overview.  # noqa: E501

        :return: The overview of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this BaseItemDto.

        The overview.  # noqa: E501

        :param overview: The overview of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._overview = overview

    @property
    def taglines(self):
        """Gets the taglines of this BaseItemDto.  # noqa: E501

        The taglines.  # noqa: E501

        :return: The taglines of this BaseItemDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._taglines

    @taglines.setter
    def taglines(self, taglines):
        """Sets the taglines of this BaseItemDto.

        The taglines.  # noqa: E501

        :param taglines: The taglines of this BaseItemDto.  # noqa: E501
        :type: list[str]
        """

        self._taglines = taglines

    @property
    def genres(self):
        """Gets the genres of this BaseItemDto.  # noqa: E501

        The genres.  # noqa: E501

        :return: The genres of this BaseItemDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this BaseItemDto.

        The genres.  # noqa: E501

        :param genres: The genres of this BaseItemDto.  # noqa: E501
        :type: list[str]
        """

        self._genres = genres

    @property
    def community_rating(self):
        """Gets the community_rating of this BaseItemDto.  # noqa: E501

        The community rating.  # noqa: E501

        :return: The community_rating of this BaseItemDto.  # noqa: E501
        :rtype: float
        """
        return self._community_rating

    @community_rating.setter
    def community_rating(self, community_rating):
        """Sets the community_rating of this BaseItemDto.

        The community rating.  # noqa: E501

        :param community_rating: The community_rating of this BaseItemDto.  # noqa: E501
        :type: float
        """

        self._community_rating = community_rating

    @property
    def run_time_ticks(self):
        """Gets the run_time_ticks of this BaseItemDto.  # noqa: E501

        The run time ticks.  # noqa: E501

        :return: The run_time_ticks of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._run_time_ticks

    @run_time_ticks.setter
    def run_time_ticks(self, run_time_ticks):
        """Sets the run_time_ticks of this BaseItemDto.

        The run time ticks.  # noqa: E501

        :param run_time_ticks: The run_time_ticks of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._run_time_ticks = run_time_ticks

    @property
    def size(self):
        """Gets the size of this BaseItemDto.  # noqa: E501


        :return: The size of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BaseItemDto.


        :param size: The size of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def file_name(self):
        """Gets the file_name of this BaseItemDto.  # noqa: E501


        :return: The file_name of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this BaseItemDto.


        :param file_name: The file_name of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def bitrate(self):
        """Gets the bitrate of this BaseItemDto.  # noqa: E501


        :return: The bitrate of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this BaseItemDto.


        :param bitrate: The bitrate of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._bitrate = bitrate

    @property
    def production_year(self):
        """Gets the production_year of this BaseItemDto.  # noqa: E501

        The production year.  # noqa: E501

        :return: The production_year of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._production_year

    @production_year.setter
    def production_year(self, production_year):
        """Sets the production_year of this BaseItemDto.

        The production year.  # noqa: E501

        :param production_year: The production_year of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._production_year = production_year

    @property
    def number(self):
        """Gets the number of this BaseItemDto.  # noqa: E501

        The number.  # noqa: E501

        :return: The number of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this BaseItemDto.

        The number.  # noqa: E501

        :param number: The number of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def channel_number(self):
        """Gets the channel_number of this BaseItemDto.  # noqa: E501


        :return: The channel_number of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._channel_number

    @channel_number.setter
    def channel_number(self, channel_number):
        """Sets the channel_number of this BaseItemDto.


        :param channel_number: The channel_number of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._channel_number = channel_number

    @property
    def index_number(self):
        """Gets the index_number of this BaseItemDto.  # noqa: E501

        The index number.  # noqa: E501

        :return: The index_number of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._index_number

    @index_number.setter
    def index_number(self, index_number):
        """Sets the index_number of this BaseItemDto.

        The index number.  # noqa: E501

        :param index_number: The index_number of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._index_number = index_number

    @property
    def index_number_end(self):
        """Gets the index_number_end of this BaseItemDto.  # noqa: E501

        The index number end.  # noqa: E501

        :return: The index_number_end of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._index_number_end

    @index_number_end.setter
    def index_number_end(self, index_number_end):
        """Sets the index_number_end of this BaseItemDto.

        The index number end.  # noqa: E501

        :param index_number_end: The index_number_end of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._index_number_end = index_number_end

    @property
    def parent_index_number(self):
        """Gets the parent_index_number of this BaseItemDto.  # noqa: E501

        The parent index number.  # noqa: E501

        :return: The parent_index_number of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._parent_index_number

    @parent_index_number.setter
    def parent_index_number(self, parent_index_number):
        """Sets the parent_index_number of this BaseItemDto.

        The parent index number.  # noqa: E501

        :param parent_index_number: The parent_index_number of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._parent_index_number = parent_index_number

    @property
    def remote_trailers(self):
        """Gets the remote_trailers of this BaseItemDto.  # noqa: E501

        The trailer urls.  # noqa: E501

        :return: The remote_trailers of this BaseItemDto.  # noqa: E501
        :rtype: list[MediaUrl]
        """
        return self._remote_trailers

    @remote_trailers.setter
    def remote_trailers(self, remote_trailers):
        """Sets the remote_trailers of this BaseItemDto.

        The trailer urls.  # noqa: E501

        :param remote_trailers: The remote_trailers of this BaseItemDto.  # noqa: E501
        :type: list[MediaUrl]
        """

        self._remote_trailers = remote_trailers

    @property
    def provider_ids(self):
        """Gets the provider_ids of this BaseItemDto.  # noqa: E501


        :return: The provider_ids of this BaseItemDto.  # noqa: E501
        :rtype: ProviderIdDictionary
        """
        return self._provider_ids

    @provider_ids.setter
    def provider_ids(self, provider_ids):
        """Sets the provider_ids of this BaseItemDto.


        :param provider_ids: The provider_ids of this BaseItemDto.  # noqa: E501
        :type: ProviderIdDictionary
        """

        self._provider_ids = provider_ids

    @property
    def is_folder(self):
        """Gets the is_folder of this BaseItemDto.  # noqa: E501

        A value indicating whether this instance is folder.  # noqa: E501

        :return: The is_folder of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_folder

    @is_folder.setter
    def is_folder(self, is_folder):
        """Sets the is_folder of this BaseItemDto.

        A value indicating whether this instance is folder.  # noqa: E501

        :param is_folder: The is_folder of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._is_folder = is_folder

    @property
    def parent_id(self):
        """Gets the parent_id of this BaseItemDto.  # noqa: E501

        The parent id.  # noqa: E501

        :return: The parent_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this BaseItemDto.

        The parent id.  # noqa: E501

        :param parent_id: The parent_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def type(self):
        """Gets the type of this BaseItemDto.  # noqa: E501

        The type.  # noqa: E501

        :return: The type of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BaseItemDto.

        The type.  # noqa: E501

        :param type: The type of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def people(self):
        """Gets the people of this BaseItemDto.  # noqa: E501

        The people.  # noqa: E501

        :return: The people of this BaseItemDto.  # noqa: E501
        :rtype: list[BaseItemPerson]
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this BaseItemDto.

        The people.  # noqa: E501

        :param people: The people of this BaseItemDto.  # noqa: E501
        :type: list[BaseItemPerson]
        """

        self._people = people

    @property
    def studios(self):
        """Gets the studios of this BaseItemDto.  # noqa: E501

        The studios.  # noqa: E501

        :return: The studios of this BaseItemDto.  # noqa: E501
        :rtype: list[NameLongIdPair]
        """
        return self._studios

    @studios.setter
    def studios(self, studios):
        """Sets the studios of this BaseItemDto.

        The studios.  # noqa: E501

        :param studios: The studios of this BaseItemDto.  # noqa: E501
        :type: list[NameLongIdPair]
        """

        self._studios = studios

    @property
    def genre_items(self):
        """Gets the genre_items of this BaseItemDto.  # noqa: E501


        :return: The genre_items of this BaseItemDto.  # noqa: E501
        :rtype: list[NameLongIdPair]
        """
        return self._genre_items

    @genre_items.setter
    def genre_items(self, genre_items):
        """Sets the genre_items of this BaseItemDto.


        :param genre_items: The genre_items of this BaseItemDto.  # noqa: E501
        :type: list[NameLongIdPair]
        """

        self._genre_items = genre_items

    @property
    def tag_items(self):
        """Gets the tag_items of this BaseItemDto.  # noqa: E501


        :return: The tag_items of this BaseItemDto.  # noqa: E501
        :rtype: list[NameLongIdPair]
        """
        return self._tag_items

    @tag_items.setter
    def tag_items(self, tag_items):
        """Sets the tag_items of this BaseItemDto.


        :param tag_items: The tag_items of this BaseItemDto.  # noqa: E501
        :type: list[NameLongIdPair]
        """

        self._tag_items = tag_items

    @property
    def parent_logo_item_id(self):
        """Gets the parent_logo_item_id of this BaseItemDto.  # noqa: E501

        If the item does not have a logo, this will hold the Id of the Parent that has one.  # noqa: E501

        :return: The parent_logo_item_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_logo_item_id

    @parent_logo_item_id.setter
    def parent_logo_item_id(self, parent_logo_item_id):
        """Sets the parent_logo_item_id of this BaseItemDto.

        If the item does not have a logo, this will hold the Id of the Parent that has one.  # noqa: E501

        :param parent_logo_item_id: The parent_logo_item_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._parent_logo_item_id = parent_logo_item_id

    @property
    def parent_backdrop_item_id(self):
        """Gets the parent_backdrop_item_id of this BaseItemDto.  # noqa: E501

        If the item does not have any backdrops, this will hold the Id of the Parent that has one.  # noqa: E501

        :return: The parent_backdrop_item_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_backdrop_item_id

    @parent_backdrop_item_id.setter
    def parent_backdrop_item_id(self, parent_backdrop_item_id):
        """Sets the parent_backdrop_item_id of this BaseItemDto.

        If the item does not have any backdrops, this will hold the Id of the Parent that has one.  # noqa: E501

        :param parent_backdrop_item_id: The parent_backdrop_item_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._parent_backdrop_item_id = parent_backdrop_item_id

    @property
    def parent_backdrop_image_tags(self):
        """Gets the parent_backdrop_image_tags of this BaseItemDto.  # noqa: E501

        The parent backdrop image tags.  # noqa: E501

        :return: The parent_backdrop_image_tags of this BaseItemDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._parent_backdrop_image_tags

    @parent_backdrop_image_tags.setter
    def parent_backdrop_image_tags(self, parent_backdrop_image_tags):
        """Sets the parent_backdrop_image_tags of this BaseItemDto.

        The parent backdrop image tags.  # noqa: E501

        :param parent_backdrop_image_tags: The parent_backdrop_image_tags of this BaseItemDto.  # noqa: E501
        :type: list[str]
        """

        self._parent_backdrop_image_tags = parent_backdrop_image_tags

    @property
    def local_trailer_count(self):
        """Gets the local_trailer_count of this BaseItemDto.  # noqa: E501

        The local trailer count.  # noqa: E501

        :return: The local_trailer_count of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._local_trailer_count

    @local_trailer_count.setter
    def local_trailer_count(self, local_trailer_count):
        """Sets the local_trailer_count of this BaseItemDto.

        The local trailer count.  # noqa: E501

        :param local_trailer_count: The local_trailer_count of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._local_trailer_count = local_trailer_count

    @property
    def user_data(self):
        """Gets the user_data of this BaseItemDto.  # noqa: E501


        :return: The user_data of this BaseItemDto.  # noqa: E501
        :rtype: UserItemDataDto
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this BaseItemDto.


        :param user_data: The user_data of this BaseItemDto.  # noqa: E501
        :type: UserItemDataDto
        """

        self._user_data = user_data

    @property
    def recursive_item_count(self):
        """Gets the recursive_item_count of this BaseItemDto.  # noqa: E501

        The recursive item count.  # noqa: E501

        :return: The recursive_item_count of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._recursive_item_count

    @recursive_item_count.setter
    def recursive_item_count(self, recursive_item_count):
        """Sets the recursive_item_count of this BaseItemDto.

        The recursive item count.  # noqa: E501

        :param recursive_item_count: The recursive_item_count of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._recursive_item_count = recursive_item_count

    @property
    def child_count(self):
        """Gets the child_count of this BaseItemDto.  # noqa: E501

        The child count.  # noqa: E501

        :return: The child_count of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._child_count

    @child_count.setter
    def child_count(self, child_count):
        """Sets the child_count of this BaseItemDto.

        The child count.  # noqa: E501

        :param child_count: The child_count of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._child_count = child_count

    @property
    def series_name(self):
        """Gets the series_name of this BaseItemDto.  # noqa: E501

        The name of the series.  # noqa: E501

        :return: The series_name of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._series_name

    @series_name.setter
    def series_name(self, series_name):
        """Sets the series_name of this BaseItemDto.

        The name of the series.  # noqa: E501

        :param series_name: The series_name of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._series_name = series_name

    @property
    def series_id(self):
        """Gets the series_id of this BaseItemDto.  # noqa: E501

        The series id.  # noqa: E501

        :return: The series_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this BaseItemDto.

        The series id.  # noqa: E501

        :param series_id: The series_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._series_id = series_id

    @property
    def season_id(self):
        """Gets the season_id of this BaseItemDto.  # noqa: E501

        The season identifier.  # noqa: E501

        :return: The season_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._season_id

    @season_id.setter
    def season_id(self, season_id):
        """Sets the season_id of this BaseItemDto.

        The season identifier.  # noqa: E501

        :param season_id: The season_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._season_id = season_id

    @property
    def special_feature_count(self):
        """Gets the special_feature_count of this BaseItemDto.  # noqa: E501

        The special feature count.  # noqa: E501

        :return: The special_feature_count of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._special_feature_count

    @special_feature_count.setter
    def special_feature_count(self, special_feature_count):
        """Sets the special_feature_count of this BaseItemDto.

        The special feature count.  # noqa: E501

        :param special_feature_count: The special_feature_count of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._special_feature_count = special_feature_count

    @property
    def display_preferences_id(self):
        """Gets the display_preferences_id of this BaseItemDto.  # noqa: E501

        The display preferences id.  # noqa: E501

        :return: The display_preferences_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._display_preferences_id

    @display_preferences_id.setter
    def display_preferences_id(self, display_preferences_id):
        """Sets the display_preferences_id of this BaseItemDto.

        The display preferences id.  # noqa: E501

        :param display_preferences_id: The display_preferences_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._display_preferences_id = display_preferences_id

    @property
    def status(self):
        """Gets the status of this BaseItemDto.  # noqa: E501

        The status.  # noqa: E501

        :return: The status of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BaseItemDto.

        The status.  # noqa: E501

        :param status: The status of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def air_days(self):
        """Gets the air_days of this BaseItemDto.  # noqa: E501

        The air days.  # noqa: E501

        :return: The air_days of this BaseItemDto.  # noqa: E501
        :rtype: list[DayOfWeek]
        """
        return self._air_days

    @air_days.setter
    def air_days(self, air_days):
        """Sets the air_days of this BaseItemDto.

        The air days.  # noqa: E501

        :param air_days: The air_days of this BaseItemDto.  # noqa: E501
        :type: list[DayOfWeek]
        """

        self._air_days = air_days

    @property
    def tags(self):
        """Gets the tags of this BaseItemDto.  # noqa: E501

        The tags.  # noqa: E501

        :return: The tags of this BaseItemDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BaseItemDto.

        The tags.  # noqa: E501

        :param tags: The tags of this BaseItemDto.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def primary_image_aspect_ratio(self):
        """Gets the primary_image_aspect_ratio of this BaseItemDto.  # noqa: E501

        The primary image aspect ratio, after image enhancements.  # noqa: E501

        :return: The primary_image_aspect_ratio of this BaseItemDto.  # noqa: E501
        :rtype: float
        """
        return self._primary_image_aspect_ratio

    @primary_image_aspect_ratio.setter
    def primary_image_aspect_ratio(self, primary_image_aspect_ratio):
        """Sets the primary_image_aspect_ratio of this BaseItemDto.

        The primary image aspect ratio, after image enhancements.  # noqa: E501

        :param primary_image_aspect_ratio: The primary_image_aspect_ratio of this BaseItemDto.  # noqa: E501
        :type: float
        """

        self._primary_image_aspect_ratio = primary_image_aspect_ratio

    @property
    def artists(self):
        """Gets the artists of this BaseItemDto.  # noqa: E501

        The artists.  # noqa: E501

        :return: The artists of this BaseItemDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._artists

    @artists.setter
    def artists(self, artists):
        """Sets the artists of this BaseItemDto.

        The artists.  # noqa: E501

        :param artists: The artists of this BaseItemDto.  # noqa: E501
        :type: list[str]
        """

        self._artists = artists

    @property
    def artist_items(self):
        """Gets the artist_items of this BaseItemDto.  # noqa: E501

        The artist items.  # noqa: E501

        :return: The artist_items of this BaseItemDto.  # noqa: E501
        :rtype: list[NameIdPair]
        """
        return self._artist_items

    @artist_items.setter
    def artist_items(self, artist_items):
        """Sets the artist_items of this BaseItemDto.

        The artist items.  # noqa: E501

        :param artist_items: The artist_items of this BaseItemDto.  # noqa: E501
        :type: list[NameIdPair]
        """

        self._artist_items = artist_items

    @property
    def composers(self):
        """Gets the composers of this BaseItemDto.  # noqa: E501


        :return: The composers of this BaseItemDto.  # noqa: E501
        :rtype: list[NameIdPair]
        """
        return self._composers

    @composers.setter
    def composers(self, composers):
        """Sets the composers of this BaseItemDto.


        :param composers: The composers of this BaseItemDto.  # noqa: E501
        :type: list[NameIdPair]
        """

        self._composers = composers

    @property
    def album(self):
        """Gets the album of this BaseItemDto.  # noqa: E501

        The album.  # noqa: E501

        :return: The album of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._album

    @album.setter
    def album(self, album):
        """Sets the album of this BaseItemDto.

        The album.  # noqa: E501

        :param album: The album of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._album = album

    @property
    def collection_type(self):
        """Gets the collection_type of this BaseItemDto.  # noqa: E501

        The type of the collection.  # noqa: E501

        :return: The collection_type of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._collection_type

    @collection_type.setter
    def collection_type(self, collection_type):
        """Sets the collection_type of this BaseItemDto.

        The type of the collection.  # noqa: E501

        :param collection_type: The collection_type of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._collection_type = collection_type

    @property
    def display_order(self):
        """Gets the display_order of this BaseItemDto.  # noqa: E501

        The display order.  # noqa: E501

        :return: The display_order of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this BaseItemDto.

        The display order.  # noqa: E501

        :param display_order: The display_order of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._display_order = display_order

    @property
    def album_id(self):
        """Gets the album_id of this BaseItemDto.  # noqa: E501

        The album id.  # noqa: E501

        :return: The album_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._album_id

    @album_id.setter
    def album_id(self, album_id):
        """Sets the album_id of this BaseItemDto.

        The album id.  # noqa: E501

        :param album_id: The album_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._album_id = album_id

    @property
    def album_primary_image_tag(self):
        """Gets the album_primary_image_tag of this BaseItemDto.  # noqa: E501

        The album image tag.  # noqa: E501

        :return: The album_primary_image_tag of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._album_primary_image_tag

    @album_primary_image_tag.setter
    def album_primary_image_tag(self, album_primary_image_tag):
        """Sets the album_primary_image_tag of this BaseItemDto.

        The album image tag.  # noqa: E501

        :param album_primary_image_tag: The album_primary_image_tag of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._album_primary_image_tag = album_primary_image_tag

    @property
    def series_primary_image_tag(self):
        """Gets the series_primary_image_tag of this BaseItemDto.  # noqa: E501

        The series primary image tag.  # noqa: E501

        :return: The series_primary_image_tag of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._series_primary_image_tag

    @series_primary_image_tag.setter
    def series_primary_image_tag(self, series_primary_image_tag):
        """Sets the series_primary_image_tag of this BaseItemDto.

        The series primary image tag.  # noqa: E501

        :param series_primary_image_tag: The series_primary_image_tag of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._series_primary_image_tag = series_primary_image_tag

    @property
    def album_artist(self):
        """Gets the album_artist of this BaseItemDto.  # noqa: E501

        The album artist.  # noqa: E501

        :return: The album_artist of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._album_artist

    @album_artist.setter
    def album_artist(self, album_artist):
        """Sets the album_artist of this BaseItemDto.

        The album artist.  # noqa: E501

        :param album_artist: The album_artist of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._album_artist = album_artist

    @property
    def album_artists(self):
        """Gets the album_artists of this BaseItemDto.  # noqa: E501

        The album artists.  # noqa: E501

        :return: The album_artists of this BaseItemDto.  # noqa: E501
        :rtype: list[NameIdPair]
        """
        return self._album_artists

    @album_artists.setter
    def album_artists(self, album_artists):
        """Sets the album_artists of this BaseItemDto.

        The album artists.  # noqa: E501

        :param album_artists: The album_artists of this BaseItemDto.  # noqa: E501
        :type: list[NameIdPair]
        """

        self._album_artists = album_artists

    @property
    def season_name(self):
        """Gets the season_name of this BaseItemDto.  # noqa: E501

        The name of the season.  # noqa: E501

        :return: The season_name of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._season_name

    @season_name.setter
    def season_name(self, season_name):
        """Sets the season_name of this BaseItemDto.

        The name of the season.  # noqa: E501

        :param season_name: The season_name of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._season_name = season_name

    @property
    def media_streams(self):
        """Gets the media_streams of this BaseItemDto.  # noqa: E501

        The media streams.  # noqa: E501

        :return: The media_streams of this BaseItemDto.  # noqa: E501
        :rtype: list[MediaStream]
        """
        return self._media_streams

    @media_streams.setter
    def media_streams(self, media_streams):
        """Sets the media_streams of this BaseItemDto.

        The media streams.  # noqa: E501

        :param media_streams: The media_streams of this BaseItemDto.  # noqa: E501
        :type: list[MediaStream]
        """

        self._media_streams = media_streams

    @property
    def part_count(self):
        """Gets the part_count of this BaseItemDto.  # noqa: E501

        The part count.  # noqa: E501

        :return: The part_count of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._part_count

    @part_count.setter
    def part_count(self, part_count):
        """Sets the part_count of this BaseItemDto.

        The part count.  # noqa: E501

        :param part_count: The part_count of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._part_count = part_count

    @property
    def image_tags(self):
        """Gets the image_tags of this BaseItemDto.  # noqa: E501

        The image tags.  # noqa: E501

        :return: The image_tags of this BaseItemDto.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._image_tags

    @image_tags.setter
    def image_tags(self, image_tags):
        """Sets the image_tags of this BaseItemDto.

        The image tags.  # noqa: E501

        :param image_tags: The image_tags of this BaseItemDto.  # noqa: E501
        :type: dict(str, str)
        """

        self._image_tags = image_tags

    @property
    def backdrop_image_tags(self):
        """Gets the backdrop_image_tags of this BaseItemDto.  # noqa: E501

        The backdrop image tags.  # noqa: E501

        :return: The backdrop_image_tags of this BaseItemDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._backdrop_image_tags

    @backdrop_image_tags.setter
    def backdrop_image_tags(self, backdrop_image_tags):
        """Sets the backdrop_image_tags of this BaseItemDto.

        The backdrop image tags.  # noqa: E501

        :param backdrop_image_tags: The backdrop_image_tags of this BaseItemDto.  # noqa: E501
        :type: list[str]
        """

        self._backdrop_image_tags = backdrop_image_tags

    @property
    def parent_logo_image_tag(self):
        """Gets the parent_logo_image_tag of this BaseItemDto.  # noqa: E501

        The parent logo image tag.  # noqa: E501

        :return: The parent_logo_image_tag of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_logo_image_tag

    @parent_logo_image_tag.setter
    def parent_logo_image_tag(self, parent_logo_image_tag):
        """Sets the parent_logo_image_tag of this BaseItemDto.

        The parent logo image tag.  # noqa: E501

        :param parent_logo_image_tag: The parent_logo_image_tag of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._parent_logo_image_tag = parent_logo_image_tag

    @property
    def series_studio(self):
        """Gets the series_studio of this BaseItemDto.  # noqa: E501

        The series studio.  # noqa: E501

        :return: The series_studio of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._series_studio

    @series_studio.setter
    def series_studio(self, series_studio):
        """Sets the series_studio of this BaseItemDto.

        The series studio.  # noqa: E501

        :param series_studio: The series_studio of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._series_studio = series_studio

    @property
    def primary_image_item_id(self):
        """Gets the primary_image_item_id of this BaseItemDto.  # noqa: E501


        :return: The primary_image_item_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._primary_image_item_id

    @primary_image_item_id.setter
    def primary_image_item_id(self, primary_image_item_id):
        """Sets the primary_image_item_id of this BaseItemDto.


        :param primary_image_item_id: The primary_image_item_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._primary_image_item_id = primary_image_item_id

    @property
    def primary_image_tag(self):
        """Gets the primary_image_tag of this BaseItemDto.  # noqa: E501


        :return: The primary_image_tag of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._primary_image_tag

    @primary_image_tag.setter
    def primary_image_tag(self, primary_image_tag):
        """Sets the primary_image_tag of this BaseItemDto.


        :param primary_image_tag: The primary_image_tag of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._primary_image_tag = primary_image_tag

    @property
    def parent_thumb_item_id(self):
        """Gets the parent_thumb_item_id of this BaseItemDto.  # noqa: E501

        The parent thumb item id.  # noqa: E501

        :return: The parent_thumb_item_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_thumb_item_id

    @parent_thumb_item_id.setter
    def parent_thumb_item_id(self, parent_thumb_item_id):
        """Sets the parent_thumb_item_id of this BaseItemDto.

        The parent thumb item id.  # noqa: E501

        :param parent_thumb_item_id: The parent_thumb_item_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._parent_thumb_item_id = parent_thumb_item_id

    @property
    def parent_thumb_image_tag(self):
        """Gets the parent_thumb_image_tag of this BaseItemDto.  # noqa: E501

        The parent thumb image tag.  # noqa: E501

        :return: The parent_thumb_image_tag of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_thumb_image_tag

    @parent_thumb_image_tag.setter
    def parent_thumb_image_tag(self, parent_thumb_image_tag):
        """Sets the parent_thumb_image_tag of this BaseItemDto.

        The parent thumb image tag.  # noqa: E501

        :param parent_thumb_image_tag: The parent_thumb_image_tag of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._parent_thumb_image_tag = parent_thumb_image_tag

    @property
    def chapters(self):
        """Gets the chapters of this BaseItemDto.  # noqa: E501

        The chapters.  # noqa: E501

        :return: The chapters of this BaseItemDto.  # noqa: E501
        :rtype: list[ChapterInfo]
        """
        return self._chapters

    @chapters.setter
    def chapters(self, chapters):
        """Sets the chapters of this BaseItemDto.

        The chapters.  # noqa: E501

        :param chapters: The chapters of this BaseItemDto.  # noqa: E501
        :type: list[ChapterInfo]
        """

        self._chapters = chapters

    @property
    def location_type(self):
        """Gets the location_type of this BaseItemDto.  # noqa: E501


        :return: The location_type of this BaseItemDto.  # noqa: E501
        :rtype: LocationType
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this BaseItemDto.


        :param location_type: The location_type of this BaseItemDto.  # noqa: E501
        :type: LocationType
        """

        self._location_type = location_type

    @property
    def media_type(self):
        """Gets the media_type of this BaseItemDto.  # noqa: E501

        The type of the media.  # noqa: E501

        :return: The media_type of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this BaseItemDto.

        The type of the media.  # noqa: E501

        :param media_type: The media_type of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def end_date(self):
        """Gets the end_date of this BaseItemDto.  # noqa: E501

        The end date.  # noqa: E501

        :return: The end_date of this BaseItemDto.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this BaseItemDto.

        The end date.  # noqa: E501

        :param end_date: The end_date of this BaseItemDto.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def locked_fields(self):
        """Gets the locked_fields of this BaseItemDto.  # noqa: E501

        The locked fields.  # noqa: E501

        :return: The locked_fields of this BaseItemDto.  # noqa: E501
        :rtype: list[MetadataFields]
        """
        return self._locked_fields

    @locked_fields.setter
    def locked_fields(self, locked_fields):
        """Sets the locked_fields of this BaseItemDto.

        The locked fields.  # noqa: E501

        :param locked_fields: The locked_fields of this BaseItemDto.  # noqa: E501
        :type: list[MetadataFields]
        """

        self._locked_fields = locked_fields

    @property
    def lock_data(self):
        """Gets the lock_data of this BaseItemDto.  # noqa: E501

        A value indicating whether \\[enable internet providers\\].  # noqa: E501

        :return: The lock_data of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._lock_data

    @lock_data.setter
    def lock_data(self, lock_data):
        """Sets the lock_data of this BaseItemDto.

        A value indicating whether \\[enable internet providers\\].  # noqa: E501

        :param lock_data: The lock_data of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._lock_data = lock_data

    @property
    def width(self):
        """Gets the width of this BaseItemDto.  # noqa: E501


        :return: The width of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this BaseItemDto.


        :param width: The width of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this BaseItemDto.  # noqa: E501


        :return: The height of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this BaseItemDto.


        :param height: The height of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def camera_make(self):
        """Gets the camera_make of this BaseItemDto.  # noqa: E501


        :return: The camera_make of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._camera_make

    @camera_make.setter
    def camera_make(self, camera_make):
        """Sets the camera_make of this BaseItemDto.


        :param camera_make: The camera_make of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._camera_make = camera_make

    @property
    def camera_model(self):
        """Gets the camera_model of this BaseItemDto.  # noqa: E501


        :return: The camera_model of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._camera_model

    @camera_model.setter
    def camera_model(self, camera_model):
        """Sets the camera_model of this BaseItemDto.


        :param camera_model: The camera_model of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._camera_model = camera_model

    @property
    def software(self):
        """Gets the software of this BaseItemDto.  # noqa: E501


        :return: The software of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this BaseItemDto.


        :param software: The software of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._software = software

    @property
    def exposure_time(self):
        """Gets the exposure_time of this BaseItemDto.  # noqa: E501


        :return: The exposure_time of this BaseItemDto.  # noqa: E501
        :rtype: float
        """
        return self._exposure_time

    @exposure_time.setter
    def exposure_time(self, exposure_time):
        """Sets the exposure_time of this BaseItemDto.


        :param exposure_time: The exposure_time of this BaseItemDto.  # noqa: E501
        :type: float
        """

        self._exposure_time = exposure_time

    @property
    def focal_length(self):
        """Gets the focal_length of this BaseItemDto.  # noqa: E501


        :return: The focal_length of this BaseItemDto.  # noqa: E501
        :rtype: float
        """
        return self._focal_length

    @focal_length.setter
    def focal_length(self, focal_length):
        """Sets the focal_length of this BaseItemDto.


        :param focal_length: The focal_length of this BaseItemDto.  # noqa: E501
        :type: float
        """

        self._focal_length = focal_length

    @property
    def image_orientation(self):
        """Gets the image_orientation of this BaseItemDto.  # noqa: E501


        :return: The image_orientation of this BaseItemDto.  # noqa: E501
        :rtype: DrawingImageOrientation
        """
        return self._image_orientation

    @image_orientation.setter
    def image_orientation(self, image_orientation):
        """Sets the image_orientation of this BaseItemDto.


        :param image_orientation: The image_orientation of this BaseItemDto.  # noqa: E501
        :type: DrawingImageOrientation
        """

        self._image_orientation = image_orientation

    @property
    def aperture(self):
        """Gets the aperture of this BaseItemDto.  # noqa: E501


        :return: The aperture of this BaseItemDto.  # noqa: E501
        :rtype: float
        """
        return self._aperture

    @aperture.setter
    def aperture(self, aperture):
        """Sets the aperture of this BaseItemDto.


        :param aperture: The aperture of this BaseItemDto.  # noqa: E501
        :type: float
        """

        self._aperture = aperture

    @property
    def shutter_speed(self):
        """Gets the shutter_speed of this BaseItemDto.  # noqa: E501


        :return: The shutter_speed of this BaseItemDto.  # noqa: E501
        :rtype: float
        """
        return self._shutter_speed

    @shutter_speed.setter
    def shutter_speed(self, shutter_speed):
        """Sets the shutter_speed of this BaseItemDto.


        :param shutter_speed: The shutter_speed of this BaseItemDto.  # noqa: E501
        :type: float
        """

        self._shutter_speed = shutter_speed

    @property
    def latitude(self):
        """Gets the latitude of this BaseItemDto.  # noqa: E501


        :return: The latitude of this BaseItemDto.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this BaseItemDto.


        :param latitude: The latitude of this BaseItemDto.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this BaseItemDto.  # noqa: E501


        :return: The longitude of this BaseItemDto.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this BaseItemDto.


        :param longitude: The longitude of this BaseItemDto.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def altitude(self):
        """Gets the altitude of this BaseItemDto.  # noqa: E501


        :return: The altitude of this BaseItemDto.  # noqa: E501
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this BaseItemDto.


        :param altitude: The altitude of this BaseItemDto.  # noqa: E501
        :type: float
        """

        self._altitude = altitude

    @property
    def iso_speed_rating(self):
        """Gets the iso_speed_rating of this BaseItemDto.  # noqa: E501


        :return: The iso_speed_rating of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._iso_speed_rating

    @iso_speed_rating.setter
    def iso_speed_rating(self, iso_speed_rating):
        """Sets the iso_speed_rating of this BaseItemDto.


        :param iso_speed_rating: The iso_speed_rating of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._iso_speed_rating = iso_speed_rating

    @property
    def series_timer_id(self):
        """Gets the series_timer_id of this BaseItemDto.  # noqa: E501

        The series timer identifier.  # noqa: E501

        :return: The series_timer_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._series_timer_id

    @series_timer_id.setter
    def series_timer_id(self, series_timer_id):
        """Sets the series_timer_id of this BaseItemDto.

        The series timer identifier.  # noqa: E501

        :param series_timer_id: The series_timer_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._series_timer_id = series_timer_id

    @property
    def channel_primary_image_tag(self):
        """Gets the channel_primary_image_tag of this BaseItemDto.  # noqa: E501

        The channel primary image tag.  # noqa: E501

        :return: The channel_primary_image_tag of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._channel_primary_image_tag

    @channel_primary_image_tag.setter
    def channel_primary_image_tag(self, channel_primary_image_tag):
        """Sets the channel_primary_image_tag of this BaseItemDto.

        The channel primary image tag.  # noqa: E501

        :param channel_primary_image_tag: The channel_primary_image_tag of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._channel_primary_image_tag = channel_primary_image_tag

    @property
    def start_date(self):
        """Gets the start_date of this BaseItemDto.  # noqa: E501

        The start date of the recording, in UTC.  # noqa: E501

        :return: The start_date of this BaseItemDto.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this BaseItemDto.

        The start date of the recording, in UTC.  # noqa: E501

        :param start_date: The start_date of this BaseItemDto.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def completion_percentage(self):
        """Gets the completion_percentage of this BaseItemDto.  # noqa: E501

        The completion percentage.  # noqa: E501

        :return: The completion_percentage of this BaseItemDto.  # noqa: E501
        :rtype: float
        """
        return self._completion_percentage

    @completion_percentage.setter
    def completion_percentage(self, completion_percentage):
        """Sets the completion_percentage of this BaseItemDto.

        The completion percentage.  # noqa: E501

        :param completion_percentage: The completion_percentage of this BaseItemDto.  # noqa: E501
        :type: float
        """

        self._completion_percentage = completion_percentage

    @property
    def is_repeat(self):
        """Gets the is_repeat of this BaseItemDto.  # noqa: E501

        A value indicating whether this instance is repeat.  # noqa: E501

        :return: The is_repeat of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_repeat

    @is_repeat.setter
    def is_repeat(self, is_repeat):
        """Sets the is_repeat of this BaseItemDto.

        A value indicating whether this instance is repeat.  # noqa: E501

        :param is_repeat: The is_repeat of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._is_repeat = is_repeat

    @property
    def is_new(self):
        """Gets the is_new of this BaseItemDto.  # noqa: E501


        :return: The is_new of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """Sets the is_new of this BaseItemDto.


        :param is_new: The is_new of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._is_new = is_new

    @property
    def episode_title(self):
        """Gets the episode_title of this BaseItemDto.  # noqa: E501

        The episode title.  # noqa: E501

        :return: The episode_title of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._episode_title

    @episode_title.setter
    def episode_title(self, episode_title):
        """Sets the episode_title of this BaseItemDto.

        The episode title.  # noqa: E501

        :param episode_title: The episode_title of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._episode_title = episode_title

    @property
    def is_movie(self):
        """Gets the is_movie of this BaseItemDto.  # noqa: E501

        A value indicating whether this instance is movie.  # noqa: E501

        :return: The is_movie of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_movie

    @is_movie.setter
    def is_movie(self, is_movie):
        """Sets the is_movie of this BaseItemDto.

        A value indicating whether this instance is movie.  # noqa: E501

        :param is_movie: The is_movie of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._is_movie = is_movie

    @property
    def is_sports(self):
        """Gets the is_sports of this BaseItemDto.  # noqa: E501

        A value indicating whether this instance is sports.  # noqa: E501

        :return: The is_sports of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_sports

    @is_sports.setter
    def is_sports(self, is_sports):
        """Sets the is_sports of this BaseItemDto.

        A value indicating whether this instance is sports.  # noqa: E501

        :param is_sports: The is_sports of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._is_sports = is_sports

    @property
    def is_series(self):
        """Gets the is_series of this BaseItemDto.  # noqa: E501

        A value indicating whether this instance is series.  # noqa: E501

        :return: The is_series of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_series

    @is_series.setter
    def is_series(self, is_series):
        """Sets the is_series of this BaseItemDto.

        A value indicating whether this instance is series.  # noqa: E501

        :param is_series: The is_series of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._is_series = is_series

    @property
    def is_live(self):
        """Gets the is_live of this BaseItemDto.  # noqa: E501

        A value indicating whether this instance is live.  # noqa: E501

        :return: The is_live of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_live

    @is_live.setter
    def is_live(self, is_live):
        """Sets the is_live of this BaseItemDto.

        A value indicating whether this instance is live.  # noqa: E501

        :param is_live: The is_live of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._is_live = is_live

    @property
    def is_news(self):
        """Gets the is_news of this BaseItemDto.  # noqa: E501

        A value indicating whether this instance is news.  # noqa: E501

        :return: The is_news of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_news

    @is_news.setter
    def is_news(self, is_news):
        """Sets the is_news of this BaseItemDto.

        A value indicating whether this instance is news.  # noqa: E501

        :param is_news: The is_news of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._is_news = is_news

    @property
    def is_kids(self):
        """Gets the is_kids of this BaseItemDto.  # noqa: E501

        A value indicating whether this instance is kids.  # noqa: E501

        :return: The is_kids of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_kids

    @is_kids.setter
    def is_kids(self, is_kids):
        """Sets the is_kids of this BaseItemDto.

        A value indicating whether this instance is kids.  # noqa: E501

        :param is_kids: The is_kids of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._is_kids = is_kids

    @property
    def is_premiere(self):
        """Gets the is_premiere of this BaseItemDto.  # noqa: E501

        A value indicating whether this instance is premiere.  # noqa: E501

        :return: The is_premiere of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_premiere

    @is_premiere.setter
    def is_premiere(self, is_premiere):
        """Sets the is_premiere of this BaseItemDto.

        A value indicating whether this instance is premiere.  # noqa: E501

        :param is_premiere: The is_premiere of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._is_premiere = is_premiere

    @property
    def timer_type(self):
        """Gets the timer_type of this BaseItemDto.  # noqa: E501


        :return: The timer_type of this BaseItemDto.  # noqa: E501
        :rtype: LiveTvTimerType
        """
        return self._timer_type

    @timer_type.setter
    def timer_type(self, timer_type):
        """Sets the timer_type of this BaseItemDto.


        :param timer_type: The timer_type of this BaseItemDto.  # noqa: E501
        :type: LiveTvTimerType
        """

        self._timer_type = timer_type

    @property
    def disabled(self):
        """Gets the disabled of this BaseItemDto.  # noqa: E501


        :return: The disabled of this BaseItemDto.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this BaseItemDto.


        :param disabled: The disabled of this BaseItemDto.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def management_id(self):
        """Gets the management_id of this BaseItemDto.  # noqa: E501


        :return: The management_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._management_id

    @management_id.setter
    def management_id(self, management_id):
        """Sets the management_id of this BaseItemDto.


        :param management_id: The management_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._management_id = management_id

    @property
    def timer_id(self):
        """Gets the timer_id of this BaseItemDto.  # noqa: E501

        The timer identifier.  # noqa: E501

        :return: The timer_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._timer_id

    @timer_id.setter
    def timer_id(self, timer_id):
        """Sets the timer_id of this BaseItemDto.

        The timer identifier.  # noqa: E501

        :param timer_id: The timer_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._timer_id = timer_id

    @property
    def current_program(self):
        """Gets the current_program of this BaseItemDto.  # noqa: E501


        :return: The current_program of this BaseItemDto.  # noqa: E501
        :rtype: BaseItemDto
        """
        return self._current_program

    @current_program.setter
    def current_program(self, current_program):
        """Sets the current_program of this BaseItemDto.


        :param current_program: The current_program of this BaseItemDto.  # noqa: E501
        :type: BaseItemDto
        """

        self._current_program = current_program

    @property
    def movie_count(self):
        """Gets the movie_count of this BaseItemDto.  # noqa: E501


        :return: The movie_count of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._movie_count

    @movie_count.setter
    def movie_count(self, movie_count):
        """Sets the movie_count of this BaseItemDto.


        :param movie_count: The movie_count of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._movie_count = movie_count

    @property
    def series_count(self):
        """Gets the series_count of this BaseItemDto.  # noqa: E501


        :return: The series_count of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._series_count

    @series_count.setter
    def series_count(self, series_count):
        """Sets the series_count of this BaseItemDto.


        :param series_count: The series_count of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._series_count = series_count

    @property
    def album_count(self):
        """Gets the album_count of this BaseItemDto.  # noqa: E501


        :return: The album_count of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._album_count

    @album_count.setter
    def album_count(self, album_count):
        """Sets the album_count of this BaseItemDto.


        :param album_count: The album_count of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._album_count = album_count

    @property
    def song_count(self):
        """Gets the song_count of this BaseItemDto.  # noqa: E501


        :return: The song_count of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._song_count

    @song_count.setter
    def song_count(self, song_count):
        """Sets the song_count of this BaseItemDto.


        :param song_count: The song_count of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._song_count = song_count

    @property
    def music_video_count(self):
        """Gets the music_video_count of this BaseItemDto.  # noqa: E501


        :return: The music_video_count of this BaseItemDto.  # noqa: E501
        :rtype: int
        """
        return self._music_video_count

    @music_video_count.setter
    def music_video_count(self, music_video_count):
        """Sets the music_video_count of this BaseItemDto.


        :param music_video_count: The music_video_count of this BaseItemDto.  # noqa: E501
        :type: int
        """

        self._music_video_count = music_video_count

    @property
    def subviews(self):
        """Gets the subviews of this BaseItemDto.  # noqa: E501


        :return: The subviews of this BaseItemDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._subviews

    @subviews.setter
    def subviews(self, subviews):
        """Sets the subviews of this BaseItemDto.


        :param subviews: The subviews of this BaseItemDto.  # noqa: E501
        :type: list[str]
        """

        self._subviews = subviews

    @property
    def listings_provider_id(self):
        """Gets the listings_provider_id of this BaseItemDto.  # noqa: E501


        :return: The listings_provider_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._listings_provider_id

    @listings_provider_id.setter
    def listings_provider_id(self, listings_provider_id):
        """Sets the listings_provider_id of this BaseItemDto.


        :param listings_provider_id: The listings_provider_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._listings_provider_id = listings_provider_id

    @property
    def listings_channel_id(self):
        """Gets the listings_channel_id of this BaseItemDto.  # noqa: E501


        :return: The listings_channel_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._listings_channel_id

    @listings_channel_id.setter
    def listings_channel_id(self, listings_channel_id):
        """Sets the listings_channel_id of this BaseItemDto.


        :param listings_channel_id: The listings_channel_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._listings_channel_id = listings_channel_id

    @property
    def listings_path(self):
        """Gets the listings_path of this BaseItemDto.  # noqa: E501


        :return: The listings_path of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._listings_path

    @listings_path.setter
    def listings_path(self, listings_path):
        """Sets the listings_path of this BaseItemDto.


        :param listings_path: The listings_path of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._listings_path = listings_path

    @property
    def listings_id(self):
        """Gets the listings_id of this BaseItemDto.  # noqa: E501


        :return: The listings_id of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._listings_id

    @listings_id.setter
    def listings_id(self, listings_id):
        """Sets the listings_id of this BaseItemDto.


        :param listings_id: The listings_id of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._listings_id = listings_id

    @property
    def listings_channel_name(self):
        """Gets the listings_channel_name of this BaseItemDto.  # noqa: E501


        :return: The listings_channel_name of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._listings_channel_name

    @listings_channel_name.setter
    def listings_channel_name(self, listings_channel_name):
        """Sets the listings_channel_name of this BaseItemDto.


        :param listings_channel_name: The listings_channel_name of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._listings_channel_name = listings_channel_name

    @property
    def listings_channel_number(self):
        """Gets the listings_channel_number of this BaseItemDto.  # noqa: E501


        :return: The listings_channel_number of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._listings_channel_number

    @listings_channel_number.setter
    def listings_channel_number(self, listings_channel_number):
        """Sets the listings_channel_number of this BaseItemDto.


        :param listings_channel_number: The listings_channel_number of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._listings_channel_number = listings_channel_number

    @property
    def affiliate_call_sign(self):
        """Gets the affiliate_call_sign of this BaseItemDto.  # noqa: E501


        :return: The affiliate_call_sign of this BaseItemDto.  # noqa: E501
        :rtype: str
        """
        return self._affiliate_call_sign

    @affiliate_call_sign.setter
    def affiliate_call_sign(self, affiliate_call_sign):
        """Sets the affiliate_call_sign of this BaseItemDto.


        :param affiliate_call_sign: The affiliate_call_sign of this BaseItemDto.  # noqa: E501
        :type: str
        """

        self._affiliate_call_sign = affiliate_call_sign

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseItemDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseItemDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
