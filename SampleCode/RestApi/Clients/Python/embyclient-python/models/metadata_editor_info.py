# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class MetadataEditorInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parental_rating_options': 'list[ParentalRating]',
        'countries': 'list[GlobalizationCountryInfo]',
        'cultures': 'list[GlobalizationCultureDto]',
        'external_id_infos': 'list[ExternalIdInfo]'
    }

    attribute_map = {
        'parental_rating_options': 'ParentalRatingOptions',
        'countries': 'Countries',
        'cultures': 'Cultures',
        'external_id_infos': 'ExternalIdInfos'
    }

    def __init__(self, parental_rating_options=None, countries=None, cultures=None, external_id_infos=None):  # noqa: E501
        """MetadataEditorInfo - a model defined in Swagger"""  # noqa: E501
        self._parental_rating_options = None
        self._countries = None
        self._cultures = None
        self._external_id_infos = None
        self.discriminator = None
        if parental_rating_options is not None:
            self.parental_rating_options = parental_rating_options
        if countries is not None:
            self.countries = countries
        if cultures is not None:
            self.cultures = cultures
        if external_id_infos is not None:
            self.external_id_infos = external_id_infos

    @property
    def parental_rating_options(self):
        """Gets the parental_rating_options of this MetadataEditorInfo.  # noqa: E501


        :return: The parental_rating_options of this MetadataEditorInfo.  # noqa: E501
        :rtype: list[ParentalRating]
        """
        return self._parental_rating_options

    @parental_rating_options.setter
    def parental_rating_options(self, parental_rating_options):
        """Sets the parental_rating_options of this MetadataEditorInfo.


        :param parental_rating_options: The parental_rating_options of this MetadataEditorInfo.  # noqa: E501
        :type: list[ParentalRating]
        """

        self._parental_rating_options = parental_rating_options

    @property
    def countries(self):
        """Gets the countries of this MetadataEditorInfo.  # noqa: E501


        :return: The countries of this MetadataEditorInfo.  # noqa: E501
        :rtype: list[GlobalizationCountryInfo]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this MetadataEditorInfo.


        :param countries: The countries of this MetadataEditorInfo.  # noqa: E501
        :type: list[GlobalizationCountryInfo]
        """

        self._countries = countries

    @property
    def cultures(self):
        """Gets the cultures of this MetadataEditorInfo.  # noqa: E501


        :return: The cultures of this MetadataEditorInfo.  # noqa: E501
        :rtype: list[GlobalizationCultureDto]
        """
        return self._cultures

    @cultures.setter
    def cultures(self, cultures):
        """Sets the cultures of this MetadataEditorInfo.


        :param cultures: The cultures of this MetadataEditorInfo.  # noqa: E501
        :type: list[GlobalizationCultureDto]
        """

        self._cultures = cultures

    @property
    def external_id_infos(self):
        """Gets the external_id_infos of this MetadataEditorInfo.  # noqa: E501


        :return: The external_id_infos of this MetadataEditorInfo.  # noqa: E501
        :rtype: list[ExternalIdInfo]
        """
        return self._external_id_infos

    @external_id_infos.setter
    def external_id_infos(self, external_id_infos):
        """Sets the external_id_infos of this MetadataEditorInfo.


        :param external_id_infos: The external_id_infos of this MetadataEditorInfo.  # noqa: E501
        :type: list[ExternalIdInfo]
        """

        self._external_id_infos = external_id_infos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataEditorInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataEditorInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
