# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class DisplayPreferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'sort_by': 'str',
        'custom_prefs': 'dict(str, str)',
        'sort_order': 'SortOrder',
        'client': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'sort_by': 'SortBy',
        'custom_prefs': 'CustomPrefs',
        'sort_order': 'SortOrder',
        'client': 'Client'
    }

    def __init__(self, id=None, sort_by=None, custom_prefs=None, sort_order=None, client=None):  # noqa: E501
        """DisplayPreferences - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._sort_by = None
        self._custom_prefs = None
        self._sort_order = None
        self._client = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if sort_by is not None:
            self.sort_by = sort_by
        if custom_prefs is not None:
            self.custom_prefs = custom_prefs
        if sort_order is not None:
            self.sort_order = sort_order
        if client is not None:
            self.client = client

    @property
    def id(self):
        """Gets the id of this DisplayPreferences.  # noqa: E501

        The user id.  # noqa: E501

        :return: The id of this DisplayPreferences.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DisplayPreferences.

        The user id.  # noqa: E501

        :param id: The id of this DisplayPreferences.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def sort_by(self):
        """Gets the sort_by of this DisplayPreferences.  # noqa: E501

        The sort by.  # noqa: E501

        :return: The sort_by of this DisplayPreferences.  # noqa: E501
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this DisplayPreferences.

        The sort by.  # noqa: E501

        :param sort_by: The sort_by of this DisplayPreferences.  # noqa: E501
        :type: str
        """

        self._sort_by = sort_by

    @property
    def custom_prefs(self):
        """Gets the custom_prefs of this DisplayPreferences.  # noqa: E501

        The custom prefs.  # noqa: E501

        :return: The custom_prefs of this DisplayPreferences.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_prefs

    @custom_prefs.setter
    def custom_prefs(self, custom_prefs):
        """Sets the custom_prefs of this DisplayPreferences.

        The custom prefs.  # noqa: E501

        :param custom_prefs: The custom_prefs of this DisplayPreferences.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_prefs = custom_prefs

    @property
    def sort_order(self):
        """Gets the sort_order of this DisplayPreferences.  # noqa: E501


        :return: The sort_order of this DisplayPreferences.  # noqa: E501
        :rtype: SortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this DisplayPreferences.


        :param sort_order: The sort_order of this DisplayPreferences.  # noqa: E501
        :type: SortOrder
        """

        self._sort_order = sort_order

    @property
    def client(self):
        """Gets the client of this DisplayPreferences.  # noqa: E501

        The client  # noqa: E501

        :return: The client of this DisplayPreferences.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this DisplayPreferences.

        The client  # noqa: E501

        :param client: The client of this DisplayPreferences.  # noqa: E501
        :type: str
        """

        self._client = client

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DisplayPreferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisplayPreferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
