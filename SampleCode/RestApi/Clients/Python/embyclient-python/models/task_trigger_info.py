# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class TaskTriggerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'time_of_day_ticks': 'int',
        'interval_ticks': 'int',
        'system_event': 'SystemEvent',
        'day_of_week': 'DayOfWeek',
        'max_runtime_ticks': 'int'
    }

    attribute_map = {
        'type': 'Type',
        'time_of_day_ticks': 'TimeOfDayTicks',
        'interval_ticks': 'IntervalTicks',
        'system_event': 'SystemEvent',
        'day_of_week': 'DayOfWeek',
        'max_runtime_ticks': 'MaxRuntimeTicks'
    }

    def __init__(self, type=None, time_of_day_ticks=None, interval_ticks=None, system_event=None, day_of_week=None, max_runtime_ticks=None):  # noqa: E501
        """TaskTriggerInfo - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._time_of_day_ticks = None
        self._interval_ticks = None
        self._system_event = None
        self._day_of_week = None
        self._max_runtime_ticks = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if time_of_day_ticks is not None:
            self.time_of_day_ticks = time_of_day_ticks
        if interval_ticks is not None:
            self.interval_ticks = interval_ticks
        if system_event is not None:
            self.system_event = system_event
        if day_of_week is not None:
            self.day_of_week = day_of_week
        if max_runtime_ticks is not None:
            self.max_runtime_ticks = max_runtime_ticks

    @property
    def type(self):
        """Gets the type of this TaskTriggerInfo.  # noqa: E501

        The type.  # noqa: E501

        :return: The type of this TaskTriggerInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TaskTriggerInfo.

        The type.  # noqa: E501

        :param type: The type of this TaskTriggerInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def time_of_day_ticks(self):
        """Gets the time_of_day_ticks of this TaskTriggerInfo.  # noqa: E501

        The time of day.  # noqa: E501

        :return: The time_of_day_ticks of this TaskTriggerInfo.  # noqa: E501
        :rtype: int
        """
        return self._time_of_day_ticks

    @time_of_day_ticks.setter
    def time_of_day_ticks(self, time_of_day_ticks):
        """Sets the time_of_day_ticks of this TaskTriggerInfo.

        The time of day.  # noqa: E501

        :param time_of_day_ticks: The time_of_day_ticks of this TaskTriggerInfo.  # noqa: E501
        :type: int
        """

        self._time_of_day_ticks = time_of_day_ticks

    @property
    def interval_ticks(self):
        """Gets the interval_ticks of this TaskTriggerInfo.  # noqa: E501

        The interval.  # noqa: E501

        :return: The interval_ticks of this TaskTriggerInfo.  # noqa: E501
        :rtype: int
        """
        return self._interval_ticks

    @interval_ticks.setter
    def interval_ticks(self, interval_ticks):
        """Sets the interval_ticks of this TaskTriggerInfo.

        The interval.  # noqa: E501

        :param interval_ticks: The interval_ticks of this TaskTriggerInfo.  # noqa: E501
        :type: int
        """

        self._interval_ticks = interval_ticks

    @property
    def system_event(self):
        """Gets the system_event of this TaskTriggerInfo.  # noqa: E501


        :return: The system_event of this TaskTriggerInfo.  # noqa: E501
        :rtype: SystemEvent
        """
        return self._system_event

    @system_event.setter
    def system_event(self, system_event):
        """Sets the system_event of this TaskTriggerInfo.


        :param system_event: The system_event of this TaskTriggerInfo.  # noqa: E501
        :type: SystemEvent
        """

        self._system_event = system_event

    @property
    def day_of_week(self):
        """Gets the day_of_week of this TaskTriggerInfo.  # noqa: E501


        :return: The day_of_week of this TaskTriggerInfo.  # noqa: E501
        :rtype: DayOfWeek
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this TaskTriggerInfo.


        :param day_of_week: The day_of_week of this TaskTriggerInfo.  # noqa: E501
        :type: DayOfWeek
        """

        self._day_of_week = day_of_week

    @property
    def max_runtime_ticks(self):
        """Gets the max_runtime_ticks of this TaskTriggerInfo.  # noqa: E501

        The maximum runtime ticks.  # noqa: E501

        :return: The max_runtime_ticks of this TaskTriggerInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_runtime_ticks

    @max_runtime_ticks.setter
    def max_runtime_ticks(self, max_runtime_ticks):
        """Sets the max_runtime_ticks of this TaskTriggerInfo.

        The maximum runtime ticks.  # noqa: E501

        :param max_runtime_ticks: The max_runtime_ticks of this TaskTriggerInfo.  # noqa: E501
        :type: int
        """

        self._max_runtime_ticks = max_runtime_ticks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskTriggerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskTriggerInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
