# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class AccessSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day_of_week': 'DynamicDayOfWeek',
        'start_hour': 'float',
        'end_hour': 'float'
    }

    attribute_map = {
        'day_of_week': 'DayOfWeek',
        'start_hour': 'StartHour',
        'end_hour': 'EndHour'
    }

    def __init__(self, day_of_week=None, start_hour=None, end_hour=None):  # noqa: E501
        """AccessSchedule - a model defined in Swagger"""  # noqa: E501
        self._day_of_week = None
        self._start_hour = None
        self._end_hour = None
        self.discriminator = None
        if day_of_week is not None:
            self.day_of_week = day_of_week
        if start_hour is not None:
            self.start_hour = start_hour
        if end_hour is not None:
            self.end_hour = end_hour

    @property
    def day_of_week(self):
        """Gets the day_of_week of this AccessSchedule.  # noqa: E501


        :return: The day_of_week of this AccessSchedule.  # noqa: E501
        :rtype: DynamicDayOfWeek
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this AccessSchedule.


        :param day_of_week: The day_of_week of this AccessSchedule.  # noqa: E501
        :type: DynamicDayOfWeek
        """

        self._day_of_week = day_of_week

    @property
    def start_hour(self):
        """Gets the start_hour of this AccessSchedule.  # noqa: E501

        The start hour.  # noqa: E501

        :return: The start_hour of this AccessSchedule.  # noqa: E501
        :rtype: float
        """
        return self._start_hour

    @start_hour.setter
    def start_hour(self, start_hour):
        """Sets the start_hour of this AccessSchedule.

        The start hour.  # noqa: E501

        :param start_hour: The start_hour of this AccessSchedule.  # noqa: E501
        :type: float
        """

        self._start_hour = start_hour

    @property
    def end_hour(self):
        """Gets the end_hour of this AccessSchedule.  # noqa: E501

        The end hour.  # noqa: E501

        :return: The end_hour of this AccessSchedule.  # noqa: E501
        :rtype: float
        """
        return self._end_hour

    @end_hour.setter
    def end_hour(self, end_hour):
        """Sets the end_hour of this AccessSchedule.

        The end hour.  # noqa: E501

        :param end_hour: The end_hour of this AccessSchedule.  # noqa: E501
        :type: float
        """

        self._end_hour = end_hour

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
