# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class UITabPageInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_id': 'str',
        'display_name': 'str',
        'plugin_id': 'str',
        'href': 'str',
        'nav_key': 'str',
        'index': 'int'
    }

    attribute_map = {
        'page_id': 'PageId',
        'display_name': 'DisplayName',
        'plugin_id': 'PluginId',
        'href': 'Href',
        'nav_key': 'NavKey',
        'index': 'Index'
    }

    def __init__(self, page_id=None, display_name=None, plugin_id=None, href=None, nav_key=None, index=None):  # noqa: E501
        """UITabPageInfo - a model defined in Swagger"""  # noqa: E501
        self._page_id = None
        self._display_name = None
        self._plugin_id = None
        self._href = None
        self._nav_key = None
        self._index = None
        self.discriminator = None
        if page_id is not None:
            self.page_id = page_id
        if display_name is not None:
            self.display_name = display_name
        if plugin_id is not None:
            self.plugin_id = plugin_id
        if href is not None:
            self.href = href
        if nav_key is not None:
            self.nav_key = nav_key
        if index is not None:
            self.index = index

    @property
    def page_id(self):
        """Gets the page_id of this UITabPageInfo.  # noqa: E501


        :return: The page_id of this UITabPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """Sets the page_id of this UITabPageInfo.


        :param page_id: The page_id of this UITabPageInfo.  # noqa: E501
        :type: str
        """

        self._page_id = page_id

    @property
    def display_name(self):
        """Gets the display_name of this UITabPageInfo.  # noqa: E501


        :return: The display_name of this UITabPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UITabPageInfo.


        :param display_name: The display_name of this UITabPageInfo.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def plugin_id(self):
        """Gets the plugin_id of this UITabPageInfo.  # noqa: E501


        :return: The plugin_id of this UITabPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this UITabPageInfo.


        :param plugin_id: The plugin_id of this UITabPageInfo.  # noqa: E501
        :type: str
        """

        self._plugin_id = plugin_id

    @property
    def href(self):
        """Gets the href of this UITabPageInfo.  # noqa: E501


        :return: The href of this UITabPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this UITabPageInfo.


        :param href: The href of this UITabPageInfo.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def nav_key(self):
        """Gets the nav_key of this UITabPageInfo.  # noqa: E501


        :return: The nav_key of this UITabPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._nav_key

    @nav_key.setter
    def nav_key(self, nav_key):
        """Sets the nav_key of this UITabPageInfo.


        :param nav_key: The nav_key of this UITabPageInfo.  # noqa: E501
        :type: str
        """

        self._nav_key = nav_key

    @property
    def index(self):
        """Gets the index of this UITabPageInfo.  # noqa: E501


        :return: The index of this UITabPageInfo.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this UITabPageInfo.


        :param index: The index of this UITabPageInfo.  # noqa: E501
        :type: int
        """

        self._index = index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UITabPageInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UITabPageInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
