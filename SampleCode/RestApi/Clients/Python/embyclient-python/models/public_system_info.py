# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class PublicSystemInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'local_address': 'str',
        'local_addresses': 'list[str]',
        'wan_address': 'str',
        'remote_addresses': 'list[str]',
        'server_name': 'str',
        'version': 'str',
        'id': 'str'
    }

    attribute_map = {
        'local_address': 'LocalAddress',
        'local_addresses': 'LocalAddresses',
        'wan_address': 'WanAddress',
        'remote_addresses': 'RemoteAddresses',
        'server_name': 'ServerName',
        'version': 'Version',
        'id': 'Id'
    }

    def __init__(self, local_address=None, local_addresses=None, wan_address=None, remote_addresses=None, server_name=None, version=None, id=None):  # noqa: E501
        """PublicSystemInfo - a model defined in Swagger"""  # noqa: E501
        self._local_address = None
        self._local_addresses = None
        self._wan_address = None
        self._remote_addresses = None
        self._server_name = None
        self._version = None
        self._id = None
        self.discriminator = None
        if local_address is not None:
            self.local_address = local_address
        if local_addresses is not None:
            self.local_addresses = local_addresses
        if wan_address is not None:
            self.wan_address = wan_address
        if remote_addresses is not None:
            self.remote_addresses = remote_addresses
        if server_name is not None:
            self.server_name = server_name
        if version is not None:
            self.version = version
        if id is not None:
            self.id = id

    @property
    def local_address(self):
        """Gets the local_address of this PublicSystemInfo.  # noqa: E501

        The local address.  # noqa: E501

        :return: The local_address of this PublicSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._local_address

    @local_address.setter
    def local_address(self, local_address):
        """Sets the local_address of this PublicSystemInfo.

        The local address.  # noqa: E501

        :param local_address: The local_address of this PublicSystemInfo.  # noqa: E501
        :type: str
        """

        self._local_address = local_address

    @property
    def local_addresses(self):
        """Gets the local_addresses of this PublicSystemInfo.  # noqa: E501


        :return: The local_addresses of this PublicSystemInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_addresses

    @local_addresses.setter
    def local_addresses(self, local_addresses):
        """Sets the local_addresses of this PublicSystemInfo.


        :param local_addresses: The local_addresses of this PublicSystemInfo.  # noqa: E501
        :type: list[str]
        """

        self._local_addresses = local_addresses

    @property
    def wan_address(self):
        """Gets the wan_address of this PublicSystemInfo.  # noqa: E501

        The wan address.  # noqa: E501

        :return: The wan_address of this PublicSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._wan_address

    @wan_address.setter
    def wan_address(self, wan_address):
        """Sets the wan_address of this PublicSystemInfo.

        The wan address.  # noqa: E501

        :param wan_address: The wan_address of this PublicSystemInfo.  # noqa: E501
        :type: str
        """

        self._wan_address = wan_address

    @property
    def remote_addresses(self):
        """Gets the remote_addresses of this PublicSystemInfo.  # noqa: E501


        :return: The remote_addresses of this PublicSystemInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._remote_addresses

    @remote_addresses.setter
    def remote_addresses(self, remote_addresses):
        """Sets the remote_addresses of this PublicSystemInfo.


        :param remote_addresses: The remote_addresses of this PublicSystemInfo.  # noqa: E501
        :type: list[str]
        """

        self._remote_addresses = remote_addresses

    @property
    def server_name(self):
        """Gets the server_name of this PublicSystemInfo.  # noqa: E501

        The name of the server.  # noqa: E501

        :return: The server_name of this PublicSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this PublicSystemInfo.

        The name of the server.  # noqa: E501

        :param server_name: The server_name of this PublicSystemInfo.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def version(self):
        """Gets the version of this PublicSystemInfo.  # noqa: E501

        The version.  # noqa: E501

        :return: The version of this PublicSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PublicSystemInfo.

        The version.  # noqa: E501

        :param version: The version of this PublicSystemInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def id(self):
        """Gets the id of this PublicSystemInfo.  # noqa: E501

        The id.  # noqa: E501

        :return: The id of this PublicSystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicSystemInfo.

        The id.  # noqa: E501

        :param id: The id of this PublicSystemInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicSystemInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicSystemInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
