# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class PluginsPluginInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'version': 'str',
        'configuration_file_name': 'str',
        'description': 'str',
        'id': 'str',
        'image_tag': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'version': 'Version',
        'configuration_file_name': 'ConfigurationFileName',
        'description': 'Description',
        'id': 'Id',
        'image_tag': 'ImageTag'
    }

    def __init__(self, name=None, version=None, configuration_file_name=None, description=None, id=None, image_tag=None):  # noqa: E501
        """PluginsPluginInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._version = None
        self._configuration_file_name = None
        self._description = None
        self._id = None
        self._image_tag = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if configuration_file_name is not None:
            self.configuration_file_name = configuration_file_name
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if image_tag is not None:
            self.image_tag = image_tag

    @property
    def name(self):
        """Gets the name of this PluginsPluginInfo.  # noqa: E501

        The name.  # noqa: E501

        :return: The name of this PluginsPluginInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PluginsPluginInfo.

        The name.  # noqa: E501

        :param name: The name of this PluginsPluginInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this PluginsPluginInfo.  # noqa: E501

        The version.  # noqa: E501

        :return: The version of this PluginsPluginInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PluginsPluginInfo.

        The version.  # noqa: E501

        :param version: The version of this PluginsPluginInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def configuration_file_name(self):
        """Gets the configuration_file_name of this PluginsPluginInfo.  # noqa: E501

        The name of the configuration file.  # noqa: E501

        :return: The configuration_file_name of this PluginsPluginInfo.  # noqa: E501
        :rtype: str
        """
        return self._configuration_file_name

    @configuration_file_name.setter
    def configuration_file_name(self, configuration_file_name):
        """Sets the configuration_file_name of this PluginsPluginInfo.

        The name of the configuration file.  # noqa: E501

        :param configuration_file_name: The configuration_file_name of this PluginsPluginInfo.  # noqa: E501
        :type: str
        """

        self._configuration_file_name = configuration_file_name

    @property
    def description(self):
        """Gets the description of this PluginsPluginInfo.  # noqa: E501

        The description.  # noqa: E501

        :return: The description of this PluginsPluginInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PluginsPluginInfo.

        The description.  # noqa: E501

        :param description: The description of this PluginsPluginInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this PluginsPluginInfo.  # noqa: E501

        The unique id.  # noqa: E501

        :return: The id of this PluginsPluginInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PluginsPluginInfo.

        The unique id.  # noqa: E501

        :param id: The id of this PluginsPluginInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image_tag(self):
        """Gets the image_tag of this PluginsPluginInfo.  # noqa: E501

        The image URL.  # noqa: E501

        :return: The image_tag of this PluginsPluginInfo.  # noqa: E501
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this PluginsPluginInfo.

        The image URL.  # noqa: E501

        :param image_tag: The image_tag of this PluginsPluginInfo.  # noqa: E501
        :type: str
        """

        self._image_tag = image_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PluginsPluginInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PluginsPluginInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
