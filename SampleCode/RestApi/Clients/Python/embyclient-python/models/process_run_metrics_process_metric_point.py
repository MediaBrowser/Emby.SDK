# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class ProcessRunMetricsProcessMetricPoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'str',
        'cpu_percent': 'float',
        'virtual_memory': 'float',
        'working_set': 'float'
    }

    attribute_map = {
        'time': 'Time',
        'cpu_percent': 'CpuPercent',
        'virtual_memory': 'VirtualMemory',
        'working_set': 'WorkingSet'
    }

    def __init__(self, time=None, cpu_percent=None, virtual_memory=None, working_set=None):  # noqa: E501
        """ProcessRunMetricsProcessMetricPoint - a model defined in Swagger"""  # noqa: E501
        self._time = None
        self._cpu_percent = None
        self._virtual_memory = None
        self._working_set = None
        self.discriminator = None
        if time is not None:
            self.time = time
        if cpu_percent is not None:
            self.cpu_percent = cpu_percent
        if virtual_memory is not None:
            self.virtual_memory = virtual_memory
        if working_set is not None:
            self.working_set = working_set

    @property
    def time(self):
        """Gets the time of this ProcessRunMetricsProcessMetricPoint.  # noqa: E501

        The time.  # noqa: E501

        :return: The time of this ProcessRunMetricsProcessMetricPoint.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ProcessRunMetricsProcessMetricPoint.

        The time.  # noqa: E501

        :param time: The time of this ProcessRunMetricsProcessMetricPoint.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def cpu_percent(self):
        """Gets the cpu_percent of this ProcessRunMetricsProcessMetricPoint.  # noqa: E501

        The cpu percent.  # noqa: E501

        :return: The cpu_percent of this ProcessRunMetricsProcessMetricPoint.  # noqa: E501
        :rtype: float
        """
        return self._cpu_percent

    @cpu_percent.setter
    def cpu_percent(self, cpu_percent):
        """Sets the cpu_percent of this ProcessRunMetricsProcessMetricPoint.

        The cpu percent.  # noqa: E501

        :param cpu_percent: The cpu_percent of this ProcessRunMetricsProcessMetricPoint.  # noqa: E501
        :type: float
        """

        self._cpu_percent = cpu_percent

    @property
    def virtual_memory(self):
        """Gets the virtual_memory of this ProcessRunMetricsProcessMetricPoint.  # noqa: E501

        The virtual memory.  # noqa: E501

        :return: The virtual_memory of this ProcessRunMetricsProcessMetricPoint.  # noqa: E501
        :rtype: float
        """
        return self._virtual_memory

    @virtual_memory.setter
    def virtual_memory(self, virtual_memory):
        """Sets the virtual_memory of this ProcessRunMetricsProcessMetricPoint.

        The virtual memory.  # noqa: E501

        :param virtual_memory: The virtual_memory of this ProcessRunMetricsProcessMetricPoint.  # noqa: E501
        :type: float
        """

        self._virtual_memory = virtual_memory

    @property
    def working_set(self):
        """Gets the working_set of this ProcessRunMetricsProcessMetricPoint.  # noqa: E501

        The working set.  # noqa: E501

        :return: The working_set of this ProcessRunMetricsProcessMetricPoint.  # noqa: E501
        :rtype: float
        """
        return self._working_set

    @working_set.setter
    def working_set(self, working_set):
        """Sets the working_set of this ProcessRunMetricsProcessMetricPoint.

        The working set.  # noqa: E501

        :param working_set: The working_set of this ProcessRunMetricsProcessMetricPoint.  # noqa: E501
        :type: float
        """

        self._working_set = working_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessRunMetricsProcessMetricPoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessRunMetricsProcessMetricPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
