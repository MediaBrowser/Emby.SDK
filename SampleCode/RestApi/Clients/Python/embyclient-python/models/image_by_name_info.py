# coding: utf-8

"""
    Emby REST API
"""

import pprint
import re  # noqa: F401

import six

class ImageByNameInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'theme': 'str',
        'context': 'str',
        'file_length': 'int',
        'format': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'theme': 'Theme',
        'context': 'Context',
        'file_length': 'FileLength',
        'format': 'Format'
    }

    def __init__(self, name=None, theme=None, context=None, file_length=None, format=None):  # noqa: E501
        """ImageByNameInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._theme = None
        self._context = None
        self._file_length = None
        self._format = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if theme is not None:
            self.theme = theme
        if context is not None:
            self.context = context
        if file_length is not None:
            self.file_length = file_length
        if format is not None:
            self.format = format

    @property
    def name(self):
        """Gets the name of this ImageByNameInfo.  # noqa: E501


        :return: The name of this ImageByNameInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImageByNameInfo.


        :param name: The name of this ImageByNameInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def theme(self):
        """Gets the theme of this ImageByNameInfo.  # noqa: E501


        :return: The theme of this ImageByNameInfo.  # noqa: E501
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this ImageByNameInfo.


        :param theme: The theme of this ImageByNameInfo.  # noqa: E501
        :type: str
        """

        self._theme = theme

    @property
    def context(self):
        """Gets the context of this ImageByNameInfo.  # noqa: E501


        :return: The context of this ImageByNameInfo.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ImageByNameInfo.


        :param context: The context of this ImageByNameInfo.  # noqa: E501
        :type: str
        """

        self._context = context

    @property
    def file_length(self):
        """Gets the file_length of this ImageByNameInfo.  # noqa: E501


        :return: The file_length of this ImageByNameInfo.  # noqa: E501
        :rtype: int
        """
        return self._file_length

    @file_length.setter
    def file_length(self, file_length):
        """Sets the file_length of this ImageByNameInfo.


        :param file_length: The file_length of this ImageByNameInfo.  # noqa: E501
        :type: int
        """

        self._file_length = file_length

    @property
    def format(self):
        """Gets the format of this ImageByNameInfo.  # noqa: E501


        :return: The format of this ImageByNameInfo.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ImageByNameInfo.


        :param format: The format of this ImageByNameInfo.  # noqa: E501
        :type: str
        """

        self._format = format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageByNameInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageByNameInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
