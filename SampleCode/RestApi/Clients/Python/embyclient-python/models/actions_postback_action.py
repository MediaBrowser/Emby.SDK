# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class ActionsPostbackAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_editor_id': 'str',
        'postback_command_id': 'str',
        'command_parameter_property_id': 'str'
    }

    attribute_map = {
        'target_editor_id': 'TargetEditorId',
        'postback_command_id': 'PostbackCommandId',
        'command_parameter_property_id': 'CommandParameterPropertyId'
    }

    def __init__(self, target_editor_id=None, postback_command_id=None, command_parameter_property_id=None):  # noqa: E501
        """ActionsPostbackAction - a model defined in Swagger"""  # noqa: E501
        self._target_editor_id = None
        self._postback_command_id = None
        self._command_parameter_property_id = None
        self.discriminator = None
        if target_editor_id is not None:
            self.target_editor_id = target_editor_id
        if postback_command_id is not None:
            self.postback_command_id = postback_command_id
        if command_parameter_property_id is not None:
            self.command_parameter_property_id = command_parameter_property_id

    @property
    def target_editor_id(self):
        """Gets the target_editor_id of this ActionsPostbackAction.  # noqa: E501


        :return: The target_editor_id of this ActionsPostbackAction.  # noqa: E501
        :rtype: str
        """
        return self._target_editor_id

    @target_editor_id.setter
    def target_editor_id(self, target_editor_id):
        """Sets the target_editor_id of this ActionsPostbackAction.


        :param target_editor_id: The target_editor_id of this ActionsPostbackAction.  # noqa: E501
        :type: str
        """

        self._target_editor_id = target_editor_id

    @property
    def postback_command_id(self):
        """Gets the postback_command_id of this ActionsPostbackAction.  # noqa: E501


        :return: The postback_command_id of this ActionsPostbackAction.  # noqa: E501
        :rtype: str
        """
        return self._postback_command_id

    @postback_command_id.setter
    def postback_command_id(self, postback_command_id):
        """Sets the postback_command_id of this ActionsPostbackAction.


        :param postback_command_id: The postback_command_id of this ActionsPostbackAction.  # noqa: E501
        :type: str
        """

        self._postback_command_id = postback_command_id

    @property
    def command_parameter_property_id(self):
        """Gets the command_parameter_property_id of this ActionsPostbackAction.  # noqa: E501


        :return: The command_parameter_property_id of this ActionsPostbackAction.  # noqa: E501
        :rtype: str
        """
        return self._command_parameter_property_id

    @command_parameter_property_id.setter
    def command_parameter_property_id(self, command_parameter_property_id):
        """Sets the command_parameter_property_id of this ActionsPostbackAction.


        :param command_parameter_property_id: The command_parameter_property_id of this ActionsPostbackAction.  # noqa: E501
        :type: str
        """

        self._command_parameter_property_id = command_parameter_property_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionsPostbackAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionsPostbackAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
