# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class DlnaProfilesDeviceIdentification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'friendly_name': 'str',
        'model_number': 'str',
        'serial_number': 'str',
        'model_name': 'str',
        'model_description': 'str',
        'device_description': 'str',
        'model_url': 'str',
        'manufacturer': 'str',
        'manufacturer_url': 'str',
        'headers': 'list[DlnaProfilesHttpHeaderInfo]'
    }

    attribute_map = {
        'friendly_name': 'FriendlyName',
        'model_number': 'ModelNumber',
        'serial_number': 'SerialNumber',
        'model_name': 'ModelName',
        'model_description': 'ModelDescription',
        'device_description': 'DeviceDescription',
        'model_url': 'ModelUrl',
        'manufacturer': 'Manufacturer',
        'manufacturer_url': 'ManufacturerUrl',
        'headers': 'Headers'
    }

    def __init__(self, friendly_name=None, model_number=None, serial_number=None, model_name=None, model_description=None, device_description=None, model_url=None, manufacturer=None, manufacturer_url=None, headers=None):  # noqa: E501
        """DlnaProfilesDeviceIdentification - a model defined in Swagger"""  # noqa: E501
        self._friendly_name = None
        self._model_number = None
        self._serial_number = None
        self._model_name = None
        self._model_description = None
        self._device_description = None
        self._model_url = None
        self._manufacturer = None
        self._manufacturer_url = None
        self._headers = None
        self.discriminator = None
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if model_number is not None:
            self.model_number = model_number
        if serial_number is not None:
            self.serial_number = serial_number
        if model_name is not None:
            self.model_name = model_name
        if model_description is not None:
            self.model_description = model_description
        if device_description is not None:
            self.device_description = device_description
        if model_url is not None:
            self.model_url = model_url
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if manufacturer_url is not None:
            self.manufacturer_url = manufacturer_url
        if headers is not None:
            self.headers = headers

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DlnaProfilesDeviceIdentification.  # noqa: E501


        :return: The friendly_name of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DlnaProfilesDeviceIdentification.


        :param friendly_name: The friendly_name of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def model_number(self):
        """Gets the model_number of this DlnaProfilesDeviceIdentification.  # noqa: E501


        :return: The model_number of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this DlnaProfilesDeviceIdentification.


        :param model_number: The model_number of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :type: str
        """

        self._model_number = model_number

    @property
    def serial_number(self):
        """Gets the serial_number of this DlnaProfilesDeviceIdentification.  # noqa: E501


        :return: The serial_number of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DlnaProfilesDeviceIdentification.


        :param serial_number: The serial_number of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def model_name(self):
        """Gets the model_name of this DlnaProfilesDeviceIdentification.  # noqa: E501


        :return: The model_name of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this DlnaProfilesDeviceIdentification.


        :param model_name: The model_name of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def model_description(self):
        """Gets the model_description of this DlnaProfilesDeviceIdentification.  # noqa: E501


        :return: The model_description of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :rtype: str
        """
        return self._model_description

    @model_description.setter
    def model_description(self, model_description):
        """Sets the model_description of this DlnaProfilesDeviceIdentification.


        :param model_description: The model_description of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :type: str
        """

        self._model_description = model_description

    @property
    def device_description(self):
        """Gets the device_description of this DlnaProfilesDeviceIdentification.  # noqa: E501


        :return: The device_description of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :rtype: str
        """
        return self._device_description

    @device_description.setter
    def device_description(self, device_description):
        """Sets the device_description of this DlnaProfilesDeviceIdentification.


        :param device_description: The device_description of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :type: str
        """

        self._device_description = device_description

    @property
    def model_url(self):
        """Gets the model_url of this DlnaProfilesDeviceIdentification.  # noqa: E501


        :return: The model_url of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :rtype: str
        """
        return self._model_url

    @model_url.setter
    def model_url(self, model_url):
        """Sets the model_url of this DlnaProfilesDeviceIdentification.


        :param model_url: The model_url of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :type: str
        """

        self._model_url = model_url

    @property
    def manufacturer(self):
        """Gets the manufacturer of this DlnaProfilesDeviceIdentification.  # noqa: E501


        :return: The manufacturer of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this DlnaProfilesDeviceIdentification.


        :param manufacturer: The manufacturer of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def manufacturer_url(self):
        """Gets the manufacturer_url of this DlnaProfilesDeviceIdentification.  # noqa: E501


        :return: The manufacturer_url of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_url

    @manufacturer_url.setter
    def manufacturer_url(self, manufacturer_url):
        """Sets the manufacturer_url of this DlnaProfilesDeviceIdentification.


        :param manufacturer_url: The manufacturer_url of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :type: str
        """

        self._manufacturer_url = manufacturer_url

    @property
    def headers(self):
        """Gets the headers of this DlnaProfilesDeviceIdentification.  # noqa: E501


        :return: The headers of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :rtype: list[DlnaProfilesHttpHeaderInfo]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this DlnaProfilesDeviceIdentification.


        :param headers: The headers of this DlnaProfilesDeviceIdentification.  # noqa: E501
        :type: list[DlnaProfilesHttpHeaderInfo]
        """

        self._headers = headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DlnaProfilesDeviceIdentification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DlnaProfilesDeviceIdentification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
