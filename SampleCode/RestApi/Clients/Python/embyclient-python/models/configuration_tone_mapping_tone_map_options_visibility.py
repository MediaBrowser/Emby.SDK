# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class ConfigurationToneMappingToneMapOptionsVisibility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'show_advanced': 'bool',
        'is_software_tone_mapping_available': 'bool',
        'is_any_hardware_tone_mapping_available': 'bool',
        'show_nvidia_options': 'bool',
        'show_quick_sync_options': 'bool',
        'show_vaapi_options': 'bool',
        'is_open_cl_available': 'bool',
        'is_open_cl_super_t_available': 'bool',
        'is_vaapi_native_available': 'bool',
        'is_quick_sync_native_available': 'bool',
        'operating_system': 'OperatingSystem'
    }

    attribute_map = {
        'show_advanced': 'ShowAdvanced',
        'is_software_tone_mapping_available': 'IsSoftwareToneMappingAvailable',
        'is_any_hardware_tone_mapping_available': 'IsAnyHardwareToneMappingAvailable',
        'show_nvidia_options': 'ShowNvidiaOptions',
        'show_quick_sync_options': 'ShowQuickSyncOptions',
        'show_vaapi_options': 'ShowVaapiOptions',
        'is_open_cl_available': 'IsOpenClAvailable',
        'is_open_cl_super_t_available': 'IsOpenClSuperTAvailable',
        'is_vaapi_native_available': 'IsVaapiNativeAvailable',
        'is_quick_sync_native_available': 'IsQuickSyncNativeAvailable',
        'operating_system': 'OperatingSystem'
    }

    def __init__(self, show_advanced=None, is_software_tone_mapping_available=None, is_any_hardware_tone_mapping_available=None, show_nvidia_options=None, show_quick_sync_options=None, show_vaapi_options=None, is_open_cl_available=None, is_open_cl_super_t_available=None, is_vaapi_native_available=None, is_quick_sync_native_available=None, operating_system=None):  # noqa: E501
        """ConfigurationToneMappingToneMapOptionsVisibility - a model defined in Swagger"""  # noqa: E501
        self._show_advanced = None
        self._is_software_tone_mapping_available = None
        self._is_any_hardware_tone_mapping_available = None
        self._show_nvidia_options = None
        self._show_quick_sync_options = None
        self._show_vaapi_options = None
        self._is_open_cl_available = None
        self._is_open_cl_super_t_available = None
        self._is_vaapi_native_available = None
        self._is_quick_sync_native_available = None
        self._operating_system = None
        self.discriminator = None
        if show_advanced is not None:
            self.show_advanced = show_advanced
        if is_software_tone_mapping_available is not None:
            self.is_software_tone_mapping_available = is_software_tone_mapping_available
        if is_any_hardware_tone_mapping_available is not None:
            self.is_any_hardware_tone_mapping_available = is_any_hardware_tone_mapping_available
        if show_nvidia_options is not None:
            self.show_nvidia_options = show_nvidia_options
        if show_quick_sync_options is not None:
            self.show_quick_sync_options = show_quick_sync_options
        if show_vaapi_options is not None:
            self.show_vaapi_options = show_vaapi_options
        if is_open_cl_available is not None:
            self.is_open_cl_available = is_open_cl_available
        if is_open_cl_super_t_available is not None:
            self.is_open_cl_super_t_available = is_open_cl_super_t_available
        if is_vaapi_native_available is not None:
            self.is_vaapi_native_available = is_vaapi_native_available
        if is_quick_sync_native_available is not None:
            self.is_quick_sync_native_available = is_quick_sync_native_available
        if operating_system is not None:
            self.operating_system = operating_system

    @property
    def show_advanced(self):
        """Gets the show_advanced of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501


        :return: The show_advanced of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :rtype: bool
        """
        return self._show_advanced

    @show_advanced.setter
    def show_advanced(self, show_advanced):
        """Sets the show_advanced of this ConfigurationToneMappingToneMapOptionsVisibility.


        :param show_advanced: The show_advanced of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :type: bool
        """

        self._show_advanced = show_advanced

    @property
    def is_software_tone_mapping_available(self):
        """Gets the is_software_tone_mapping_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501


        :return: The is_software_tone_mapping_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :rtype: bool
        """
        return self._is_software_tone_mapping_available

    @is_software_tone_mapping_available.setter
    def is_software_tone_mapping_available(self, is_software_tone_mapping_available):
        """Sets the is_software_tone_mapping_available of this ConfigurationToneMappingToneMapOptionsVisibility.


        :param is_software_tone_mapping_available: The is_software_tone_mapping_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :type: bool
        """

        self._is_software_tone_mapping_available = is_software_tone_mapping_available

    @property
    def is_any_hardware_tone_mapping_available(self):
        """Gets the is_any_hardware_tone_mapping_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501


        :return: The is_any_hardware_tone_mapping_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :rtype: bool
        """
        return self._is_any_hardware_tone_mapping_available

    @is_any_hardware_tone_mapping_available.setter
    def is_any_hardware_tone_mapping_available(self, is_any_hardware_tone_mapping_available):
        """Sets the is_any_hardware_tone_mapping_available of this ConfigurationToneMappingToneMapOptionsVisibility.


        :param is_any_hardware_tone_mapping_available: The is_any_hardware_tone_mapping_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :type: bool
        """

        self._is_any_hardware_tone_mapping_available = is_any_hardware_tone_mapping_available

    @property
    def show_nvidia_options(self):
        """Gets the show_nvidia_options of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501


        :return: The show_nvidia_options of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :rtype: bool
        """
        return self._show_nvidia_options

    @show_nvidia_options.setter
    def show_nvidia_options(self, show_nvidia_options):
        """Sets the show_nvidia_options of this ConfigurationToneMappingToneMapOptionsVisibility.


        :param show_nvidia_options: The show_nvidia_options of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :type: bool
        """

        self._show_nvidia_options = show_nvidia_options

    @property
    def show_quick_sync_options(self):
        """Gets the show_quick_sync_options of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501


        :return: The show_quick_sync_options of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :rtype: bool
        """
        return self._show_quick_sync_options

    @show_quick_sync_options.setter
    def show_quick_sync_options(self, show_quick_sync_options):
        """Sets the show_quick_sync_options of this ConfigurationToneMappingToneMapOptionsVisibility.


        :param show_quick_sync_options: The show_quick_sync_options of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :type: bool
        """

        self._show_quick_sync_options = show_quick_sync_options

    @property
    def show_vaapi_options(self):
        """Gets the show_vaapi_options of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501


        :return: The show_vaapi_options of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :rtype: bool
        """
        return self._show_vaapi_options

    @show_vaapi_options.setter
    def show_vaapi_options(self, show_vaapi_options):
        """Sets the show_vaapi_options of this ConfigurationToneMappingToneMapOptionsVisibility.


        :param show_vaapi_options: The show_vaapi_options of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :type: bool
        """

        self._show_vaapi_options = show_vaapi_options

    @property
    def is_open_cl_available(self):
        """Gets the is_open_cl_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501


        :return: The is_open_cl_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :rtype: bool
        """
        return self._is_open_cl_available

    @is_open_cl_available.setter
    def is_open_cl_available(self, is_open_cl_available):
        """Sets the is_open_cl_available of this ConfigurationToneMappingToneMapOptionsVisibility.


        :param is_open_cl_available: The is_open_cl_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :type: bool
        """

        self._is_open_cl_available = is_open_cl_available

    @property
    def is_open_cl_super_t_available(self):
        """Gets the is_open_cl_super_t_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501


        :return: The is_open_cl_super_t_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :rtype: bool
        """
        return self._is_open_cl_super_t_available

    @is_open_cl_super_t_available.setter
    def is_open_cl_super_t_available(self, is_open_cl_super_t_available):
        """Sets the is_open_cl_super_t_available of this ConfigurationToneMappingToneMapOptionsVisibility.


        :param is_open_cl_super_t_available: The is_open_cl_super_t_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :type: bool
        """

        self._is_open_cl_super_t_available = is_open_cl_super_t_available

    @property
    def is_vaapi_native_available(self):
        """Gets the is_vaapi_native_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501


        :return: The is_vaapi_native_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :rtype: bool
        """
        return self._is_vaapi_native_available

    @is_vaapi_native_available.setter
    def is_vaapi_native_available(self, is_vaapi_native_available):
        """Sets the is_vaapi_native_available of this ConfigurationToneMappingToneMapOptionsVisibility.


        :param is_vaapi_native_available: The is_vaapi_native_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :type: bool
        """

        self._is_vaapi_native_available = is_vaapi_native_available

    @property
    def is_quick_sync_native_available(self):
        """Gets the is_quick_sync_native_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501


        :return: The is_quick_sync_native_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :rtype: bool
        """
        return self._is_quick_sync_native_available

    @is_quick_sync_native_available.setter
    def is_quick_sync_native_available(self, is_quick_sync_native_available):
        """Sets the is_quick_sync_native_available of this ConfigurationToneMappingToneMapOptionsVisibility.


        :param is_quick_sync_native_available: The is_quick_sync_native_available of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :type: bool
        """

        self._is_quick_sync_native_available = is_quick_sync_native_available

    @property
    def operating_system(self):
        """Gets the operating_system of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501


        :return: The operating_system of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :rtype: OperatingSystem
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this ConfigurationToneMappingToneMapOptionsVisibility.


        :param operating_system: The operating_system of this ConfigurationToneMappingToneMapOptionsVisibility.  # noqa: E501
        :type: OperatingSystem
        """

        self._operating_system = operating_system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigurationToneMappingToneMapOptionsVisibility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigurationToneMappingToneMapOptionsVisibility):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
