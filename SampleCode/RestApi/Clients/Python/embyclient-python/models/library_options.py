# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class LibraryOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_archive_media_files': 'bool',
        'enable_photos': 'bool',
        'enable_realtime_monitor': 'bool',
        'enable_marker_detection': 'bool',
        'enable_marker_detection_during_library_scan': 'bool',
        'intro_detection_fingerprint_length': 'int',
        'enable_chapter_image_extraction': 'bool',
        'extract_chapter_images_during_library_scan': 'bool',
        'download_images_in_advance': 'bool',
        'cache_images': 'bool',
        'path_infos': 'list[MediaPathInfo]',
        'ignore_hidden_files': 'bool',
        'ignore_file_extensions': 'list[str]',
        'save_local_metadata': 'bool',
        'save_metadata_hidden': 'bool',
        'save_local_thumbnail_sets': 'bool',
        'import_playlists': 'bool',
        'enable_automatic_series_grouping': 'bool',
        'share_embedded_music_album_images': 'bool',
        'enable_embedded_titles': 'bool',
        'enable_audio_resume': 'bool',
        'auto_generate_chapters': 'bool',
        'automatic_refresh_interval_days': 'int',
        'placeholder_metadata_refresh_interval_days': 'int',
        'preferred_metadata_language': 'str',
        'preferred_image_language': 'str',
        'content_type': 'str',
        'metadata_country_code': 'str',
        'metadata_savers': 'list[str]',
        'disabled_local_metadata_readers': 'list[str]',
        'local_metadata_reader_order': 'list[str]',
        'disabled_lyrics_fetchers': 'list[str]',
        'save_lyrics_with_media': 'bool',
        'lyrics_download_max_age_days': 'int',
        'lyrics_fetcher_order': 'list[str]',
        'lyrics_download_languages': 'list[str]',
        'disabled_subtitle_fetchers': 'list[str]',
        'subtitle_fetcher_order': 'list[str]',
        'skip_subtitles_if_embedded_subtitles_present': 'bool',
        'skip_subtitles_if_audio_track_matches': 'bool',
        'subtitle_download_languages': 'list[str]',
        'subtitle_download_max_age_days': 'int',
        'require_perfect_subtitle_match': 'bool',
        'save_subtitles_with_media': 'bool',
        'forced_subtitles_only': 'bool',
        'hearing_impaired_subtitles_only': 'bool',
        'type_options': 'list[TypeOptions]',
        'collapse_single_item_folders': 'bool',
        'enable_adult_metadata': 'bool',
        'import_collections': 'bool',
        'min_collection_items': 'int',
        'music_folder_structure': 'str',
        'min_resume_pct': 'int',
        'max_resume_pct': 'int',
        'min_resume_duration_seconds': 'int',
        'thumbnail_images_interval_seconds': 'int',
        'sample_ignore_size': 'int'
    }

    attribute_map = {
        'enable_archive_media_files': 'EnableArchiveMediaFiles',
        'enable_photos': 'EnablePhotos',
        'enable_realtime_monitor': 'EnableRealtimeMonitor',
        'enable_marker_detection': 'EnableMarkerDetection',
        'enable_marker_detection_during_library_scan': 'EnableMarkerDetectionDuringLibraryScan',
        'intro_detection_fingerprint_length': 'IntroDetectionFingerprintLength',
        'enable_chapter_image_extraction': 'EnableChapterImageExtraction',
        'extract_chapter_images_during_library_scan': 'ExtractChapterImagesDuringLibraryScan',
        'download_images_in_advance': 'DownloadImagesInAdvance',
        'cache_images': 'CacheImages',
        'path_infos': 'PathInfos',
        'ignore_hidden_files': 'IgnoreHiddenFiles',
        'ignore_file_extensions': 'IgnoreFileExtensions',
        'save_local_metadata': 'SaveLocalMetadata',
        'save_metadata_hidden': 'SaveMetadataHidden',
        'save_local_thumbnail_sets': 'SaveLocalThumbnailSets',
        'import_playlists': 'ImportPlaylists',
        'enable_automatic_series_grouping': 'EnableAutomaticSeriesGrouping',
        'share_embedded_music_album_images': 'ShareEmbeddedMusicAlbumImages',
        'enable_embedded_titles': 'EnableEmbeddedTitles',
        'enable_audio_resume': 'EnableAudioResume',
        'auto_generate_chapters': 'AutoGenerateChapters',
        'automatic_refresh_interval_days': 'AutomaticRefreshIntervalDays',
        'placeholder_metadata_refresh_interval_days': 'PlaceholderMetadataRefreshIntervalDays',
        'preferred_metadata_language': 'PreferredMetadataLanguage',
        'preferred_image_language': 'PreferredImageLanguage',
        'content_type': 'ContentType',
        'metadata_country_code': 'MetadataCountryCode',
        'metadata_savers': 'MetadataSavers',
        'disabled_local_metadata_readers': 'DisabledLocalMetadataReaders',
        'local_metadata_reader_order': 'LocalMetadataReaderOrder',
        'disabled_lyrics_fetchers': 'DisabledLyricsFetchers',
        'save_lyrics_with_media': 'SaveLyricsWithMedia',
        'lyrics_download_max_age_days': 'LyricsDownloadMaxAgeDays',
        'lyrics_fetcher_order': 'LyricsFetcherOrder',
        'lyrics_download_languages': 'LyricsDownloadLanguages',
        'disabled_subtitle_fetchers': 'DisabledSubtitleFetchers',
        'subtitle_fetcher_order': 'SubtitleFetcherOrder',
        'skip_subtitles_if_embedded_subtitles_present': 'SkipSubtitlesIfEmbeddedSubtitlesPresent',
        'skip_subtitles_if_audio_track_matches': 'SkipSubtitlesIfAudioTrackMatches',
        'subtitle_download_languages': 'SubtitleDownloadLanguages',
        'subtitle_download_max_age_days': 'SubtitleDownloadMaxAgeDays',
        'require_perfect_subtitle_match': 'RequirePerfectSubtitleMatch',
        'save_subtitles_with_media': 'SaveSubtitlesWithMedia',
        'forced_subtitles_only': 'ForcedSubtitlesOnly',
        'hearing_impaired_subtitles_only': 'HearingImpairedSubtitlesOnly',
        'type_options': 'TypeOptions',
        'collapse_single_item_folders': 'CollapseSingleItemFolders',
        'enable_adult_metadata': 'EnableAdultMetadata',
        'import_collections': 'ImportCollections',
        'min_collection_items': 'MinCollectionItems',
        'music_folder_structure': 'MusicFolderStructure',
        'min_resume_pct': 'MinResumePct',
        'max_resume_pct': 'MaxResumePct',
        'min_resume_duration_seconds': 'MinResumeDurationSeconds',
        'thumbnail_images_interval_seconds': 'ThumbnailImagesIntervalSeconds',
        'sample_ignore_size': 'SampleIgnoreSize'
    }

    def __init__(self, enable_archive_media_files=None, enable_photos=None, enable_realtime_monitor=None, enable_marker_detection=None, enable_marker_detection_during_library_scan=None, intro_detection_fingerprint_length=None, enable_chapter_image_extraction=None, extract_chapter_images_during_library_scan=None, download_images_in_advance=None, cache_images=None, path_infos=None, ignore_hidden_files=None, ignore_file_extensions=None, save_local_metadata=None, save_metadata_hidden=None, save_local_thumbnail_sets=None, import_playlists=None, enable_automatic_series_grouping=None, share_embedded_music_album_images=None, enable_embedded_titles=None, enable_audio_resume=None, auto_generate_chapters=None, automatic_refresh_interval_days=None, placeholder_metadata_refresh_interval_days=None, preferred_metadata_language=None, preferred_image_language=None, content_type=None, metadata_country_code=None, metadata_savers=None, disabled_local_metadata_readers=None, local_metadata_reader_order=None, disabled_lyrics_fetchers=None, save_lyrics_with_media=None, lyrics_download_max_age_days=None, lyrics_fetcher_order=None, lyrics_download_languages=None, disabled_subtitle_fetchers=None, subtitle_fetcher_order=None, skip_subtitles_if_embedded_subtitles_present=None, skip_subtitles_if_audio_track_matches=None, subtitle_download_languages=None, subtitle_download_max_age_days=None, require_perfect_subtitle_match=None, save_subtitles_with_media=None, forced_subtitles_only=None, hearing_impaired_subtitles_only=None, type_options=None, collapse_single_item_folders=None, enable_adult_metadata=None, import_collections=None, min_collection_items=None, music_folder_structure=None, min_resume_pct=None, max_resume_pct=None, min_resume_duration_seconds=None, thumbnail_images_interval_seconds=None, sample_ignore_size=None):  # noqa: E501
        """LibraryOptions - a model defined in Swagger"""  # noqa: E501
        self._enable_archive_media_files = None
        self._enable_photos = None
        self._enable_realtime_monitor = None
        self._enable_marker_detection = None
        self._enable_marker_detection_during_library_scan = None
        self._intro_detection_fingerprint_length = None
        self._enable_chapter_image_extraction = None
        self._extract_chapter_images_during_library_scan = None
        self._download_images_in_advance = None
        self._cache_images = None
        self._path_infos = None
        self._ignore_hidden_files = None
        self._ignore_file_extensions = None
        self._save_local_metadata = None
        self._save_metadata_hidden = None
        self._save_local_thumbnail_sets = None
        self._import_playlists = None
        self._enable_automatic_series_grouping = None
        self._share_embedded_music_album_images = None
        self._enable_embedded_titles = None
        self._enable_audio_resume = None
        self._auto_generate_chapters = None
        self._automatic_refresh_interval_days = None
        self._placeholder_metadata_refresh_interval_days = None
        self._preferred_metadata_language = None
        self._preferred_image_language = None
        self._content_type = None
        self._metadata_country_code = None
        self._metadata_savers = None
        self._disabled_local_metadata_readers = None
        self._local_metadata_reader_order = None
        self._disabled_lyrics_fetchers = None
        self._save_lyrics_with_media = None
        self._lyrics_download_max_age_days = None
        self._lyrics_fetcher_order = None
        self._lyrics_download_languages = None
        self._disabled_subtitle_fetchers = None
        self._subtitle_fetcher_order = None
        self._skip_subtitles_if_embedded_subtitles_present = None
        self._skip_subtitles_if_audio_track_matches = None
        self._subtitle_download_languages = None
        self._subtitle_download_max_age_days = None
        self._require_perfect_subtitle_match = None
        self._save_subtitles_with_media = None
        self._forced_subtitles_only = None
        self._hearing_impaired_subtitles_only = None
        self._type_options = None
        self._collapse_single_item_folders = None
        self._enable_adult_metadata = None
        self._import_collections = None
        self._min_collection_items = None
        self._music_folder_structure = None
        self._min_resume_pct = None
        self._max_resume_pct = None
        self._min_resume_duration_seconds = None
        self._thumbnail_images_interval_seconds = None
        self._sample_ignore_size = None
        self.discriminator = None
        if enable_archive_media_files is not None:
            self.enable_archive_media_files = enable_archive_media_files
        if enable_photos is not None:
            self.enable_photos = enable_photos
        if enable_realtime_monitor is not None:
            self.enable_realtime_monitor = enable_realtime_monitor
        if enable_marker_detection is not None:
            self.enable_marker_detection = enable_marker_detection
        if enable_marker_detection_during_library_scan is not None:
            self.enable_marker_detection_during_library_scan = enable_marker_detection_during_library_scan
        if intro_detection_fingerprint_length is not None:
            self.intro_detection_fingerprint_length = intro_detection_fingerprint_length
        if enable_chapter_image_extraction is not None:
            self.enable_chapter_image_extraction = enable_chapter_image_extraction
        if extract_chapter_images_during_library_scan is not None:
            self.extract_chapter_images_during_library_scan = extract_chapter_images_during_library_scan
        if download_images_in_advance is not None:
            self.download_images_in_advance = download_images_in_advance
        if cache_images is not None:
            self.cache_images = cache_images
        if path_infos is not None:
            self.path_infos = path_infos
        if ignore_hidden_files is not None:
            self.ignore_hidden_files = ignore_hidden_files
        if ignore_file_extensions is not None:
            self.ignore_file_extensions = ignore_file_extensions
        if save_local_metadata is not None:
            self.save_local_metadata = save_local_metadata
        if save_metadata_hidden is not None:
            self.save_metadata_hidden = save_metadata_hidden
        if save_local_thumbnail_sets is not None:
            self.save_local_thumbnail_sets = save_local_thumbnail_sets
        if import_playlists is not None:
            self.import_playlists = import_playlists
        if enable_automatic_series_grouping is not None:
            self.enable_automatic_series_grouping = enable_automatic_series_grouping
        if share_embedded_music_album_images is not None:
            self.share_embedded_music_album_images = share_embedded_music_album_images
        if enable_embedded_titles is not None:
            self.enable_embedded_titles = enable_embedded_titles
        if enable_audio_resume is not None:
            self.enable_audio_resume = enable_audio_resume
        if auto_generate_chapters is not None:
            self.auto_generate_chapters = auto_generate_chapters
        if automatic_refresh_interval_days is not None:
            self.automatic_refresh_interval_days = automatic_refresh_interval_days
        if placeholder_metadata_refresh_interval_days is not None:
            self.placeholder_metadata_refresh_interval_days = placeholder_metadata_refresh_interval_days
        if preferred_metadata_language is not None:
            self.preferred_metadata_language = preferred_metadata_language
        if preferred_image_language is not None:
            self.preferred_image_language = preferred_image_language
        if content_type is not None:
            self.content_type = content_type
        if metadata_country_code is not None:
            self.metadata_country_code = metadata_country_code
        if metadata_savers is not None:
            self.metadata_savers = metadata_savers
        if disabled_local_metadata_readers is not None:
            self.disabled_local_metadata_readers = disabled_local_metadata_readers
        if local_metadata_reader_order is not None:
            self.local_metadata_reader_order = local_metadata_reader_order
        if disabled_lyrics_fetchers is not None:
            self.disabled_lyrics_fetchers = disabled_lyrics_fetchers
        if save_lyrics_with_media is not None:
            self.save_lyrics_with_media = save_lyrics_with_media
        if lyrics_download_max_age_days is not None:
            self.lyrics_download_max_age_days = lyrics_download_max_age_days
        if lyrics_fetcher_order is not None:
            self.lyrics_fetcher_order = lyrics_fetcher_order
        if lyrics_download_languages is not None:
            self.lyrics_download_languages = lyrics_download_languages
        if disabled_subtitle_fetchers is not None:
            self.disabled_subtitle_fetchers = disabled_subtitle_fetchers
        if subtitle_fetcher_order is not None:
            self.subtitle_fetcher_order = subtitle_fetcher_order
        if skip_subtitles_if_embedded_subtitles_present is not None:
            self.skip_subtitles_if_embedded_subtitles_present = skip_subtitles_if_embedded_subtitles_present
        if skip_subtitles_if_audio_track_matches is not None:
            self.skip_subtitles_if_audio_track_matches = skip_subtitles_if_audio_track_matches
        if subtitle_download_languages is not None:
            self.subtitle_download_languages = subtitle_download_languages
        if subtitle_download_max_age_days is not None:
            self.subtitle_download_max_age_days = subtitle_download_max_age_days
        if require_perfect_subtitle_match is not None:
            self.require_perfect_subtitle_match = require_perfect_subtitle_match
        if save_subtitles_with_media is not None:
            self.save_subtitles_with_media = save_subtitles_with_media
        if forced_subtitles_only is not None:
            self.forced_subtitles_only = forced_subtitles_only
        if hearing_impaired_subtitles_only is not None:
            self.hearing_impaired_subtitles_only = hearing_impaired_subtitles_only
        if type_options is not None:
            self.type_options = type_options
        if collapse_single_item_folders is not None:
            self.collapse_single_item_folders = collapse_single_item_folders
        if enable_adult_metadata is not None:
            self.enable_adult_metadata = enable_adult_metadata
        if import_collections is not None:
            self.import_collections = import_collections
        if min_collection_items is not None:
            self.min_collection_items = min_collection_items
        if music_folder_structure is not None:
            self.music_folder_structure = music_folder_structure
        if min_resume_pct is not None:
            self.min_resume_pct = min_resume_pct
        if max_resume_pct is not None:
            self.max_resume_pct = max_resume_pct
        if min_resume_duration_seconds is not None:
            self.min_resume_duration_seconds = min_resume_duration_seconds
        if thumbnail_images_interval_seconds is not None:
            self.thumbnail_images_interval_seconds = thumbnail_images_interval_seconds
        if sample_ignore_size is not None:
            self.sample_ignore_size = sample_ignore_size

    @property
    def enable_archive_media_files(self):
        """Gets the enable_archive_media_files of this LibraryOptions.  # noqa: E501


        :return: The enable_archive_media_files of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_archive_media_files

    @enable_archive_media_files.setter
    def enable_archive_media_files(self, enable_archive_media_files):
        """Sets the enable_archive_media_files of this LibraryOptions.


        :param enable_archive_media_files: The enable_archive_media_files of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_archive_media_files = enable_archive_media_files

    @property
    def enable_photos(self):
        """Gets the enable_photos of this LibraryOptions.  # noqa: E501


        :return: The enable_photos of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_photos

    @enable_photos.setter
    def enable_photos(self, enable_photos):
        """Sets the enable_photos of this LibraryOptions.


        :param enable_photos: The enable_photos of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_photos = enable_photos

    @property
    def enable_realtime_monitor(self):
        """Gets the enable_realtime_monitor of this LibraryOptions.  # noqa: E501


        :return: The enable_realtime_monitor of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_realtime_monitor

    @enable_realtime_monitor.setter
    def enable_realtime_monitor(self, enable_realtime_monitor):
        """Sets the enable_realtime_monitor of this LibraryOptions.


        :param enable_realtime_monitor: The enable_realtime_monitor of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_realtime_monitor = enable_realtime_monitor

    @property
    def enable_marker_detection(self):
        """Gets the enable_marker_detection of this LibraryOptions.  # noqa: E501


        :return: The enable_marker_detection of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_marker_detection

    @enable_marker_detection.setter
    def enable_marker_detection(self, enable_marker_detection):
        """Sets the enable_marker_detection of this LibraryOptions.


        :param enable_marker_detection: The enable_marker_detection of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_marker_detection = enable_marker_detection

    @property
    def enable_marker_detection_during_library_scan(self):
        """Gets the enable_marker_detection_during_library_scan of this LibraryOptions.  # noqa: E501


        :return: The enable_marker_detection_during_library_scan of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_marker_detection_during_library_scan

    @enable_marker_detection_during_library_scan.setter
    def enable_marker_detection_during_library_scan(self, enable_marker_detection_during_library_scan):
        """Sets the enable_marker_detection_during_library_scan of this LibraryOptions.


        :param enable_marker_detection_during_library_scan: The enable_marker_detection_during_library_scan of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_marker_detection_during_library_scan = enable_marker_detection_during_library_scan

    @property
    def intro_detection_fingerprint_length(self):
        """Gets the intro_detection_fingerprint_length of this LibraryOptions.  # noqa: E501


        :return: The intro_detection_fingerprint_length of this LibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._intro_detection_fingerprint_length

    @intro_detection_fingerprint_length.setter
    def intro_detection_fingerprint_length(self, intro_detection_fingerprint_length):
        """Sets the intro_detection_fingerprint_length of this LibraryOptions.


        :param intro_detection_fingerprint_length: The intro_detection_fingerprint_length of this LibraryOptions.  # noqa: E501
        :type: int
        """

        self._intro_detection_fingerprint_length = intro_detection_fingerprint_length

    @property
    def enable_chapter_image_extraction(self):
        """Gets the enable_chapter_image_extraction of this LibraryOptions.  # noqa: E501


        :return: The enable_chapter_image_extraction of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_chapter_image_extraction

    @enable_chapter_image_extraction.setter
    def enable_chapter_image_extraction(self, enable_chapter_image_extraction):
        """Sets the enable_chapter_image_extraction of this LibraryOptions.


        :param enable_chapter_image_extraction: The enable_chapter_image_extraction of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_chapter_image_extraction = enable_chapter_image_extraction

    @property
    def extract_chapter_images_during_library_scan(self):
        """Gets the extract_chapter_images_during_library_scan of this LibraryOptions.  # noqa: E501


        :return: The extract_chapter_images_during_library_scan of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._extract_chapter_images_during_library_scan

    @extract_chapter_images_during_library_scan.setter
    def extract_chapter_images_during_library_scan(self, extract_chapter_images_during_library_scan):
        """Sets the extract_chapter_images_during_library_scan of this LibraryOptions.


        :param extract_chapter_images_during_library_scan: The extract_chapter_images_during_library_scan of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._extract_chapter_images_during_library_scan = extract_chapter_images_during_library_scan

    @property
    def download_images_in_advance(self):
        """Gets the download_images_in_advance of this LibraryOptions.  # noqa: E501


        :return: The download_images_in_advance of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._download_images_in_advance

    @download_images_in_advance.setter
    def download_images_in_advance(self, download_images_in_advance):
        """Sets the download_images_in_advance of this LibraryOptions.


        :param download_images_in_advance: The download_images_in_advance of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._download_images_in_advance = download_images_in_advance

    @property
    def cache_images(self):
        """Gets the cache_images of this LibraryOptions.  # noqa: E501


        :return: The cache_images of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._cache_images

    @cache_images.setter
    def cache_images(self, cache_images):
        """Sets the cache_images of this LibraryOptions.


        :param cache_images: The cache_images of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._cache_images = cache_images

    @property
    def path_infos(self):
        """Gets the path_infos of this LibraryOptions.  # noqa: E501


        :return: The path_infos of this LibraryOptions.  # noqa: E501
        :rtype: list[MediaPathInfo]
        """
        return self._path_infos

    @path_infos.setter
    def path_infos(self, path_infos):
        """Sets the path_infos of this LibraryOptions.


        :param path_infos: The path_infos of this LibraryOptions.  # noqa: E501
        :type: list[MediaPathInfo]
        """

        self._path_infos = path_infos

    @property
    def ignore_hidden_files(self):
        """Gets the ignore_hidden_files of this LibraryOptions.  # noqa: E501


        :return: The ignore_hidden_files of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_hidden_files

    @ignore_hidden_files.setter
    def ignore_hidden_files(self, ignore_hidden_files):
        """Sets the ignore_hidden_files of this LibraryOptions.


        :param ignore_hidden_files: The ignore_hidden_files of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._ignore_hidden_files = ignore_hidden_files

    @property
    def ignore_file_extensions(self):
        """Gets the ignore_file_extensions of this LibraryOptions.  # noqa: E501


        :return: The ignore_file_extensions of this LibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._ignore_file_extensions

    @ignore_file_extensions.setter
    def ignore_file_extensions(self, ignore_file_extensions):
        """Sets the ignore_file_extensions of this LibraryOptions.


        :param ignore_file_extensions: The ignore_file_extensions of this LibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._ignore_file_extensions = ignore_file_extensions

    @property
    def save_local_metadata(self):
        """Gets the save_local_metadata of this LibraryOptions.  # noqa: E501


        :return: The save_local_metadata of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._save_local_metadata

    @save_local_metadata.setter
    def save_local_metadata(self, save_local_metadata):
        """Sets the save_local_metadata of this LibraryOptions.


        :param save_local_metadata: The save_local_metadata of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._save_local_metadata = save_local_metadata

    @property
    def save_metadata_hidden(self):
        """Gets the save_metadata_hidden of this LibraryOptions.  # noqa: E501


        :return: The save_metadata_hidden of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._save_metadata_hidden

    @save_metadata_hidden.setter
    def save_metadata_hidden(self, save_metadata_hidden):
        """Sets the save_metadata_hidden of this LibraryOptions.


        :param save_metadata_hidden: The save_metadata_hidden of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._save_metadata_hidden = save_metadata_hidden

    @property
    def save_local_thumbnail_sets(self):
        """Gets the save_local_thumbnail_sets of this LibraryOptions.  # noqa: E501


        :return: The save_local_thumbnail_sets of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._save_local_thumbnail_sets

    @save_local_thumbnail_sets.setter
    def save_local_thumbnail_sets(self, save_local_thumbnail_sets):
        """Sets the save_local_thumbnail_sets of this LibraryOptions.


        :param save_local_thumbnail_sets: The save_local_thumbnail_sets of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._save_local_thumbnail_sets = save_local_thumbnail_sets

    @property
    def import_playlists(self):
        """Gets the import_playlists of this LibraryOptions.  # noqa: E501


        :return: The import_playlists of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._import_playlists

    @import_playlists.setter
    def import_playlists(self, import_playlists):
        """Sets the import_playlists of this LibraryOptions.


        :param import_playlists: The import_playlists of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._import_playlists = import_playlists

    @property
    def enable_automatic_series_grouping(self):
        """Gets the enable_automatic_series_grouping of this LibraryOptions.  # noqa: E501


        :return: The enable_automatic_series_grouping of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_automatic_series_grouping

    @enable_automatic_series_grouping.setter
    def enable_automatic_series_grouping(self, enable_automatic_series_grouping):
        """Sets the enable_automatic_series_grouping of this LibraryOptions.


        :param enable_automatic_series_grouping: The enable_automatic_series_grouping of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_automatic_series_grouping = enable_automatic_series_grouping

    @property
    def share_embedded_music_album_images(self):
        """Gets the share_embedded_music_album_images of this LibraryOptions.  # noqa: E501


        :return: The share_embedded_music_album_images of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._share_embedded_music_album_images

    @share_embedded_music_album_images.setter
    def share_embedded_music_album_images(self, share_embedded_music_album_images):
        """Sets the share_embedded_music_album_images of this LibraryOptions.


        :param share_embedded_music_album_images: The share_embedded_music_album_images of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._share_embedded_music_album_images = share_embedded_music_album_images

    @property
    def enable_embedded_titles(self):
        """Gets the enable_embedded_titles of this LibraryOptions.  # noqa: E501


        :return: The enable_embedded_titles of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_embedded_titles

    @enable_embedded_titles.setter
    def enable_embedded_titles(self, enable_embedded_titles):
        """Sets the enable_embedded_titles of this LibraryOptions.


        :param enable_embedded_titles: The enable_embedded_titles of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_embedded_titles = enable_embedded_titles

    @property
    def enable_audio_resume(self):
        """Gets the enable_audio_resume of this LibraryOptions.  # noqa: E501


        :return: The enable_audio_resume of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_audio_resume

    @enable_audio_resume.setter
    def enable_audio_resume(self, enable_audio_resume):
        """Sets the enable_audio_resume of this LibraryOptions.


        :param enable_audio_resume: The enable_audio_resume of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_audio_resume = enable_audio_resume

    @property
    def auto_generate_chapters(self):
        """Gets the auto_generate_chapters of this LibraryOptions.  # noqa: E501


        :return: The auto_generate_chapters of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._auto_generate_chapters

    @auto_generate_chapters.setter
    def auto_generate_chapters(self, auto_generate_chapters):
        """Sets the auto_generate_chapters of this LibraryOptions.


        :param auto_generate_chapters: The auto_generate_chapters of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._auto_generate_chapters = auto_generate_chapters

    @property
    def automatic_refresh_interval_days(self):
        """Gets the automatic_refresh_interval_days of this LibraryOptions.  # noqa: E501


        :return: The automatic_refresh_interval_days of this LibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._automatic_refresh_interval_days

    @automatic_refresh_interval_days.setter
    def automatic_refresh_interval_days(self, automatic_refresh_interval_days):
        """Sets the automatic_refresh_interval_days of this LibraryOptions.


        :param automatic_refresh_interval_days: The automatic_refresh_interval_days of this LibraryOptions.  # noqa: E501
        :type: int
        """

        self._automatic_refresh_interval_days = automatic_refresh_interval_days

    @property
    def placeholder_metadata_refresh_interval_days(self):
        """Gets the placeholder_metadata_refresh_interval_days of this LibraryOptions.  # noqa: E501


        :return: The placeholder_metadata_refresh_interval_days of this LibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._placeholder_metadata_refresh_interval_days

    @placeholder_metadata_refresh_interval_days.setter
    def placeholder_metadata_refresh_interval_days(self, placeholder_metadata_refresh_interval_days):
        """Sets the placeholder_metadata_refresh_interval_days of this LibraryOptions.


        :param placeholder_metadata_refresh_interval_days: The placeholder_metadata_refresh_interval_days of this LibraryOptions.  # noqa: E501
        :type: int
        """

        self._placeholder_metadata_refresh_interval_days = placeholder_metadata_refresh_interval_days

    @property
    def preferred_metadata_language(self):
        """Gets the preferred_metadata_language of this LibraryOptions.  # noqa: E501

        The preferred metadata language.  # noqa: E501

        :return: The preferred_metadata_language of this LibraryOptions.  # noqa: E501
        :rtype: str
        """
        return self._preferred_metadata_language

    @preferred_metadata_language.setter
    def preferred_metadata_language(self, preferred_metadata_language):
        """Sets the preferred_metadata_language of this LibraryOptions.

        The preferred metadata language.  # noqa: E501

        :param preferred_metadata_language: The preferred_metadata_language of this LibraryOptions.  # noqa: E501
        :type: str
        """

        self._preferred_metadata_language = preferred_metadata_language

    @property
    def preferred_image_language(self):
        """Gets the preferred_image_language of this LibraryOptions.  # noqa: E501


        :return: The preferred_image_language of this LibraryOptions.  # noqa: E501
        :rtype: str
        """
        return self._preferred_image_language

    @preferred_image_language.setter
    def preferred_image_language(self, preferred_image_language):
        """Sets the preferred_image_language of this LibraryOptions.


        :param preferred_image_language: The preferred_image_language of this LibraryOptions.  # noqa: E501
        :type: str
        """

        self._preferred_image_language = preferred_image_language

    @property
    def content_type(self):
        """Gets the content_type of this LibraryOptions.  # noqa: E501


        :return: The content_type of this LibraryOptions.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this LibraryOptions.


        :param content_type: The content_type of this LibraryOptions.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def metadata_country_code(self):
        """Gets the metadata_country_code of this LibraryOptions.  # noqa: E501

        The metadata country code.  # noqa: E501

        :return: The metadata_country_code of this LibraryOptions.  # noqa: E501
        :rtype: str
        """
        return self._metadata_country_code

    @metadata_country_code.setter
    def metadata_country_code(self, metadata_country_code):
        """Sets the metadata_country_code of this LibraryOptions.

        The metadata country code.  # noqa: E501

        :param metadata_country_code: The metadata_country_code of this LibraryOptions.  # noqa: E501
        :type: str
        """

        self._metadata_country_code = metadata_country_code

    @property
    def metadata_savers(self):
        """Gets the metadata_savers of this LibraryOptions.  # noqa: E501


        :return: The metadata_savers of this LibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._metadata_savers

    @metadata_savers.setter
    def metadata_savers(self, metadata_savers):
        """Sets the metadata_savers of this LibraryOptions.


        :param metadata_savers: The metadata_savers of this LibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._metadata_savers = metadata_savers

    @property
    def disabled_local_metadata_readers(self):
        """Gets the disabled_local_metadata_readers of this LibraryOptions.  # noqa: E501


        :return: The disabled_local_metadata_readers of this LibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._disabled_local_metadata_readers

    @disabled_local_metadata_readers.setter
    def disabled_local_metadata_readers(self, disabled_local_metadata_readers):
        """Sets the disabled_local_metadata_readers of this LibraryOptions.


        :param disabled_local_metadata_readers: The disabled_local_metadata_readers of this LibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._disabled_local_metadata_readers = disabled_local_metadata_readers

    @property
    def local_metadata_reader_order(self):
        """Gets the local_metadata_reader_order of this LibraryOptions.  # noqa: E501


        :return: The local_metadata_reader_order of this LibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_metadata_reader_order

    @local_metadata_reader_order.setter
    def local_metadata_reader_order(self, local_metadata_reader_order):
        """Sets the local_metadata_reader_order of this LibraryOptions.


        :param local_metadata_reader_order: The local_metadata_reader_order of this LibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._local_metadata_reader_order = local_metadata_reader_order

    @property
    def disabled_lyrics_fetchers(self):
        """Gets the disabled_lyrics_fetchers of this LibraryOptions.  # noqa: E501


        :return: The disabled_lyrics_fetchers of this LibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._disabled_lyrics_fetchers

    @disabled_lyrics_fetchers.setter
    def disabled_lyrics_fetchers(self, disabled_lyrics_fetchers):
        """Sets the disabled_lyrics_fetchers of this LibraryOptions.


        :param disabled_lyrics_fetchers: The disabled_lyrics_fetchers of this LibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._disabled_lyrics_fetchers = disabled_lyrics_fetchers

    @property
    def save_lyrics_with_media(self):
        """Gets the save_lyrics_with_media of this LibraryOptions.  # noqa: E501


        :return: The save_lyrics_with_media of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._save_lyrics_with_media

    @save_lyrics_with_media.setter
    def save_lyrics_with_media(self, save_lyrics_with_media):
        """Sets the save_lyrics_with_media of this LibraryOptions.


        :param save_lyrics_with_media: The save_lyrics_with_media of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._save_lyrics_with_media = save_lyrics_with_media

    @property
    def lyrics_download_max_age_days(self):
        """Gets the lyrics_download_max_age_days of this LibraryOptions.  # noqa: E501


        :return: The lyrics_download_max_age_days of this LibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._lyrics_download_max_age_days

    @lyrics_download_max_age_days.setter
    def lyrics_download_max_age_days(self, lyrics_download_max_age_days):
        """Sets the lyrics_download_max_age_days of this LibraryOptions.


        :param lyrics_download_max_age_days: The lyrics_download_max_age_days of this LibraryOptions.  # noqa: E501
        :type: int
        """

        self._lyrics_download_max_age_days = lyrics_download_max_age_days

    @property
    def lyrics_fetcher_order(self):
        """Gets the lyrics_fetcher_order of this LibraryOptions.  # noqa: E501


        :return: The lyrics_fetcher_order of this LibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._lyrics_fetcher_order

    @lyrics_fetcher_order.setter
    def lyrics_fetcher_order(self, lyrics_fetcher_order):
        """Sets the lyrics_fetcher_order of this LibraryOptions.


        :param lyrics_fetcher_order: The lyrics_fetcher_order of this LibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._lyrics_fetcher_order = lyrics_fetcher_order

    @property
    def lyrics_download_languages(self):
        """Gets the lyrics_download_languages of this LibraryOptions.  # noqa: E501


        :return: The lyrics_download_languages of this LibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._lyrics_download_languages

    @lyrics_download_languages.setter
    def lyrics_download_languages(self, lyrics_download_languages):
        """Sets the lyrics_download_languages of this LibraryOptions.


        :param lyrics_download_languages: The lyrics_download_languages of this LibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._lyrics_download_languages = lyrics_download_languages

    @property
    def disabled_subtitle_fetchers(self):
        """Gets the disabled_subtitle_fetchers of this LibraryOptions.  # noqa: E501


        :return: The disabled_subtitle_fetchers of this LibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._disabled_subtitle_fetchers

    @disabled_subtitle_fetchers.setter
    def disabled_subtitle_fetchers(self, disabled_subtitle_fetchers):
        """Sets the disabled_subtitle_fetchers of this LibraryOptions.


        :param disabled_subtitle_fetchers: The disabled_subtitle_fetchers of this LibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._disabled_subtitle_fetchers = disabled_subtitle_fetchers

    @property
    def subtitle_fetcher_order(self):
        """Gets the subtitle_fetcher_order of this LibraryOptions.  # noqa: E501


        :return: The subtitle_fetcher_order of this LibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._subtitle_fetcher_order

    @subtitle_fetcher_order.setter
    def subtitle_fetcher_order(self, subtitle_fetcher_order):
        """Sets the subtitle_fetcher_order of this LibraryOptions.


        :param subtitle_fetcher_order: The subtitle_fetcher_order of this LibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._subtitle_fetcher_order = subtitle_fetcher_order

    @property
    def skip_subtitles_if_embedded_subtitles_present(self):
        """Gets the skip_subtitles_if_embedded_subtitles_present of this LibraryOptions.  # noqa: E501


        :return: The skip_subtitles_if_embedded_subtitles_present of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._skip_subtitles_if_embedded_subtitles_present

    @skip_subtitles_if_embedded_subtitles_present.setter
    def skip_subtitles_if_embedded_subtitles_present(self, skip_subtitles_if_embedded_subtitles_present):
        """Sets the skip_subtitles_if_embedded_subtitles_present of this LibraryOptions.


        :param skip_subtitles_if_embedded_subtitles_present: The skip_subtitles_if_embedded_subtitles_present of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._skip_subtitles_if_embedded_subtitles_present = skip_subtitles_if_embedded_subtitles_present

    @property
    def skip_subtitles_if_audio_track_matches(self):
        """Gets the skip_subtitles_if_audio_track_matches of this LibraryOptions.  # noqa: E501


        :return: The skip_subtitles_if_audio_track_matches of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._skip_subtitles_if_audio_track_matches

    @skip_subtitles_if_audio_track_matches.setter
    def skip_subtitles_if_audio_track_matches(self, skip_subtitles_if_audio_track_matches):
        """Sets the skip_subtitles_if_audio_track_matches of this LibraryOptions.


        :param skip_subtitles_if_audio_track_matches: The skip_subtitles_if_audio_track_matches of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._skip_subtitles_if_audio_track_matches = skip_subtitles_if_audio_track_matches

    @property
    def subtitle_download_languages(self):
        """Gets the subtitle_download_languages of this LibraryOptions.  # noqa: E501


        :return: The subtitle_download_languages of this LibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._subtitle_download_languages

    @subtitle_download_languages.setter
    def subtitle_download_languages(self, subtitle_download_languages):
        """Sets the subtitle_download_languages of this LibraryOptions.


        :param subtitle_download_languages: The subtitle_download_languages of this LibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._subtitle_download_languages = subtitle_download_languages

    @property
    def subtitle_download_max_age_days(self):
        """Gets the subtitle_download_max_age_days of this LibraryOptions.  # noqa: E501


        :return: The subtitle_download_max_age_days of this LibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._subtitle_download_max_age_days

    @subtitle_download_max_age_days.setter
    def subtitle_download_max_age_days(self, subtitle_download_max_age_days):
        """Sets the subtitle_download_max_age_days of this LibraryOptions.


        :param subtitle_download_max_age_days: The subtitle_download_max_age_days of this LibraryOptions.  # noqa: E501
        :type: int
        """

        self._subtitle_download_max_age_days = subtitle_download_max_age_days

    @property
    def require_perfect_subtitle_match(self):
        """Gets the require_perfect_subtitle_match of this LibraryOptions.  # noqa: E501


        :return: The require_perfect_subtitle_match of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._require_perfect_subtitle_match

    @require_perfect_subtitle_match.setter
    def require_perfect_subtitle_match(self, require_perfect_subtitle_match):
        """Sets the require_perfect_subtitle_match of this LibraryOptions.


        :param require_perfect_subtitle_match: The require_perfect_subtitle_match of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._require_perfect_subtitle_match = require_perfect_subtitle_match

    @property
    def save_subtitles_with_media(self):
        """Gets the save_subtitles_with_media of this LibraryOptions.  # noqa: E501


        :return: The save_subtitles_with_media of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._save_subtitles_with_media

    @save_subtitles_with_media.setter
    def save_subtitles_with_media(self, save_subtitles_with_media):
        """Sets the save_subtitles_with_media of this LibraryOptions.


        :param save_subtitles_with_media: The save_subtitles_with_media of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._save_subtitles_with_media = save_subtitles_with_media

    @property
    def forced_subtitles_only(self):
        """Gets the forced_subtitles_only of this LibraryOptions.  # noqa: E501


        :return: The forced_subtitles_only of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._forced_subtitles_only

    @forced_subtitles_only.setter
    def forced_subtitles_only(self, forced_subtitles_only):
        """Sets the forced_subtitles_only of this LibraryOptions.


        :param forced_subtitles_only: The forced_subtitles_only of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._forced_subtitles_only = forced_subtitles_only

    @property
    def hearing_impaired_subtitles_only(self):
        """Gets the hearing_impaired_subtitles_only of this LibraryOptions.  # noqa: E501


        :return: The hearing_impaired_subtitles_only of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._hearing_impaired_subtitles_only

    @hearing_impaired_subtitles_only.setter
    def hearing_impaired_subtitles_only(self, hearing_impaired_subtitles_only):
        """Sets the hearing_impaired_subtitles_only of this LibraryOptions.


        :param hearing_impaired_subtitles_only: The hearing_impaired_subtitles_only of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._hearing_impaired_subtitles_only = hearing_impaired_subtitles_only

    @property
    def type_options(self):
        """Gets the type_options of this LibraryOptions.  # noqa: E501


        :return: The type_options of this LibraryOptions.  # noqa: E501
        :rtype: list[TypeOptions]
        """
        return self._type_options

    @type_options.setter
    def type_options(self, type_options):
        """Sets the type_options of this LibraryOptions.


        :param type_options: The type_options of this LibraryOptions.  # noqa: E501
        :type: list[TypeOptions]
        """

        self._type_options = type_options

    @property
    def collapse_single_item_folders(self):
        """Gets the collapse_single_item_folders of this LibraryOptions.  # noqa: E501


        :return: The collapse_single_item_folders of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._collapse_single_item_folders

    @collapse_single_item_folders.setter
    def collapse_single_item_folders(self, collapse_single_item_folders):
        """Sets the collapse_single_item_folders of this LibraryOptions.


        :param collapse_single_item_folders: The collapse_single_item_folders of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._collapse_single_item_folders = collapse_single_item_folders

    @property
    def enable_adult_metadata(self):
        """Gets the enable_adult_metadata of this LibraryOptions.  # noqa: E501


        :return: The enable_adult_metadata of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_adult_metadata

    @enable_adult_metadata.setter
    def enable_adult_metadata(self, enable_adult_metadata):
        """Sets the enable_adult_metadata of this LibraryOptions.


        :param enable_adult_metadata: The enable_adult_metadata of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_adult_metadata = enable_adult_metadata

    @property
    def import_collections(self):
        """Gets the import_collections of this LibraryOptions.  # noqa: E501


        :return: The import_collections of this LibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._import_collections

    @import_collections.setter
    def import_collections(self, import_collections):
        """Sets the import_collections of this LibraryOptions.


        :param import_collections: The import_collections of this LibraryOptions.  # noqa: E501
        :type: bool
        """

        self._import_collections = import_collections

    @property
    def min_collection_items(self):
        """Gets the min_collection_items of this LibraryOptions.  # noqa: E501


        :return: The min_collection_items of this LibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._min_collection_items

    @min_collection_items.setter
    def min_collection_items(self, min_collection_items):
        """Sets the min_collection_items of this LibraryOptions.


        :param min_collection_items: The min_collection_items of this LibraryOptions.  # noqa: E501
        :type: int
        """

        self._min_collection_items = min_collection_items

    @property
    def music_folder_structure(self):
        """Gets the music_folder_structure of this LibraryOptions.  # noqa: E501


        :return: The music_folder_structure of this LibraryOptions.  # noqa: E501
        :rtype: str
        """
        return self._music_folder_structure

    @music_folder_structure.setter
    def music_folder_structure(self, music_folder_structure):
        """Sets the music_folder_structure of this LibraryOptions.


        :param music_folder_structure: The music_folder_structure of this LibraryOptions.  # noqa: E501
        :type: str
        """

        self._music_folder_structure = music_folder_structure

    @property
    def min_resume_pct(self):
        """Gets the min_resume_pct of this LibraryOptions.  # noqa: E501

        The minimum percentage of an item that must be played in order for playstate to be updated.  # noqa: E501

        :return: The min_resume_pct of this LibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._min_resume_pct

    @min_resume_pct.setter
    def min_resume_pct(self, min_resume_pct):
        """Sets the min_resume_pct of this LibraryOptions.

        The minimum percentage of an item that must be played in order for playstate to be updated.  # noqa: E501

        :param min_resume_pct: The min_resume_pct of this LibraryOptions.  # noqa: E501
        :type: int
        """

        self._min_resume_pct = min_resume_pct

    @property
    def max_resume_pct(self):
        """Gets the max_resume_pct of this LibraryOptions.  # noqa: E501

        The maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.  # noqa: E501

        :return: The max_resume_pct of this LibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._max_resume_pct

    @max_resume_pct.setter
    def max_resume_pct(self, max_resume_pct):
        """Sets the max_resume_pct of this LibraryOptions.

        The maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.  # noqa: E501

        :param max_resume_pct: The max_resume_pct of this LibraryOptions.  # noqa: E501
        :type: int
        """

        self._max_resume_pct = max_resume_pct

    @property
    def min_resume_duration_seconds(self):
        """Gets the min_resume_duration_seconds of this LibraryOptions.  # noqa: E501

        The minimum duration that an item must have in order to be eligible for playstate updates..  # noqa: E501

        :return: The min_resume_duration_seconds of this LibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._min_resume_duration_seconds

    @min_resume_duration_seconds.setter
    def min_resume_duration_seconds(self, min_resume_duration_seconds):
        """Sets the min_resume_duration_seconds of this LibraryOptions.

        The minimum duration that an item must have in order to be eligible for playstate updates..  # noqa: E501

        :param min_resume_duration_seconds: The min_resume_duration_seconds of this LibraryOptions.  # noqa: E501
        :type: int
        """

        self._min_resume_duration_seconds = min_resume_duration_seconds

    @property
    def thumbnail_images_interval_seconds(self):
        """Gets the thumbnail_images_interval_seconds of this LibraryOptions.  # noqa: E501


        :return: The thumbnail_images_interval_seconds of this LibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._thumbnail_images_interval_seconds

    @thumbnail_images_interval_seconds.setter
    def thumbnail_images_interval_seconds(self, thumbnail_images_interval_seconds):
        """Sets the thumbnail_images_interval_seconds of this LibraryOptions.


        :param thumbnail_images_interval_seconds: The thumbnail_images_interval_seconds of this LibraryOptions.  # noqa: E501
        :type: int
        """

        self._thumbnail_images_interval_seconds = thumbnail_images_interval_seconds

    @property
    def sample_ignore_size(self):
        """Gets the sample_ignore_size of this LibraryOptions.  # noqa: E501


        :return: The sample_ignore_size of this LibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._sample_ignore_size

    @sample_ignore_size.setter
    def sample_ignore_size(self, sample_ignore_size):
        """Sets the sample_ignore_size of this LibraryOptions.


        :param sample_ignore_size: The sample_ignore_size of this LibraryOptions.  # noqa: E501
        :type: int
        """

        self._sample_ignore_size = sample_ignore_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
