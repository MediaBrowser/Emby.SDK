# coding: utf-8

"""
    Emby REST API
"""

import pprint
import re  # noqa: F401

import six

class EmbyNotificationsApiNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        '_date': 'datetime',
        'is_read': 'bool',
        'name': 'str',
        'description': 'str',
        'url': 'str',
        'level': 'NotificationsNotificationLevel'
    }

    attribute_map = {
        'id': 'Id',
        'user_id': 'UserId',
        '_date': 'Date',
        'is_read': 'IsRead',
        'name': 'Name',
        'description': 'Description',
        'url': 'Url',
        'level': 'Level'
    }

    def __init__(self, id=None, user_id=None, _date=None, is_read=None, name=None, description=None, url=None, level=None):  # noqa: E501
        """EmbyNotificationsApiNotification - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self.__date = None
        self._is_read = None
        self._name = None
        self._description = None
        self._url = None
        self._level = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if _date is not None:
            self._date = _date
        if is_read is not None:
            self.is_read = is_read
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if url is not None:
            self.url = url
        if level is not None:
            self.level = level

    @property
    def id(self):
        """Gets the id of this EmbyNotificationsApiNotification.  # noqa: E501


        :return: The id of this EmbyNotificationsApiNotification.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmbyNotificationsApiNotification.


        :param id: The id of this EmbyNotificationsApiNotification.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this EmbyNotificationsApiNotification.  # noqa: E501


        :return: The user_id of this EmbyNotificationsApiNotification.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EmbyNotificationsApiNotification.


        :param user_id: The user_id of this EmbyNotificationsApiNotification.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def _date(self):
        """Gets the _date of this EmbyNotificationsApiNotification.  # noqa: E501


        :return: The _date of this EmbyNotificationsApiNotification.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EmbyNotificationsApiNotification.


        :param _date: The _date of this EmbyNotificationsApiNotification.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def is_read(self):
        """Gets the is_read of this EmbyNotificationsApiNotification.  # noqa: E501


        :return: The is_read of this EmbyNotificationsApiNotification.  # noqa: E501
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this EmbyNotificationsApiNotification.


        :param is_read: The is_read of this EmbyNotificationsApiNotification.  # noqa: E501
        :type: bool
        """

        self._is_read = is_read

    @property
    def name(self):
        """Gets the name of this EmbyNotificationsApiNotification.  # noqa: E501


        :return: The name of this EmbyNotificationsApiNotification.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmbyNotificationsApiNotification.


        :param name: The name of this EmbyNotificationsApiNotification.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this EmbyNotificationsApiNotification.  # noqa: E501


        :return: The description of this EmbyNotificationsApiNotification.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EmbyNotificationsApiNotification.


        :param description: The description of this EmbyNotificationsApiNotification.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def url(self):
        """Gets the url of this EmbyNotificationsApiNotification.  # noqa: E501


        :return: The url of this EmbyNotificationsApiNotification.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EmbyNotificationsApiNotification.


        :param url: The url of this EmbyNotificationsApiNotification.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def level(self):
        """Gets the level of this EmbyNotificationsApiNotification.  # noqa: E501


        :return: The level of this EmbyNotificationsApiNotification.  # noqa: E501
        :rtype: NotificationsNotificationLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this EmbyNotificationsApiNotification.


        :param level: The level of this EmbyNotificationsApiNotification.  # noqa: E501
        :type: NotificationsNotificationLevel
        """

        self._level = level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmbyNotificationsApiNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmbyNotificationsApiNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
