# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class BaseItemPerson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'role': 'str',
        'type': 'PersonType',
        'primary_image_tag': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'id': 'Id',
        'role': 'Role',
        'type': 'Type',
        'primary_image_tag': 'PrimaryImageTag'
    }

    def __init__(self, name=None, id=None, role=None, type=None, primary_image_tag=None):  # noqa: E501
        """BaseItemPerson - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._id = None
        self._role = None
        self._type = None
        self._primary_image_tag = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if role is not None:
            self.role = role
        if type is not None:
            self.type = type
        if primary_image_tag is not None:
            self.primary_image_tag = primary_image_tag

    @property
    def name(self):
        """Gets the name of this BaseItemPerson.  # noqa: E501

        The name.  # noqa: E501

        :return: The name of this BaseItemPerson.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseItemPerson.

        The name.  # noqa: E501

        :param name: The name of this BaseItemPerson.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this BaseItemPerson.  # noqa: E501

        The identifier.  # noqa: E501

        :return: The id of this BaseItemPerson.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseItemPerson.

        The identifier.  # noqa: E501

        :param id: The id of this BaseItemPerson.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def role(self):
        """Gets the role of this BaseItemPerson.  # noqa: E501

        The role.  # noqa: E501

        :return: The role of this BaseItemPerson.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this BaseItemPerson.

        The role.  # noqa: E501

        :param role: The role of this BaseItemPerson.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def type(self):
        """Gets the type of this BaseItemPerson.  # noqa: E501


        :return: The type of this BaseItemPerson.  # noqa: E501
        :rtype: PersonType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BaseItemPerson.


        :param type: The type of this BaseItemPerson.  # noqa: E501
        :type: PersonType
        """

        self._type = type

    @property
    def primary_image_tag(self):
        """Gets the primary_image_tag of this BaseItemPerson.  # noqa: E501

        The primary image tag.  # noqa: E501

        :return: The primary_image_tag of this BaseItemPerson.  # noqa: E501
        :rtype: str
        """
        return self._primary_image_tag

    @primary_image_tag.setter
    def primary_image_tag(self, primary_image_tag):
        """Sets the primary_image_tag of this BaseItemPerson.

        The primary image tag.  # noqa: E501

        :param primary_image_tag: The primary_image_tag of this BaseItemPerson.  # noqa: E501
        :type: str
        """

        self._primary_image_tag = primary_image_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseItemPerson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseItemPerson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
