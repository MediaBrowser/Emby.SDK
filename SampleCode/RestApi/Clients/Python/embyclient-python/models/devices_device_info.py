# coding: utf-8

"""
    Emby Server REST API
"""

import pprint
import re  # noqa: F401

import six

class DevicesDeviceInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'internal_id': 'int',
        'reported_device_id': 'str',
        'last_user_name': 'str',
        'app_name': 'str',
        'app_version': 'str',
        'last_user_id': 'str',
        'date_last_activity': 'datetime',
        'icon_url': 'str',
        'ip_address': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'id': 'Id',
        'internal_id': 'InternalId',
        'reported_device_id': 'ReportedDeviceId',
        'last_user_name': 'LastUserName',
        'app_name': 'AppName',
        'app_version': 'AppVersion',
        'last_user_id': 'LastUserId',
        'date_last_activity': 'DateLastActivity',
        'icon_url': 'IconUrl',
        'ip_address': 'IpAddress'
    }

    def __init__(self, name=None, id=None, internal_id=None, reported_device_id=None, last_user_name=None, app_name=None, app_version=None, last_user_id=None, date_last_activity=None, icon_url=None, ip_address=None):  # noqa: E501
        """DevicesDeviceInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._id = None
        self._internal_id = None
        self._reported_device_id = None
        self._last_user_name = None
        self._app_name = None
        self._app_version = None
        self._last_user_id = None
        self._date_last_activity = None
        self._icon_url = None
        self._ip_address = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if internal_id is not None:
            self.internal_id = internal_id
        if reported_device_id is not None:
            self.reported_device_id = reported_device_id
        if last_user_name is not None:
            self.last_user_name = last_user_name
        if app_name is not None:
            self.app_name = app_name
        if app_version is not None:
            self.app_version = app_version
        if last_user_id is not None:
            self.last_user_id = last_user_id
        if date_last_activity is not None:
            self.date_last_activity = date_last_activity
        if icon_url is not None:
            self.icon_url = icon_url
        if ip_address is not None:
            self.ip_address = ip_address

    @property
    def name(self):
        """Gets the name of this DevicesDeviceInfo.  # noqa: E501


        :return: The name of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DevicesDeviceInfo.


        :param name: The name of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this DevicesDeviceInfo.  # noqa: E501

        The identifier.  # noqa: E501

        :return: The id of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DevicesDeviceInfo.

        The identifier.  # noqa: E501

        :param id: The id of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def internal_id(self):
        """Gets the internal_id of this DevicesDeviceInfo.  # noqa: E501


        :return: The internal_id of this DevicesDeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this DevicesDeviceInfo.


        :param internal_id: The internal_id of this DevicesDeviceInfo.  # noqa: E501
        :type: int
        """

        self._internal_id = internal_id

    @property
    def reported_device_id(self):
        """Gets the reported_device_id of this DevicesDeviceInfo.  # noqa: E501


        :return: The reported_device_id of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._reported_device_id

    @reported_device_id.setter
    def reported_device_id(self, reported_device_id):
        """Sets the reported_device_id of this DevicesDeviceInfo.


        :param reported_device_id: The reported_device_id of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """

        self._reported_device_id = reported_device_id

    @property
    def last_user_name(self):
        """Gets the last_user_name of this DevicesDeviceInfo.  # noqa: E501

        The last name of the user.  # noqa: E501

        :return: The last_user_name of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_user_name

    @last_user_name.setter
    def last_user_name(self, last_user_name):
        """Sets the last_user_name of this DevicesDeviceInfo.

        The last name of the user.  # noqa: E501

        :param last_user_name: The last_user_name of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """

        self._last_user_name = last_user_name

    @property
    def app_name(self):
        """Gets the app_name of this DevicesDeviceInfo.  # noqa: E501

        The name of the application.  # noqa: E501

        :return: The app_name of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this DevicesDeviceInfo.

        The name of the application.  # noqa: E501

        :param app_name: The app_name of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def app_version(self):
        """Gets the app_version of this DevicesDeviceInfo.  # noqa: E501

        The application version.  # noqa: E501

        :return: The app_version of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this DevicesDeviceInfo.

        The application version.  # noqa: E501

        :param app_version: The app_version of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def last_user_id(self):
        """Gets the last_user_id of this DevicesDeviceInfo.  # noqa: E501

        The last user identifier.  # noqa: E501

        :return: The last_user_id of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_user_id

    @last_user_id.setter
    def last_user_id(self, last_user_id):
        """Sets the last_user_id of this DevicesDeviceInfo.

        The last user identifier.  # noqa: E501

        :param last_user_id: The last_user_id of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """

        self._last_user_id = last_user_id

    @property
    def date_last_activity(self):
        """Gets the date_last_activity of this DevicesDeviceInfo.  # noqa: E501


        :return: The date_last_activity of this DevicesDeviceInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._date_last_activity

    @date_last_activity.setter
    def date_last_activity(self, date_last_activity):
        """Sets the date_last_activity of this DevicesDeviceInfo.


        :param date_last_activity: The date_last_activity of this DevicesDeviceInfo.  # noqa: E501
        :type: datetime
        """

        self._date_last_activity = date_last_activity

    @property
    def icon_url(self):
        """Gets the icon_url of this DevicesDeviceInfo.  # noqa: E501


        :return: The icon_url of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this DevicesDeviceInfo.


        :param icon_url: The icon_url of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """

        self._icon_url = icon_url

    @property
    def ip_address(self):
        """Gets the ip_address of this DevicesDeviceInfo.  # noqa: E501


        :return: The ip_address of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this DevicesDeviceInfo.


        :param ip_address: The ip_address of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DevicesDeviceInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DevicesDeviceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
